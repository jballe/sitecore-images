This XML file does not appear to have any style information associated with it. The document tree is shown below.
<sitecore xmlns:patch="http://www.sitecore.net/xmlconfig/" database="SqlServer">
<sc.variable name="dataFolder" value="/App_Data"/>
<sc.variable name="mediaFolder" value="/upload"/>
<sc.variable name="tempFolder" value="/temp"/>
<sc.variable name="defaultLinkDatabaseConnectionStringName" value="core"/>
<sc.variable name="defaultDatabaseConnectionStringName" value="master"/>
<sc.variable name="defaultContentDatabaseName" value="master"/>
<prototypes>
<ErrorControl type="Sitecore.Web.UI.WebControls.StandardErrorControl, Sitecore.Kernel"/>
<ItemNavigator type="Sitecore.Nexus.Xml.NexusItemNavigator, Sitecore.Nexus"/>
</prototypes>
<!--
 EVENT MAPS
      events.timingLevel =
        none   - No timing information is logged for any of the events (no matter what their local settings are)
        low    - Start/end timing is logged for events with handlers. Local settings override.
        medium - Start/end timing is logged for all events. Local settings override.
        high   - Start/end timing is logged for all events. Also, start/end for each handler is logged. Local settings override.
        custom - Only local settings apply. Events without settings are not logged.
      event.timingLevel =
       none    - No timing information is logged for the event.
       low     - The combined time of all handlers is logged for the event. If no handlers are specified, nothing is logged.
       medium  - The combined time of all handlers is logged for the event. Even if it does not have any handlers.
       high    - The combined and individual time of all handlers is logged for the event.
    
-->
<!--
 The below config should be moved to content.foundation and namespaces updated 
-->
<events timingLevel="custom">
<event name="data:updated"/>
<event name="item:added" patch:source="Sitecore.EmailExperience.ContentManagement.config">
<handler type="Sitecore.Data.Fields.ItemEventHandler, Sitecore.Kernel" method="OnItemAdded"/>
<handler type="Sitecore.Caching.Placeholders.PlaceholderCacheEventHandler, Sitecore.Kernel" method="UpdateCaches" resolve="true"/>
<handler type="Sitecore.Modules.EmailCampaign.Core.ItemEventHandler, Sitecore.EmailCampaign" method="OnItemAdded" resolve="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
</event>
<event name="item:added:remote">
<handler type="Sitecore.Data.Fields.ItemEventHandler, Sitecore.Kernel" method="OnItemAddedRemote"/>
<handler type="Sitecore.Caching.Placeholders.PlaceholderCacheEventHandler, Sitecore.Kernel" method="UpdateCachesRemote" resolve="true"/>
</event>
<event name="item:copied" patch:source="Sitecore.EmailExperience.ContentManagement.config">
<handler type="Sitecore.Links.ItemEventHandler, Sitecore.Kernel" method="OnItemCopied"/>
<handler type="Sitecore.Tasks.ItemEventHandler, Sitecore.Kernel" method="OnItemCopied"/>
<handler type="Sitecore.Modules.EmailCampaign.Core.ItemEventHandler, Sitecore.EmailCampaign" method="OnMessageCopied" resolve="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
</event>
<event name="item:copied:remote"/>
<event name="item:copying"/>
<event name="item:created" patch:source="Sitecore.EmailExperience.ContentManagement.config">
<handler type="Sitecore.Modules.EmailCampaign.Core.RootItemEventHandler, Sitecore.EmailCampaign" method="OnRootCreated" resolve="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
</event>
<event name="item:created:remote"/>
<event name="item:cloneAdded"/>
<event name="item:cloneAdded:remote"/>
<event name="item:creating" patch:source="Sitecore.Marketing.config">
<handler type="Sitecore.Marketing.xMgmt.Definitions.ItemEventHandler, Sitecore.Marketing.xMgmt" method="OnItemCreating" patch:source="Sitecore.Marketing.config"/>
</event>
<event name="item:deleted" patch:source="Sitecore.EmailExperience.ContentManagement.config">
<handler type="Sitecore.Links.ItemEventHandler, Sitecore.Kernel" method="OnItemDeleted"/>
<handler type="Sitecore.Tasks.ItemEventHandler, Sitecore.Kernel" method="OnItemDeleted"/>
<handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemDeleted"/>
<handler type="Sitecore.Data.Fields.ItemEventHandler, Sitecore.Kernel" method="OnItemDeleted"/>
<handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnItemDeleted"/>
<handler type="Sitecore.Caching.Placeholders.PlaceholderCacheEventHandler, Sitecore.Kernel" method="UpdateCaches" resolve="true"/>
<handler type="Sitecore.Modules.EmailCampaign.Core.RootItemEventHandler, Sitecore.EmailCampaign" method="OnRootDeleted" resolve="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<handler type="Sitecore.Modules.EmailCampaign.Core.ItemEventHandler, Sitecore.EmailCampaign" method="OnItemDeleted" resolve="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
</event>
<event name="item:deleted:remote">
<handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemDeletedRemote"/>
<handler type="Sitecore.Data.Fields.ItemEventHandler, Sitecore.Kernel" method="OnItemDeletedRemote"/>
<handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnItemDeletedRemote"/>
<handler type="Sitecore.Caching.Placeholders.PlaceholderCacheEventHandler, Sitecore.Kernel" method="UpdateCachesRemote" resolve="true"/>
</event>
<event name="item:deleting"/>
<event name="item:locked"/>
<event name="item:moved">
<handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemMoved"/>
</event>
<event name="item:moved:remote">
<handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemMovedRemote"/>
</event>
<event name="item:moving"/>
<event name="item:renamed"/>
<event name="item:renamed:remote"/>
<event name="item:saved" patch:source="Sitecore.ExperienceAnalytics.Client.config">
<handler type="Sitecore.Links.ItemEventHandler, Sitecore.Kernel" method="OnItemSaved"/>
<handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemSaved"/>
<handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnItemSaved"/>
<handler type="Sitecore.Caching.Placeholders.PlaceholderCacheEventHandler, Sitecore.Kernel" method="UpdateCaches" resolve="true"/>
<handler type="Sitecore.Marketing.xMgmt.Definitions.ItemEventHandler, Sitecore.Marketing.xMgmt" method="OnItemSaved" patch:source="Sitecore.Marketing.config"/>
<handler type="Sitecore.Analytics.Data.ItemEventHandler, Sitecore.Analytics" method="OnItemSaved" patch:source="Sitecore.Analytics.Tracking.config"/>
<handler type="Sitecore.ContentTesting.Events.GenerateScreenshot, Sitecore.ContentTesting" method="OnItemSaved" patch:source="Sitecore.ContentTesting.PreemptiveScreenshot.config">
<excludeFields hint="list:ExcludeFieldFromComparison">
<created>__created</created>
<createdby>__created by</createdby>
<updated>__updated</updated>
<updatedby>__updated by</updatedby>
<revision>__revision</revision>
<sortorder>__sortorder</sortorder>
<validfrom>__valid from</validfrom>
<workflow>__workflow</workflow>
<workflowstate>__workflow state</workflowstate>
<lock>__lock</lock>
<pageleveltestsetdefinition>__Page Level Test Set Definition</pageleveltestsetdefinition>
</excludeFields>
</handler>
<handler type="Sitecore.ExperienceAnalytics.Client.Deployment.Events.SegmentDeployedEventHandler, Sitecore.ExperienceAnalytics.Client" method="OnItemSaved" patch:source="Sitecore.ExperienceAnalytics.Client.config">
<param type="Sitecore.ExperienceAnalytics.Client.Deployment.DeploySegmentDefinitionProcessor, Sitecore.ExperienceAnalytics.Client">
<param ref="experienceAnalytics/client/logger"/>
<param type="Sitecore.ExperienceAnalytics.Core.Repositories.ReferenceData.ReferenceDataSegmentStore, Sitecore.ExperienceAnalytics.Core"/>
</param>
</handler>
</event>
<event name="item:saved:remote" patch:source="Sitecore.ContentTesting.PreemptiveScreenshot.config">
<handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemSavedRemote"/>
<handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnItemSavedRemote"/>
<handler type="Sitecore.Caching.Placeholders.PlaceholderCacheEventHandler, Sitecore.Kernel" method="UpdateCachesRemote" resolve="true"/>
<handler type="Sitecore.ContentTesting.Events.GenerateScreenshot, Sitecore.ContentTesting" method="OnRemoteItemSaved" patch:source="Sitecore.ContentTesting.PreemptiveScreenshot.config">
<excludeFields hint="list:ExcludeFieldFromComparison">
<created>__created</created>
<createdby>__created by</createdby>
<updated>__updated</updated>
<updatedby>__updated by</updatedby>
<revision>__revision</revision>
<sortorder>__sortorder</sortorder>
<validfrom>__valid from</validfrom>
<workflow>__workflow</workflow>
<workflowstate>__workflow state</workflowstate>
<lock>__lock</lock>
<pageleveltestsetdefinition>__Page Level Test Set Definition</pageleveltestsetdefinition>
</excludeFields>
</handler>
</event>
<event name="item:saving" patch:source="Sitecore.Marketing.config">
<handler type="Sitecore.Tasks.ItemEventHandler, Sitecore.Kernel" method="OnItemSaving"/>
<handler type="Sitecore.Marketing.xMgmt.Definitions.ItemEventHandler, Sitecore.Marketing.xMgmt" method="OnItemSaving" patch:source="Sitecore.Marketing.config"/>
</event>
<event name="item:sortorderchanged"/>
<event name="item:sortorderchanged:remote"/>
<event name="item:templateChanged"/>
<!--
 Event hook before moving an item into an item bucket and from one database to another database. 
           Args: (EventArgs) Args -> (Item) Item 
-->
<event name="item:transferred" patch:source="Sitecore.Buckets.config">
<handler type="Sitecore.Buckets.Events.ItemTransferredEventHandler, Sitecore.Buckets" method="Execute" patch:source="Sitecore.Buckets.config"/>
</event>
<event name="item:unlocked"/>
<event name="item:versionAdded"/>
<event name="item:versionAdded:remote"/>
<event name="item:versionAdding"/>
<event name="item:versionRemoved">
<handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnVersionRemoved"/>
<handler type="Sitecore.Links.ItemEventHandler, Sitecore.Kernel" method="OnVersionRemoved"/>
<handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnVersionRemoved"/>
</event>
<event name="item:versionRemoved:remote">
<handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnVersionRemovedRemote"/>
<handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnVersionRemovedRemote"/>
</event>
<event name="item:versionRemoving"/>
<event name="publish:begin"/>
<!--
 publish:complete
           Raised when publishing for all languages and targets (i.e. publish options) is complete. 
-->
<event name="publish:complete"/>
<!--
 publish:complete:remote
           Raised when publishing for all languages and targets (i.e. publish options) is complete on a remote Sitecore instance. 
-->
<event name="publish:complete:remote"/>
<event name="publish:end" patch:source="Sitecore.Analytics.Tracking.config">
<handler type="Sitecore.Publishing.HtmlCacheClearer, Sitecore.Kernel" method="ClearCache">
<sites hint="list">
<site>website</site>
</sites>
</handler>
<handler type="Sitecore.Publishing.RenderingParametersCacheClearer, Sitecore.Kernel" method="ClearCache"/>
<handler type="Sitecore.ContentSearch.Events.PublishingEventHandler, Sitecore.ContentSearch" method="OnFullPublishEndHandler" patch:source="Sitecore.ContentSearch.config"/>
<handler type="Sitecore.ContentSearch.Events.PublishingEventHandler, Sitecore.ContentSearch" method="OnPublishHandler" patch:source="Sitecore.ContentSearch.config"/>
<handler type="Sitecore.Analytics.Data.Items.ClearItemRecordsIDCacheOnPublishEndHandler, Sitecore.Analytics" method="ClearCache" patch:source="Sitecore.Analytics.Tracking.config"/>
</event>
<event name="publish:end:remote" patch:source="Sitecore.Analytics.Tracking.config">
<handler type="Sitecore.Publishing.HtmlCacheClearer, Sitecore.Kernel" method="ClearCache">
<sites hint="list">
<site>website</site>
</sites>
</handler>
<handler type="Sitecore.Publishing.RenderingParametersCacheClearer, Sitecore.Kernel" method="ClearCache"/>
<handler type="Sitecore.ContentSearch.Events.PublishingEventHandler, Sitecore.ContentSearch" method="OnFullPublishEndRemoteHandler" patch:source="Sitecore.ContentSearch.config"/>
<handler type="Sitecore.ContentSearch.Events.PublishingEventHandler, Sitecore.ContentSearch" method="OnPublishRemoteHandler" patch:source="Sitecore.ContentSearch.config"/>
<handler type="Sitecore.Analytics.Data.Items.ClearItemRecordsIDCacheOnPublishEndHandler, Sitecore.Analytics" method="ClearCache" patch:source="Sitecore.Analytics.Tracking.config"/>
</event>
<event name="publish:fail"/>
<event name="publish:itemProcessing" help="Receives an argument of type ItemProcessingEventArgs (namespace: Sitecore.Publishing.Pipelines.PublishItem)"/>
<event name="publish:itemProcessed" help="Receives an argument of type ItemProcessedEventArgs (namespace: Sitecore.Publishing.Pipelines.PublishItem)"/>
<event name="publish:startPublishing">
<handler type="Sitecore.Publishing.RemotePublishingEventHandler, Sitecore.Kernel" method="OnStartPublishing"/>
</event>
<event name="publish:statusUpdated">
<handler type="Sitecore.Publishing.RemotePublishingEventHandler, Sitecore.Kernel" method="OnStatusUpdated"/>
</event>
<event name="security:loggingIn"/>
<event name="security:loggedIn"/>
<event name="security:loggingOut"/>
<event name="security:loggedOut">
<handler type="Sitecore.Sites.SiteContext, Sitecore.Kernel" method="OnLoggedOut" static="true"/>
</event>
<event name="template:updated"/>
<!--
 user:created(System.Web.Security.MembershipUser user)
           Raised when a new membership user has been created. 
-->
<event name="user:created"/>
<!--
 user:created:remote(UserCreatedRemoteEventArgs args)
           Raised when a new membership user has been created on a remote Sitecore instance. 
-->
<event name="user:created:remote"/>
<!--
 user:deleted(string userName)
           Raised when a new membership user has been deleted. 
-->
<event name="user:deleted"/>
<!--
 user:deleted:remote(UserDeletedRemoteEventArgs args)
           Raised when a new membership user has been deleted on a remote Sitecore instance. 
-->
<event name="user:deleted:remote"/>
<!--
 user:runtimerolesupdated(string userName)
           Raised when runtime roles have been added or removed for a user, typically for a virtual user. 
-->
<event name="user:runtimerolesupdated"/>
<!--
 user:runtimerolesupdated:remote(UserUpdatedRemoteEventArgs args)
           Raised when runtime roles have been added or removed for a user on a remote Sitecore instance, typically for a virtual user. 
-->
<event name="user:runtimerolesupdated:remote"/>
<!--
 user:updated(System.Web.Security.MembershipUser user)
           Raised when a new membership user has been updated. 
-->
<event name="user:updated"/>
<!--
 user:updated:remote(UserUpdatedRemoteEventArgs args)
           Raised when a new membership user has been updated on a remote Sitecore instance. 
-->
<event name="user:updated:remote"/>
<!--
 role:created(string roleName)
           Raised when a new membership role has been created. 
-->
<event name="role:created"/>
<!--
 role:created:remote(RoleCreatedRemoteEventArgs args)
           Raised when a new membership role has been created on a remote Sitecore instance. 
-->
<event name="role:created:remote"/>
<!--
 role:deleted(string roleName)
           Raised when a new membership role has been deleted. 
-->
<event name="role:deleted"/>
<!--
 role:deleted:remote(RoleDeletedRemoteEventArgs args)
           Raised when a new membership role has been deleted on a remote Sitecore instance. 
-->
<event name="role:deleted:remote"/>
<!--
 roles:relationsRemoved(string roleName)
           Raised when all relations have been removed for a role. 
-->
<event name="roles:relationsRemoved"/>
<!--
 roles:relationsRemoved:remote(RoleRelationsRemovedRemoteEventArgs args)
           Raised when all relations have been removed for a role on a remote Sitecore instance. 
-->
<event name="roles:relationsRemoved:remote"/>
<!--
 roles:rolesAdded(IEnumerable<Role> memberRoles, IEnumerable<Role> targetRoles)
           Raised when roles have been added to one or more roles. 
-->
<event name="roles:rolesAdded"/>
<!--
 roles:rolesAdded:remote(RolesAddedToRolesRemoteEventArgs args)
           Raised when roles have been added to one or more roles on a remote Sitecore instance. 
-->
<event name="roles:rolesAdded:remote"/>
<!--
 roles:rolesRemoved(IEnumerable<Role> memberRoles, IEnumerable<Role> targetRoles)
           Raised when roles have been removed from one or more roles. 
-->
<event name="roles:rolesRemoved"/>
<!--
 roles:rolesRemoved:remote(RolesRemovedFromRolesRemoteEventArgs args)
           Raised when roles have been removed from one or more roles on a remote Sitecore instance. 
-->
<event name="roles:rolesRemoved:remote"/>
<!--
 roles:usersAdded(string[] userNames, string[] roleNames)
           Raised when users have been added to one or more roles. 
-->
<event name="roles:usersAdded"/>
<!--
 roles:usersAdded:remote(UsersAddedToRolesRemoteEventArgs args)
           Raised when users have been added to one or more roles on a remote Sitecore instance. 
-->
<event name="roles:usersAdded:remote"/>
<!--
 roles:usersRemoved(string[] userNames, string[] roleNames)
           Raised when users have been removed from one or more roles. 
-->
<event name="roles:usersRemoved"/>
<!--
 roles:usersRemoved:remote(UsersRemovedFromRolesRemoteEventArgs args)
           Raised when users have been removed from one or more roles on a remote Sitecore instance. 
-->
<event name="roles:usersRemoved:remote"/>
<!--
 database:propertychanged(string parameterName)
           Raised when database property was changed. Deprecated
-->
<event name="database:propertychanged"/>
<!--
 property:changed(string parameterName)
           Raised when property was changed. 
-->
<event name="property:changed"/>
<!--
 property:deleted(string parameterName)
           Raised when property was removed. 
-->
<event name="property:removed"/>
<!--
 idtable:added(string parameterName)
           Raised when property was added to idtable. 
-->
<event name="idtable:added"/>
<!--
 idtable:removed(string parameterName)
           Raised when property was removed from idtable. 
-->
<event name="idtable:removed"/>
<!--
 sessionEnd:starting
           Raised before the sessionEnd pipeline is executed. 
-->
<event name="sessionEnd:starting"/>
<!--
 sessionEnd:postSessionEnd:starting
           Raised before the postSessionEnd pipeline is executed. 
-->
<event name="sessionEnd:postSessionEnd:starting"/>
<!--
 sessionEnd:ended
           Raised after the sessionEnd pipeline has been executed. 
-->
<event name="sessionEnd:ended"/>
<!--
 job:starting
           Raised before a Job is placed into the ThreadPool 
-->
<event name="job:starting"/>
<!--
 job:started
           Raised after a Job is placed into the ThreadPool and has been started
-->
<event name="job:started"/>
<!--
 job:ended
           Raised during the Job_Finished event
-->
<event name="job:ended"/>
<event name="packageinstall:starting" patch:source="Sitecore.ContentSearch.config">
<handler type="Sitecore.ContentSearch.Events.PackagingEventHandler, Sitecore.ContentSearch" method="OnPackageInstallStartingHandler" patch:source="Sitecore.ContentSearch.config"/>
</event>
<event name="packageinstall:starting:remote" patch:source="Sitecore.ContentSearch.config">
<handler type="Sitecore.ContentSearch.Events.PackagingEventHandler, Sitecore.ContentSearch" method="OnPackageInstallStartingRemoteHandler" patch:source="Sitecore.ContentSearch.config"/>
</event>
<event name="packageinstall:items:starting"/>
<event name="packageinstall:items:starting:remote"/>
<event name="packageinstall:items:ended" patch:source="Sitecore.ContentSearch.config">
<handler type="Sitecore.ContentSearch.Events.PackagingEventHandler, Sitecore.ContentSearch" method="OnPackageInstallItemsEndHandler" patch:source="Sitecore.ContentSearch.config"/>
</event>
<event name="packageinstall:items:ended:remote" patch:source="Sitecore.ContentSearch.config">
<handler type="Sitecore.ContentSearch.Events.PackagingEventHandler, Sitecore.ContentSearch" method="OnPackageInstallItemsEndRemoteHandler" patch:source="Sitecore.ContentSearch.config"/>
</event>
<event name="packageinstall:files:starting"/>
<event name="packageinstall:files:starting:remote"/>
<event name="packageinstall:files:ended"/>
<event name="packageinstall:files:ended:remote"/>
<event name="packageinstall:poststep:starting" patch:source="Sitecore.ContentSearch.config">
<handler type="Sitecore.ContentSearch.Events.PackagingEventHandler, Sitecore.ContentSearch" method="OnPackagePostStepInstallStartingHandler" patch:source="Sitecore.ContentSearch.config"/>
</event>
<event name="packageinstall:poststep:starting:remote" patch:source="Sitecore.ContentSearch.config">
<handler type="Sitecore.ContentSearch.Events.PackagingEventHandler, Sitecore.ContentSearch" method="OnPackagePostStepInstallStartingRemoteHandler" patch:source="Sitecore.ContentSearch.config"/>
</event>
<event name="packageinstall:poststep:ended"/>
<event name="packageinstall:poststep:ended:remote"/>
<event name="packageinstall:ended" patch:source="Sitecore.ContentSearch.config">
<handler type="Sitecore.ContentSearch.Events.PackagingEventHandler, Sitecore.ContentSearch" method="OnPackageInstallerEndHandler" patch:source="Sitecore.ContentSearch.config"/>
</event>
<event name="packageinstall:ended:remote" patch:source="Sitecore.ContentSearch.config">
<handler type="Sitecore.ContentSearch.Events.PackagingEventHandler, Sitecore.ContentSearch" method="OnPackageInstallerEndRemoteHandler" patch:source="Sitecore.ContentSearch.config"/>
</event>
<event name="indexing:start" patch:source="Sitecore.ContentSearch.config">
<handler type="Sitecore.ContentSearch.Events.IndexingEventHandler, Sitecore.ContentSearch" method="IndexingStartedHandler"/>
</event>
<event name="indexing:start:remote" patch:source="Sitecore.ContentSearch.config"/>
<event name="indexing:end" patch:source="Sitecore.ContentSearch.config">
<handler type="Sitecore.ContentSearch.Maintenance.IndexDependentHtmlCacheManager, Sitecore.ContentSearch" method="Clear"/>
<handler type="Sitecore.ContentSearch.Events.IndexingEventHandler, Sitecore.ContentSearch" method="IndexingEndedHandler"/>
<handler type="Sitecore.ContentSearch.Events.IndexingEventHandler, Sitecore.ContentSearch" method="UpdateIndexTimestampDirectHandler" patch:source="Sitecore.ContentSearch.config"/>
</event>
<event name="indexing:end:remote" patch:source="Sitecore.ContentSearch.config">
<handler type="Sitecore.ContentSearch.Events.IndexingEventHandler, Sitecore.ContentSearch" method="IndexEndedRemoteHandler" patch:source="Sitecore.ContentSearch.config"/>
<handler type="Sitecore.ContentSearch.Events.IndexingEventHandler, Sitecore.ContentSearch" method="UpdateIndexTimestampDirectHandler" patch:source="Sitecore.ContentSearch.config"/>
</event>
<event name="indexing:updateditem" patch:source="Sitecore.ContentSearch.config">
<handler type="Sitecore.ContentSearch.Events.IndexingEventHandler, Sitecore.ContentSearch" method="UpdateIndexTimestampHandler"/>
</event>
<event name="indexing:deleteitem" patch:source="Sitecore.ContentSearch.config">
<handler type="Sitecore.ContentSearch.Events.IndexingEventHandler, Sitecore.ContentSearch" method="UpdateIndexTimestampHandler"/>
</event>
<event name="indexing:deletegroup" patch:source="Sitecore.ContentSearch.config">
<handler type="Sitecore.ContentSearch.Events.IndexingEventHandler, Sitecore.ContentSearch" method="UpdateIndexTimestampHandler"/>
</event>
<event name="indexing:committed" patch:source="Sitecore.ContentSearch.config">
<handler type="Sitecore.ContentSearch.Events.IndexingEventHandler, Sitecore.ContentSearch" method="UpdateIndexTimestampDirectHandler"/>
</event>
<!--
 Event hook before a item is getting bucketed
           Args: (ID) NewId, (string) ItemName, (ID) TemplateId, (Item) NewDestination 
-->
<event name="item:bucketing:adding" patch:source="Sitecore.Buckets.config"/>
<!--
 Event hook after a item is getting bucketed
           Args: (Item) Item 
-->
<event name="item:bucketing:added" patch:source="Sitecore.Buckets.config"/>
<!--
 Event hook before a cloned item is placed in an item bucket.   
           Args: (CopyItemArgs) Args -> (Item[]) Copies 
-->
<event name="item:bucketing:cloning" patch:source="Sitecore.Buckets.config"/>
<!--
 Event hook after a cloned item is placed in an item bucket. 
           Args: (CopyItemArgs) Args -> (Item[]) Copies 
-->
<event name="item:bucketing:cloned" patch:source="Sitecore.Buckets.config"/>
<!--
 Event hook before copying an item into an item bucket. 
           Args: (CopyItemArgs) Args -> (Item[])Copies 
-->
<event name="item:bucketing:copying" patch:source="Sitecore.Buckets.config"/>
<!--
 Event hook after copying an item into an item bucket. 
           Args: (CopyItemArgs) Args -> (Item[])Copies 
-->
<event name="item:bucketing:copied" patch:source="Sitecore.Buckets.config"/>
<!--
 Event hook after duplicating an item into an item bucket.
           Args: (ClientPipelineArgs) Args -> 
-->
<event name="item:bucketing:duplicating" patch:source="Sitecore.Buckets.config"/>
<!--
 Event hook after duplicating an item into an item bucket.
           Args: (ClientPipelineArgs) Args -> 
-->
<event name="item:bucketing:duplicated" patch:source="Sitecore.Buckets.config"/>
<!--
 Event hook before moving an item into an item bucket. 
           Args: (ClientPipelineArgs) Args -> 
-->
<event name="item:bucketing:moving" patch:source="Sitecore.Buckets.config"/>
<!--
 Event hook after moving an item into an item bucket. 
           Args: (ClientPipelineArgs) Args -> 
-->
<event name="item:bucketing:moved" patch:source="Sitecore.Buckets.config"/>
<!--
 Event hook before converting an item into an item bucket starts. 
           Args: (BucketArgs) Args -> (Item) Item, (string) DatabaseName 
-->
<event name="item:bucketing:starting" patch:source="Sitecore.ContentTesting.Search.config">
<handler type="Sitecore.ContentTesting.Events.PauseIndexingOnBucketing, Sitecore.ContentTesting" method="PauseIndexing" patch:source="Sitecore.ContentTesting.Search.config"/>
</event>
<!--
 Event hook after converting an item into an item bucket finishes. 
           Args: (BucketArgs) Args -> (Item) Item, (string) DatabaseName 
-->
<event name="item:bucketing:ending" patch:source="Sitecore.ContentTesting.Search.config">
<handler type="Sitecore.ContentTesting.Events.PauseIndexingOnBucketing, Sitecore.ContentTesting" method="ResumeIndexing" patch:source="Sitecore.ContentTesting.Search.config"/>
</event>
<!--
 Event hook before converting an item bucket into an ordinary content item starts. 
           Args: (BucketArgs) Args -> (Item) Item, (string) DatabaseName 
-->
<event name="item:unbucketing:starting" patch:source="Sitecore.ContentTesting.Search.config">
<handler type="Sitecore.ContentTesting.Events.PauseIndexingOnBucketing, Sitecore.ContentTesting" method="PauseIndexing" patch:source="Sitecore.ContentTesting.Search.config"/>
</event>
<!--
 Event hook after converting an item bucket into an ordinary content item finishes. 
           Args: (BucketArgs) Args -> (Item) Item, (string) DatabaseName 
-->
<event name="item:unbucketing:ending" patch:source="Sitecore.ContentTesting.Search.config">
<handler type="Sitecore.ContentTesting.Events.PauseIndexingOnBucketing, Sitecore.ContentTesting" method="ResumeIndexing" patch:source="Sitecore.ContentTesting.Search.config"/>
</event>
<event name="media:request" patch:source="Sitecore.Analytics.Tracking.RobotDetection.config">
<handler type="Sitecore.Analytics.RobotDetection.Media.MediaRequestEventHandler, Sitecore.Analytics.RobotDetection" method="OnMediaRequest" patch:source="Sitecore.Analytics.Tracking.RobotDetection.config"/>
</event>
<event name="support:package:requested" patch:source="Sitecore.ExperienceContentManagement.Administration.config">
<handler type="Sitecore.ExperienceContentManagement.Administration.SupportPackageEventHandler, Sitecore.ExperienceContentManagement.Administration" method="OnRequested"/>
</event>
<event name="support:package:requested:remote" patch:source="Sitecore.ExperienceContentManagement.Administration.config">
<handler type="Sitecore.ExperienceContentManagement.Administration.SupportPackageEventHandler, Sitecore.ExperienceContentManagement.Administration" method="OnRequested"/>
</event>
<event name="support:package:generating" patch:source="Sitecore.ExperienceContentManagement.Administration.config">
<handler type="Sitecore.ExperienceContentManagement.Administration.SupportPackageEventHandler, Sitecore.ExperienceContentManagement.Administration" method="OnGenerating"/>
</event>
<event name="support:package:generating:remote" patch:source="Sitecore.ExperienceContentManagement.Administration.config">
<handler type="Sitecore.ExperienceContentManagement.Administration.SupportPackageEventHandler, Sitecore.ExperienceContentManagement.Administration" method="OnGenerating"/>
</event>
<event name="support:package:generated" patch:source="Sitecore.ExperienceContentManagement.Administration.config">
<handler type="Sitecore.ExperienceContentManagement.Administration.SupportPackageEventHandler, Sitecore.ExperienceContentManagement.Administration" method="OnGenerated"/>
</event>
<event name="support:package:generated:remote" patch:source="Sitecore.ExperienceContentManagement.Administration.config">
<handler type="Sitecore.ExperienceContentManagement.Administration.SupportPackageEventHandler, Sitecore.ExperienceContentManagement.Administration" method="OnGenerated"/>
</event>
<event name="support:package:cleanup" patch:source="Sitecore.ExperienceContentManagement.Administration.config">
<handler type="Sitecore.ExperienceContentManagement.Administration.SupportPackageEventHandler, Sitecore.ExperienceContentManagement.Administration" method="OnCleanup"/>
</event>
<event name="support:package:cleanup:remote" patch:source="Sitecore.ExperienceContentManagement.Administration.config">
<handler type="Sitecore.ExperienceContentManagement.Administration.SupportPackageEventHandler, Sitecore.ExperienceContentManagement.Administration" method="OnCleanup"/>
</event>
<!--
 Raised when each message bus has been started, whether it succeeded or failed. 
-->
<event name="messaging:businitialized" patch:source="Sitecore.Messaging.config"/>
<!--
 Raised when all message buses have been started (whether any failed or not). 
-->
<event name="messaging:allBusesInitialized" patch:source="Sitecore.Messaging.GatewayClient.config">
<!--
 Starts a background process that will validate the health of all HTTP Gateway connections to the Gateway server, and log
                    successes and failures for each queue.  It will keep running, and checking failed connections untill all are healthy, or the
                    max duration setting is reached.
                    
                    The validation first occurs 30 seconds after startup, and then after each iteration of queue connections, an
                    exponential delay is observered before checking for unhealthy connections.
                    
-->
<handler type="Sitecore.Messaging.GatewayClient.InitializeGatewayValidation, Sitecore.Messaging.GatewayClient" method="HandleAllBusesInitialized" resolve="true" patch:source="Sitecore.Messaging.GatewayClient.config"/>
</event>
<event name="subscriber:assigned" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
</events>
<!--
 EVENT SETTINGS
    Here is a list of settings for different event types.
    
-->
<eventSettings>
<!--
 SAVED ITEM REMOTE SETTINGS
      The settings that control the item:saved:remote event.
      
-->
<savedItemRemoteSettings type="Sitecore.Events.Settings.SavedItemRemoteSettings, Sitecore.Kernel" patch:source="Sitecore.FXM.config">
<!--
 EXCLUDE FIELD'S TYPES
             This setting allows you to specify which types of fields shouldn't be serialized when the item:saved:remote event is triggered
             and the EventQueue.SavedItemRemote.SerializeAllFields setting is set to 'true'.
      
-->
<exclude hint="list:ExcludeType">
<Text>Rich Text</Text>
<Text>Word Document</Text>
<Text>html</Text>
</exclude>
<include hint="list:IncludeField" patch:source="Sitecore.FXM.config">
<Text>{39387566-6A7E-4C86-9E88-AD871B41C3FD}</Text>
<Text>{764C1EED-14CF-4FCD-A20B-375A145614B1}</Text>
</include>
</savedItemRemoteSettings>
</eventSettings>
<!--  Settings for strongly typed events.  -->
<eventing defaultProvider="sitecore">
<!--
 Provider for managing event subscriptions, dispatching and queueing of remote events. 
-->
<providers>
<clear/>
<!--

          Default event provider (uses event queues provided by Sitecore databases).
          General attributes:
            name: Name of the provider.
            type: Assembly qualified type name of the class implementing the provider.
          Event provider attributes:
            systemDatabaseName: Deprecated. Name of the database which will hold the system event queue. 
        System event queue receives all the events that are not related to a specific database.
        
-->
<add name="sitecore" type="Sitecore.Eventing.EventProvider, Sitecore.Kernel" systemDatabaseName="core"/>
</providers>
<!--  Settings related to queued events  -->
<eventQueueMonitor>
<!--
 Time between checking the queue for newly queued events. If new events are found they will be raised. 
-->
<processingInterval>00:00:02</processingInterval>
</eventQueueMonitor>
<!--  EVENT QUEUE  -->
<eventQueueProvider defaultEventQueue="core">
<eventQueue name="web" type="Sitecore.Data.Eventing.SqlServerEventQueue, Sitecore.Kernel">
<param ref="dataApis/dataApi[@name='SqlServer']" param1="$(name)"/>
<param ref="PropertyStoreProvider/store[@name='$(name)']"/>
</eventQueue>
<eventQueue name="master" type="Sitecore.Data.Eventing.SqlServerEventQueue, Sitecore.Kernel">
<param ref="dataApis/dataApi[@name='SqlServer']" param1="$(name)"/>
<param hint="" ref="PropertyStoreProvider/store[@name='$(name)']"/>
</eventQueue>
<eventQueue name="core" type="Sitecore.Data.Eventing.SqlServerEventQueue, Sitecore.Kernel">
<param ref="dataApis/dataApi[@name='SqlServer']" param1="$(name)"/>
<param ref="PropertyStoreProvider/store[@name='$(name)']"/>
</eventQueue>
</eventQueueProvider>
</eventing>
<!--  Settings for PropertyStores.  -->
<PropertyStoreProvider defaultStore="core">
<store name="web" prefix="web" getValueWithoutPrefix="true" singleInstance="true" type="Sitecore.Data.Properties.SqlServerPropertyStore, Sitecore.Kernel">
<param ref="dataApis/dataApi[@name='SqlServer']" param1="$(name)"/>
<param type="Sitecore.Abstractions.BaseEventManager, Sitecore.Kernel" resolve="true"/>
<param type="Sitecore.Abstractions.BaseCacheManager, Sitecore.Kernel" resolve="true"/>
</store>
<store name="master" prefix="master" getValueWithoutPrefix="true" singleInstance="true" type="Sitecore.Data.Properties.SqlServerPropertyStore, Sitecore.Kernel">
<param ref="dataApis/dataApi[@name='SqlServer']" param1="$(name)"/>
<param type="Sitecore.Abstractions.BaseEventManager, Sitecore.Kernel" resolve="true"/>
<param type="Sitecore.Abstractions.BaseCacheManager, Sitecore.Kernel" resolve="true"/>
</store>
<store name="core" prefix="core" getValueWithoutPrefix="true" singleInstance="true" type="Sitecore.Data.Properties.SqlServerPropertyStore, Sitecore.Kernel">
<param ref="dataApis/dataApi[@name='SqlServer']" param1="$(name)"/>
<param type="Sitecore.Abstractions.BaseEventManager, Sitecore.Kernel" resolve="true"/>
<param type="Sitecore.Abstractions.BaseCacheManager, Sitecore.Kernel" resolve="true"/>
</store>
</PropertyStoreProvider>
<customHandlers>
<handler trigger="-/media/" handler="sitecore_media.ashx"/>
<handler trigger="~/media/" handler="sitecore_media.ashx"/>
<handler trigger="~/api/" handler="sitecore_api.ashx"/>
<handler trigger="-/api/" handler="sitecore_api.ashx"/>
<handler trigger="-/xaml/" handler="sitecore_xaml.ashx"/>
<handler trigger="~/xaml/" handler="sitecore_xaml.ashx"/>
<handler trigger="-/icon/" handler="sitecore_icon.ashx"/>
<handler trigger="~/icon/" handler="sitecore_icon.ashx"/>
<handler trigger="-/temp/" handler="sitecore_temp.ashx"/>
<handler trigger="~/temp/" handler="sitecore_temp.ashx"/>
<handler trigger="~/feed/" handler="sitecore_feed.ashx"/>
<handler trigger="-/feed/" handler="sitecore_feed.ashx"/>
<!--  WebDAV requests handler.  -->
<handler trigger="/sitecore_files" handler="sitecore_webDAV.ashx" patch:source="Sitecore.WebDAV.config"/>
<handler trigger="/-/speak/v1/" handler="sitecore_speak.ashx" patch:source="Sitecore.Speak.config"/>
<handler trigger="/-/speak/request/v1/expeditor/" handler="sitecore_expeditor_speak_request.ashx" patch:source="Sitecore.ExperienceEditor.Speak.Requests.config"/>
<handler trigger="/-/speak/request/v1/expeditorasync/" handler="sitecore_expeditor_speak_request_async.ashx" patch:source="Sitecore.ExperienceEditor.Speak.Requests.config"/>
<handler trigger="/-/speak/request/v1/ecm" handler="sitecore_ecm_speak_request.ashx" patch:source="Sitecore.EmailExperience.UI.config"/>
</customHandlers>
<!--  LINK DATABASE  -->
<LinkDatabase type="Sitecore.Data.SqlServer.SqlServerLinkDatabase, Sitecore.Kernel">
<param connectionStringName="core"/>
</LinkDatabase>
<!--  TASK DATABASE  -->
<TaskDatabase type="Sitecore.Data.SqlServer.SqlServerTaskDatabase, Sitecore.Kernel">
<param connectionStringName="core"/>
</TaskDatabase>
<!--  ID TABLE  -->
<IDTable type="Sitecore.Data.SqlServer.SqlServerIDTable, Sitecore.Kernel" singleInstance="true">
<param connectionStringName="master"/>
<param desc="cacheSize">2500KB</param>
</IDTable>
<!--  PIPELINES  -->
<!--
 Content of include config files is added to web.config in alphabetical order.
         SPEAK-dependent components may try to extend SPEAK configuration before it has been added to web.config.
         This file is created to be sure that its content is added to web.config before another SPEAK-dependent components. 
-->
<!--  PIPELINES  -->
<!--  PIPELINES  -->
<!--  PIPELINES  -->
<!--  PIPELINES  -->
<pipelines>
<!--  Loader  -->
<!--
 Initializes the Web API configuration for the GatewayService. 
-->
<!--
 **** Kernel integration pipeline customizations **** 
-->
<initialize>
<processor type="Sitecore.Pipelines.Loader.ShowVersion, Sitecore.Kernel">
<assemblies hint="list:AddAssembly">
<assembly>/bin/Sitecore.Client.dll</assembly>
<assembly>/bin/Sitecore.Kernel.dll</assembly>
<assembly>/bin/Sitecore.Nexus.dll</assembly>
</assemblies>
<showVersionForAllAssemblies>true</showVersionForAllAssemblies>
<showDatabases>true</showDatabases>
<showDomains>true</showDomains>
<showDebugWarning>true</showDebugWarning>
</processor>
<processor type="Sitecore.Xdb.Configuration.Pipelines.Initialize.ShowXdbInfo, Sitecore.Xdb.Configuration" patch:source="Sitecore.Xdb.config"/>
<processor type="Sitecore.Pipelines.Loader.SetGlobals, Sitecore.Kernel"/>
<processor type="Sitecore.PathAnalyzer.Pipelines.Initialize.Loader, Sitecore.PathAnalyzer" patch:source="Sitecore.PathAnalyzer.config"/>
<processor type="Sitecore.Pipelines.Loader.LoadHooks, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.Loader.InitializeManagers, Sitecore.Kernel"/>
<processor type="Sitecore.ContentSearch.SolrProvider.Pipelines.Loader.InitializeSolrProvider, Sitecore.ContentSearch.SolrProvider" patch:source="Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config"/>
<processor type="Sitecore.Pipelines.Loader.InitializeScheduler, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.Loader.InitializeHeartbeat, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.Loader.InitializeAgilityPack, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.Loader.EnsureAnonymousUsers, Sitecore.Kernel" resolve="true"/>
<!--
 Processor checks the WebDAV feature configuration on first start. 
-->
<processor type="Sitecore.Pipelines.Loader.CheckWebDAVConfiguration, Sitecore.Kernel" patch:source="Sitecore.WebDAV.config"/>
<processor type="Sitecore.Pipelines.Loader.RegisterjQuery, Sitecore.Kernel"/>
<processor type="Sitecore.Eventing.Remote.RemoteEventMap, Sitecore.Kernel" method="InitializeFromPipeline">
<param ref="eventing/eventQueueProvider/eventQueue[@name='core']" desc="eventQueue"/>
</processor>
<processor type="Sitecore.Pipelines.Loader.AcknowledgeInitialized, Sitecore.Kernel"/>
<!--
 DUMP CONFIGURATION FILES
        Dumps the specified configuration files and allows you to monitor all the changes that are made to the configuration files.
          Supported child nodes:
            DumpFolder: The path to the root folder where the config file dump is stored. Each config file dump is stored in a folder or
                        a zip archive. The name of the folder or zip archive has the following format: {date}.{time}.
                        Default value: $(dataFolder)/diagnostics/configuration_history
            Zip:        Boolean value that determines whether each dump should be zipped. Default value: true
            files:      Contains <file> nodes where the "path" attribute value is the path to the configuration file or the folder that
                        should be dumped.
        
-->
<processor type="Sitecore.Pipelines.Loader.DumpConfigurationFiles, Sitecore.Kernel" patch:source="Sitecore.Diagnostics.config">
<dumpFolder>/App_Data/diagnostics/configuration_history</dumpFolder>
<zip>true</zip>
<files hint="raw:AddPath">
<file path="/App_Config"/>
<file path="/Web.config"/>
<file path="/Global.asax"/>
<file path="/sitecore/shell/sitecore.version.xml"/>
</files>
</processor>
<processor type="Sitecore.Pipelines.Loader.InitializeJSNLog, Sitecore.Kernel" patch:source="Sitecore.JSNLog.config"/>
<processor type="Sitecore.CES.DeviceDetection.Pipelines.Initialize.CheckInitialization, Sitecore.CES.DeviceDetection" patch:source="Sitecore.CES.DeviceDetection.CheckInitialization.config"/>
<processor type="Sitecore.Analytics.Aggregation.Pipelines.Loader.InitializeAggregationPerformanceCounters, Sitecore.Analytics.Aggregation" patch:source="Sitecore.Analytics.Processing.Aggregation.config"/>
<processor type="Sitecore.Analytics.Processing.Pipelines.Loader.InitializeProcessingPerformanceCounters, Sitecore.Analytics.Processing" patch:source="Sitecore.Analytics.Processing.Aggregation.config"/>
<processor type="Sitecore.Analytics.Pipelines.Loader.InitializeSqlPerformanceCounters, Sitecore.Analytics.Sql" patch:source="Sitecore.Analytics.Processing.Aggregation.config"/>
<processor type="Sitecore.Analytics.DataAccess.Pipelines.Loader.InitializePerformanceCounters, Sitecore.Analytics.DataAccess" patch:source="Sitecore.Analytics.Tracking.config"/>
<processor type="Sitecore.Analytics.Pipelines.Loader.InitializeTracking, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.config"/>
<processor type="Sitecore.Analytics.Pipelines.Loader.StartThreadPoolSizeMonitor, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.config"/>
<processor type="Sitecore.Mvc.Pipelines.Loader.InitializeAspNetMvc, Sitecore.Mvc" patch:source="Sitecore.Mvc.config"/>
<processor type="Sitecore.Mvc.Pipelines.Loader.InitializeGlobalFilters, Sitecore.Mvc" patch:source="Sitecore.Mvc.config"/>
<processor type="Sitecore.Mvc.Pipelines.Loader.InitializeDependencyResolver, Sitecore.Mvc" patch:source="Sitecore.Mvc.config"/>
<processor type="Sitecore.Mvc.Pipelines.Loader.InitializeControllerFactory, Sitecore.Mvc" patch:source="Sitecore.Mvc.config"/>
<processor type="Sitecore.Mvc.Pipelines.Initialize.InitializeCommandRoute, Sitecore.Speak.Client" patch:source="Sitecore.Speak.Mvc.config"/>
<processor type="Sitecore.ContentTesting.Pipelines.Initialize.RegisterContentTestingCommandRoute, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<processor type="Sitecore.ContentTesting.Pipelines.Initialize.RegisterWebApiRoutes, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<processor type="Sitecore.Mvc.Pipelines.Loader.InitializeRoutes, Sitecore.Mvc" patch:source="Sitecore.Mvc.config"/>
<processor type="Sitecore.ExperienceExplorer.Web.Pipelines.Initialize.EnableExperienceExplorerSessionState, Sitecore.ExperienceExplorer.Web" patch:source="Sitecore.ExperienceExplorer.Services.config">
<param name="constraintPattern">ExperienceExplorer.*</param>
<param name="routeHandler" type="Sitecore.ExperienceExplorer.Web.Infrastructure.EnableSessionRouteHandler, Sitecore.ExperienceExplorer.Web"/>
</processor>
<!--
 Maps a specific route for the Beacon Service to allow session state to be enabled as the DMS relies upon the existence of a session. 
-->
<processor type="Sitecore.FXM.Service.Pipelines.EnableBeaconServiceSessionStateProcessor, Sitecore.FXM.Service" resolve="true" patch:source="Sitecore.FXM.config"/>
<processor type="Sitecore.Services.Infrastructure.Sitecore.Pipelines.ServicesWebApiInitializer, Sitecore.Services.Infrastructure.Sitecore" patch:source="Sitecore.Services.Client.config"/>
<!--
 Attempts to start all configured buses, in the background.  Yields the events listed below. 
-->
<processor type="Sitecore.Messaging.InitializeBuses, Sitecore.Messaging" resolve="true" patch:source="Sitecore.Messaging.config"/>
<processor type="Sitecore.Messaging.GatewayService.InitializeMessagingWebApi, Sitecore.Messaging.GatewayService" resolve="true" patch:source="Sitecore.Messaging.GatewayService.config"/>
<!--  Creates client specific http endpoints.  -->
<processor type="Sitecore.Cintel.Client.Initialization.InitializeRoutes, Sitecore.Cintel.Client" patch:source="Sitecore.ExperienceProfile.Client.config"/>
<!--
 Creates a set of http endpoints that expose functionality of Experience Profile. 
-->
<processor type="Sitecore.Cintel.Endpoint.Plumbing.InitializeRoutes, Sitecore.Cintel" patch:source="Sitecore.ExperienceProfile.config"/>
<!--
 One-time run code that synchronizes a segment if it's workflow state is 'Deployed' but non-existent in db, with DeployDate = UTC.NOW 
-->
<processor type="Sitecore.ExperienceAnalytics.Client.Deployment.SyncSegmentsProcessor, Sitecore.ExperienceAnalytics.Client" patch:source="Sitecore.ExperienceAnalytics.Client.config">
<param ref="experienceAnalytics/client/logger"/>
<param type="Sitecore.ExperienceAnalytics.Client.Deployment.SyncSegmentsManager, Sitecore.ExperienceAnalytics.Client">
<param ref="experienceAnalytics/client/logger"/>
<param type="Sitecore.ExperienceAnalytics.Client.Deployment.DeploySegmentDefinitionProcessor, Sitecore.ExperienceAnalytics.Client">
<param ref="experienceAnalytics/client/logger"/>
<param type="Sitecore.ExperienceAnalytics.Core.Repositories.ReferenceData.ReferenceDataSegmentStore, Sitecore.ExperienceAnalytics.Core"/>
</param>
</param>
</processor>
<!--  Initializing Experience Analytics Web API  -->
<processor type="Sitecore.ExperienceAnalytics.Api.Pipelines.Initialize.WebApiInitializer, Sitecore.ExperienceAnalytics.Api" patch:source="Sitecore.ExperienceAnalytics.WebAPI.config">
<param ref="experienceAnalytics/api/logger" desc="logger"/>
</processor>
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.Initialize.InitializeRoutes, Sitecore.ExperienceForms.Mvc" patch:source="Sitecore.ExperienceForms.Mvc.config"/>
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.Initialize.SetModelBinders, Sitecore.ExperienceForms.Mvc" resolve="true" patch:source="Sitecore.ExperienceForms.Mvc.config"/>
<processor type="Sitecore.ExperienceForms.Client.Pipelines.Initialize.InitializeRoutes, Sitecore.ExperienceForms.Client" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config"/>
<processor type="Sitecore.ExM.Framework.Distributed.Sessions.Pipelines.Initialize.BeginDistributedSession,Sitecore.ExM.Framework" hint="master" patch:source="Sitecore.ExM.Framework.ContentManagement.config">
<param ref="exm/master/session" desc="session"/>
<param desc="assignOwnerName">true</param>
</processor>
<processor type="Sitecore.PathAnalyzer.Services.Pipelines.Initialize.WebApiInitializer, Sitecore.PathAnalyzer.Services" patch:source="Sitecore.PathAnalyzer.Services.config"/>
</initialize>
<shutdown>
<processor type="Sitecore.Pipelines.Shutdown.ShowReason, Sitecore.Kernel"/>
</shutdown>
<initializeManagers>
<processor type="Sitecore.Pipelines.InitializeManagers.InitializeEvent, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.InitializeManagers.InitializeItemManager, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.InitializeManagers.InitializeLanguageManager, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.InitializeManagers.InitializePublishManager, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.InitializeManagers.InitializeSerializationManager, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.InitializeManagers.InitializeNotificationManager, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.InitializeManagers.InitializeEventManager, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.InitializeManagers.InitializeScriptFactory, Sitecore.Kernel"/>
</initializeManagers>
<getSessionIdManager>
<processor type="Sitecore.FXM.Pipelines.GetSessionIdManager.SetFxmSessionIdManager, Sitecore.FXM" patch:source="Sitecore.FXM.config"/>
</getSessionIdManager>
<!--  Http Request  -->
<!--  Http Request  -->
<!--  Http Request  -->
<preprocessRequest help="Processors should derive from Sitecore.Pipelines.PreprocessRequest.PreprocessRequestProcessor">
<processor type="Sitecore.Pipelines.PreprocessRequest.NormalizeRawUrl, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.PreprocessRequest.IIS404Handler, Sitecore.Kernel"/>
<!--
 Processes WebDAV requests and assign correct httpHandler. 
-->
<processor type="Sitecore.Pipelines.PreprocessRequest.WebDAVCustomHandler, Sitecore.Kernel" patch:source="Sitecore.WebDAV.config"/>
<processor type="Sitecore.Pipelines.PreprocessRequest.FilterUrlExtensions, Sitecore.Kernel">
<param desc="Allowed extensions (comma separated)">aspx, ashx, asmx</param>
<param desc="Blocked extensions (comma separated)">*</param>
<param desc="Blocked extensions that stream files (comma separated)">*</param>
<param desc="Blocked extensions that do not stream files (comma separated)"/>
</processor>
<processor type="Sitecore.Pipelines.PreprocessRequest.StripLanguage, Sitecore.Kernel"/>
<processor type="Sitecore.ItemWebApi.Pipelines.PreprocessRequest.RewriteUrl, Sitecore.ItemWebApi" patch:source="Sitecore.ItemWebApi.config"/>
<processor type="Sitecore.Speak.Integration.Spa.Pipelines.PreprocessRequest.ResolveClientPath, Sitecore.Speak.Integration.Spa" patch:source="Sitecore.Speak.Integration.Spa.config">
<param desc="root">/sitecore/shell/client/applications/*</param>
</processor>
<processor type="Sitecore.Pipelines.HttpRequest.OverrideDialogs, Sitecore.Speak.Applications" patch:source="Sitecore.Speak.Applications.config"/>
<processor type="Sitecore.Pipelines.HttpRequest.OverrideXmlControl, Sitecore.Speak.Applications" patch:source="Sitecore.Speak.Applications.config"/>
<processor type="Sitecore.Pipelines.HttpRequest.ResolveClientPath, Sitecore.Speak.Client" patch:source="Sitecore.Speak.config"/>
<!--
 **** Bundles registered when they are first requested **** 
-->
<processor type="Sitecore.FXM.Pipelines.PreProcessRequest.HandleBundleRequest, Sitecore.FXM" resolve="true" patch:source="Sitecore.FXM.Bundle.config">
<bundles hint="list">
<!--
 The FXM client javascript bundle - see registration pipeline below. It requires the current Sitecore instance host name
                 when creating the bundle, so must be generated as part of a Sitecore request. 
-->
<bundle>beacon</bundle>
</bundles>
</processor>
</preprocessRequest>
<!--
 Checks if item has presentation assigned. Is used to define whether item can be opened in Preview or Edit mode. 
-->
<hasPresentation>
<processor type="Sitecore.Pipelines.HasPresentation.CheckLayout, Sitecore.Kernel"/>
<processor type="Sitecore.Mvc.ExperienceEditor.Pipelines.HasPresentation.CheckController, Sitecore.Mvc.ExperienceEditor" patch:source="Sitecore.MVC.ExperienceEditor.config"/>
</hasPresentation>
<!--  Executes before the ASP.NET Authenticate event.  -->
<!--
 Configures Sitecore to not process GatewayService requests as CMS requests. 
-->
<preAuthenticateRequest>
<processor type="Sitecore.Pipelines.PreprocessRequest.CheckIgnoreFlag, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.HttpRequest.IgnoreList, Sitecore.Kernel" patch:source="Sitecore.Messaging.GatewayService.config">
<prefixes hint="list">
<Messaging.GatewayServiceUrlPrefix patch:source="Sitecore.Messaging.GatewayService.config">/api/messaging</Messaging.GatewayServiceUrlPrefix>
</prefixes>
</processor>
<processor type="Sitecore.Pipelines.PreAuthenticateRequest.SiteResolver, Sitecore.Kernel" resolve="true"/>
</preAuthenticateRequest>
<!--  Http Request Begin  -->
<httpRequestBegin>
<processor type="Sitecore.Pipelines.PreprocessRequest.CheckIgnoreFlag, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.HttpRequest.EnsureServerUrl, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.HttpRequest.StartMeasurements, Sitecore.Kernel"/>
<processor type="Sitecore.Analytics.Pipelines.HttpRequest.StartDiagnostics,Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.config"/>
<processor type="Sitecore.Pipelines.HttpRequest.IgnoreList, Sitecore.Kernel" patch:source="Sitecore.Messaging.GatewayService.config">
<prefixes hint="list">
<prefix name="identityProcessing" patch:source="Sitecore.Owin.Authentication.config">/identity/</prefix>
<Messaging.GatewayServiceUrlPrefix patch:source="Sitecore.Messaging.GatewayService.config">/api/messaging</Messaging.GatewayServiceUrlPrefix>
</prefixes>
</processor>
<processor type="Sitecore.ExperienceExplorer.Pipelines.HttpRequest.EnsureExplorerCookie, Sitecore.ExperienceExplorer" patch:source="Sitecore.ExperienceExplorer.config"/>
<processor type="Sitecore.Mvc.Pipelines.HttpRequest.DisplayFatalErrors, Sitecore.Mvc" patch:source="Sitecore.Mvc.config"/>
<processor type="Sitecore.Pipelines.HttpRequest.SiteResolver, Sitecore.Kernel"/>
<processor type="Sitecore.ItemWebApi.Pipelines.HttpRequest.SetRuntimeSettings, Sitecore.ItemWebApi" patch:source="Sitecore.ItemWebApi.config"/>
<processor type="Sitecore.ItemWebApi.Pipelines.HttpRequest.CheckMode, Sitecore.ItemWebApi" patch:source="Sitecore.ItemWebApi.config"/>
<processor type="Sitecore.Pipelines.HttpRequest.UserResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HttpRequestBegin.OnHttpRequestBegin, Sitecore.EmailCampaign" desc="exmOnHttpRequestBegin" resolve="true" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Sets a short session timeout interval on email rendering sessions to conserve resources. 
-->
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HttpRequestBegin.SetEmailRenderSessionTimeout, Sitecore.EmailCampaign" desc="exmSetEmailRenderSessionTimeout" patch:source="Sitecore.EmailExperience.Core.config">
<Timeout>1</Timeout>
</processor>
<!--
 For email rendering sessions having a Sitecore user as the recipient this processor loads the user and assigns it to the session. 
-->
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HttpRequestBegin.LoadEmailRenderSessionUser, Sitecore.EmailCampaign" desc="exmLoadEmailRenderSessionUser" patch:source="Sitecore.EmailExperience.Core.config"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.HttpRequest.HandleSecurity, Sitecore.ExperienceExplorer" resolve="true" patch:source="Sitecore.ExperienceExplorer.config"/>
<processor type="Sitecore.ItemWebApi.Pipelines.HttpRequest.ResolveUserFromRequest, Sitecore.ItemWebApi" patch:source="Sitecore.ItemWebApi.config"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.HttpRequest.SwitchDatabase, Sitecore.ExperienceExplorer" resolve="true" patch:source="Sitecore.ExperienceExplorer.config"/>
<processor type="Sitecore.Pipelines.HttpRequest.DatabaseResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.HttpRequest.BeginDiagnostics, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.HttpRequest.DeviceResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.HttpRequest.LanguageResolver, Sitecore.Kernel"/>
<processor type="Sitecore.ItemWebApi.Pipelines.HttpRequest.ResolveLanguage, Sitecore.ItemWebApi" patch:source="Sitecore.ItemWebApi.config"/>
<processor type="Sitecore.Pipelines.HttpRequest.CustomHandlers, Sitecore.Kernel"/>
<processor type="Sitecore.ItemWebApi.Pipelines.HttpRequest.HandleActionRequest, Sitecore.ItemWebApi" patch:source="Sitecore.ItemWebApi.config"/>
<processor type="Sitecore.Pipelines.HttpRequest.QueryStringResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.HttpRequest.DynamicLinkResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.HttpRequest.AliasResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.HttpRequest.DefaultResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.HttpRequest.FileResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.HttpRequest.ItemResolver, Sitecore.Kernel"/>
<processor type="Sitecore.ExperienceAnalytics.Client.Pipelines.HttpRequest.RedirectRequest, Sitecore.ExperienceAnalytics.Client" patch:source="Sitecore.ExperienceAnalytics.Client.config">
<param ref="experienceAnalytics/client/services/requestRedirection"/>
</processor>
<processor type="Sitecore.ExperienceExplorer.Pipelines.HttpRequest.ResolveValidItemAndDevice, Sitecore.ExperienceExplorer" resolve="true" patch:source="Sitecore.ExperienceExplorer.config"/>
<processor type="Sitecore.ContentTesting.Pipelines.HttpRequest.ForcedEditingTestCombination, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<processor type="Sitecore.ContentTesting.Pipelines.HttpRequest.SetReadOnlySessionStateForScreenshot, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<processor type="Sitecore.ExperienceEditor.Pipelines.HttpRequest.ResolveContentLanguage, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<processor type="Sitecore.Mvc.DeviceSimulator.Pipelines.HttpRequest.HandleSimulationRequest, Sitecore.Mvc.DeviceSimulator" patch:source="Sitecore.MVC.DeviceSimulator.config"/>
<processor type="Sitecore.Mvc.Pipelines.HttpRequest.TransferRoutedRequest, Sitecore.Mvc" patch:source="Sitecore.Mvc.config"/>
<processor type="Sitecore.ItemWebApi.Pipelines.HttpRequest.LaunchRequest, Sitecore.ItemWebApi" patch:source="Sitecore.ItemWebApi.config"/>
<processor type="Sitecore.Pipelines.HttpRequest.DeviceSimulatorResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.HttpRequest.LayoutResolver, Sitecore.Kernel"/>
<processor type="Sitecore.ExperienceEditor.Pipelines.HttpRequest.CheckDevice, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<processor type="Sitecore.Pipelines.HttpRequest.PageEditorHandleNoLayout, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<processor type="Sitecore.Mvc.Pipelines.HttpRequest.TransferMvcLayout, Sitecore.Mvc" patch:source="Sitecore.Mvc.config"/>
<processor type="Sitecore.Mvc.Pipelines.HttpRequest.TransferControllerRequest, Sitecore.Mvc" patch:source="Sitecore.Mvc.config"/>
<processor type="Sitecore.Pipelines.HttpRequest.ExecuteRequest, Sitecore.Kernel"/>
</httpRequestBegin>
<renderField>
<processor type="Sitecore.Pipelines.RenderField.SetParameters, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderField.GetFieldValue, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderField.GetTextFieldValue, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderField.ExpandLinks, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderField.GetImageFieldValue, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderField.GetLinkFieldValue, Sitecore.Kernel"/>
<processor type="Sitecore.Buckets.Pipelines.RenderField.GetLinkFieldValue, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<processor type="Sitecore.Pipelines.RenderField.GetInternalLinkFieldValue, Sitecore.Kernel"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.GetNewsletterLinkFieldValue, Sitecore.EmailCampaign" patch:source="Sitecore.EmailExperience.Core.config"/>
<processor type="Sitecore.Pipelines.RenderField.GetMemoFieldValue, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderField.GetDateFieldValue, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderField.GetDocxFieldValue, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderField.GetIntegerFieldValue, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderField.GetNumberFieldValue, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderField.AddBeforeAndAfterValues, Sitecore.Kernel"/>
<processor type="Sitecore.ContentTesting.Pipelines.RenderField.HighlightContentChange, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<processor type="Sitecore.Pipelines.RenderField.ProtectedImageLinkRenderer, Sitecore.Kernel" patch:source="Sitecore.Media.RequestProtection.config"/>
<processor type="Sitecore.Pipelines.RenderField.RenderWebEditing, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderField.SetAnchorsPositionInLinks, Sitecore.Kernel"/>
</renderField>
<httpRequestProcessed>
<processor type="Sitecore.Analytics.Pipelines.HttpRequest.EndAnalytics, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.config"/>
</httpRequestProcessed>
<httpRequestEnd>
<processor type="Sitecore.ItemWebApi.Pipelines.HttpRequest.CatchError, Sitecore.ItemWebApi" patch:source="Sitecore.ItemWebApi.config"/>
<processor type="Sitecore.Analytics.Pipelines.HttpRequest.EndAnalytics, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.config"/>
<processor type="Sitecore.Pipelines.PreprocessRequest.CheckIgnoreFlag, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.HttpRequest.EndDiagnostics, Sitecore.Kernel"/>
<!--
<processor type="Sitecore.Pipelines.HttpRequest.ResizePicture, Sitecore.Kernel"/>
-->
<processor type="Sitecore.Pipelines.HttpRequest.StopMeasurements, Sitecore.Kernel">
<ShowThresholdWarnings>false</ShowThresholdWarnings>
<TimingThreshold desc="Milliseconds">1000</TimingThreshold>
<ItemThreshold desc="Item count">1000</ItemThreshold>
<MemoryThreshold desc="KB">10000</MemoryThreshold>
</processor>
</httpRequestEnd>
<!--
 Determines the presentation components to include when rendering an item. 
-->
<insertRenderings>
<processor type="Sitecore.Pipelines.InsertRenderings.Processors.GetItem, Sitecore.Kernel"/>
<processor type="Sitecore.ContentTesting.Pipelines.InsertRenderings.GetLatestTestingItem, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<processor type="Sitecore.Pipelines.InsertRenderings.Processors.AddPageDesignerRenderings, Sitecore.Kernel, Version=6, Culture=neutral"/>
<processor type="Sitecore.Pipelines.InsertRenderings.Processors.AddRenderings, Sitecore.Kernel"/>
<processor type="Sitecore.ContentTesting.Pipelines.InsertRenderings.Testing, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<processor type="Sitecore.Pipelines.InsertRenderings.Processors.EvaluateConditions, Sitecore.Kernel"/>
<processor type="Sitecore.Analytics.Pipelines.InsertRenderings.Personalization, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.config"/>
</insertRenderings>
<job>
<processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="SignalStart"/>
<processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="SetPriority"/>
<processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="SetSecurity"/>
<processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="SetContextUser"/>
<processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="InitializeContext"/>
<processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="RunMethod"/>
<processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="ResetSecurity"/>
<processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="SignalEnd"/>
</job>
<publish help="Processors should derive from Sitecore.Publishing.Pipelines.Publish.PublishProcessor">
<!--
 This processor overrides the DisableDatabaseCaches and the MaxDegreeOfParallelism properties of the PublishContext class.

             The DisableDatabaseCaches property of the PublishContext is overridden and set to true if child items are being published,
             including when you perform a full site publish.
             If only a single item is being published, the property is set to false.
             If you disable this processor, the publish context uses the value of the Publishing.DisableDatabaseCaches setting for all the
             publishing operations.

             If only a single item is being published, the MaxDegreeOfParallelism property of the PublishContext is overridden to 1.
             This disables parallel publishing for single item publishing operations. 
-->
<processor type="Sitecore.Publishing.Pipelines.Publish.OverridePublishContext, Sitecore.Kernel"/>
<processor type="Sitecore.Publishing.Pipelines.Publish.AddLanguagesToQueue, Sitecore.Kernel"/>
<processor type="Sitecore.Publishing.Pipelines.Publish.AddItemsToQueue, Sitecore.Kernel"/>
<!--
 Extending publish pipeline to always add bucket folders to the queue when a bucketed item is being published  
-->
<processor type="Sitecore.Buckets.Pipelines.Publish.AddBucketFoldersToQueue, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<processor type="Sitecore.Publishing.Pipelines.Publish.RaiseQueuedEvents, Sitecore.Kernel">
<param type="Sitecore.Abstractions.BaseEventQueueProvider, Sitecore.Kernel" resolve="true"/>
</processor>
<processor type="Sitecore.Publishing.Pipelines.Publish.ProcessQueue, Sitecore.Kernel"/>
</publish>
<publishItem help="Processors should derive from Sitecore.Publishing.Pipelines.PublishItem.PublishItemProcessor">
<processor type="Sitecore.Publishing.Pipelines.PublishItem.RaiseProcessingEvent, Sitecore.Kernel"/>
<processor type="Sitecore.Publishing.Pipelines.PublishItem.CheckVirtualItem, Sitecore.Kernel"/>
<processor type="Sitecore.Publishing.Pipelines.PublishItem.CheckSecurity, Sitecore.Kernel"/>
<processor type="Sitecore.Publishing.Pipelines.PublishItem.DetermineAction, Sitecore.Kernel"/>
<processor type="Sitecore.Buckets.Pipelines.PublishItem.ProcessActionForBucketStructure, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<processor type="Sitecore.Publishing.Pipelines.PublishItem.MoveItems, Sitecore.Kernel"/>
<processor type="Sitecore.Publishing.Pipelines.PublishItem.PerformAction, Sitecore.Kernel"/>
<processor type="Sitecore.Publishing.Pipelines.PublishItem.AddItemReferences, Sitecore.Kernel"/>
<processor type="Sitecore.Publishing.Pipelines.PublishItem.RemoveUnknownChildren, Sitecore.Kernel"/>
<processor type="Sitecore.Publishing.Pipelines.PublishItem.RaiseProcessedEvent, Sitecore.Kernel" runIfAborted="true"/>
<processor type="Sitecore.Publishing.Pipelines.PublishItem.UpdateStatistics, Sitecore.Kernel" runIfAborted="true">
<traceToLog>false</traceToLog>
</processor>
</publishItem>
<publishVersion help="Processors should derive from Sitecore.Publishing.Pipelines.PublishItem.PublishVersionProcessor">
<processor type="Sitecore.ContentTesting.Pipelines.PublishVersion.PublishTestingVersions, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<processor type="Sitecore.Publishing.Pipelines.PublishVersion.Processors.RemoveOtherVersions, Sitecore.Kernel"/>
</publishVersion>
<getItemReferences>
<processor type="Sitecore.Publishing.Pipelines.GetItemReferences.AddItemCloneReferences, Sitecore.Kernel"/>
<processor type="Sitecore.Publishing.Pipelines.GetItemReferences.AddFileDropAreaMediaReferences, Sitecore.Kernel"/>
<processor type="Sitecore.Publishing.Pipelines.GetItemReferences.AddItemLinkReferences, Sitecore.Kernel"/>
<processor type="Sitecore.Publishing.Pipelines.GetItemReferences.AddItemAliasReferences, Sitecore.Kernel"/>
<processor type="Sitecore.Publishing.Pipelines.GetItemReferences.AddItemTemplateReferences, Sitecore.Kernel"/>
</getItemReferences>
<replaceItemReferences>
<processor type="Sitecore.Pipelines.ReplaceItemReferences.StartJob, Sitecore.Kernel"/>
</replaceItemReferences>
<renderLayout>
<processor type="Sitecore.Pipelines.PreprocessRequest.CheckIgnoreFlag, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderLayout.PageHandlers, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderLayout.SecurityCheck, Sitecore.Kernel"/>
<processor type="Sitecore.Analytics.Pipelines.HttpRequest.StartAnalytics, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.config"/>
<processor type="Sitecore.ContentTesting.Pipelines.RenderLayout.EvaluateTestExposure, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<processor type="Sitecore.ContentTesting.Pipelines.RenderLayout.PageLevelTestItemResolver, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<processor type="Sitecore.ContentTesting.Pipelines.RenderLayout.ContentTestDataSourceResolver, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<processor type="Sitecore.Pipelines.RenderLayout.InsertRenderings, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderLayout.PageExtenders, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderLayout.ExpandMasterPages, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderLayout.BuildTree, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderLayout.InsertSystemControls, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderLayout.InsertUnusedControls, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderLayout.BrowserCaching, Sitecore.Kernel"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.RenderLayout.StoreRenderingViewerData, Sitecore.ExperienceExplorer" resolve="true" patch:source="Sitecore.ExperienceExplorer.config"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.RenderLayout.InjectExplorerControl, Sitecore.ExperienceExplorer" resolve="true" patch:source="Sitecore.ExperienceExplorer.config"/>
</renderLayout>
<healthMonitor>
<processor type="Sitecore.Pipelines.HealthMonitor.HealthMonitor, Sitecore.Kernel" method="LogMemoryStatus"/>
<processor type="Sitecore.Pipelines.HealthMonitor.HealthMonitor, Sitecore.Kernel" method="LogCacheStatus"/>
<processor type="Sitecore.Pipelines.HealthMonitor.HealthMonitor, Sitecore.Kernel" method="LogCounterStatus">
<!--
 
          List of the system counters whose values should be written to the Sitecore log file by the Sitecore health monitor
          
          Supported attributes:
              category: The name of the performance counter category that this performance counter is associated with.
              name: The name of the performance counter that has an entry in the performance monitor.
              instanceType: The name of the performance counter category. 
              valueType: [raw|calculated]. This attribute is optional. If set to 'raw', the counter outputs the raw value from the performance counter. If set to 'calculated', the counter outputs the calculated value. If no attribute is set, the counter outputs the raw value from the performance counter.
        
-->
<counters hint="raw:AddCounter">
<counter name="Private Bytes" category="Process" instanceType="Windows"/>
<counter name="Virtual Bytes" category="Process" instanceType="Windows"/>
<counter name="Page File Bytes" category="Process" instanceType="Windows"/>
<counter name="# Bytes in all Heaps" category=".NET CLR Memory" instanceType="CLR"/>
<counter name="% Time in GC" category=".NET CLR Memory" instanceType="CLR"/>
<counter name="Large Object Heap size" category=".NET CLR Memory" instanceType="CLR"/>
<counter name="Bytes in Loader Heap" category=".NET CLR Loading" instanceType="CLR"/>
<counter name="Current Assemblies" category=".NET CLR Loading" instanceType="CLR"/>
</counters>
</processor>
<!--
 Dumps the information that the /sitecore/admin/cache.aspx page contains 
-->
<processor type="Sitecore.Pipelines.HealthMonitor.HealthMonitor, Sitecore.Kernel" method="DumpAllCacheStatus" patch:source="Sitecore.Diagnostics.config">
<dumpFile>
/App_Data/diagnostics/health_monitor/CacheStatus.{date}.{time}.html
</dumpFile>
</processor>
<!--
 Dumps the information that the /sitecore/admin/stats.aspx page contains 
-->
<processor type="Sitecore.Pipelines.HealthMonitor.HealthMonitor, Sitecore.Kernel" method="DumpRenderingsStatistics" patch:source="Sitecore.Diagnostics.config">
<dumpFile>
/App_Data/diagnostics/health_monitor/RenderingsStatistics.{date}.{time}.html
</dumpFile>
</processor>
</healthMonitor>
<!--
 SESSIOND END
           Performs cleanup on session end
      
-->
<sessionEnd>
<processor type="Sitecore.Analytics.Pipelines.SessionEnd.InitializeTracker, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.config"/>
<processor type="Sitecore.Analytics.Pipelines.SessionEnd.RaiseVisitEnd, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.config"/>
<processor type="Sitecore.ContentTesting.Pipelines.SessionEnd.CleanupPreservedWorkflowArgs, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.SessionEnd.CleanupExplorerStorage, Sitecore.ExperienceExplorer" resolve="true" patch:source="Sitecore.ExperienceExplorer.config"/>
<processor type="Sitecore.ExperienceForms.Analytics.Pipelines.SessionEnd.RegisterFormDropouts, Sitecore.ExperienceForms.Analytics" resolve="true" patch:source="Sitecore.ExperienceForms.Analytics.Tracking.config"/>
</sessionEnd>
<postSessionEnd>
<processor type="Sitecore.Analytics.Pipelines.PostSessionEnd.CommitSession, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.Database.config"/>
</postSessionEnd>
<getMediaStream>
<processor type="Sitecore.Resources.Media.SaveColorProfileProcessor, Sitecore.Kernel"/>
<processor type="Sitecore.Resources.Media.ThumbnailProcessor, Sitecore.Kernel"/>
<processor type="Sitecore.Resources.Media.ResizeProcessor, Sitecore.Kernel"/>
<processor type="Sitecore.Resources.Media.GrayscaleProcessor, Sitecore.Kernel"/>
<processor type="Sitecore.Resources.Media.RestoreColorProfileProcessor, Sitecore.Kernel"/>
</getMediaStream>
<getResponseCacheHeaders>
<processor type="Sitecore.Pipelines.GetResponseCacheHeaders.Processors.RequestTypeDetectionProcessor, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetResponseCacheHeaders.Processors.MediaRequestArgsInitializerProcessor, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetResponseCacheHeaders.Processors.PublishingProcessor, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetResponseCacheHeaders.Processors.SecurityProcessor, Sitecore.Kernel"/>
<processor type="Sitecore.Marketing.Definitions.MarketingAssets.Repositories.Pipelines.GetResponseCacheHeaders.MediaAssetProcessor, Sitecore.Marketing.Definitions.MarketingAssets.Repositories" patch:source="Sitecore.Marketing.Definitions.MarketingAssets.Repositories.config"/>
</getResponseCacheHeaders>
<getMediaUrlOptions>
<processor type="Sitecore.Pipelines.GetMediaUrlOptions.Processors.SiteModeProcessor, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetMediaUrlOptions.Processors.SecurityProcessor, Sitecore.Kernel"/>
<processor type="Sitecore.Marketing.Definitions.MarketingAssets.Repositories.Pipelines.GetMediaUrlOptions.MediaAssetProcessor, Sitecore.Marketing.Definitions.MarketingAssets.Repositories" patch:source="Sitecore.Marketing.Definitions.MarketingAssets.Repositories.config"/>
</getMediaUrlOptions>
<!--   Obsolete: use the getChromeData pipeline instead.  -->
<setupEditFrame/>
<!--
 TOKEN ENHANCEMENTS
           New resolvers for replacing the tokens for 
           $currentuser -> Returns the authenticated user name of the current user. 
           $allquery -> Returns a default query that lists all items i.e. text=*.
           $allmyworkflowitems -> Returns a default query that lists all of the current user's items that are in a workflow.
      
-->
<expandInitialFieldValue help="Processors should derive from Sitecore.Pipelines.ExpandInitialFieldValue.ExpandInitialFieldValueProcessor" patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Pipelines.ExpandInitialFieldValue.SkipStandardValueItems, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ExpandInitialFieldValue.CheckSharedField, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ExpandInitialFieldValue.ReplaceVariables, Sitecore.Kernel"/>
<processor type="Sitecore.Buckets.Util.TokenReplacer, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
</expandInitialFieldValue>
<expandBranchItemName>
<processor type="Sitecore.Pipelines.ExpandBranchItemName.ReplaceVariables, Sitecore.Kernel"/>
</expandBranchItemName>
<convertToDesignTimeHtml>
<processor type="Sitecore.Pipelines.ConvertToDesignTimeHtml.PrepareHtml, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ConvertToDesignTimeHtml.ConvertWebControls, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ConvertToDesignTimeHtml.FixBullets, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ConvertToDesignTimeHtml.FinalizeHtml, Sitecore.Kernel"/>
</convertToDesignTimeHtml>
<convertToRuntimeHtml>
<processor type="Sitecore.Pipelines.ConvertToRuntimeHtml.PrepareHtml, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ConvertToRuntimeHtml.ShortenLinks, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ConvertToRuntimeHtml.SetImageSizes, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ConvertToRuntimeHtml.ConvertWebControls, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ConvertToRuntimeHtml.FixBullets, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ConvertToRuntimeHtml.FinalizeHtml, Sitecore.Kernel"/>
</convertToRuntimeHtml>
<fixXHtml>
<processor type="Sitecore.Pipelines.FixXHtml.PrepareHtml, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.FixXHtml.ConvertToXHtml, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.FixXHtml.CheckSchema, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.FixXHtml.RemoveEmptySpans, Sitecore.Kernel"/>
</fixXHtml>
<renderItemTile>
<processor type="Sitecore.Pipelines.RenderItemTile.RenderFolderTile, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderItemTile.RenderTemplateTile, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderItemTile.RenderPlaceholderTile, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderItemTile.RenderDefaultTile, Sitecore.Kernel"/>
</renderItemTile>
<getAboutInformation/>
<getMediaCreatorOptions/>
<!--
 EXTENDED TEMPLATE FIELD SOURCE RESOLVERS 
           This allows the custom Template Field sources to be resolved. 
      
-->
<getLookupSourceItems>
<processor type="Sitecore.Buckets.FieldTypes.CustomDataSource, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<processor type="Sitecore.Pipelines.GetLookupSourceItems.ProcessQuerySource, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetLookupSourceItems.ProcessDefaultSource, Sitecore.Kernel"/>
</getLookupSourceItems>
<getPagePreviewUrl>
<processor type="Sitecore.Pipelines.GetPagePreviewUrl.GetDefaultUrlOptions, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetPagePreviewUrl.SetLanguage, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetPagePreviewUrl.GetUrl, Sitecore.Kernel"/>
</getPagePreviewUrl>
<getRenderingPreview>
<processor type="Sitecore.Pipelines.GetRenderingPreview.GetXslRenderingPreview,Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetRenderingPreview.TryRenderControl,Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetRenderingPreview.GetRenderingPreviewField,Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetRenderingPreview.GetDefaultRenderingPreview,Sitecore.Kernel"/>
</getRenderingPreview>
<getContentEditorFields>
<processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.GetContentEditorFields.GetFields, Sitecore.Client"/>
<processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.GetContentEditorFields.GetExplicitFields, Sitecore.Client"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.RemoveDuplicatedDataSources, Sitecore.EmailCampaign" patch:source="Sitecore.EmailExperience.Core.config"/>
</getContentEditorFields>
<getContentEditorSkin>
<processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.GetContentEditorSkin.ShowStandardFields, Sitecore.Client"/>
<processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.GetContentEditorSkin.BuildSkin, Sitecore.Client"/>
</getContentEditorSkin>
<!--
 EXTENDED GETCONTENTEDITORWARNINGS PIPELINE
           This allows for warnings related to item buckets
      
-->
<getContentEditorWarnings>
<processor type="Sitecore.Pipelines.GetContentEditorWarnings.ItemNotFound, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetContentEditorWarnings.CanReadLanguage, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetContentEditorWarnings.HasNoVersions, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetContentEditorWarnings.CanWrite, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetContentEditorWarnings.CanWriteWorkflow, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetContentEditorWarnings.CanWriteLanguage, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetContentEditorWarnings.IsReadOnly, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetContentEditorWarnings.IsLocked, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetContentEditorWarnings.HasNoFields, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetContentEditorWarnings.NeverPublish, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetContentEditorWarnings.ItemPublishingRestricted, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetContentEditorWarnings.VersionPublishingRestricted, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetContentEditorWarnings.ShowingInputBoxes, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetContentEditorWarnings.FeedIsEmpty, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetContentEditorWarnings.RunRules, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetContentEditorWarnings.Notifications, Sitecore.Kernel"/>
<processor type="Sitecore.Buckets.Pipelines.GetContentEditorWarnings.StructuredItemInBucket, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<processor type="Sitecore.Analytics.Pipelines.GetContentEditorWarnings.MissingMarketingProfiles, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.config"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetContentEditorWarnings.GetContentTestingWarnings, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<processor type="Sitecore.PathAnalyzer.Client.Pipelines.GetContentEditorWarnings.MapStatus, Sitecore.PathAnalyzer.Client" patch:source="Sitecore.PathAnalyzer.Client.config"/>
</getContentEditorWarnings>
<!--
 Allows to manipulate the way how an item field value is retrieved.
         Note: Extending the pipeline by unoptimized code might introduce huge performance penalty. 
-->
<!--
  Extending the getFieldValue pipeline allows to enable the field based language fallback functionality 
-->
<getFieldValue performanceCritical="true">
<processor type="Sitecore.Pipelines.GetFieldValue.GetInheritedValue, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetFieldValue.IsValidForLanguageFallback, Sitecore.Kernel" patch:source="Sitecore.LanguageFallback.config"/>
<processor type="Sitecore.Pipelines.GetFieldValue.GetLanguageFallbackValue, Sitecore.Kernel" patch:source="Sitecore.LanguageFallback.config"/>
<processor type="Sitecore.Pipelines.GetFieldValue.GetStandardValue, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetFieldValue.GetLanguageFallbackStandardValue, Sitecore.Kernel" patch:source="Sitecore.LanguageFallback.config"/>
<processor type="Sitecore.Pipelines.GetFieldValue.GetDefaultValue, Sitecore.Kernel"/>
</getFieldValue>
<getFieldLabel>
<processor type="Sitecore.Pipelines.GetFieldLabel.ResolveFieldLabel, Sitecore.Kernel"/>
</getFieldLabel>
<getRenderedRuleElements>
<processor type="Sitecore.Pipelines.Rules.Taxonomy.GetContextFolder, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.Rules.Taxonomy.GetTags, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.Rules.Taxonomy.GetElementFolders, Sitecore.Kernel"/>
</getRenderedRuleElements>
<!--
  Controls which fields should be used as the source for the layout field value.
            Processors must accept a single argument of type GetLayoutSourceFieldsArgs (namespace: Sitecore.Pipelines.GetLayoutSourceFields). 
-->
<getLayoutSourceFields>
<processor type="Sitecore.Pipelines.GetLayoutSourceFields.GetFinalLayoutField, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetLayoutSourceFields.GetLayoutField, Sitecore.Kernel"/>
<processor type="Sitecore.ExperienceEditor.Speak.Ribbon.Pipelines.GetLayoutSourceFields.SetLayoutRenderings, Sitecore.ExperienceEditor.Speak.Ribbon" patch:source="Sitecore.ExperienceEditor.config"/>
</getLayoutSourceFields>
<!--
 Supports the "Add Rendering" dialog by determining renderings allowed for a placeholder. 
-->
<getPlaceholderRenderings>
<processor type="Sitecore.Pipelines.GetPlaceholderRenderings.GetAllowedRenderings, Sitecore.Kernel"/>
<!--
 Ensures that the 'HasPlaceholderSettings' flag is enabled for FXM Template types. 
-->
<processor type="Sitecore.FXM.Pipelines.Rendering.EnableExternalPagePlaceholdersProcessor, Sitecore.FXM" resolve="true" patch:source="Sitecore.FXM.config"/>
<processor type="Sitecore.Pipelines.GetPlaceholderRenderings.GetPredefinedRenderings, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetPlaceholderRenderings.RemoveNonEditableRenderings, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetPlaceholderRenderings.GetPlaceholderRenderingsDialogUrl, Sitecore.Kernel"/>
</getPlaceholderRenderings>
<!--
 Allows to modify a placeholder key which is processed in the getPlaceholderRenderings pipeline
         Processors should inherit Sitecore.Pipelines.NormalizePlaceholderKey.NormalizePlaceholderKeyProcessor class
    
-->
<!--  Normalize Placeholder Key -->
<normalizePlaceholderKey>
<processor type="Sitecore.Mvc.Pipelines.NormalizePlaceholderKey.ReplaceDynamicPlaceholderKey, Sitecore.Mvc" patch:source="Sitecore.Mvc.config"/>
</normalizePlaceholderKey>
<!--
  Allows developers to programmatically disable or hide any button or panel in the Content Editor ribbons 
            without overriding the individual commands. 
            Processors must accept a single argument of type GetQueryStateArgs (namespace: Sitecore.Pipelines.GetQueryState)  
-->
<getQueryState>
<processor type="Sitecore.ContentSearch.Pipelines.GetQueryState.CommandStateProcessor, Sitecore.ContentSearch" patch:source="Sitecore.ContentSearch.config"/>
<processor type="Sitecore.Buckets.Pipelines.GetQueryState.CommandStateProcessor, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.EcmApplicationButtonsState, Sitecore.EmailCampaign" resolve="true" patch:source="Sitecore.EmailExperience.UI.config"/>
</getQueryState>
<getSyndicationWarnings>
<processor type="Sitecore.Pipelines.GetSyndicationWarnings.IsReadOnly, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetSyndicationWarnings.IsLocked, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetSyndicationWarnings.CantWrite, Sitecore.Kernel"/>
</getSyndicationWarnings>
<!--
  Controls Page Editor features for placeholders, fields, edit frames, sublayouts and renderings. 
-->
<getChromeData>
<processor type="Sitecore.Pipelines.GetChromeData.Setup, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetChromeData.GetFieldChromeData, Sitecore.Kernel"/>
<processor type="Sitecore.ExperienceEditor.Pipelines.GetChromeData.InitializeChromeFieldDisplayName, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<processor type="Sitecore.Pipelines.GetChromeData.GetWordFieldChromeData, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetChromeData.GetRenderingChromeData, Sitecore.Kernel"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetChromeData.GetOptimizationRenderingChromeData, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetChromeData.GetRenderingTestVariations, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<processor type="Sitecore.Pipelines.GetChromeData.GetEditFrameChromeData, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetChromeData.GetPlaceholderChromeData, Sitecore.Kernel"/>
<!--  Add to chrome data pipeline  -->
<processor type="Sitecore.FXM.Client.Pipelines.ExperienceEditor.GetChromeData.GetSelectorsChromeData, Sitecore.FXM.Client" patch:source="Sitecore.FXM.config"/>
<processor type="Sitecore.FXM.Client.Pipelines.ExperienceEditor.GetChromeData.GetPlaceholdersChromeData, Sitecore.FXM.Client" patch:source="Sitecore.FXM.config"/>
<processor type="Sitecore.FXM.Client.Pipelines.ExperienceEditor.GetChromeData.GetClientActionsChromeData, Sitecore.FXM.Client" patch:source="Sitecore.FXM.config"/>
</getChromeData>
<!--
  Supports the "Select a Datasource" dialog used to configure the data source of a presentation component. 
-->
<getRenderingDatasource>
<processor type="Sitecore.Pipelines.GetRenderingDatasource.GetDatasourceLocation, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetRenderingDatasource.SetFallbackDatasourceLocations, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetRenderingDatasource.GetDatasourceTemplate, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetRenderingDatasource.GetTemplatesForSelection, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetRenderingDatasource.CheckDialogState, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetRenderingDatasource.GetDialogUrl, Sitecore.Kernel"/>
<!--  Assigns Datasource template to URL  -->
<processor type="Sitecore.Buckets.Pipelines.GetRenderingDatasource.AssignDatasourceTemplate, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
</getRenderingDatasource>
<!--
  Allows developers to override the default logic for resolving the data source for renderings. 
-->
<resolveRenderingDatasource/>
<!--
  Is used by the Personalize the Component and Test the Component dialog boxes. The pipeline returns examples of the items that are returned by a datasource. 
-->
<!--
 This allows the pipeline to return examples of the items that are returned by search-based datasources. 
-->
<getDatasourceExamples>
<processor type="Sitecore.Pipelines.GetDatasourceExamples.GetIDBasedDatasourceExample, Sitecore.Kernel"/>
<processor type="Sitecore.Buckets.Pipelines.GetDatasourceExamples.GetSearchBasedDatasourceExamples, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
</getDatasourceExamples>
<getWorkflowCommentsDisplay help="Processors must accept PipelineArgs of type Sitecore.Pipelines.GetWorkflowCommentsDisplay.GetWorkflowCommentsDisplayArgs">
<processor type="Sitecore.Pipelines.GetWorkflowCommentsDisplay.ExtractFields, Sitecore.Kernel" singleInstance="false">
<Fields hint="list:AddField">
<Comments>Comments</Comments>
</Fields>
</processor>
</getWorkflowCommentsDisplay>
<!--  Gets collection of Data Source items from string  -->
<parseDataSource>
<processor type="Sitecore.Pipelines.ParseDataSource.GetDataSourceItemByIdOrPath, Sitecore.Kernel"/>
<processor type="Sitecore.ContentSearch.Client.Pipelines.ParseDataSource.GetDataSourceItemByQuery, Sitecore.ContentSearch.Client" patch:source="Sitecore.ContentSearch.config"/>
</parseDataSource>
<renderContentEditor>
<processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditor.RenderSkinedContentEditor, Sitecore.Client"/>
<processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditor.RenderStandardContentEditor, Sitecore.Client"/>
</renderContentEditor>
<renderContentEditorHeader>
<processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditorHeader.AddItemIcon, Sitecore.Client"/>
<processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditorHeader.AddTitle, Sitecore.Client"/>
<processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditorHeader.AddProfileCards, Sitecore.Xdb.Tracking.Client" patch:source="Sitecore.Analytics.Tracking.config"/>
</renderContentEditorHeader>
<search>
<processor type="Sitecore.Pipelines.Search.IDResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.Search.PathResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.Search.UrlResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.Search.SecurityResolver, Sitecore.Kernel"/>
<!--
 EXTEND SEARCH PIPELINE
             This processor executes search expressions that use the Sitecore.ContentSearch indexes when the Search.UseLegacySearchEngine setting is set to false.
        
-->
<processor type="Sitecore.ContentSearch.Client.Pipelines.Search.SearchContentSearchIndex, Sitecore.ContentSearch.Client" patch:source="Sitecore.ContentSearch.config"/>
<processor type="Sitecore.Pipelines.Search.DatabaseResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.Search.CategorizeResults, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.Search.AddInstantOptions, Sitecore.Kernel"/>
</search>
<!--
 Item filtering. Used for publishing items on the fly when a web site runs in live mode. 
-->
<filterItem>
<processor type="Sitecore.Pipelines.FilterItem.CheckIfFilteringIsActive, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.FilterItem.DisableApprovedVersionFiltering, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.FilterItem.GetPublishedVersionOfItem, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.FilterItem.EnsureFilteredItem, Sitecore.Kernel"/>
</filterItem>
<word.parseDocx>
<processor type="Sitecore.Pipelines.ParseDocx.ConvertToXHtml, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ParseDocx.ExtractEmbeddedImages, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ParseDocx.FixImageLinks, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ParseDocx.FixStyles, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ParseDocx.FixLinks, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ParseDocx.RemoveJavascript, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ParseDocx.SetFieldValue, Sitecore.Kernel"/>
</word.parseDocx>
<word.renderHtml>
<processor type="Sitecore.Pipelines.RenderDocx.GetHtmlFromField, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.RenderDocx.ExpandLinks, Sitecore.Kernel"/>
</word.renderHtml>
<!--
 Transforms markup from rich text fields before the Rich Text Editor loads it. 
-->
<loadRichTextContent/>
<!--
 Transforms markup from the Rich Text Editor before saving it as a rich text field value. 
-->
<saveRichTextContent>
<processor type="Sitecore.Shell.Controls.RichTextEditor.Pipelines.SaveRichTextContent.ProtectExternalLink, Sitecore.Client"/>
</saveRichTextContent>
<findVisitorEmailAddress>
<processor type="Sitecore.Analytics.Pipelines.FindVisitorEmailAddress.FindContactEmailAddress, Sitecore.Analytics" method="FindEmailInUserName" patch:source="Sitecore.Analytics.Tracking.config"/>
<processor type="Sitecore.Pipelines.GetVisitorEmailAddress.FindContactEmailAddress, Sitecore.Kernel" method="FindEmailInUserProfile"/>
<processor type="Sitecore.Analytics.Pipelines.FindVisitorEmailAddress.FindContactEmailAddress, Sitecore.Analytics" method="FindEmailInTags" patch:source="Sitecore.Analytics.Tracking.config"/>
</findVisitorEmailAddress>
<!--
 Performs dictionary lookups. The Sitecore.Globalization.Translate.Text() method invokes this pipeline. 
-->
<getTranslation>
<processor type="Sitecore.Pipelines.GetTranslation.ResolveContentDatabase, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetTranslation.TryGetFromDomain, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetTranslation.TryGetFromFallbackDomains, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetTranslation.TryGetFromSiteDomain, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetTranslation.TryGetFromContextDatabase, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetTranslation.TryGetFromCoreDatabase, Sitecore.Kernel"/>
</getTranslation>
<!--
 Prepares a proposed list of renderings when copying one device presentation to another 
-->
<proposeCopyDevice>
<processor type="Sitecore.Pipelines.ProposeCopyDevice.CopyFromSource, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ProposeCopyDevice.PreserveMvTests, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ProposeCopyDevice.PreservePersonalizationTests, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ProposeCopyDevice.SourceMvTests, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ProposeCopyDevice.SourcePersonalizationTests, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ProposeCopyDevice.TargetMvTests, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.ProposeCopyDevice.TargetPersonalizationTests, Sitecore.Kernel"/>
</proposeCopyDevice>
<!--
 Render the "afterAction" placeholder for the rules editor 
-->
<renderRulePlaceholder.afterAction>
<!--
 Processor to display reach (exposure) for rule in rules editor 
-->
<processor type="Sitecore.ContentTesting.Pipelines.RenderRulePlaceholder.AfterAction.Reach, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Client.RulePerformance.config"/>
<!--
 Processor to display effect of the rule in the rules editor 
-->
<processor type="Sitecore.ContentTesting.Pipelines.RenderRulePlaceholder.AfterAction.Effect, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Client.RulePerformance.config"/>
</renderRulePlaceholder.afterAction>
<!--  Render a rendering in the device editor  -->
<renderDeviceEditorRendering>
<processor type="Sitecore.ContentTesting.Pipelines.RenderDeviceEditorRendering.ComponentTestIndicator, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
</renderDeviceEditorRendering>
<!--  Render a rendering on the layout grid  -->
<renderLayoutGridRendering>
<processor type="Sitecore.ContentTesting.Pipelines.RenderLayoutGridRendering.ComponentTestIndicator, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
</renderLayoutGridRendering>
<handlePageNotFound>
<processor type="Sitecore.Analytics.Pipelines.HandlePageNotFound.RegisterPageNotFoundProcessor, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.config"/>
</handlePageNotFound>
<!--
 Actions to run when general page errors are being handled, such as no layout and no access 
-->
<handlePageError>
<processor type="Sitecore.Analytics.Pipelines.HandlePageError.RegisterPageErrorProcessor, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.config"/>
</handlePageError>
<!--
 If requested item does not have any version, this processor allows to retrieve the item that has at least one version in the fallback language 
-->
<group name="itemProvider" groupName="itemProvider" patch:source="Sitecore.ContentTesting.config">
<pipelines>
<addFromTemplate help="Processors should derive from Sitecore.Pipelines.ItemProvider.AddFromTemplate.AddFromTemplateProcessor."/>
<addVersion help="Processors should derive from Sitecore.Pipelines.ItemProvider.AddVersion.AddVersionProcessor."/>
<blobStreamExists help="Processors should derive from Sitecore.Pipelines.ItemProvider.BlobStreamExists.BlobStreamExistsProcessor."/>
<copyItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.CopyItem.CopyItemProcessor." patch:source="Sitecore.PipelineBased.ItemProvider.config">
<processor type="Sitecore.Pipelines.ItemProvider.CopyItem.EnsureAllowedToCopy, Sitecore.Kernel" patch:source="Sitecore.PipelineBased.ItemProvider.config"/>
<processor type="Sitecore.Pipelines.ItemProvider.CopyItem.PerformCopy, Sitecore.Kernel" resolve="true" patch:source="Sitecore.PipelineBased.ItemProvider.config"/>
<processor type="Sitecore.Pipelines.ItemProvider.CopyItem.ApplySecurity, Sitecore.Kernel" patch:source="Sitecore.PipelineBased.ItemProvider.config"/>
</copyItem>
<createItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.CreateItem.CreateItemProcessor."/>
<deleteItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.DeleteItem.DeleteItemProcessor."/>
<getBlobStream help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetBlobStream.GetBlobStreamProcessor."/>
<getChildren help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetChildren.GetChildrenProcessor."/>
<getContentLanguages help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetContentLanguages.GetContentLanguagesProcessor."/>
<getItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetItem.GetItemProcessor.">
<!--
 Returns null if item does not have any version in requested language. 
-->
<processor type="Sitecore.Pipelines.ItemProvider.GetItem.GetLanguageFallbackItem, Sitecore.Kernel" patch:source="Sitecore.LanguageFallback.config"/>
<processor type="Sitecore.Pipelines.ItemProvider.GetItem.EnforceVersionPresence, Sitecore.Kernel"/>
<processor type="Sitecore.ContentTesting.Pipelines.ItemProvider.GetItem.GetItemUnderTestProcessor, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
</getItem>
<getParent help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetParent.GetParentProcessor."/>
<getRootItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetRootItem.GetRootItemProcessor."/>
<getVersions help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetVersions.GetVersionsProcessor.">
<processor type="Sitecore.Pipelines.ItemProvider.GetVersions.GetLanguageFallbackItemVersions, Sitecore.Kernel" patch:source="Sitecore.LanguageFallback.config"/>
</getVersions>
<hasChildren help="Processors should derive from Sitecore.Pipelines.ItemProvider.HasChildren.HasChildrenProcessor."/>
<moveItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.MoveItem.MoveItemProcessor."/>
<removeBlobStream help="Processors should derive from Sitecore.Pipelines.ItemProvider.RemoveBlobStream.RemoveBlobStreamProcessor."/>
<removeData help="Processors should derive from Sitecore.Pipelines.ItemProvider.RemoveData.RemoveDataProcessor."/>
<removeVersion help="Processors should derive from Sitecore.Pipelines.ItemProvider.RemoveVersion.RemoveVersionProcessor."/>
<removeVersions help="Processors should derive from Sitecore.Pipelines.ItemProvider.RemoveVersions.RemoveVersionsProcessor."/>
<resolvePath help="Processors should derive from Sitecore.Pipelines.ItemProvider.ResolvePath.ResolvePathProcessor."/>
<saveItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.SaveItem.SaveItemProcessor." patch:source="Sitecore.PipelineBased.ItemProvider.config">
<processor type="Sitecore.Pipelines.ItemProvider.SaveItem.SkipIfNoModifications, Sitecore.Kernel" patch:source="Sitecore.PipelineBased.ItemProvider.config"/>
<processor type="Sitecore.Pipelines.ItemProvider.SaveItem.ValidateCloneSourceModifications, Sitecore.Kernel" resolve="true" patch:source="Sitecore.PipelineBased.ItemProvider.config"/>
<processor type="Sitecore.Pipelines.ItemProvider.SaveItem.EnsureVersionExists, Sitecore.Kernel" resolve="true" patch:source="Sitecore.PipelineBased.ItemProvider.config"/>
<processor type="Sitecore.Pipelines.ItemProvider.SaveItem.TriggerDataEngine, Sitecore.Kernel" patch:source="Sitecore.PipelineBased.ItemProvider.config"/>
<processor type="Sitecore.Pipelines.ItemProvider.SaveItem.UpdateDependantRevisions, Sitecore.Kernel" resolve="true" patch:source="Sitecore.PipelineBased.ItemProvider.config"/>
<processor type="Sitecore.Pipelines.ItemProvider.SaveItem.ReloadItem, Sitecore.Kernel" patch:source="Sitecore.PipelineBased.ItemProvider.config"/>
</saveItem>
<setBlobStream help="Processors should derive from Sitecore.Pipelines.ItemProvider.SetBlobStream.SetBlobStreamProcessor."/>
</pipelines>
</group>
<getFileIcon>
<processor type="Sitecore.Pipelines.GetFileIcon.Processors.GetIconFromSystemFileAssociation, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetFileIcon.Processors.GetIconFromMediaTypeConfiguration, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetFileIcon.Processors.GetIconFromItem, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetFileIcon.Processors.GetDefaultIcon, Sitecore.Kernel"/>
</getFileIcon>
<!--
 Retrieves data to generate sign-in links for a particular site. 
-->
<getSignInUrlInfo help="Processors should derive from Sitecore.Pipelines.GetSignInUrlInfo.GetSignInUrlInfoProcessor.">
<processor type="Sitecore.Owin.Authentication.Pipelines.GetSignInUrlInfo.GetExternalSignInUrlInfo, Sitecore.Owin.Authentication" resolve="true" patch:source="Sitecore.Owin.Authentication.config"/>
</getSignInUrlInfo>
<!--
 Retrieves a url to redirect a user after successful log in. 
-->
<getStartUrl help="Processors should derive from Sitecore.Pipelines.GetStartUrlGetStartUrlProcessor.">
<processor type="Sitecore.Pipelines.GetStartUrl.GetStartUrlFromQueryString, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.GetStartUrl.GetStartUrlFromUserProfile, Sitecore.Kernel"/>
<processor type="Sitecore.LaunchPad.Pipelines.GetStartUrl.LaunchPadStartUrl, Sitecore.LaunchPad" patch:source="Sitecore.Speak.LaunchPad.config"/>
<processor type="Sitecore.Pipelines.GetStartUrl.GetStartUrlFromSite, Sitecore.Kernel" resolve="true"/>
<processor type="Sitecore.Pipelines.GetStartUrl.ValidateStartUrl, Sitecore.Kernel" resolve="true"/>
<processor type="Sitecore.Pipelines.GetStartUrl.AppendClientLanguageParameter, Sitecore.Kernel" resolve="true"/>
</getStartUrl>
<!--  WebDAV feature pipelines.  -->
<group name="WebDAV" groupName="WebDAV" patch:source="Sitecore.WebDAV.config">
<pipelines>
<autogenerateVersions>
<processor type="Sitecore.Pipelines.WebDAV.Processors.DefaultAutogenerateVersionsResolver, Sitecore.Kernel"/>
</autogenerateVersions>
<resolveDatabase>
<processor type="Sitecore.Pipelines.WebDAV.Processors.OptionsDatabaseResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.WebDAV.Processors.DefaultDatabaseResolver, Sitecore.Kernel"/>
</resolveDatabase>
<resolveRootItem>
<processor type="Sitecore.Pipelines.WebDAV.Processors.DefaultRootItemResolver, Sitecore.Kernel"/>
</resolveRootItem>
<updateProperties>
<processor type="Sitecore.Pipelines.WebDAV.Processors.DefaultUpdatePropertiesHandler, Sitecore.Kernel"/>
</updateProperties>
<getProperties>
<processor type="Sitecore.Pipelines.WebDAV.Processors.DefaultPropertiesResolver, Sitecore.Kernel">
<supportedProperties hint="raw:AddPropertyMapping">
<map name="ItemID" value="$!item.ID.ToString()"/>
</supportedProperties>
</processor>
</getProperties>
<validateOperation>
<processor type="Sitecore.Pipelines.WebDAV.Processors.ReadOnlyModeValidator, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.WebDAV.Processors.DefaultOperationValidator, Sitecore.Kernel"/>
</validateOperation>
<resolveMode>
<processor type="Sitecore.Pipelines.WebDAV.Processors.OptionsWebDAVModeResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.WebDAV.Processors.DefaultModeResolver, Sitecore.Kernel"/>
</resolveMode>
<resolveUser>
<processor type="Sitecore.Pipelines.WebDAV.Processors.OptionsUserResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.WebDAV.Processors.DefaultUserResolver, Sitecore.Kernel"/>
</resolveUser>
<resolveView>
<processor type="Sitecore.Pipelines.WebDAV.Processors.OptionsViewResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.WebDAV.Processors.UserOptionsViewResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.WebDAV.Processors.DefaultViewResolver, Sitecore.Kernel"/>
</resolveView>
<resolveSite>
<processor type="Sitecore.Pipelines.WebDAV.Processors.OptionsSiteResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.WebDAV.Processors.DefaultSiteResolver, Sitecore.Kernel"/>
</resolveSite>
<requireAuthentication>
<processor type="Sitecore.Pipelines.WebDAV.Processors.RequestRequireauthenticationResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.WebDAV.Processors.OptionsRequireAuthenticationResolver, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.WebDAV.Processors.DefaultRequireAuthenticationResolver, Sitecore.Kernel"/>
</requireAuthentication>
<resolveWebDAVState>
<processor type="Sitecore.Pipelines.WebDAV.Processors.DefaultResolveWebDAVState, Sitecore.Kernel"/>
</resolveWebDAVState>
<associateUsernameWithLink>
<processor type="Sitecore.Pipelines.WebDAV.Processors.UseLinkBasedOnOS, Sitecore.Kernel"/>
<processor type="Sitecore.Pipelines.WebDAV.Processors.UseDefaultLinkSetting, Sitecore.Kernel"/>
</associateUsernameWithLink>
<supportWebDAVUrl>
<processor type="Sitecore.Pipelines.WebDAV.Processors.DefaultSupportWebDAVUrlResolver, Sitecore.Kernel"/>
</supportWebDAVUrl>
</pipelines>
</group>
<!--
 CONTENT SEARCH STRIP QUERY STRING PARAMETERS
           This pipeline strips out parts of a URL request before it is resolved. This is useful for removing parts of the URL that the
           LINQ layer does not need to know about e.g. IndexShardName or QueryType.
           Arguments    : (IEnumberable<SearchStringModel>) The UI Query wrapped up in strongly typed objects.
           Example Usage:If you send a direct http request to the search handler (Search.ashx) that contains query string parameters e.g. shard = 1, 
           this is processed by the full query pipeline. You can use the stripQueryStringParameters pipeline to remove any unnecessary parameters that 
           you don't want the Linq Layer to process.

      
-->
<contentSearch.stripQueryStringParameters patch:source="Sitecore.ContentSearch.config">
<processor type="Sitecore.ContentSearch.Pipelines.StripQueryStringParameters.StripQueries, Sitecore.ContentSearch"/>
<processor type="Sitecore.ContentSearch.Pipelines.StripQueryStringParameters.RemoveEmptySearches, Sitecore.ContentSearch"/>
</contentSearch.stripQueryStringParameters>
<!--
 CONTENT SEARCH GET CONTEXT INDEX
           This pipeline retrieves the index that should be queried based on the context item or the location that the search
           was initiated from.
           Arguments    : (Item) The item used to determine the context index.
           Example Usage: If you need some custom logic to determine which index should be queried and written to based on the context item, 
                          you can create it here. For example, if the context item contains a field that links to another item that determines the context index.
      
-->
<contentSearch.getContextIndex patch:source="Sitecore.ContentSearch.config">
<processor type="Sitecore.ContentSearch.Pipelines.GetContextIndex.FetchIndex, Sitecore.ContentSearch"/>
</contentSearch.getContextIndex>
<!--
 CONTENT SEARCH GET GLOBAL SEARCH FILTERS
           This pipeline sets the global search filters for every query that is run through the UI.
           Example: You don't want anyone to be able to globally search for a particular template.
           Arguments    : (IQueryable) An open session to the index.
           Example Usage: If you want every query that goes through the UI to use a filter, such as Security, or Templates, place this filter here. 
           Best Practice: 
           The Filter predicate is a good replacement for the Where predicate, when the predicate in the Where statement is repeated in a lot of your code. 
           For example, if you find that your code is always putting the same Where predicate in all your LINQ statements, the Filter predicate is a good replacement.
           When you build your predicates for IQueryable, use the Filter predicate instead of e.g. the Where predicate.
           The Filter predicate caches itself in memory and the Search Provider does not have to keep re-running this part of the query.
           This results in search queries that consistently take the same time to run.
      
-->
<contentSearch.getGlobalSearchFilters patch:source="Sitecore.ContentSearch.config">
<processor type="Sitecore.ContentSearch.Pipelines.GetGlobalFilters.ApplyGlobalFilters, Sitecore.ContentSearch"/>
</contentSearch.getGlobalSearchFilters>
<!--
 GET GLOBAL LINQ FILTERS
           This pipeline allows you to apply global search filters to every query that is executed through the Linq layer or the search UI.
           For example, this pipeline could be used to apply a filter that globally limits search results based on security or templates.
           Arguments: (object) Query, (Type) QueryElementType, (List<IExecutionContext>) ExecutionContext
      
-->
<contentSearch.getGlobalLinqFilters patch:source="Sitecore.ContentSearch.config">
<processor type="Sitecore.ContentSearch.Pipelines.QueryGlobalFilters.ApplyGlobalLinqFilters, Sitecore.ContentSearch"/>
</contentSearch.getGlobalLinqFilters>
<!--
 CONTENT SEARCH GET FACETS
           This pipeline pre-processes facets.
           Arguments : (IDictionary<string, ICollection<KeyValuePair<string, int>>>) Facet values
      
-->
<contentSearch.getFacets patch:source="Sitecore.ContentSearch.config">
<processor type="Sitecore.ContentSearch.Pipelines.GetFacets.FacetsPreProcessing, Sitecore.ContentSearch"/>
</contentSearch.getFacets>
<!--
 CONTENT SEARCH PROCESS FACETS
           This pipeline post processes facets.
           Arguments : (IDictionary<string, ICollection<KeyValuePair<string, int>>>) Facet values
      
-->
<contentSearch.processFacets patch:source="Sitecore.ContentSearch.config">
<processor type="Sitecore.ContentSearch.Pipelines.ProcessFacets.FacetsPostProcessing, Sitecore.ContentSearch"/>
</contentSearch.processFacets>
<!--
 CONTENT SEARCH QUERY WARMUP
           This pipeline runs search queries that warm up the index caches when Sitecore is initialized.
           Only enable this in a production environment.
           Arguments : (IQueryable) Open session to the search index.
      
-->
<contentSearch.queryWarmup patch:source="Sitecore.ContentSearch.config">
<processor type="Sitecore.ContentSearch.Pipelines.QueryWarmups.RunQueries, Sitecore.ContentSearch"/>
</contentSearch.queryWarmup>
<!--
 CONTENT SEARCH TRANSLATE QUERY
           This pipeline takes a search query and manipulates the search terms before passing it to the Linq layer.
           Example usage: When the Solr search provider runs date searches, it must use a different format than Lucene. If other providers are integrated,
                          this gives the ability to modify field names, values, and boolean operations before translation to the Linq layer.
      
-->
<contentSearch.translateQuery patch:source="Sitecore.ContentSearch.config">
<processor type="Sitecore.ContentSearch.Pipelines.TranslateQuery.ApplySitecoreContextResolvers, Sitecore.ContentSearch"/>
<processor type="Sitecore.ContentSearch.Pipelines.TranslateQuery.ApplyProviderTranslation, Sitecore.ContentSearch"/>
<processor type="Sitecore.ContentSearch.SolrProvider.Pipelines.TranslateQuery.ApplySolrTranslation, Sitecore.ContentSearch.SolrProvider" patch:source="Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config"/>
</contentSearch.translateQuery>
<!--
 CONTENT SEARCH - CLEAN UP
           This pipeline allows you to modify the data of an IIndexable before the document builder processes it. For example, you can use
           this pipeline to de-duplicate, merge, or override data.
           Arguments : (IIndexable) The document being indexed, (IProviderUpdateContext) The open update context for the index, (bool) A flag
           that indicates if the IIndexable was modified during the process
      
-->
<contentSearch.cleanUp patch:source="Sitecore.ContentSearch.config">
<processor type="Sitecore.ContentSearch.Pipelines.CleanUp.ApplyCleanUp, Sitecore.ContentSearch"/>
</contentSearch.cleanUp>
<!--
 INDEXING REBUILD
           A special pipeline designed to be executed from the Index Manager dialog box. Reserved for system use only.
           Arguments : (ISearchIndex) The search index.
      
-->
<indexing.filterIndex.inbound patch:source="Sitecore.ContentSearch.config">
<processor type="Sitecore.ContentSearch.Pipelines.IndexingFilters.ApplyInboundIndexFilter, Sitecore.ContentSearch"/>
</indexing.filterIndex.inbound>
<!--
 INDEX OUTBOUND FILTER
           Pipeline designed to filter out items when they are retrieved from the index.
           By default this applies standard Sitecore item-level security restrictions.
      
-->
<indexing.filterIndex.outbound patch:source="Sitecore.ContentSearch.config">
<processor type="Sitecore.ContentSearch.Pipelines.IndexingFilters.ApplyOutboundSecurityFilter, Sitecore.ContentSearch"/>
</indexing.filterIndex.outbound>
<!--
 INDEXING GET DEPENDENCIES
           This pipeline fetches dependant items when one item is being index. Useful for fetching related or connected items that also
           need to be updated in the indexes.
           Arguments: (IQueryable) Open session to the search index, (Item) The item being indexed.
           Examples: Update clone references.
                     Update the data sources that are used in the presentation components for the item being indexed.
      
-->
<indexing.getDependencies help="Processors should derive from Sitecore.ContentSearch.Pipelines.GetDependencies.BaseProcessor" patch:source="Sitecore.ContentSearch.config"/>
<!--
 GET CHILDREN TO INDEX
           Pipeline to allow for overriding the getting of children of an item for indexing.
           Arguments: (IIndexable) The document being indexed, (ISearchIndex) The search index.
           Examples: Do not allow for indexing children of a certain template type
      
-->
<indexing.getChildrenToIndex help="Processors should derive from Sitecore.ContentSearch.Pipelines.GetChildrenToIndex.GetChildrenToIndexProcessor" patch:source="Sitecore.ContentSearch.config">
<processor type="Sitecore.ContentSearch.Pipelines.GetChildrenToIndex.GetSitecoreItemChildren, Sitecore.ContentSearch"/>
</indexing.getChildrenToIndex>
<!--
 RESOLVE FIELD LEVEL BOOSTING
           Pipeline for resolving boosting rules on fields.
           Arguments: (Item) Item being indexed
           Example : Boost search results by a field value.
      
-->
<indexing.resolveFieldBoost help="Processors should derive from Sitecore.ContentSearch.Pipelines.ResolveBoost.ResolveFieldBoost.BaseResolveFieldBoostPipelineProcessor" patch:source="Sitecore.ContentSearch.config">
<processor type="Sitecore.ContentSearch.Pipelines.ResolveBoost.ResolveFieldBoost.SystemFieldFilter, Sitecore.ContentSearch"/>
<processor type="Sitecore.ContentSearch.Pipelines.ResolveBoost.ResolveFieldBoost.FieldDefinitionItemResolver, Sitecore.ContentSearch"/>
<processor type="Sitecore.ContentSearch.Pipelines.ResolveBoost.ResolveFieldBoost.StaticFieldBoostResolver, Sitecore.ContentSearch"/>
</indexing.resolveFieldBoost>
<!--
 RESOLVE ITEM LEVEL BOOSTING
           Pipeline for resolving boosting rules on items.
           Arguments: (Item) Item being indexed
           Example : Boost search results by a Item Template.
      
-->
<indexing.resolveItemBoost help="Processors should derive from Sitecore.ContentSearch.Pipelines.ResolveBoost.ResolveItemBoost.BaseResolveItemBoostPipelineProcessor" patch:source="Sitecore.ContentSearch.config">
<processor type="Sitecore.ContentSearch.Pipelines.ResolveBoost.ResolveItemBoost.ItemLocationFilter, Sitecore.ContentSearch">
<includedLocations hint="list">
<content>/sitecore/content</content>
<media>/sitecore/media library</media>
</includedLocations>
</processor>
<processor type="Sitecore.ContentSearch.Pipelines.ResolveBoost.ResolveItemBoost.StaticItemBoostResolver, Sitecore.ContentSearch"/>
<processor type="Sitecore.ContentSearch.Pipelines.ResolveBoost.ResolveItemBoost.LocalRuleBasedItemBoostResolver, Sitecore.ContentSearch"/>
<processor type="Sitecore.ContentSearch.Pipelines.ResolveBoost.ResolveItemBoost.GlobalRuleBasedItemBoostResolver, Sitecore.ContentSearch"/>
</indexing.resolveItemBoost>
<contentSearch.formatQueryFieldValue patch:source="Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config">
<processor type="Sitecore.ContentSearch.SolrProvider.Pipelines.FormatQueryFieldValue.ApplyFieldMappingRule, Sitecore.ContentSearch.SolrProvider"/>
</contentSearch.formatQueryFieldValue>
<contentSearch.PopulateSolrSchema patch:source="Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config">
<processor type="Sitecore.ContentSearch.SolrProvider.Pipelines.PopulateSolrSchema.ResolveCoreNames, Sitecore.ContentSearch.SolrProvider"/>
<processor type="Sitecore.ContentSearch.SolrProvider.Pipelines.PopulateSolrSchema.PopulateFields, Sitecore.ContentSearch.SolrProvider"/>
<processor type="Sitecore.ContentSearch.SolrProvider.Pipelines.PopulateSolrSchema.ReInitializeIndex, Sitecore.ContentSearch.SolrProvider"/>
</contentSearch.PopulateSolrSchema>
<!--
 RESOLVE UI DOCUMENT MAPPER FACTORY RULES PIPELINE
           This pipeline is executed when you use the search UI. The default processor overrides the document mapper rules to ensure that
           the search results are instantiated as SitecoreUISearchResultItem objects. This is necessary for the default search views to
           display search results correctly.
      
-->
<buckets.resolveUIDocumentMapperFactoryRules patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.UI.Search.ResolveDocumentMapperFactoryRule.ResolveSitecoreUIRules, Sitecore.Buckets"/>
</buckets.resolveUIDocumentMapperFactoryRules>
<!--
 ADD SEARCH TAB PIPELINE
           Pipeline for adding search tabs to items.
           Arguments : (Item) The item to add a search tab to. (bool) Whether the tab was added or not.
      
-->
<buckets.addSearchTabToItem patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.BucketUI.AddSearchTabToItem.AddSearchTab, Sitecore.Buckets"/>
</buckets.addSearchTabToItem>
<!--
 CLONE ITEM INTO BUCKET PIPELINE
           Pipeline for cloning items into an item bucket.
           Arguments : (Item) Source, (Item) Target, (bool) Whether or not cloning was successful, (bool) Deep check.
      
-->
<buckets.cloneItemIntoBucket patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.ItemOperations.CloneItem.RunCloning, Sitecore.Buckets"/>
<processor type="Sitecore.Buckets.Pipelines.ItemOperations.CloneItem.ProcessParentReference, Sitecore.Buckets"/>
</buckets.cloneItemIntoBucket>
<!--
 COPY ITEM INTO BUCKET PIPELINE
           Pipeline for copying items into an item bucket.
           Arguments : (Item) The item to add a search tab to. (bool) Whether the tab was added or not.
      
-->
<buckets.copyItemIntoBucket patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.ItemOperations.CopyItem.RunCopying, Sitecore.Buckets"/>
<processor type="Sitecore.Buckets.Pipelines.ItemOperations.CopyItem.ProcessParentReference, Sitecore.Buckets"/>
</buckets.copyItemIntoBucket>
<!--
 CREATE BUCKET PIPELINE
           Pipeline for creating an item bucket.
           Arguments : (Item) Bucket Item, (Action<Item>) CallBack, (bool) Whether the item bucket was created or not.
      
-->
<buckets.createBucket patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.BucketOperations.CreateBucket.RunBucketingProcess, Sitecore.Buckets"/>
</buckets.createBucket>
<!--
 FETCH FACET PIPELINE
           Pipeline for getting facets (grouping and categorization of search results) from a search.
           Arguments : (Item) The item to add a search tab to. (bool) Whether the tab was added or not.
      
-->
<buckets.getFacets patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.Search.GetFacets.RunFacets, Sitecore.Buckets"/>
</buckets.getFacets>
<!--
 IS ITEM A BUCKET PIPELINE
           Pipeline for determining whether or not an item is an item bucket.
           Arguments : (Item) The item to add a search tab to. (bool) Whether the tab was added or not.
      
-->
<buckets.isBucket patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.BucketStatus.IsBucket.CheckIfItemIsABucket, Sitecore.Buckets"/>
</buckets.isBucket>
<!--
 ITEM IN BUCKET CHECK PIPELINE
           Pipeline for checking whether or not an item is contained within an item bucket.
           Arguments : (Item) The item to add a search tab to. (bool) Whether the tab was added or not.
      
-->
<buckets.isItemContainedWithinBucket patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.BucketStatus.IsItemContainedWithinBucket.CheckIfItemsIsInBucket, Sitecore.Buckets"/>
</buckets.isItemContainedWithinBucket>
<!--
 TEMPLATE BUCKETABLE PIPELINE
           Pipeline for determining whether or not an item is "bucketable".
           Arguments : (Item) The item to add a search tab to. (bool) Whether the tab was added or not.
      
-->
<buckets.isTemplateBucketable patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.BucketStatus.IsTemplateBucketable.RunTemplateCheck, Sitecore.Buckets"/>
</buckets.isTemplateBucketable>
<!--
 MOVE ITEM INTO BUCKET PIPELINE
           Pipeline for moving items into or out of an item bucket. This pipeline also makes sure that the item being moved is "bucketable". 
               If it is bucketable, it is automatically bucketed after it has been moved.
           Arguments : (Item) The item being moved. (bool) Whether the item was moved successfully or not.
      
-->
<buckets.moveItemIntoBucket patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.ItemOperations.MoveItem.RunMoving, Sitecore.Buckets"/>
<processor type="Sitecore.Buckets.Pipelines.ItemOperations.MoveItem.ProcessParentReference, Sitecore.Buckets"/>
</buckets.moveItemIntoBucket>
<!--
 UNBUCKETING PROCESS PIPELINE
               Pipeline for converting an item bucket into a content item.
           Arguments : (Item) The item bucket being converted into an ordinary content item. (bool) Whether the conversion was successful or not.
      
-->
<buckets.removeBucket patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.BucketOperations.RemoveBucket.RunUnbucketProcess, Sitecore.Buckets"/>
</buckets.removeBucket>
<!--
 BUCKET SYNCING PIPELINE
           Pipeline for syncing an item bucket. This updates an item bucket after changing the bucketable value of templates, or if  
           the bucketing process was interrupted and needs to be resumed.
           Arguments : (Item) The item bucket being synced. (bool) Whether the item bucket was synced successfully or not.
      
-->
<buckets.syncBucket patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.BucketOperations.SyncBucket.RunSyncProcess, Sitecore.Buckets"/>
</buckets.syncBucket>
<!--
 SEARCH DIALOG GLOBAL FILTERS PIPELINE
           Pipeline for adding default search filters to built-in Sitecore dialog boxes that use the search tab, for example, the Insert From Template dialog box.         
           This allows you to set default locations to search in, default templates to filter on, etc.
      
-->
<buckets.dialogSearchFilters patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.UI.DialogSearchFilters.SetDefaultSearchFilters, Sitecore.Buckets"/>
</buckets.dialogSearchFilters>
<!--
 EXPAND ID-BASED SEARCH FILTERS
           Sitecore executes this pipeline for search filters when their Client Side Hook is set to "id". To display a user-friendly item name
           in the UI, the ExpandIds processor replaces "<ID>" with "<Item Display Name>|<ID>" in these search filters.
      
-->
<buckets.expandIdBasedSearchFilters patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.UI.ExpandIdBasedSearchFilters.ExpandIds, Sitecore.Buckets"/>
</buckets.expandIdBasedSearchFilters>
<!--
 SEARCH RESULT DISPLAY PIPELINE
           Pipeline for dynamically setting the SearchResultItem properties  
      
-->
<buckets.fillItem patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.UI.FillItem.SetItemProperties, Sitecore.Buckets"/>
<processor type="Sitecore.Buckets.Pipelines.UI.FillItem.ShowFieldValuesInResults, Sitecore.Buckets"/>
</buckets.fillItem>
<!--
 DYNAMIC UI SEARCH FIELD PIPELINE
           Pipeline to Inject Dynamic Values into the SitecoreItem object. Useful for content authoring and delivery environment 
      
-->
<buckets.dynamicFields patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.UI.DynamicFields.FetchDynamicFieldValues, Sitecore.Buckets"/>
<!--
 Allows users to place "IsLocked" in their views and show whether an item is locked or not. 
-->
<processor type="Sitecore.Buckets.Pipelines.UI.DynamicFields.IsLocked, Sitecore.Buckets"/>
<!--
 Will allow users to place "Tags" in their views and show the items tags from the __semantics field
-->
<processor type="Sitecore.Buckets.Pipelines.UI.DynamicFields.ItemTags, Sitecore.Buckets"/>
</buckets.dynamicFields>
<getFallbackUserAgent patch:source="Sitecore.CES.DeviceDetection.config">
<processor type="Sitecore.Analytics.Pipelines.GetFallbackUserAgent.GetUserAgentFromTracker, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.config"/>
</getFallbackUserAgent>
<!--
  HANDLE LOOKUP ERROR
            Handles exceptions happened when look up for IP geo information.
      
-->
<ces.geoIp.handleLookupError patch:source="Sitecore.CES.GeoIp.config">
<processor type="Sitecore.CES.GeoIp.Pipelines.HandleLookupError.IpAddressNotFound, Sitecore.CES.GeoIp"/>
</ces.geoIp.handleLookupError>
<!--
  PARSE RESPONSE
            Parses the response from the Sitecore IP Geolocation service.
      
-->
<ces.geoIp.parseResponse patch:source="Sitecore.CES.GeoIp.config">
<processor type="Sitecore.CES.Pipelines.ParseResponse.ReadJsonResponse`1[[Sitecore.CES.GeoIp.Core.Model.WhoIsInformation, Sitecore.CES.GeoIp.Core]], Sitecore.CES"/>
<processor type="Sitecore.CES.GeoIp.Pipelines.ParseResponse.MapGeoIpResponse, Sitecore.CES.GeoIp"/>
</ces.geoIp.parseResponse>
<!-- Handles the item delete operation.  -->
<itemWebApiDelete patch:source="Sitecore.ItemWebApi.config">
<processor type="Sitecore.ItemWebApi.Pipelines.Delete.DeleteScope, Sitecore.ItemWebApi"/>
</itemWebApiDelete>
<!--
Determines which item fields should are included in response. 
-->
<itemWebApiGetFields patch:source="Sitecore.ItemWebApi.config">
<processor type="Sitecore.ItemWebApi.Pipelines.GetFields.GetFields, Sitecore.ItemWebApi"/>
</itemWebApiGetFields>
<!--
Determines which item properties (display name, ID etc.) are included in response. 
-->
<itemWebApiGetProperties patch:source="Sitecore.ItemWebApi.config">
<processor type="Sitecore.ItemWebApi.Pipelines.GetProperties.GetProperties, Sitecore.ItemWebApi"/>
<processor type="Sitecore.ItemWebApi.Pipelines.GetProperties.GetSystemProperties, Sitecore.Speak.ItemWebApi" patch:source="Sitecore.Speak.ItemWebApi.config"/>
<processor type="Sitecore.ItemWebApi.Pipelines.GetProperties.GetUiProperties, Sitecore.Speak.ItemWebApi" patch:source="Sitecore.Speak.ItemWebApi.config"/>
</itemWebApiGetProperties>
<!-- Handles the item create operation.  -->
<itemWebApiCreate patch:source="Sitecore.ItemWebApi.config">
<processor type="Sitecore.ItemWebApi.Pipelines.Create.CreateItem, Sitecore.ItemWebApi"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Create.TryUpdate, Sitecore.ItemWebApi"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Create.SetResult, Sitecore.ItemWebApi"/>
</itemWebApiCreate>
<!-- Handles the item read operation.  -->
<itemWebApiRead patch:source="Sitecore.ItemWebApi.config">
<processor type="Sitecore.ItemWebApi.Pipelines.Read.GetResult, Sitecore.ItemWebApi"/>
</itemWebApiRead>
<!-- Processes Item Web API requests.  -->
<itemWebApiRequest patch:source="Sitecore.ItemWebApi.config">
<processor type="Sitecore.ItemWebApi.Pipelines.Request.CheckParameters, Sitecore.ItemWebApi" patch:source="Sitecore.Speak.ItemWebApi.config">
<parameters hint="list" patch:source="Sitecore.Speak.ItemWebApi.config">
<name desc="item id1">sc_itemid</name>
<name desc="item id2">sc_database</name>
<name desc="item id3">language</name>
<name desc="item id4">fields</name>
<name desc="item id5">payload</name>
<name desc="item id6">scope</name>
<name desc="item id7">query</name>
<name desc="item id8">page</name>
<name desc="item id9">template</name>
<name desc="item id10">name</name>
<name desc="item id11">database</name>
<name desc="item id12">pagesize</name>
<name desc="item id13">renderingid</name>
<name desc="item id14">sc_itemversion</name>
<name desc="speak-parameter1" patch:source="Sitecore.Speak.ItemWebApi.config">facetsRootItemId</name>
<name desc="speak-parameter2" patch:source="Sitecore.Speak.ItemWebApi.config">search</name>
<name desc="speak-parameter3" patch:source="Sitecore.Speak.ItemWebApi.config">root</name>
<name desc="speak-parameter4" patch:source="Sitecore.Speak.ItemWebApi.config">searchConfig</name>
<name desc="speak-parameter5" patch:source="Sitecore.Speak.ItemWebApi.config">pageIndex</name>
<name desc="speak-parameter6" patch:source="Sitecore.Speak.ItemWebApi.config">sc_content</name>
<name desc="speak-parameter7" patch:source="Sitecore.Speak.ItemWebApi.config">format</name>
<name desc="speak-parameter8" patch:source="Sitecore.Speak.ItemWebApi.config">sorting</name>
<name desc="speak-parameter9" patch:source="Sitecore.Speak.ItemWebApi.config">showHiddenItems</name>
</parameters>
</processor>
<processor type="Sitecore.ItemWebApi.Pipelines.Request.CheckSecurity, Sitecore.ItemWebApi"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Request.HandleItemNotFound, Sitecore.ItemWebApi"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Request.ResolveItems, Sitecore.ItemWebApi"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Request.Search, Sitecore.Speak.ItemWebApi" patch:source="Sitecore.Speak.ItemWebApi.config"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Request.ResolveScope, Sitecore.ItemWebApi"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Request.ResolveAction, Sitecore.ItemWebApi"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Request.Facets, Sitecore.Speak.ItemWebApi" patch:source="Sitecore.Speak.ItemWebApi.config"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Request.ConvertValues, Sitecore.Speak.ItemWebApi" patch:source="Sitecore.Speak.ItemWebApi.config"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Request.SerializeResponse, Sitecore.ItemWebApi"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Request.SendResponse, Sitecore.ItemWebApi"/>
</itemWebApiRequest>
<!-- Handles the item update operation.  -->
<itemWebApiUpdate patch:source="Sitecore.ItemWebApi.config">
<processor type="Sitecore.ItemWebApi.Pipelines.Update.UpdateScope, Sitecore.ItemWebApi"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Update.ReadUpdatedScope, Sitecore.ItemWebApi"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Update.Rename, Sitecore.Speak.ItemWebApi" patch:source="Sitecore.Speak.ItemWebApi.config"/>
</itemWebApiUpdate>
<!--
  OWIN INITIALIZE
            Configures OWIN middlewares. 
            The pipeline contains StageMarker processors that insert UseStageMarker middlewares with a corresponding PipelineStage value. 
            
            If "Owin.AssertStageMarkers" setting is set to "true" then an exception will be thrown if there is a middleware that is executed on
            a later stage than the following StageMarker processor specifies.
            
            It may happen when a custom processor uses UseStageMarker with a PipelineStage value that is lower than the previous StageMarker processor.
            For example, default UseCookieAuthentication middleware uses UseStageMarker(PipelineStage.Authenticate) under the hood;
            therefore, a processor that contains such a middleware should be patched before the Authenticate StageMarker processor. 
      
-->
<owin.initialize help="Processors should derive from Sitecore.Owin.Pipelines.Initialize.InitializeProcessor" patch:source="Sitecore.Owin.config">
<processor type="Sitecore.Owin.Pipelines.Initialize.SetGlobalExceptionHandler, Sitecore.Owin" resolve="true"/>
<processor type="Sitecore.Owin.Pipelines.Initialize.SetLoggerFactory, Sitecore.Owin" resolve="true"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.DefineOwinAuthenticationState, Sitecore.Owin.Authentication" resolve="true" patch:source="Sitecore.Owin.Authentication.config"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.ValidateFederatedAuthenticationState, Sitecore.Owin.Authentication" resolve="true" patch:source="Sitecore.Owin.Authentication.config"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.HandlePostLogoutUrl, Sitecore.Owin.Authentication" resolve="true" patch:source="Sitecore.Owin.Authentication.config"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.InjectOwinDependencies, Sitecore.Owin.Authentication" resolve="true" patch:source="Sitecore.Owin.Authentication.config"/>
<processor name="CookieAuthentication" type="Sitecore.Owin.Authentication.Pipelines.Initialize.CookieAuthentication, Sitecore.Owin.Authentication" resolve="true" patch:source="Sitecore.Owin.Authentication.config">
<!--
 Controls how much time the cookie will remain valid from the point it is created.
             Format: d:hh:mm:ss

             No matter the cookie is persistent or not, OWIN authentication will not pass the expired cookie.
             ExpireTimeSpan could be overwritten by the http://www.sitecore.net/identity/claims/cookieExp claim where
             the claim value is Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z. 
-->
<ExpireTimeSpan>00:30:00</ExpireTimeSpan>
<SlidingExpiration>true</SlidingExpiration>
</processor>
<processor name="PreviewCookieAuthentication" type="Sitecore.Owin.Authentication.Pipelines.Initialize.PreviewCookieAuthentication, Sitecore.Owin.Authentication" resolve="true" patch:source="Sitecore.Owin.Authentication.config">
<!--
 Controls how much time the authentication cookie for Preview mode will remain valid from the point it is created.
             Format: d:hh:mm:ss 
-->
<ExpireTimeSpan>00:30:00</ExpireTimeSpan>
<SlidingExpiration>true</SlidingExpiration>
</processor>
<processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.ExternalCookieAuthentication, Sitecore.Owin.Authentication" resolve="true" patch:source="Sitecore.Owin.Authentication.config"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.AddIdentityProviders, Sitecore.Owin.Authentication" resolve="true" patch:source="Sitecore.Owin.Authentication.config"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.WindowsAzureActiveDirectoryBearerAuthentication, Sitecore.Owin.Authentication" resolve="true" patch:source="Sitecore.Owin.Authentication.config">
<IdentityProviderName/>
<ApplicationId/>
<!--
 You must set the MetadataAddress. 
               When you use Azure AD B2C tokens, set the MetadataAddress to:
               https://login.microsoftonline.com/[my-tenant].onmicrosoft.com/v2.0/.well-known/openid-configuration?p=[my-B2C_1_SignUpPolicy]
          
-->
<MetadataAddress/>
<TenantId/>
</processor>
<processor type="Sitecore.Owin.Authentication.IdentityServer.Pipelines.Initialize.InterceptLegacyShellLoginPage, Sitecore.Owin.Authentication.IdentityServer" resolve="true" patch:source="Sitecore.Owin.Authentication.IdentityServer.config">
<legacyShellLoginPage>/sitecore/login</legacyShellLoginPage>
</processor>
<processor type="Sitecore.Owin.Authentication.IdentityServer.Pipelines.Initialize.JwtBearerAuthentication, Sitecore.Owin.Authentication.IdentityServer" resolve="true" patch:source="Sitecore.Owin.Authentication.IdentityServer.config">
<identityProviderName>SitecoreIdentityServer</identityProviderName>
<audiences hint="raw:AddAudience">
<audience value="https://127.0.0.1/resources"/>
</audiences>
<issuers hint="list">
<issuer>https://127.0.0.1</issuer>
</issuers>
</processor>
<processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="Authenticate"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.TryTriggerExternalLogout, Sitecore.Owin.Authentication" resolve="true" patch:source="Sitecore.Owin.Authentication.config"/>
<processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="PostAuthenticate"/>
<processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="Authorize"/>
<processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="PostAuthorize"/>
<processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="ResolveCache"/>
<processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="PostResolveCache"/>
<processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="MapHandler"/>
<processor type="Sitecore.Owin.Pipelines.Initialize.SetSessionStateBehavior, Sitecore.Owin" resolve="true"/>
<processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="PostMapHandler"/>
<processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="AcquireState"/>
<processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="PostAcquireState"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.HandleLoginLink, Sitecore.Owin.Authentication" resolve="true" patch:source="Sitecore.Owin.Authentication.config"/>
</owin.initialize>
<!--
 OWIN GLOBAL EXCEPTION HANDLER
           Handles unhandled exceptions that occured in OWIN middlewares.
      
-->
<owin.globalExceptionHandler help="Processors should derive from Sitecore.Owin.Pipelines.GlobalExceptionHandler.GlobalExceptionHandlerProcessor" patch:source="Sitecore.Owin.config">
<!--
 Handles the 'IDX10311 Nonce is missing' error code. 
-->
<processor type="Sitecore.Owin.Authentication.Pipelines.GlobalExceptionHandler.NonceMissing, Sitecore.Owin.Authentication" resolve="true" patch:source="Sitecore.Owin.Authentication.config"/>
<!--
 Handles IDX10803 and IDX20803 error codes.
             If 'UseFallbackLoginPage' is set to 'true' and the current site is either 'shell', 'modules_shell', or 'admin' the user is redirected to the 'FallbackLoginPage'
             in 'FallbackLoginPageRedirectTimeout' seconds. If 'FallbackLoginPageRedirectTimeout' is more than 0, an error is shown for 'FallbackLoginPageRedirectTimeout' seconds. 
-->
<processor type="Sitecore.Owin.Authentication.Pipelines.GlobalExceptionHandler.IdentityProviderIsInaccessible, Sitecore.Owin.Authentication" resolve="true" patch:source="Sitecore.Owin.Authentication.config">
<UseFallbackLoginPage>true</UseFallbackLoginPage>
<FallbackLoginPageRedirectTimeout>0</FallbackLoginPageRedirectTimeout>
<FallbackLoginPage>/sitecore/login?fbc=1</FallbackLoginPage>
</processor>
<processor name="DefaultExceptionHandler" type="Sitecore.Owin.Pipelines.GlobalExceptionHandler.DefaultExceptionHandler, Sitecore.Owin" resolve="true">
<enabled>true</enabled>
</processor>
</owin.globalExceptionHandler>
<!--
 GLOBAL LOG FILTER
           Standard Sitecore implementation of Microsoft.Owin.Logging.ILogger invokes this pipeline before submitting log data to the underlying logger.
           This pipeline provides an ability to modify an every aspect of the individual logging record as well as suppressing it.
      
-->
<owin.globalLogFilter help="Processors should derive from Sitecore.Owin.Pipelines.GlobalLogFilter.GlobalLogFilterProcessor" patch:source="Sitecore.Owin.config">
<!--
 Downgrade the log level from Warning to Verbose for OpenIdConnect "The state field is missing or invalid." error message 
-->
<processor type="Sitecore.Owin.Authentication.Pipelines.GlobalLogFilter.DowngradeOidcInvalidStateFieldMessage, Sitecore.Owin.Authentication" resolve="true" patch:source="Sitecore.Owin.Authentication.config"/>
</owin.globalLogFilter>
<owin.identityProviders help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.IdentityProviders.IdentityProvidersProcessor" patch:source="Sitecore.Owin.Authentication.config">
<processor id="SitecoreIdentityServer" type="Sitecore.Owin.Authentication.IdentityServer.Pipelines.IdentityProviders.ConfigureIdentityServer, Sitecore.Owin.Authentication.IdentityServer" resolve="true" patch:source="Sitecore.Owin.Authentication.IdentityServer.config">
<scopes hint="list">
<scope name="openid">openid</scope>
<scope name="sitecore.profile">sitecore.profile</scope>
</scopes>
</processor>
</owin.identityProviders>
<owin.cookieAuthentication.validateIdentity help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.ValidateIdentityProcessor" patch:source="Sitecore.Owin.Authentication.config">
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.ValidateForUnresolvedSiteContext, Sitecore.Owin.Authentication"/>
<!--
 There are scenarios when some URIs are resolved with the 'website' context, but should be executed within the 'shell' context instead.
             Example: /sitecore/api/ssc/ListManagement/List/Recent?pageSize=6&pageIndex=1&payLoad=full&language=en&searchExpression=&sc_lang=en
             If an external identity provider is configured to only be used with the 'shell' site, we must be able to use a user from that provider
             to make the authorized request. Use this processor to specify these paths.

             Note: if you need to omit the execution of this processor for some URIs (e.x. for API requests from website on CM),
             add the "sc_site=..." query parameter to the requested URI. 
-->
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.ValidateSiteNeutralPaths, Sitecore.Owin.Authentication" patch:source="Sitecore.PathAnalyzer.Client.config">
<siteNeutralPaths hint="list">
<path>/sitecore/api/ssc/</path>
<path>/api/sitecore/</path>
<path>/-/speak/</path>
<path name="LM" patch:source="Sitecore.ListManagement.Client.config">/sitecore/api/lists/</path>
<path hint="XP" patch:source="Sitecore.ExperienceProfile.Client.config">/sitecore/api/ao/</path>
<path name="XA" patch:source="Sitecore.ExperienceAnalytics.Client.config">/sitecore/api/ao/</path>
<path name="Marketing.Automation" patch:source="Sitecore.Marketing.Automation.Client.config">/sitecore/api/ma/</path>
<path name="EXM" patch:source="Sitecore.EmailExperience.ContentManagement.config">/sitecore/api/exm/</path>
<path hint="PA" patch:source="Sitecore.PathAnalyzer.Client.config">/sitecore/api/PathAnalyzer/</path>
</siteNeutralPaths>
</processor>
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.CheckIdentityProvider, Sitecore.Owin.Authentication" resolve="true"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.ResolveToDefaultAuthenticationSourceOnly, Sitecore.Owin.Authentication">
<paths hint="list"/>
</processor>
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.CheckSiteMode, Sitecore.Owin.Authentication" resolve="true"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.VerifyPreviewUser, Sitecore.Owin.Authentication" resolve="true"/>
</owin.cookieAuthentication.validateIdentity>
<owin.cookieAuthentication.signIn help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.SignInProcessor" patch:source="Sitecore.Owin.Authentication.config">
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.RemoveTicket, Sitecore.Owin.Authentication" resolve="true"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.ResolveUser, Sitecore.Owin.Authentication" resolve="true"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.ClearCache, Sitecore.Owin.Authentication" resolve="true"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.UpdateUserProperties, Sitecore.Owin.Authentication" resolve="true"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.CheckClientUser, Sitecore.Owin.Authentication"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.SetCookieLifetime, Sitecore.Owin.Authentication" resolve="true"/>
</owin.cookieAuthentication.signIn>
<owin.cookieAuthentication.signedIn help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignedIn.SignedInProcessor" patch:source="Sitecore.Owin.Authentication.config">
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignedIn.CleanupUserProfile, Sitecore.Owin.Authentication"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignedIn.GetStartUrl, Sitecore.Owin.Authentication" resolve="true"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignedIn.CreateTicket, Sitecore.Owin.Authentication" resolve="true"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignedIn.ApplyRedirect, Sitecore.Owin.Authentication" resolve="true"/>
</owin.cookieAuthentication.signedIn>
<owin.cookieAuthentication.applyRedirect help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ApplyRedirect.ApplyRedirectProcessor" patch:source="Sitecore.Owin.Authentication.config">
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ApplyRedirect.SkipAjaxRequest, Sitecore.Owin.Authentication"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ApplyRedirect.GoToLoginPage, Sitecore.Owin.Authentication"/>
</owin.cookieAuthentication.applyRedirect>
<owin.cookieAuthentication.signOut help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignOut.SignOutProcessor" patch:source="Sitecore.Owin.Authentication.config">
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignOut.CheckUser, Sitecore.Owin.Authentication"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignOut.ClearRecentDocuments, Sitecore.Owin.Authentication"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignOut.RemoveTicket, Sitecore.Owin.Authentication" resolve="true"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignOut.ClearCache, Sitecore.Owin.Authentication" resolve="true"/>
</owin.cookieAuthentication.signOut>
<fedauth.siteNameExpander help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.SiteNameExpander.SiteNameExpanderProcessor" patch:source="Sitecore.Owin.Authentication.config">
<processor type="Sitecore.Owin.Authentication.Pipelines.SiteNameExpander.RegExpExpander, Sitecore.Owin.Authentication" resolve="true"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.SiteNameExpander.DatabaseExpander, Sitecore.Owin.Authentication" resolve="true"/>
<processor type="Sitecore.Owin.Authentication.Pipelines.SiteNameExpander.DomainExpander, Sitecore.Owin.Authentication" resolve="true"/>
</fedauth.siteNameExpander>
<deployDefinition patch:source="Sitecore.Marketing.config">
<processor type="Sitecore.Marketing.Automation.Pipelines.DeployDefinition.SkipAutomationCampaignTemplates, Sitecore.Marketing.Automation" patch:source="Sitecore.Marketing.Automation.Client.config"/>
<processor type="Sitecore.Marketing.xMgmt.Pipelines.DeployDefinition.Deploy, Sitecore.Marketing.xMgmt" resolve="true"/>
</deployDefinition>
<validateJsonFieldLinks patch:source="Sitecore.Marketing.config">
<processor type="Sitecore.Marketing.Pipelines.ValidateJsonFieldLinks.ValidateProperties, Sitecore.Marketing.xMgmt" resolve="true"/>
</validateJsonFieldLinks>
<validateJsonPropertyLink patch:source="Sitecore.Marketing.config">
<processor type="Sitecore.Marketing.Pipelines.ValidateJsonPropertyLink.JsonPropertyIdLinkValidator, Sitecore.Marketing.xMgmt" resolve="true"/>
</validateJsonPropertyLink>
<group groupName="analytics.aggregation" patch:source="Sitecore.PathAnalyzer.Processing.config">
<pipelines>
<interactions>
<processor type="Sitecore.Analytics.Aggregation.Pipelines.Interactions.LogAggregationInfo, Sitecore.Analytics.Aggregation" resolve="true"/>
<processor type="Sitecore.ContentTesting.Analytics.Aggregation.Pipeline.MvTestingProcessor, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Processing.Aggregation.config"/>
<processor type="Sitecore.ContentTesting.Analytics.Aggregation.Pipeline.MvTestingDetailsProcessor, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Processing.Aggregation.config"/>
<processor type="Sitecore.ContentTesting.Analytics.Aggregation.Pipeline.TestPageClicksProcessor, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Processing.Aggregation.config"/>
<processor type="Sitecore.ContentTesting.Analytics.Aggregation.Pipeline.TestConversionsProcessor, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Processing.Aggregation.config"/>
<processor type="Sitecore.ContentTesting.Analytics.Aggregation.Pipeline.PageViewsByLanguageProcessor, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Processing.Aggregation.config">
<DateTimePrecision type="Sitecore.Analytics.Aggregation.Data.DateTimeDayPrecisionStrategy, Sitecore.Analytics.Aggregation"/>
</processor>
<processor type="Sitecore.ContentTesting.Analytics.Aggregation.Pipeline.PageViewsProcessor, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Processing.Aggregation.config"/>
<processor type="Sitecore.ContentTesting.Analytics.Aggregation.Pipeline.VisitsProcessor, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Processing.Aggregation.config"/>
<processor type="Sitecore.ContentTesting.Analytics.Aggregation.Pipeline.PersonalizationProcessor, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Processing.Aggregation.config"/>
<processor type="Sitecore.ContentTesting.Analytics.Aggregation.Pipeline.PersonalizationRulesExposure, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Processing.Aggregation.config"/>
<!--
 The pipeline processor is building Facts and Dimensions for each segment registered in Experience Analytics 
-->
<processor type="Sitecore.ExperienceAnalytics.Aggregation.Pipeline.InteractionProcessor, Sitecore.ExperienceAnalytics.Aggregation" patch:source="Sitecore.ExperienceAnalytics.Aggregation.config">
<param type="Sitecore.ExperienceAnalytics.Aggregation.Pipeline.SegmentProcessor">
<param type="Sitecore.ExperienceAnalytics.Aggregation.Rules.RulesValidator, Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.Plumbing.FlexibleDimensionConfigReader, Sitecore.ExperienceAnalytics.Aggregation"/>
<param ref="experienceAnalytics/aggregation/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/aggregation/services/aggregationSegmentRepository" desc="aggregationSegmentProcessor"/>
<param ref="experienceAnalytics/aggregation/logger" desc="logger"/>
</processor>
<processor type="Sitecore.ExperienceAnalytics.Aggregation.Pipeline.ReportingRebuildProcessor, Sitecore.ExperienceAnalytics.Aggregation" patch:source="Sitecore.ExperienceAnalytics.Aggregation.config">
<param type="Sitecore.ExperienceAnalytics.Aggregation.ReportingRebuild.ReportingRebuildCompletionManager, Sitecore.ExperienceAnalytics.Aggregation" singleInstance="true"/>
</processor>
<processor type="Sitecore.ExperienceForms.Analytics.Pipelines.Aggregation.FormMetricsAggregationProcessor, Sitecore.ExperienceForms.Analytics" patch:source="Sitecore.ExperienceForms.Analytics.Aggregation.config"/>
<processor type="Sitecore.ExperienceForms.Analytics.Pipelines.Aggregation.FieldMetricsAggregationProcessor, Sitecore.ExperienceForms.Analytics" patch:source="Sitecore.ExperienceForms.Analytics.Aggregation.config"/>
<processor type="Sitecore.PathAnalyzer.Pipelines.Interactions.TreeProcessor, Sitecore.PathAnalyzer" patch:source="Sitecore.PathAnalyzer.Processing.config">
<LivePool ref="aggregationProcessing/processingPools/pathAnalyzerLive"/>
<HistoryPool ref="aggregationProcessing/processingPools/pathAnalyzerHistory"/>
</processor>
</interactions>
<contacts/>
</pipelines>
</group>
<!--
 Adds a reporting data source which is specific to Experience Profile.
           Datasource receives a name of query pipeline which is then executed on the reporting server. 
-->
<registerReportingDataSource patch:source="Sitecore.Analytics.Reporting.config">
<processor type="Sitecore.Xdb.Reporting.Pipelines.RegisterReportingDataSource.RegisterReportingDataSourceProcessor, Sitecore.Xdb.Reporting" patch:source="Sitecore.ExperienceProfile.config">
<datasources hint="list:AddDatasource" patch:source="Sitecore.ExperienceProfile.config">
<add type="Sitecore.Cintel.Reporting.ReportingServerDatasource.QueryPipelineDataSource, Sitecore.Cintel" key="ExperienceProfileQueryPipeline"/>
</datasources>
</processor>
</registerReportingDataSource>
<classificationStrategy patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.ClassificationStrategy.OverrideClassification, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.ClassificationStrategy.ContactClassifications, Sitecore.Analytics"/>
</classificationStrategy>
<commitSession patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.CommitSession.PreventSessionCommit, Sitecore.ExperienceExplorer.Analytics" patch:source="Sitecore.ExperienceExplorer.config"/>
<processor type="Sitecore.Analytics.Pipelines.CommitSession.CheckPreconditions, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.Database.config"/>
<processor type="Sitecore.Analytics.Pipelines.CommitSession.UpdateGeoIpData, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.Database.config"/>
<processor type="Sitecore.Analytics.Pipelines.CommitSession.EnsureClassification, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.Database.config"/>
<processor type="Sitecore.Analytics.Pipelines.CommitSession.Robots, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.Database.config"/>
<processor type="Sitecore.Analytics.Pipelines.CommitSession.IgnoreVisitsWithoutPages, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.Database.config"/>
<processor type="Sitecore.Analytics.Pipelines.CommitSession.UpdateContactSaveMode, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.Database.config"/>
<processor type="Sitecore.Analytics.Pipelines.CommitSession.SubmitSession, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.Database.config">
<SessionContextManager ref="tracking/sessionContextManager"/>
</processor>
<processor type="Sitecore.Analytics.Pipelines.CommitSession.ProcessSubscriptions, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.Database.config"/>
<processor type="Sitecore.Analytics.Pipelines.CommitSession.ReleaseSharedSession, Sitecore.Analytics" runIfAborted="true" patch:source="Sitecore.Analytics.Tracking.Database.config"/>
</commitSession>
<convertFromXConnectContact patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertFromXConnectContactPipeline.ConvertFromXConnectContactProcessor, Sitecore.Analytics.XConnect"/>
<processor type="Sitecore.ContentTesting.Pipelines.ConvertFromXConnectContact.ConvertTestCombinationsProcessor, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
</convertFromXConnectContact>
<!--
 CONVERT TO XCONNECT INTERACTION
           Convert to MVTestEvent
           Convert to PersonalizationEvent
      
-->
<convertToXConnectInteraction patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectInteractionPipeline.ConvertToXConnectInteractionProcessor, Sitecore.Analytics.XConnect"/>
<processor type="Sitecore.ContentTesting.Pipelines.ConvertToXConnectInteraction.ConvertPersonalizationEvent, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<processor type="Sitecore.ContentTesting.Pipelines.ConvertToXConnectInteraction.ConvertMVTestEvent, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
</convertToXConnectInteraction>
<convertToXConnectEvent patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.EmailCampaign.Cd.Pipelines.ConvertToXConnectEvent.ConvertPageEventDataToEmailEvent, Sitecore.EmailCampaign.Cd" resolve="true" patch:source="Sitecore.EmailExperience.ContentDelivery.config"/>
<processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertPageDataToPageViewEvent, Sitecore.Analytics.XConnect"/>
<processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertOutcomeDataToOutcome, Sitecore.Analytics.XConnect"/>
<processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertPageEventDataToCampaignEvent, Sitecore.Analytics.XConnect"/>
<processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertPageEventDataToDownloadEvent, Sitecore.Analytics.XConnect"/>
<processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertPageEventDataToSearchEvent, Sitecore.Analytics.XConnect"/>
<processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertPageEventDataToGoal, Sitecore.Analytics.XConnect"/>
<!--

        Ensure this processor is the last in the pipeline, because this processor converts page event data to default XConnect Event object.
        
-->
<processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertPageEventDataToEvent, Sitecore.Analytics.XConnect"/>
<processor type="Sitecore.FXM.Pipelines.Tracking.ConvertToXConnectEvent.CopyFxmOutcomeData, Sitecore.FXM" runIfAborted="true" patch:source="Sitecore.FXM.config"/>
</convertToXConnectEvent>
<createItemChangeTest patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.CreateItemChangeTest.PageVersionTest,Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.CreateItemChangeTest.MvTest,Sitecore.Analytics"/>
</createItemChangeTest>
<createTracker patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.CreateTracker.GetTracker, Sitecore.Analytics"/>
</createTracker>
<createVisit patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.CreateVisits.InitializeWithRequestData, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.CreateVisits.XForwardedFor, Sitecore.Analytics">
<HeaderIpIndex>0</HeaderIpIndex>
</processor>
<processor type="Sitecore.Analytics.Pipelines.CreateVisits.UpdateGeoIpData, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.CreateVisits.ParseReferrer, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.CreateVisits.ParseSelfReferrer, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.CreateVisits.SetTrafficType, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.CreateVisits.InitializeProfile, Sitecore.Analytics"/>
<!--
 It is important that this processor is the last in the createVisit pipeline. 
-->
<processor type="Sitecore.Analytics.OmniChannel.Pipelines.CreateVisit.SetChannel, Sitecore.Analytics.OmniChannel" patch:source="Sitecore.Analytics.Channel.config"/>
</createVisit>
<endAnalytics patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.EndAnalytics.CheckPreconditions, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.EndAnalytics.SetRobotSessionTimeOut, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.EndAnalytics.NormalizeVisit, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.EndAnalytics.SaveDuration, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.EndAnalytics.EndTracking, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.EndAnalytics.ReleaseContact, Sitecore.Analytics" runIfAborted="true"/>
</endAnalytics>
<ensureClassification patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.EnsureClassification.CheckPreconditions, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.EnsureClassification.UpdateGeoIpData, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.EnsureClassification.EnsureClassification, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.EnsureClassification.UpdateContactClassification, Sitecore.Analytics"/>
</ensureClassification>
<ensureSessionContext patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.CheckPreconditions, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.EnsureContext, Sitecore.Analytics">
<SessionContextManager ref="tracking/sessionContextManager"/>
</processor>
<processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.EnsureDevice, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.EnsureContactId, Sitecore.Analytics"/>
<!--
 For email rendering sessions having an XDB contact as the recipient this processor
             loads the contact in read-only mode and assigns it to the session. 
-->
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.EnsureSessionContext.LoadEmailRenderSessionContact, Sitecore.EmailCampaign" resolve="true" patch:source="Sitecore.EmailExperience.Core.config">
<ContactRepository ref="contactRepository"/>
</processor>
<processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.LoadContact, Sitecore.Analytics">
<ContactManager ref="tracking/contactManager"/>
</processor>
<processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.CreateContact, Sitecore.Analytics">
<ContactManager ref="tracking/contactManager"/>
</processor>
<processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.SetDummySession, Sitecore.Analytics">
<MaxPageIndexThreshold>50</MaxPageIndexThreshold>
</processor>
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.EnsureSessionContext.EnableExplorerMode, Sitecore.ExperienceExplorer.Analytics" resolve="true" patch:source="Sitecore.ExperienceExplorer.config"/>
</ensureSessionContext>
<excludeRobots patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.ExcludeRobots.TryObtainCachedResult, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.ExcludeRobots.CheckUserAgent, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.ExcludeRobots.CheckIpAddress, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.ExcludeRobots.AddResultToCache, Sitecore.Analytics"/>
</excludeRobots>
<getDictionaryDataStorage patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.DataAccess.Pipelines.GetDictionaryDataStorage.GetDictionaryDataProcessor, Sitecore.Analytics.DataAccess">
<DictionaryData type="Sitecore.Analytics.DataAccess.Dictionaries.DataStorage.ReferenceDataClientDictionary, Sitecore.Analytics.DataAccess" resolve="true"/>
<FallbackDictionaryData type="Sitecore.Analytics.Data.Dictionaries.DictionaryData.Session.SessionDictionaryData, Sitecore.Analytics" singleInstance="true">
<param ref="tracking/sharedSessionState/config" desc="configuration"/>
</FallbackDictionaryData>
</processor>
</getDictionaryDataStorage>
<getItemPersonalizationVisibility patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.GetItemPersonalizationVisibility.CheckUserSettings, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.GetItemPersonalizationVisibility.CheckSectionAvailability, Sitecore.Analytics"/>
<!--
 Ensures that the 'edit profiles' dialog in the Marketing Centre is available for all FXM configuration items. 
-->
<processor type="Sitecore.FXM.Tracking.MatcherPersonalizationVisibilityProcessor, Sitecore.FXM" patch:source="Sitecore.FXM.config"/>
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.GetItemPersonalizationVisibility.ResolveExplorerPresetsRoot, Sitecore.ExperienceExplorer.Analytics" patch:source="Sitecore.ExperienceExplorer.config"/>
</getItemPersonalizationVisibility>
<getRenderingRules patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.GetRenderingRules.FromRendering, Sitecore.Analytics"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetRenderingRules.FilterForEditing, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<processor type="Sitecore.Analytics.Pipelines.GetRenderingRules.FilterForEditing, Sitecore.Analytics"/>
</getRenderingRules>
<initializeInteractionProfile patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.InitializeInteractionProfile.ResetProfiles, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.InitializeInteractionProfile.CopyProfiles, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.InitializeInteractionProfile.ApplyDecay, Sitecore.Analytics" resolve="true"/>
</initializeInteractionProfile>
<initializeKnownDataDictionaries patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.DataAccess.Pipelines.InitializeKnownDataDictionaries.InitializeKnownDataDictionariesProcessor, Sitecore.Analytics.DataAccess"/>
<processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.InitializeKnownDataDictionaries.InitializeDeviceDataDictionaryProcessor, Sitecore.Analytics.XConnect" patch:source="Sitecore.Analytics.Tracking.Database.config"/>
</initializeKnownDataDictionaries>
<initializeTracker patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.InitializeTracker.IsMediaRequest, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.InitializeTracker.CreateVisit, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.InitializeTracker.CreatePage, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.InitializeTracker.EnsureNextPageData, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.RobotDetection.Pipelines.InitializeTracker.Robots, Sitecore.Analytics.RobotDetection" patch:source="Sitecore.Analytics.Tracking.RobotDetection.config"/>
<processor type="Sitecore.Analytics.Pipelines.InitializeTracker.EnsureContactClassification, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.InitializeTracker.RunRules, Sitecore.Analytics"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Analytics.DispatchRequestProcessor, Sitecore.EmailCampaign" resolve="true" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Marks email rendering sessions as transient to prevent recorded data from being saved at the end of the session. 
-->
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.InitializeTracker.MarkEmailRenderSessionTransient, Sitecore.EmailCampaign" resolve="true" patch:source="Sitecore.EmailExperience.Core.config"/>
</initializeTracker>
<mergeContacts patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.MergeContacts.MergeContacts, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.MergeContacts.MergeContactsClassification, Sitecore.Analytics"/>
</mergeContacts>
<parseReferrer patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.ParseReferrer.ParseGenericSearchEngine,Sitecore.Analytics">
<engines hint="raw:AddHostParameterName">
<engine hostname="www.google" parametername="q"/>
<engine hostname="search.yahoo" parametername="p"/>
<engine hostname="www.bing" parametername="q"/>
<engine hostname="search.lycos" parametername="query"/>
<engine hostname="www.baidu" parametername="wd"/>
</engines>
</processor>
</parseReferrer>
<processItem patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.ProcessItem.CollectParameters,Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.ProcessItem.TriggerCampaigns,Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.ProcessItem.RegisterPageEvents,Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.ProcessItem.ProcessProfiles, Sitecore.Analytics"/>
</processItem>
<registerOutcome patch:source="Sitecore.Analytics.Tracking.config">
<!--
 Inspects for live outcomes and kicks off the "submitLiveAutomationEvent" pipeline when one is found. 
-->
<processor type="Sitecore.Xdb.MarketingAutomation.Tracking.Pipelines.RegisterOutcome.LiveOutcomeInspector, Sitecore.Xdb.MarketingAutomation.Tracking" patch:source="Sitecore.Xdb.MarketingAutomation.Tracking.config"/>
</registerOutcome>
<registerPageEvent patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.RegisterPageEvent.RunPageEventRules, Sitecore.Analytics"/>
<!--
 Inspects for live events and kicks off the "submitLiveAutomationEvent" pipeline when one is found. 
-->
<processor type="Sitecore.Xdb.MarketingAutomation.Tracking.Pipelines.RegisterPageEvent.LivePageEventInspector, Sitecore.Xdb.MarketingAutomation.Tracking" patch:source="Sitecore.Xdb.MarketingAutomation.Tracking.config"/>
</registerPageEvent>
<renderingRuleEvaluated patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.ContentTesting.Pipelines.RenderingRuleEvaluated.TestingRule, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
</renderingRuleEvaluated>
<startAnalytics patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.StartAnalytics.CheckPreconditions, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.StartAnalytics.CreateTracker, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.StartAnalytics.StartTracking, Sitecore.Analytics"/>
</startAnalytics>
<startTracking patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.StartTracking.CleanupExplorerFixedMode, Sitecore.ExperienceExplorer.Analytics" resolve="true" patch:source="Sitecore.ExperienceExplorer.config"/>
<processor type="Sitecore.Analytics.Pipelines.StartTracking.RaiseStartTracking, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.StartTracking.InitializeTracker, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.StartTracking.TrackerInitialized, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.StartTracking.UpdateGeoIpData, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.StartTracking.ProcessQueryStringCampaign, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.StartTracking.ProcessQueryStringPageEvent, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.StartTracking.ProcessQueryStringTriggers, Sitecore.Analytics">
<triggers hint="raw:AddTrigger">
<trigger querystring="sc_rss" eventname="RSS"/>
</triggers>
</processor>
<processor type="Sitecore.Analytics.Pipelines.StartTracking.ProcessItem, Sitecore.Analytics"/>
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.StartTracking.ApplyExplorerModel, Sitecore.ExperienceExplorer.Analytics" resolve="true" patch:source="Sitecore.ExperienceExplorer.config"/>
</startTracking>
<submitSessionContext patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.SubmitSessionContext.SaveDevice, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.Database.config"/>
<processor type="Sitecore.Analytics.Pipelines.SubmitSessionContext.SaveVisit, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.Database.config"/>
</submitSessionContext>
<trafficTypes patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.TrafficTypes.Initialize,Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.TrafficTypes.SearchKeywords,Sitecore.Analytics"/>
</trafficTypes>
<transferSession patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.TransferSession.TransferSessionToDifferentCluster, Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.Pipelines.TransferSession.RedirectCurrentSession, Sitecore.Analytics"/>
</transferSession>
<triggerCampaign patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.TriggerCampaign.CheckPreconditions,Sitecore.Analytics"/>
<processor type="Sitecore.Analytics.OmniChannel.Pipelines.TriggerCampaign.SetChannel, Sitecore.Analytics.OmniChannel" resolve="true" patch:source="Sitecore.Analytics.Channel.config"/>
<processor type="Sitecore.Analytics.Pipelines.TriggerCampaign.RegisterPageEvent,Sitecore.Analytics"/>
</triggerCampaign>
<visitEnd patch:source="Sitecore.Analytics.Tracking.config">
<processor type="Sitecore.Analytics.Pipelines.VisitEnd.RunRules,Sitecore.Analytics"/>
</visitEnd>
<!--
 Determines the initial channel for the interaction. 
-->
<determineInteractionChannel patch:source="Sitecore.Analytics.Channel.config">
<processor type="Sitecore.Analytics.OmniChannel.Pipelines.DetermineInteractionChannel.DefaultChannel, Sitecore.Analytics.OmniChannel">
<param decs="channelId">{B418E4F2-1013-4B42-A053-B6D4DCA988BF}</param>
</processor>
<processor type="Sitecore.Analytics.OmniChannel.Pipelines.DetermineInteractionChannel.SearchKeywords, Sitecore.Analytics.OmniChannel">
<param desc="channelId">{B979A670-5AAF-4E63-94AC-C3C3E5BFBE84}</param>
</processor>
<processor type="Sitecore.Analytics.OmniChannel.Pipelines.DetermineInteractionChannel.OrganicBranded, Sitecore.Analytics.OmniChannel">
<param desc="channelId">{FB8FA660-0A07-4EE9-A9F4-930FC5D10AEC}</param>
</processor>
</determineInteractionChannel>
<!--
-
        Pipeline that submits live automation event to Marketing Automation engine.
      
-->
<submitLiveAutomationEvent patch:source="Sitecore.Xdb.MarketingAutomation.Tracking.config">
<!--
 Creates the contact (if it's new) before processing. 
-->
<processor type="Sitecore.Xdb.MarketingAutomation.Tracking.Pipelines.SubmitLiveAutomationEvent.EnsureContact, Sitecore.Xdb.MarketingAutomation.Tracking"/>
<!--
 Adds the ID of the current contact to the data for the live event. 
-->
<processor type="Sitecore.Xdb.MarketingAutomation.Tracking.Pipelines.SubmitLiveAutomationEvent.SetContactId, Sitecore.Xdb.MarketingAutomation.Tracking"/>
<!--
 Adds the whole current interaction to the data for the live event. 
-->
<processor type="Sitecore.Xdb.MarketingAutomation.Tracking.Pipelines.SubmitLiveAutomationEvent.AddCurrentInteraction, Sitecore.Xdb.MarketingAutomation.Tracking"/>
<!--  Filters interaction facets in the live event.  -->
<processor type="Sitecore.Xdb.MarketingAutomation.Tracking.Pipelines.SubmitLiveAutomationEvent.FilterInteractionFacets, Sitecore.Xdb.MarketingAutomation.Tracking"/>
<!--  Filters interaction events in the live event.  -->
<processor type="Sitecore.Xdb.MarketingAutomation.Tracking.Pipelines.SubmitLiveAutomationEvent.FilterInteractionEvents, Sitecore.Xdb.MarketingAutomation.Tracking"/>
<!--  Submits the live event to the Automation Engine.  -->
<processor type="Sitecore.Xdb.MarketingAutomation.Tracking.Pipelines.SubmitLiveAutomationEvent.SubmitLiveEvent, Sitecore.Xdb.MarketingAutomation.Tracking"/>
<!--
 Updates the tracker facets if enrollments have been updated. 
-->
<processor type="Sitecore.Xdb.MarketingAutomation.Tracking.Pipelines.SubmitLiveAutomationEvent.UpdateTrackerFacets, Sitecore.Xdb.MarketingAutomation.Tracking"/>
</submitLiveAutomationEvent>
<!--  Mvc Events  -->
<mvc.actionExecuting patch:source="Sitecore.Mvc.config"/>
<mvc.actionExecuted patch:source="Sitecore.Mvc.config">
<processor type="Sitecore.Mvc.Pipelines.MvcEvents.ActionExecuted.CacheControl, Sitecore.Mvc"/>
</mvc.actionExecuted>
<mvc.exception patch:source="Sitecore.Mvc.config">
<processor type="Sitecore.Mvc.Pipelines.MvcEvents.Exception.ShowAspNetErrorMessage, Sitecore.Mvc"/>
</mvc.exception>
<mvc.resultExecuting patch:source="Sitecore.Mvc.config"/>
<mvc.resultExecuted patch:source="Sitecore.Mvc.config"/>
<!--  Mvc Request  -->
<mvc.requestBegin patch:source="Sitecore.Mvc.config">
<processor type="Sitecore.Mvc.Pipelines.Request.RequestBegin.SetupPageContext, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Request.RequestBegin.ExecuteFormHandler, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Request.RequestBegin.EnsureLoggedInForPreview, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Analytics.Pipelines.MvcEvents.RequestBegin.StartTracking, Sitecore.Mvc.Analytics" patch:source="Sitecore.MvcAnalytics.config"/>
<processor type="Sitecore.ContentTesting.Mvc.Pipelines.Response.RequestBegin.EvaluateTestExposure, Sitecore.ContentTesting.Mvc" patch:source="Sitecore.ContentTesting.Mvc.config"/>
</mvc.requestBegin>
<mvc.requestEnd patch:source="Sitecore.Mvc.config">
<processor type="Sitecore.Mvc.ExperienceEditor.Pipelines.Request.RequestEnd.AddPageExtenders, Sitecore.Mvc.ExperienceEditor" patch:source="Sitecore.MVC.ExperienceEditor.config"/>
</mvc.requestEnd>
<mvc.createController patch:source="Sitecore.Mvc.config">
<processor type="Sitecore.Mvc.DeviceSimulator.Pipelines.CreateController.CreateSimulatorController, Sitecore.Mvc.DeviceSimulator" patch:source="Sitecore.MVC.DeviceSimulator.config"/>
<processor type="Sitecore.Mvc.Pipelines.Request.CreateController.CreateItemController, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Request.CreateController.CreateDefaultController, Sitecore.Mvc"/>
</mvc.createController>
<mvc.getModel patch:source="Sitecore.Mvc.config">
<processor type="Sitecore.Mvc.Pipelines.Response.GetModel.GetFromItem, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetModel.GetFromProperty, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetModel.GetFromLayout, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetModel.GetFromRenderingItem, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetModel.CreateDefaultRenderingModel, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetModel.InitializeModel, Sitecore.Mvc"/>
</mvc.getModel>
<!--  Mvc Response  -->
<mvc.getPageItem patch:source="Sitecore.Mvc.config">
<processor type="Sitecore.Mvc.Pipelines.Response.GetPageItem.SetLanguage, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetPageItem.GetFromAlias, Sitecore.Mvc" resolve="true"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetPageItem.GetFromRouteValue, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetPageItem.GetFromRouteUrl, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetPageItem.GetFromOldContext, Sitecore.Mvc"/>
<processor type="Sitecore.ContentTesting.Mvc.Pipelines.Response.GetPageItem.PageLevelTestVariantResolver, Sitecore.ContentTesting.Mvc" patch:source="Sitecore.ContentTesting.Mvc.config"/>
<processor type="Sitecore.ContentTesting.Mvc.Pipelines.Response.GetPageItem.ContentTestVariantResolver, Sitecore.ContentTesting.Mvc" patch:source="Sitecore.ContentTesting.Mvc.config"/>
</mvc.getPageItem>
<mvc.buildPageDefinition patch:source="Sitecore.Mvc.config">
<processor type="Sitecore.Mvc.Pipelines.Response.BuildPageDefinition.CreatePageDefinitionInstance, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.BuildPageDefinition.ProcessXmlBasedLayoutDefinition, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.BuildPageDefinition.ProcessLoginRendering, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.BuildPageDefinition.ProcessMasterRendering, Sitecore.Speak.Client" patch:source="Sitecore.Speak.config"/>
</mvc.buildPageDefinition>
<mvc.getPageRendering patch:source="Sitecore.Mvc.config">
<processor type="Sitecore.Mvc.ExperienceEditor.Pipelines.Response.GetPageRendering.GetDesigningRendering, Sitecore.Mvc.ExperienceEditor" patch:source="Sitecore.MVC.ExperienceEditor.config"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetPageRendering.GetLayoutRendering, Sitecore.Mvc"/>
</mvc.getPageRendering>
<mvc.getXmlBasedLayoutDefinition patch:source="Sitecore.Mvc.config">
<processor type="Sitecore.Mvc.ExperienceEditor.Pipelines.Response.GetXmlBasedLayoutDefinition.GetPageDesigningLayout, Sitecore.Mvc.ExperienceEditor" patch:source="Sitecore.MVC.ExperienceEditor.config"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetXmlBasedLayoutDefinition.GetFromLayoutField, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.ExperienceEditor.Pipelines.Response.GetXmlBasedLayoutDefinition.SetLayoutContext, Sitecore.Mvc.ExperienceEditor" patch:source="Sitecore.MVC.ExperienceEditor.config"/>
</mvc.getXmlBasedLayoutDefinition>
<mvc.renderPlaceholder patch:source="Sitecore.Mvc.config">
<processor type="Sitecore.Mvc.Pipelines.Response.RenderPlaceholder.InitializeProfiling, Sitecore.Mvc"/>
<processor type="Sitecore.FXM.Pipelines.Mvc.RenderPlaceholder.EnterFxmPlaceholderContext, Sitecore.FXM" resolve="true" patch:source="Sitecore.FXM.config"/>
<processor type="Sitecore.Mvc.Pipelines.Response.RenderPlaceholder.EnterPlaceholderContext, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.ExperienceEditor.Pipelines.Response.RenderPlaceholder.AddWrapper, Sitecore.Mvc.ExperienceEditor" patch:source="Sitecore.MVC.ExperienceEditor.config"/>
<processor type="Sitecore.Mvc.Pipelines.Response.RenderPlaceholder.PerformRendering, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.RenderPlaceholder.RenderAddedContent, Sitecore.Speak.Client" patch:source="Sitecore.Speak.Mvc.config"/>
</mvc.renderPlaceholder>
<mvc.renderRendering patch:source="Sitecore.Mvc.config">
<processor type="Sitecore.Mvc.Pipelines.Response.RenderRendering.InitializeProfiling, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.RenderRendering.StartStatisticRecording, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.RenderRendering.ResolveArea, Sitecore.Mvc">
<param type="Sitecore.Mvc.Pipelines.Response.RenderRendering.ChainedAreaResolveStrategy, Sitecore.Mvc" desc="areaResolver">
<Resolvers hint="list">
<resolver type="Sitecore.Mvc.Pipelines.Response.RenderRendering.RenderingDefinitionAreaResolveStrategy, Sitecore.Mvc"/>
<resolver type="Sitecore.Mvc.Pipelines.Response.RenderRendering.RenderingParametersAreaResolveStrategy, Sitecore.Mvc"/>
<resolver type="Sitecore.Mvc.Pipelines.Response.RenderRendering.RenderingLayoutAreaResolveStrategy, Sitecore.Mvc"/>
</Resolvers>
</param>
<param type="Sitecore.Mvc.AreaNamespaceRegistry, Sitecore.Mvc" desc="areaNamespaceRegistry"/>
</processor>
<processor type="Sitecore.Mvc.Pipelines.Response.RenderRendering.SetCacheability, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.RenderRendering.EnterRenderingContext, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.RenderRendering.GenerateCacheKey, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.RenderRendering.RenderFromCache, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.RenderRendering.StartRecordingOutput, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.ExperienceEditor.Pipelines.Response.RenderRendering.AddWrapper, Sitecore.Mvc.ExperienceEditor" resolve="true" patch:source="Sitecore.MVC.ExperienceEditor.config"/>
<processor type="Sitecore.Mvc.Pipelines.Response.RenderRendering.ExecuteRenderer, Sitecore.Mvc">
<param type="Sitecore.Mvc.Pipelines.Response.RenderRendering.HttpExceptionWrappingRendererErrorStrategy, Sitecore.Mvc" desc="rendererErrorHandler">
<param type="Sitecore.Mvc.Pipelines.Response.RenderRendering.ChainedRendererErrorStrategy, Sitecore.Mvc" desc="rendererErrorHandler">
<Handlers hint="list">
<handler type="Sitecore.Mvc.Pipelines.Response.RenderRendering.PageModeRenderingErrorStrategy, Sitecore.Mvc"/>
</Handlers>
</param>
</param>
</processor>
<processor type="Sitecore.Mvc.Pipelines.Response.RenderRendering.AddRecordedHtmlToCache, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.RenderRendering.RecordStatistic, Sitecore.Mvc"/>
</mvc.renderRendering>
<mvc.getRenderer patch:source="Sitecore.Mvc.config">
<processor type="Sitecore.Mvc.Analytics.Pipelines.Response.GetRenderer.CustomizeRendering, Sitecore.Mvc.Analytics" patch:source="Sitecore.MvcAnalytics.config"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetRenderer.GetViewRenderer, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetRenderer.GetItemRenderer, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetRenderer.GetXsltRenderer, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetRenderer.GetControllerRenderer, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetRenderer.GetMethodRenderer, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetRenderer.GetUrlRenderer, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetRenderer.GetDefaultRenderer, Sitecore.Mvc"/>
</mvc.getRenderer>
<mvc.getDynamicPlaceholderKeys patch:source="Sitecore.Mvc.config">
<processor type="Sitecore.Mvc.Pipelines.Response.GetDynamicPlaceholderKeys.GetRenderingUniqueSuffix, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetDynamicPlaceholderKeys.GetUniqueKeysWithinRendering, Sitecore.Mvc"/>
<processor type="Sitecore.Mvc.Pipelines.Response.GetDynamicPlaceholderKeys.AggregatePlaceholderKeys, Sitecore.Mvc"/>
</mvc.getDynamicPlaceholderKeys>
<mvc.getDynamicPlaceholderInitialKey patch:source="Sitecore.Mvc.config">
<processor type="Sitecore.Mvc.Pipelines.Response.GetDynamicPlaceholderInitialKey.RemovePlaceholderUniqueKeySuffix, Sitecore.Mvc" mode="on"/>
</mvc.getDynamicPlaceholderInitialKey>
<mvc.customizeRendering patch:source="Sitecore.MvcAnalytics.config">
<processor type="Sitecore.ContentTesting.Mvc.Pipelines.Response.CustomizeRendering.SelectVariation, Sitecore.ContentTesting.Mvc" patch:source="Sitecore.ContentTesting.Mvc.config"/>
<processor type="Sitecore.Mvc.Analytics.Pipelines.Response.CustomizeRendering.Personalize, Sitecore.Mvc.Analytics"/>
</mvc.customizeRendering>
<ssc.apiKeyValidation patch:source="Sitecore.Services.Client.config">
<processor type="Sitecore.Services.Infrastructure.Sitecore.Pipelines.ApiKeyValidation.ApiKeyValidatior, Sitecore.Services.Infrastructure.Sitecore" resolve="true"/>
<processor type="Sitecore.Services.Infrastructure.Sitecore.Pipelines.ApiKeyValidation.CheckControllerPermission, Sitecore.Services.Infrastructure.Sitecore" resolve="true"/>
</ssc.apiKeyValidation>
<itemWebApiSearch patch:source="Sitecore.Speak.ItemWebApi.config">
<processor type="Sitecore.ItemWebApi.Pipelines.Search.ParseSearchText, Sitecore.Speak.ItemWebApi"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Search.SetRootItem, Sitecore.Speak.ItemWebApi"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Search.SetLanguage, Sitecore.Speak.ItemWebApi"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Search.SetSearchParameters, Sitecore.Speak.ItemWebApi"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Search.FilterItems, Sitecore.Speak.ItemWebApi"/>
<processor type="Sitecore.ContentTesting.Pipelines.ItemWebApiSearch.FilterLatestVersion, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Search.config"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Search.Facets, Sitecore.Speak.ItemWebApi"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Search.Sorting, Sitecore.Speak.ItemWebApi"/>
<processor type="Sitecore.ItemWebApi.Pipelines.Search.Paging, Sitecore.Speak.ItemWebApi"/>
</itemWebApiSearch>
<speak.client.addBinding patch:source="Sitecore.Speak.Pipelines.config">
<processor type="Sitecore.Web.Pipelines.AddBindings.AddConverterBinding, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.AddBindings.AddSimpleBinding, Sitecore.Speak.Client"/>
</speak.client.addBinding>
<speak.client.getClick patch:source="Sitecore.Speak.Pipelines.config">
<processor type="Sitecore.Web.Pipelines.GetClick.HandleClick, Sitecore.Speak.Client"/>
</speak.client.getClick>
<speak.client.getControlId patch:source="Sitecore.Speak.Pipelines.config">
<processor type="Sitecore.Web.Pipelines.GetControlId.HandleEmptyControlId, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.GetControlId.HandleInvalidId, Sitecore.Speak.Client"/>
</speak.client.getControlId>
<speak.client.getOverlays patch:source="Sitecore.Speak.Pipelines.config">
<processor type="Sitecore.Web.Pipelines.GetOverlays.GetWebConfigOverlays, Sitecore.Speak.Client"/>
</speak.client.getOverlays>
<speak.client.getPageScripts patch:source="Sitecore.Speak.Pipelines.config">
<processor type="Sitecore.Web.Pipelines.GetPageScripts.GetFileNames, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.GetPageScripts.Minify, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.GetPageScripts.BuildScripts, Sitecore.Speak.Client"/>
</speak.client.getPageScripts>
<speak.client.getPageStylesheets patch:source="Sitecore.Speak.Pipelines.config">
<processor type="Sitecore.Web.Pipelines.GetPageStylesheets.GetVersionStyles, Sitecore.Speak.Client" patch:source="Sitecore.Speak.Components.config">
<stylesheets hint="raw:AddStylesheet" patch:source="Sitecore.Speak.Components.config">
<stylesheet path="/sitecore/shell/client/Speak/Assets/css/speak-default-theme.css" version="1"/>
<stylesheet path="/sitecore/shell/client/Business Component Library/version 2/Assets/stylesheets/Speak Components - DefaultTheme/speak-components.css" version="2" patch:source="Sitecore.Speak.Components.config"/>
</stylesheets>
</processor>
<processor type="Sitecore.Web.Pipelines.GetPageStylesheets.GetLayoutStyles, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.GetPageStylesheets.GetFileNames, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.GetPageStylesheets.GetTheme, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.GetPageStylesheets.GetSubthemes, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.GetPageStylesheets.Minify, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.GetPageStylesheets.BuildStylesheets, Sitecore.Speak.Client"/>
</speak.client.getPageStylesheets>
<speak.client.getStyle patch:source="Sitecore.Speak.Pipelines.config">
<processor type="Sitecore.Web.Pipelines.GetStyle.Margin, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.GetStyle.Padding, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.GetStyle.Border, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.GetStyle.IsVisible, Sitecore.Speak.Client"/>
</speak.client.getStyle>
<speak.client.initialize.layout patch:source="Sitecore.Speak.Pipelines.config">
<processor type="Sitecore.Web.Pipelines.InitializeSpeakLayout.CheckUserAccess, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.InitializeSpeakLayout.SetDisplayMode, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.InitializeSpeakLayout.SetAntiForgeryToken, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.InitializeSpeakLayout.DisableAnalytics, Sitecore.Speak.Client"/>
<processor type="Sitecore.Marketing.Client.Pipelines.InitializeSpeakLayout.AuthorizeXdbAccess, Sitecore.Marketing.Client" mode="on" patch:source="Sitecore.Marketing.Client.config"/>
<processor type="Sitecore.ContentTesting.Pipelines.InitializeSpeakLayout.AuthorizeContentTestingAccess, Sitecore.ContentTesting" mode="on" patch:source="Sitecore.ContentTesting.config"/>
</speak.client.initialize.layout>
<speak.client.parseRenderingParameter patch:source="Sitecore.Speak.Pipelines.config">
<processor type="Sitecore.Web.Pipelines.SetAttribute.ParseDataBinding, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.SetAttribute.ParseContextItemValue, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.SetAttribute.ParseFormValue, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.SetAttribute.ParseQueryStringValue, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.SetAttribute.ParseSessionValue, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.SetAttribute.ParseAppModelValue, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.SetAttribute.ParsePageModelValue, Sitecore.Speak.Client"/>
</speak.client.parseRenderingParameter>
<speak.client.resolveRequire patch:source="Sitecore.Speak.Pipelines.config">
<processor type="Sitecore.Web.Pipelines.ResolveRequire.CustomHandler, Sitecore.Speak.Client"/>
</speak.client.resolveRequire>
<!--
 Enable this processor to precompile MVC views. This allows SPEAK applications
           to start up faster by precompiling the views at start up (in a separate thread).
           Paths: Pipe (|) separated list of folders to precompile (recursively).           
      <initialize>
        <processor type="Sitecore.Pipelines.Initialize.PrecompileSpeakViews, Sitecore.Speak.Client">
          <Paths>/sitecore/shell/client/BCL2</Paths>
        </processor>
      </initialize>  
      
-->
<!--  Configure JavaScript sources for Campaign Creator  -->
<speak.client.resolveScript patch:source="Sitecore.Speak.Pipelines.config">
<processor type="Sitecore.Resources.Pipelines.ResolveScript.Main, Sitecore.Speak.Client"/>
<processor type="Sitecore.Speak.Components.Pipelines.ResolveScript.Rule, Sitecore.Speak.Components" patch:source="Sitecore.Speak.Components.config"/>
<processor type="Sitecore.Resources.Pipelines.ResolveScript.Rule, Sitecore.Speak.Client"/>
<processor type="Sitecore.Speak.Components.Pipelines.ResolveScript.Pipeline, Sitecore.Speak.Components" patch:source="Sitecore.Speak.Components.config"/>
<processor type="Sitecore.Resources.Pipelines.ResolveScript.Pipeline, Sitecore.Speak.Client"/>
<processor type="Sitecore.Resources.Pipelines.ResolveScript.Bundle, Sitecore.Speak.Client">
<allowedFiles hint="raw:AddAllowedFile">
<allowedFile folder="/sitecore/shell/client/Speak/Assets"/>
<allowedFile folder="/sitecore/shell/client" extensions="js,css"/>
<allowedFile folder="/-/speak/v1/" extensions="js"/>
</allowedFiles>
</processor>
<processor type="Sitecore.Resources.Pipelines.ResolveScript.ResolveBaseComponent, Sitecore.Speak.Client"/>
<processor type="Sitecore.Resources.Pipelines.ResolveScript.Controls, Sitecore.Speak.Client" patch:source="Sitecore.PathAnalyzer.Client.config">
<sources hint="raw:AddSource" patch:source="Sitecore.PathAnalyzer.Client.config">
<source folder="/sitecore/shell/client/Speak/Assets" category="assets" deep="true" pattern="*.js"/>
<source folder="/sitecore/shell/client/Speak/Layouts/Renderings" category="controls" deep="true" pattern="*.js,*.css"/>
<source folder="/sitecore/shell/client" category="client" deep="true" pattern="*.js,*.css"/>
<source folder="/sitecore/shell/client/speak/layouts/Renderings/Resources/Rules/ConditionsAndActions" category="rules" deep="true" pattern="*.js"/>
<source folder="/sitecore/shell/client/Business Component Library/Layouts/Renderings" category="business" deep="true" pattern="*.js,*.css"/>
<source folder="/sitecore/shell/client/Sitecore/ExperienceEditor/" category="ExperienceEditor" deep="true" pattern="*.js,*.css" patch:source="Sitecore.ExperienceEditor.config"/>
<source folder="/sitecore/shell/client/Sitecore/Speak/Ribbon" category="ribbon" deep="true" pattern="*.js,*.css" patch:source="Sitecore.ExperienceEditor.config"/>
<source folder="/sitecore/shell/client/Applications/ListManager" category="listmanager" deep="true" pattern="*.js,*.css" patch:source="Sitecore.ListManagement.Client.config"/>
<source folder="/sitecore/shell/client/Applications/Marketing/Utilities" category="marketingutilities" deep="true" pattern="*.js,*.css" patch:source="Sitecore.Marketing.Client.config"/>
<source folder="/sitecore/shell/client/Applications/ContentTesting" category="contenttesting" deep="true" pattern="*.js,*.css" patch:source="Sitecore.ContentTesting.config"/>
<source folder="/sitecore/shell/client/Sitecore/ContentTesting" category="contenttesting" deep="true" pattern="*.js,*.css" patch:source="Sitecore.ContentTesting.config"/>
<source folder="/sitecore/shell/client/Applications/ExperienceProfile" category="experienceprofile" deep="true" pattern="*.js" patch:source="Sitecore.ExperienceProfile.Client.config"/>
<source folder="/sitecore/shell/client/Applications/ExperienceProfile" category="cistubs" deep="true" pattern="*.json" patch:source="Sitecore.ExperienceProfile.Client.config"/>
<source folder="/sitecore/shell/client/Business Component Library/version 2/Layouts/Renderings" category="components" deep="true" pattern="*.js,*.css" patch:source="Sitecore.Speak.Components.config"/>
<source folder="/sitecore/shell/client/Business Component Library/version 2/Content/Guidance/Common/Layouts/Renderings" category="guidance" deep="true" pattern="*.js,*.css" patch:source="Sitecore.Speak.Components.config"/>
<source folder="/sitecore/shell/client/Business Component Library/version 2/Layouts/Renderings/Resources/Rules/ConditionsAndActions" category="rule" deep="true" pattern="*.js" patch:source="Sitecore.Speak.Components.config"/>
<source folder="/sitecore/shell/client/Applications/FormsBuilder" category="formsbuilder" deep="true" pattern="*.js,*.css" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config"/>
<source folder="/sitecore/shell/client/Applications/FormsBuilder" category="components" deep="true" pattern="*.js,*.css" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config"/>
<source folder="/sitecore/shell/client/Applications/FXM/" category="FXM" deep="true" pattern="*.js,*.css" patch:source="Sitecore.FXM.Speak.config"/>
<source folder="/sitecore/shell/client/Applications/CampaignManager" category="campaignmanager" deep="true" pattern="*.js,*.css" patch:source="Sitecore.Marketing.Campaigns.Client.config"/>
<source folder="/sitecore/shell/client/Applications/MarketingAutomation" category="ma" deep="true" pattern="*.js,*.css" patch:source="Sitecore.Marketing.Automation.Client.config"/>
<source folder="/sitecore/shell/client/Applications/ECM" category="ecm" deep="true" pattern="*.js,*.css" patch:source="Sitecore.EmailExperience.UI.config"/>
<source folder="/sitecore/shell/client/Applications/EDS" category="eds" deep="true" pattern="*.js,*.css" patch:source="Sitecore.EmailExperience.UI.config"/>
<source folder="/sitecore/shell/client/Applications/PathAnalyzer" category="pathanalyzer" deep="true" pattern="*.js,*.css" patch:source="Sitecore.PathAnalyzer.Client.config"/>
</sources>
</processor>
</speak.client.resolveScript>
<speak.client.buildMainJS patch:source="Sitecore.Speak.Pipelines.config">
<processor type="Sitecore.Web.Pipelines.BuildMainJs.GetAllFiles, Sitecore.Speak.Client" patch:source="Sitecore.Speak.Components.config">
<files hint="raw:AddMainJs" patch:source="Sitecore.Speak.Components.config">
<file path="/sitecore/shell/client/Speak/Assets/lib/core/2.0/speak-require-config-2.json" version="2"/>
<file path="/sitecore/shell/client/Business Component Library/version 2/Assets/lib/bcl-deps-config.json" version="2" patch:source="Sitecore.Speak.Components.config"/>
</files>
</processor>
<processor type="Sitecore.Web.Pipelines.BuildMainJs.ParseContent, Sitecore.Speak.Client"/>
<processor type="Sitecore.Web.Pipelines.BuildMainJs.BuildBundleList, Sitecore.Speak.Client"/>
</speak.client.buildMainJS>
<speak.logout argsType="Sitecore.Pipelines.Logout.LogoutArgs" patch:source="Sitecore.Speak.Pipelines.config">
<processor type="Sitecore.Pipelines.Logout.ClearCache, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Logout.ClearSession, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Logout.RemoveTicket, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Logout.ClearDisplayMode, Sitecore.Kernel" mode="on" resolve="true"/>
</speak.logout>
<!--
  Controls actions performed on presentation components in Page Editor 
-->
<group name="ExperienceEditor" groupName="ExperienceEditor" patch:source="Sitecore.EmailExperience.UI.config">
<pipelines>
<getRibbonControlState>
<processor type="Sitecore.ContentTesting.Pipelines.GetRibbonControlState.CmsOnlyMode, Sitecore.ContentTesting" resolve="true" patch:source="Sitecore.ContentTesting.ExperienceEditor.config"/>
<processor type="Sitecore.ExperienceEditor.Speak.Pipelines.GetRibbonControlState.DisplayMode, Sitecore.ExperienceEditor.Speak" resolve="true"/>
</getRibbonControlState>
<canShowEditor>
<processor type="Sitecore.ExperienceEditor.Pipelines.CanShowEditor.HideEditorForSpecifiedParameters, Sitecore.ExperienceEditor">
<queryString hint="raw:AddQueryStringParameter">
<parameter name="sc_duration" value="temporary"/>
</queryString>
</processor>
</canShowEditor>
<prepareEditorResources>
<processor type="Sitecore.ExperienceEditor.Pipelines.PrepareEditorResources.Processors.RenderHiddenCachedImages, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.ExperienceEditor.Pipelines.PrepareEditorResources.Processors.GenerateSprites, Sitecore.ExperienceEditor" resolve="true"/>
<processor type="Sitecore.ExperienceEditor.Pipelines.PrepareEditorResources.Processors.RenderBundledScripts, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.ExperienceEditor.Pipelines.PrepareEditorResources.Processors.RenderRibbonStyleSheets, Sitecore.ExperienceEditor" resolve="true"/>
</prepareEditorResources>
<preLoadImages>
<!--   Static images   -->
<processor type="Sitecore.ExperienceEditor.Pipelines.PreLoadImages.AddStaticList, Sitecore.ExperienceEditor">
<path>
/sitecore/shell/client/Speak/Assets/img/Speak/MessageBar/sc-message-bar-icons.png
</path>
</processor>
</preLoadImages>
<resourceItemResolver>
<processor type="Sitecore.ExperienceEditor.Pipelines.ResourceItemResolver.ResolveFile, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.ExperienceEditor.Speak.Ribbon.Pipelines.ResourceItemResolver.ResolveSpeakScript, Sitecore.ExperienceEditor.Speak.Ribbon"/>
</resourceItemResolver>
<ribbonStylesheets>
<!--   Static stylesheets   -->
<processor type="Sitecore.ExperienceEditor.Pipelines.RibbonStyleSheets.AddStaticList, Sitecore.ExperienceEditor" patch:source="Sitecore.ContentTesting.ExperienceEditor.config">
<path>
/sitecore/shell/client/Sitecore/ExperienceEditor/PageEditbar/PageEditbar.css
</path>
<path>
/sitecore/shell/client/Sitecore/Speak/Ribbon/Controls/QuickBar/QuickBar.css
</path>
<path>
/sitecore/shell/client/Sitecore/Speak/Ribbon/Controls/Strip/Strip.css
</path>
<path>
/sitecore/shell/client/Sitecore/Speak/Ribbon/Controls/Panel/Panel.css
</path>
<path>
/sitecore/shell/client/Sitecore/Speak/Ribbon/Controls/SmallCheckButton/SmallCheckButton.css
</path>
<path>
/sitecore/shell/client/Sitecore/Speak/Ribbon/Controls/BreadCrumb/Breadcrumb.css
</path>
<path patch:source="Sitecore.ContentTesting.ExperienceEditor.config">
/sitecore/shell/client/Sitecore/Speak/Ribbon/Panels/TestStatusPanel.css
</path>
</processor>
</ribbonStylesheets>
<pageEditingStyleSheets>
<processor type="Sitecore.ExperienceEditor.Pipelines.PageEditingStyleSheets.Processors.ResolveSystemStyleSheets, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.ExperienceEditor.Pipelines.PageEditingStyleSheets.Processors.AddStaticList, Sitecore.ExperienceEditor" patch:source="Sitecore.ContentTesting.ExperienceEditor.config">
<path>
/sitecore/shell/client/Sitecore/Speak/Ribbon/Controls/BreadCrumb/Breadcrumb.css
</path>
<path>
/sitecore/shell/client/Sitecore/ExperienceEditor/Pages/LeftOverflowPanel/LeftOverflowPanel.css
</path>
<path patch:source="Sitecore.ContentTesting.ExperienceEditor.config">
/sitecore/shell/client/sitecore/experienceeditor/pipelines/initializepageedit/optimizationviewmode.css
</path>
</processor>
</pageEditingStyleSheets>
<getPageModeCapabilities>
<processor type="Sitecore.ExperienceEditor.Pipelines.GetPageModeCapabilities.DefaultCapabilities, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetPageModeCapabilities.ContentTestingCapabilities, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.ExperienceEditor.config"/>
</getPageModeCapabilities>
<getExperienceEditorRibbon>
<processor type="Sitecore.EmailCampaign.Controls.ExperienceEditorExtension.AddExmEditRibbon, Sitecore.EmailCampaign.Cm.UI" patch:source="Sitecore.EmailExperience.UI.config"/>
<processor type="Sitecore.FXM.Speak.Ribbon.GetExperienceEditorRibbon.AddFxmEditRibbon, Sitecore.FXM.Speak" patch:source="Sitecore.FXM.Speak.config"/>
<processor type="Sitecore.ExperienceEditor.Speak.Ribbon.Pipelines.GetExperienceEditorRibbon.AddWebEditRibbon, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<processor type="Sitecore.ExperienceEditor.Speak.Ribbon.Pipelines.GetExperienceEditorRibbon.AddWebEditContentEditor, Sitecore.ExperienceEditor.Speak.Ribbon"/>
</getExperienceEditorRibbon>
<!--
  Controls actions performed on presentation components in Experience Editor 
-->
<executePageEditorAction>
<!--  Analytics pipeline  -->
<processor type="Sitecore.ContentTesting.Pipelines.ExecutePageEditorAction.ActivateTestVariation, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.ExperienceEditor.config"/>
<processor type="Sitecore.ContentTesting.Pipelines.ExecutePageEditorAction.ActivateCondition, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.ExperienceEditor.config"/>
<processor type="Sitecore.Pipelines.ExecutePageEditorAction.InsertRendering, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.Pipelines.ExecutePageEditorAction.ReplaceRendering, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.Pipelines.ExecutePageEditorAction.PreviewRendering, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.Pipelines.ExecutePageEditorAction.StopIfSublayout, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.Mvc.ExperienceEditor.Pipelines.ExecutePageEditorAction.TryGetMvcRendering, Sitecore.Mvc.ExperienceEditor" patch:source="Sitecore.MVC.ExperienceEditor.config"/>
<processor type="Sitecore.Pipelines.ExecutePageEditorAction.TryGetXslContol, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.Pipelines.ExecutePageEditorAction.TryGetWebControl, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.Pipelines.ExecutePageEditorAction.InitActionHandler, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.FXM.Client.Pipelines.ExperienceEditor.ExecutePageEditorAction.TryGetFxmMvcWebControl, Sitecore.FXM.Client" patch:source="Sitecore.FXM.config"/>
<processor type="Sitecore.Pipelines.ExecutePageEditorAction.GetDefaultControl, Sitecore.ExperienceEditor"/>
</executePageEditorAction>
<executePageEditorActionArgumentResolver>
<processor type="Sitecore.ExperienceEditor.Pipelines.ExecutePageEditorActionArgumentResolver.EditorArguments, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.ContentTesting.Pipelines.ExecutePageEditorActionArgumentResolver.PersonalizationArguments, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.ExperienceEditor.config"/>
<processor type="Sitecore.ContentTesting.Pipelines.ExecutePageEditorActionArgumentResolver.TestVarioationArguments, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.ExperienceEditor.config"/>
</executePageEditorActionArgumentResolver>
<getPageEditorNotifications>
<processor type="Sitecore.ExperienceEditor.Pipelines.GetPageEditorNotifications.LanguageAccessNotification, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.Pipelines.GetPageEditorNotifications.GetWorkflowNotification, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.Pipelines.GetPageEditorNotifications.NeverPublishNotification, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.Pipelines.GetPageEditorNotifications.FallbackFieldsCountNotification, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.Pipelines.GetPageEditorNotifications.ReadOnlyNotification, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.Pipelines.GetPageEditorNotifications.GetLockingNotification, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.Pipelines.GetPageEditorNotifications.GetWriteAccessDeniedNotification, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetPageEditorNotifications.GetContentTestingNotifications, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
</getPageEditorNotifications>
<!--
 Gets the validators, that will be executed when saving page in Experience Editor
-->
<getPageEditorValidators>
<processor type="Sitecore.Pipelines.GetPageEditorValidators.CheckSettings, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.Pipelines.GetPageEditorValidators.GetItemValidators, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.Pipelines.GetPageEditorValidators.GetGlobalValidators, Sitecore.ExperienceEditor"/>
<processor type="Sitecore.Pipelines.GetPageEditorValidators.GetFieldValidators, Sitecore.ExperienceEditor"/>
</getPageEditorValidators>
<pageEditingScripts>
<!--   Base scripts   -->
<processor type="Sitecore.ExperienceEditor.Pipelines.PageEditingScripts.AddDeclaredScripts, Sitecore.ExperienceEditor" patch:source="Sitecore.ContentTesting.ExperienceEditor.config">
<path>
/sitecore/shell/Controls/Lib/Console/ConsoleStub.js
</path>
<path>
/sitecore/shell/Controls/Lib/jQuery/jquery-1.6.4.min.js
</path>
<path>
/sitecore/shell/Controls/Lib/jQuery/jQueryUI/1.10.3/jquery-ui-1.10.3.min.js
</path>
<path>
/sitecore/shell/Controls/Lib/jQuery/jquery.tmpl.min.js
</path>
<path>
/sitecore/shell/Controls/Lib/jQuery/jQuery.noconflict.strict.js
</path>
<path>
/sitecore/shell/Controls/Lib/jQuery/jQuery.scextensions.js
</path>
<path>/sitecore/shell/Controls/Lib/JSON/JSON2.min.js</path>
<path>/sitecore/shell/Controls/Lib/Base/base.js</path>
<path>
/sitecore/shell/Applications/Content Manager/WordOCX/WordOCX.js
</path>
<path>/sitecore/shell/Applications/Page Modes/Utility.js</path>
<path>/sitecore/shell/Applications/Page Modes/Event.js</path>
<path>/sitecore/shell/Applications/Page Modes/Cache.js</path>
<path>
/sitecore/shell/Applications/Page Modes/ChromeTypes/ChromeType.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/NotificationBar.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/PositioningManager.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/PageEditor.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/InlineEditingUtil.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/ChromeManager.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/DesignManager.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/LayoutDefinition.js
</path>
<path>/sitecore/shell/Applications/Page Modes/Chrome.js</path>
<path>
/sitecore/shell/Applications/Page Modes/ChromeControls.js
</path>
<path>
/sitecore/shell/Controls/Rich Text Editor/RTEfixes.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/RichControls/Context.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/RichControls/Bar/Bar.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/RichControls/Bar/Panel.js
</path>
<!--   Personalization   -->
<path patch:source="Sitecore.ContentTesting.ExperienceEditor.config">
/sitecore/shell/Applications/Page Modes/Personalization/RenderingCache.js
</path>
<path patch:source="Sitecore.ContentTesting.ExperienceEditor.config">
/sitecore/shell/Applications/Page Modes/Personalization/Condition.js
</path>
<path patch:source="Sitecore.ContentTesting.ExperienceEditor.config">
/sitecore/shell/Applications/Page Modes/Personalization/ConditionStateStorage.js
</path>
<path patch:source="Sitecore.ContentTesting.ExperienceEditor.config">
/sitecore/shell/Applications/Page Modes/Personalization/ControlsContext.js
</path>
<path patch:source="Sitecore.ContentTesting.ExperienceEditor.config">
/sitecore/shell/Applications/Page Modes/Personalization/Panel.js
</path>
<path patch:source="Sitecore.ContentTesting.ExperienceEditor.config">
/sitecore/shell/Applications/Page Modes/Personalization/DropDown.js
</path>
</processor>
<!--   Content Editing   -->
<processor type="Sitecore.ExperienceEditor.Pipelines.PageEditingScripts.AddDeclaredScripts, Sitecore.ExperienceEditor">
<path>
/sitecore/shell/Applications/Page Modes/Position.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/ChromeFrame.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/SelectionFrame.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/HoverFrame.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/HighlightFrame.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/ChromeTypes/PlaceholderChromeType.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/ChromeTypes/RenderingChromeType.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/ChromeTypes/FieldChromeType.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/ChromeTypes/EditFrameChromeType.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/ChromeTypes/WordFieldChromeType.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/ChromeTypes/WrapperlessFieldChromeType.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/PlaceholderSorting.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/PlaceholderInsertion.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/MoveControlFrame.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/ChromeHighlightManager.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/ChromeOverlay.js
</path>
<path>
/sitecore/shell/Controls/SitecoreOutOfFrameGallery.js
</path>
<path>/sitecore/shell/Applications/WebEdit/WebEdit.js</path>
</processor>
<processor type="Sitecore.ContentTesting.Pipelines.PageEditingScripts.AddVariationTestingScripts, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.ExperienceEditor.config">
<!--   Test Variation   -->
<path>
/sitecore/shell/Applications/Page Modes/Testing/Panel.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/Testing/ControlsContext.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/Testing/DropDown.js
</path>
<path>
/sitecore/shell/Applications/Page Modes/Testing/RenderingCache.js
</path>
</processor>
</pageEditingScripts>
</pipelines>
</group>
<injectExperienceEditorRibbonComponents patch:source="Sitecore.ExperienceEditor.config"/>
<!--
 changeEditorResourcesToInclude pipeline is no longer supported please use pageEditingScripts pipeline instead 
-->
<changeEditorResourcesToInclude patch:source="Sitecore.ExperienceEditor.config"/>
<group name="ContentTagging" groupName="ContentTagging" patch:source="Sitecore.ContentTagging.OpenCalais.config">
<pipelines>
<getTaggingConfiguration>
<processor type="Sitecore.ContentTagging.Pipelines.GetTaggingConfiguration.GetDefaultConfigurationName, Sitecore.ContentTagging" resolve="true"/>
<processor type="Sitecore.ContentTagging.Pipelines.GetTaggingConfiguration.BuildConfiguration, Sitecore.ContentTagging" resolve="true"/>
</getTaggingConfiguration>
<tagContent>
<processor type="Sitecore.ContentTagging.OpenCalais.Pipelines.TagContent.ValidateContent, Sitecore.ContentTagging.OpenCalais" resolve="true" patch:source="Sitecore.ContentTagging.OpenCalais.config"/>
<processor type="Sitecore.ContentTagging.Pipelines.TagContent.RetrieveContent, Sitecore.ContentTagging" resolve="true"/>
<processor type="Sitecore.ContentTagging.Pipelines.TagContent.Normalize, Sitecore.ContentTagging" resolve="true"/>
<processor type="Sitecore.ContentTagging.Pipelines.TagContent.GetTags, Sitecore.ContentTagging" resolve="true"/>
<processor type="Sitecore.ContentTagging.Pipelines.TagContent.StoreTags, Sitecore.ContentTagging" resolve="true"/>
<processor type="Sitecore.ContentTagging.Pipelines.TagContent.ApplyTags, Sitecore.ContentTagging" resolve="true"/>
</tagContent>
<normalizeContent>
<processor type="Sitecore.ContentTagging.Pipelines.NormalizeContent.StripHtml, Sitecore.ContentTagging" resolve="true"/>
</normalizeContent>
</pipelines>
</group>
<!--
  IMPORT MEDIA CONTACTS
            The pipeline is responsible for importing of the contacts from file stored in media library into the xDB.
      
-->
<listManagement.importMediaContacts patch:source="Sitecore.ListManagement.config">
<processor type="Sitecore.ListManagement.Services.Pipelines.ImportMediaContacts.GetMediaStream, Sitecore.ListManagement.Services" resolve="true"/>
<processor type="Sitecore.ListManagement.Services.Pipelines.ImportMediaContacts.GetContactsFromStream, Sitecore.ListManagement.Services">
<param ref="/sitecore/import/streamContactImporter"/>
<param type="Sitecore.ListManagement.Configuration.ListManagementSettings, Sitecore.ListManagement" singleinstance="true" resolve="true"/>
</processor>
<processor type="Sitecore.ListManagement.Services.Pipelines.ImportMediaContacts.RemoveMediaItem, Sitecore.ListManagement.Services" resolve="true"/>
</listManagement.importMediaContacts>
<!--
 ADD PERSONALIZATION VARIABLES
           Loads and filters the personalization test variables in the test set
      
-->
<addPersonalizationVariables patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.AddPersonalizationVariables.FilterRules, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.AddPersonalizationVariables.AddRules, Sitecore.ContentTesting"/>
</addPersonalizationVariables>
<!--
 ADD SUGGESTED PERSONALIZATION
           Apply suggested personalization to item
      
-->
<AddSuggestedPersonalizations patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.AddSuggestedPersonalizations.AddVersion, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.AddSuggestedPersonalizations.AddPersonalizationVariants, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.AddSuggestedPersonalizations.DeactivatePersonalizationRules, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.AddSuggestedPersonalizations.OpenExperienceEditorWithOptimizationMode, Sitecore.ContentTesting"/>
</AddSuggestedPersonalizations>
<!--
 CALCULATE TEST SCORE
           Calculates the score for the test
      
-->
<calculateTestScore patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.CalculateTestScore.GetAveragePageViews, Sitecore.ContentTesting">
<QueryDays>30</QueryDays>
</processor>
<processor type="Sitecore.ContentTesting.Pipelines.CalculateTestScore.CalculateBestEffect, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.CalculateTestScore.CalculateTestScore, Sitecore.ContentTesting"/>
</calculateTestScore>
<!--
 CAN CANCEL TEST
           Determine if a test can be cancelled
      
-->
<canCancelTest patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.CanControlTest.IsAdmin, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.CanControlTest.IsTestOwner, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.CanControlTest.HasRole, Sitecore.ContentTesting">
<roles hint="list:AddRole">
<role>sitecore\Analytics Advanced Testing</role>
</roles>
</processor>
</canCancelTest>
<!--
 CANCEL TEST
           Cancels a test and reverts test candidates back to their original state
      
-->
<cancelTest patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.CancelTest.CheckCanCancelTest, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.CancelTest.ProcessTestWorkflow, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.CancelTest.CreateHistoricalTestData, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.CancelTest.RevertContent, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.CancelTest.PublishHostItem, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.CancelTest.RemoveDraftTestDefinition, Sitecore.ContentTesting"/>
</cancelTest>
<!--
 CAN STOP TEST
           Determine if a test can be stopped
      
-->
<canStopTest patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.CanControlTest.IsAdmin, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.CanControlTest.IsTestOwner, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.CanControlTest.HasRole, Sitecore.ContentTesting">
<roles hint="list:AddRole">
<role>sitecore\Analytics Advanced Testing</role>
</roles>
</processor>
</canStopTest>
<!--
 DETERMINE TEST EXPOSURE
           Determine if a user should be exposed to a test
      
-->
<determineTestExposure patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.DetermineTestExposure.ModularTrafficAllocation, Sitecore.ContentTesting"/>
</determineTestExposure>
<!--
 DETERMINE TEST OWNER
           Identifies the user who owns a test
      
-->
<determineTestOwner patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.DetermineTestOwner.GetFromContext, Sitecore.ContentTesting"/>
</determineTestOwner>
<!--
 GENERATE VARIANT DESCRIPTION
           Generate a user friendly description for the variant in the experience.
      
-->
<generateVariantDescription patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.GenerateVariantDescription.GetPageVersionTestDescription, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GenerateVariantDescription.GetContentTestTestDescription, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GenerateVariantDescription.GetComponentTestDescription, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GenerateVariantDescription.GetPersonalizationTestDescription, Sitecore.ContentTesting"/>
</generateVariantDescription>
<!--
 GET CURRENT TEST COMBINATION
           Returns a test combination to expose to the current visitor.
      
-->
<getCurrentTestCombination patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.GetCurrentTestCombination.GetLatestTestingItemVersion, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetCurrentTestCombination.LoadTestSet, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetCurrentTestCombination.GetTestStrategyCombination, Sitecore.ContentTesting"/>
</getCurrentTestCombination>
<!--
 GET DATASOURCE WARNINGS FOR TEST
           Inspect an item being used as a datsource in a test and raise issues that could prevent it from acting within the test
      
-->
<getDatasourceWarningsForTest patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.GetItemWarningsForTest.Publishable, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetItemWarningsForTest.PublishingRestrictions, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetItemWarningsForTest.Workflow, Sitecore.ContentTesting">
<InspectHostItem>false</InspectHostItem>
</processor>
</getDatasourceWarningsForTest>
<!--
 GET ITEM WARNINGS FOR TEST
           Inspect an item being added to a page version test and raise issues that could prevent it from acting within the test
      
-->
<getItemWarningsForTest patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.GetItemWarningsForTest.Publishable, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetItemWarningsForTest.PublishingRestrictions, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetItemWarningsForTest.Workflow, Sitecore.ContentTesting">
<InspectHostItem>true</InspectHostItem>
</processor>
<processor type="Sitecore.ContentTesting.Pipelines.GetItemWarningsForTest.Presentation, Sitecore.ContentTesting"/>
</getItemWarningsForTest>
<!--
 GET VERSIONED TEST CANDIDATES
           Inspect an item without workflow and identify test candidates for it
      
-->
<getNonVersionedTestCandidates patch:source="Sitecore.ContentTesting.config">
<!--  Inspect for component tests  -->
<processor type="Sitecore.ContentTesting.Pipelines.GetTestCandidates.GetComponentTestCandidiates, Sitecore.ContentTesting"/>
<!--  Inspect for personalization rules  -->
<processor type="Sitecore.ContentTesting.Pipelines.GetTestCandidates.GetPersonalizationTestCandidates, Sitecore.ContentTesting"/>
</getNonVersionedTestCandidates>
<!--
 GET SCEENSHOT
           Generate and scale screenshots
      
-->
<getScreenshot patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.GetScreenshot.GenerateFilename, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetScreenshot.CheckCachedImage, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetScreenshot.CheckDisabler, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetScreenshot.GenerateScreenshotFile, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetScreenshot.ScaleImage, Sitecore.ContentTesting"/>
</getScreenshot>
<!--
 GET SCREEN SHOT FOR URL
           Generate a screenshot for a page
      
-->
<getScreenShotForURL patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.GetScreenShotForURL.GenerateFilename, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetScreenShotForURL.CheckCachedImage, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetScreenShotForURL.CheckDisabler, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetScreenShotForURL.PopulateUrlParameters, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetScreenShotForURL.LoadUrl, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetScreenShotForURL.RenderScripts, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetScreenShotForURL.WriteScriptToDisk, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetScreenShotForURL.GenerateScreenShot, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetScreenShotForURL.DeleteScript, Sitecore.ContentTesting"/>
</getScreenShotForURL>
<!--
 GET TESTS
           Inspect an item and identify all tests for it
      
-->
<getTests patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.GetTests.GetPageLevelTest, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetTests.GetContentTests, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetTests.GetComponentTests, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetTests.GetPersonalizationTests, Sitecore.ContentTesting"/>
</getTests>
<!--
 GET TEST CANDIDATE VARIANT DESCRIPTION
           Generate a user friendly description for a test candidate variant
      
-->
<getTestCandidateVariantDescription patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.GetTestCandidateVariantDescription.TestType, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetTestCandidateVariantDescription.Path, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetTestCandidateVariantDescription.Rendering, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetTestCandidateVariantDescription.Rules, Sitecore.ContentTesting"/>
</getTestCandidateVariantDescription>
<!--
 GET TEST OBJECTIVES
           Locate options to list as objectives of a test
      
-->
<getTestObjectives patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.GetTestObjectives.GetDefaults, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetTestObjectives.GetGoals, Sitecore.ContentTesting"/>
</getTestObjectives>
<!--
 GET TEST TO RUN
           Inspect an item for a test to run
      
-->
<getTestToRun patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.GetFromCache, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.GetFromQueryString, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.GetFromFinalLayout, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.GetFromField, Sitecore.ContentTesting">
<param desc="fieldId">{8546D6E6-0749-4591-90F3-CEC033D6E8D8}</param>
</processor>
<processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.GetFromField, Sitecore.ContentTesting">
<param desc="fieldId">{700F4AAD-AD3B-4058-8673-A0CEE765A1F7}</param>
</processor>
<processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.GetFromVisualization, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.EnsurePageTest, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.CheckDevice, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.EnsureCorrectLanguage, Sitecore.ContentTesting">
<excludeFields hint="list:AddExcludeVariableTemplateId">
<pageLevel>{AB86861A-6030-46C5-B394-E8F99E8B87DB}</pageLevel>
</excludeFields>
</processor>
<processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.SetCache, Sitecore.ContentTesting"/>
</getTestToRun>
<!--
 GET VERSIONED TEST CANDIDATES
           Inspect an item with workflow and identify test candidates for it
      
-->
<getVersionedTestCandidates patch:source="Sitecore.ContentTesting.config">
<!--  Inspect for component tests  -->
<processor type="Sitecore.ContentTesting.Pipelines.GetTestCandidates.GetComponentTestCandidiates, Sitecore.ContentTesting"/>
<!--  Inspect for personalization rules  -->
<processor type="Sitecore.ContentTesting.Pipelines.GetTestCandidates.GetPersonalizationTestCandidates, Sitecore.ContentTesting"/>
<!--  Inspect for content change tests  -->
<processor type="Sitecore.ContentTesting.Pipelines.GetTestCandidates.GetPageVersionTestCandidates, Sitecore.ContentTesting">
<IgnoreRuleChanges>True</IgnoreRuleChanges>
<IgnoreComponentTestChanges>True</IgnoreComponentTestChanges>
<excludeFields hint="list:ExcludeFieldFromComparison">
<created>__created</created>
<createdby>__created by</createdby>
<updated>__updated</updated>
<updatedby>__updated by</updatedby>
<revision>__revision</revision>
<sortorder>__sortorder</sortorder>
<validfrom>__valid from</validfrom>
<workflow>__workflow</workflow>
<workflowstate>__workflow state</workflowstate>
<lock>__lock</lock>
<pageleveltestsetdefinition>__Page Level Test Set Definition</pageleveltestsetdefinition>
<renderings>__Renderings</renderings>
<finalrenderings>__Final Renderings</finalrenderings>
</excludeFields>
</processor>
</getVersionedTestCandidates>
<!--
 REVERT CONTENT
           Remove a test from an item and revert content to its original state
      
-->
<revertContent patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.RevertContent.IdentifyHostItem, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.RevertContent.AddVersionToHost, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.RevertContent.ContentTest, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.RevertContent.PageLevelTest, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.RevertContent.ComponentTest, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.RevertContent.PersonalizationTest, Sitecore.ContentTesting"/>
</revertContent>
<!--
 SAVE TEST OUTCOME
           Process and save outcome data of the test
      
-->
<saveTestOutcome patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.SaveTestOutcome.AddSummaryNotification, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.SaveTestOutcome.GenerateTestOutcome, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.SaveTestOutcome.DetermineTestOwner, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.SaveTestOutcome.WriteTestOutcome, Sitecore.ContentTesting"/>
</saveTestOutcome>
<!--  START PAGE TEST
           Starts the page test
       -->
<startPageTest patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.StartPageTest.DeployPageTestDependencies, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StartPageTest.DeployComponentTestDependencies, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StartPageTest.ProtectTest, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StartPageTest.DeployTest, Sitecore.ContentTesting"/>
</startPageTest>
<!--  START TEST
           Starts a test
       -->
<startTest patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.StartTest.SetTestSettings, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StartTest.EnsureTestCandidates, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StartTest.DisableTestElements, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StartTest.ResolveTestLanguage, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StartTest.DetermineTestOwner, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StartTest.SetTestObjective, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StartTest.DetermineDeviceBound, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StartTest.CreateTestDefinition, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StartTest.ProtectTest, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StartTest.Deploy, Sitecore.ContentTesting"/>
</startTest>
<!--  STOP TEST
           Stops the test
       -->
<stopTest patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.StopTest.StoreWinnerCombination, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StopTest.ProcessTestWorkflow, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StopTest.CreatePageLevelWinnerVersion, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StopTest.EnsureValidWinner, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StopTest.CreateHistoricalTestData, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StopTest.RemoveContentTests, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StopTest.SetupWinnerComponents, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StopTest.RemovePoorPerformingRules, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StopTest.PublishWinner, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.StopTest.RunModelTraining, Sitecore.ContentTesting"/>
</stopTest>
<!--
 SUGGEST TESTS
           Inspect an item and suggest tests which may be run against it
      
-->
<suggestTests patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.SuggestTests.HasNeverBeenTested, Sitecore.ContentTesting"/>
</suggestTests>
<!--  SUSPEND TEST
           Suspend the test.
       -->
<suspendTest patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.SuspendTest.ProcessTestWorkflow, Sitecore.ContentTesting"/>
</suspendTest>
<!--
 REGISTER MACHINE LEARNING WORKERS
           Register Machine Learning Workers into Processing Engine.
      
-->
<registerMLWorkers patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.RegisterMLWorkers.RegisterWorkers, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.RegisterMLWorkers.StoreModelTrainingTaskId, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.RegisterMLWorkers.StoreModelTrainingTaskStatus, Sitecore.ContentTesting"/>
</registerMLWorkers>
<!--
 VALIDATE MODEL TRAINING REQUIREMENTS
           Validates whether the test fulfills the requirements to start machine learning model training.
      
-->
<validateModelTrainingRequirements patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.ValidateModelTrainingRequirements.CheckComponentTest, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.ValidateModelTrainingRequirements.CheckRequiredVisitAmount, SItecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.ValidateModelTrainingRequirements.CheckMinimumUniqueVisits, SItecore.ContentTesting"/>
</validateModelTrainingRequirements>
<!--
 VALIDATE DATA SOURCE CONFIGURATION
           Validates whethr data source for specified Test Value Item is not corrupted.
      
-->
<validateDataSourceConfiguration patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.ValidateDataSourceConfiguration.ValidateContentTestDataSource, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.ValidateDataSourceConfiguration.ValidatePageTestDataSource, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.ValidateDataSourceConfiguration.ValidateComponentTestDataSource, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.ValidateDataSourceConfiguration.ValidatePersonalizationTestDataSource, Sitecore.ContentTesting"/>
</validateDataSourceConfiguration>
<!--
 VALIDATE STOP ACTION
           Validates whether it's possible to stop the test.
      
-->
<validateStopAction patch:source="Sitecore.ContentTesting.config">
<processor type="Sitecore.ContentTesting.Pipelines.ValidateStopAction.ValidateUserCanStopTest, Sitecore.ContentTesting"/>
<processor type="Sitecore.ContentTesting.Pipelines.ValidateStopAction.ValidatePageTestTemplate, SItecore.ContentTesting"/>
</validateStopAction>
<!--
 GET TESTING CLUSTERS
           Performs segmention across sessions for a test.
      
-->
<getTestingClusters patch:source="Sitecore.ContentTesting.Intelligence.config">
<processor type="Sitecore.ContentTesting.Intelligence.Pipelines.GetTestingClusters.GetData, Sitecore.ContentTesting.Intelligence"/>
<processor type="Sitecore.ContentTesting.Intelligence.Pipelines.GetTestingClusters.NormalizeData, Sitecore.ContentTesting.Intelligence"/>
<processor type="Sitecore.ContentTesting.Intelligence.Pipelines.GetTestingClusters.Clustering, Sitecore.ContentTesting.Intelligence">
<ClusteringAlgorithm ref="algorithms/clustering"/>
</processor>
<processor type="Sitecore.ContentTesting.Intelligence.Pipelines.GetTestingClusters.SaveClusters, Sitecore.ContentTesting.Intelligence"/>
<processor type="Sitecore.ContentTesting.Intelligence.Pipelines.GetTestingClusters.GetWinningCombinationsForCluster, Sitecore.ContentTesting.Intelligence"/>
</getTestingClusters>
<!--
 CALCULATE STATISTICAL RELEVANCY
           Determines whether a content test has been exposed to enough visitors to successfully determine the winning variant.
      
-->
<calculateStatisticalRelevancy patch:source="Sitecore.ContentTesting.Intelligence.config">
<processor type="Sitecore.ContentTesting.Intelligence.Pipelines.CalculateStatisticalRelevancy.CalculateChiSquare, Sitecore.ContentTesting.Intelligence"/>
<processor type="Sitecore.ContentTesting.Intelligence.Pipelines.CalculateStatisticalRelevancy.SaveData, Sitecore.ContentTesting.Intelligence"/>
</calculateStatisticalRelevancy>
<!--
 TEST DURATION FORECAST
           Forecasts the number of sessions required for a successful content test and the number of days required to reach statistical relevancy.
      
-->
<forecastTestDuration patch:source="Sitecore.ContentTesting.Intelligence.config">
<processor type="Sitecore.ContentTesting.Intelligence.Pipelines.ForecastTestDuration.SessionCount, Sitecore.ContentTesting.Intelligence"/>
<processor type="Sitecore.ContentTesting.Intelligence.Pipelines.ForecastTestDuration.Duration, Sitecore.ContentTesting.Intelligence"/>
</forecastTestDuration>
<!--
 SAVE PERSONALIZATION RULES
           Save personalization rules into reporting database
      
-->
<savePersonalizationRules patch:source="Sitecore.ContentTesting.Intelligence.config">
<processor type="Sitecore.ContentTesting.Intelligence.Pipelines.SavePersonalizationRules.SaveRules, Sitecore.ContentTesting.Intelligence"/>
</savePersonalizationRules>
<!--
 Defines pipelines for views.
           Each section contains a pipeline which typically contains steps for
           constructing result data table, querying data source, getting meta data from Master DB, sorting, paging.
           Views are always executed for a given contact, i.e. contact id is mandatory parameter. 
-->
<group groupName="ExperienceProfileContactViews" patch:source="Sitecore.EmailExperience.ExperienceProfile.config">
<pipelines>
<visits>
<processor type="Sitecore.Cintel.Reporting.Contact.Visit.Processors.ConstructVisitsDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.Visits.GetVisitsWithLocations, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Visit.Processors.PopulateVisitsWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Visit.Processors.ApplyMasterDataToVisits, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</visits>
<journey>
<processor type="Sitecore.Cintel.Reporting.Contact.Journey.Processors.ConstructJourneyDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitEvents.GetPages, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Journey.Processors.PopulateJourneyWithInteractionsFromXdb, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Journey.Processors.PopulateJourneyWithContactOutcomes, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Journey.Processors.PopulateEraChanges, Sitecore.Cintel"/>
<!--
Processor which populates the ExM events (for Open, Click, Bounce, Spam).
-->
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.ExperienceProfile.PopulateExmEvents, Sitecore.EmailCampaign.Cm" patch:source="Sitecore.EmailExperience.ExperienceProfile.config"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Journey.Processors.PrepareOrdering, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</journey>
<journey-detail-outcome>
<processor type="Sitecore.Cintel.Reporting.Contact.JourneyOutcomeDetail.Processors.ConstructJourneyOutcomeDetailDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.JourneyOutcomeDetail.Processors.PopulateJourneyOutcomeDetailWithOutcomeData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.Channel.GetChannelForVisit, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.JourneyOutcomeDetail.Processors.PopulateJourneyOutcomeDetailWithInteractionData, Sitecore.Cintel"/>
</journey-detail-outcome>
<journey-detail-online-interaction>
<processor type="Sitecore.Cintel.Reporting.Contact.JourneyOnlineInteractionDetail.Processors.ConstructJourneyOnlineInteractionDetailDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitEvents.GetPages, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.JourneyOnlineInteractionDetail.Processors.PopulateJourneyOnlineInteractionWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.JourneyOnlineInteractionDetail.Processors.ApplyMasterDataToJourneyOnlineInteractionDetail, Sitecore.Cintel"/>
</journey-detail-online-interaction>
<journey-detail-offline-interaction>
<processor type="Sitecore.Cintel.Reporting.Contact.JourneyOfflineInteractionDetail.Processors.ConstructJourneyOfflineInteractionDetailDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitEvents.GetPages, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.JourneyOfflineInteractionDetail.Processors.PopulateJourneyOfflineInteractionWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.JourneyOfflineInteractionDetail.Processors.ApplyMasterDataToJourneyOfflineInteractionDetail, Sitecore.Cintel"/>
</journey-detail-offline-interaction>
<channel-summary>
<processor type="Sitecore.Cintel.Reporting.Contact.ChannelSummary.Processors.ConstructChannelListDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitEvents.GetPages, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ChannelSummary.Processors.PopulateChannelListWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ChannelSummary.Processors.ApplyMasterDataToChannels, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</channel-summary>
<channel-goal-distribution>
<processor type="Sitecore.Cintel.Reporting.Contact.ChannelDistribution.Processors.ConstructChannelDistributionDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitEvents.GetPages, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ChannelDistribution.Views.GoalsForChannels.Processors.PopulateGoalsForChannelsWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
</channel-goal-distribution>
<channel-interaction-distribution>
<processor type="Sitecore.Cintel.Reporting.Contact.ChannelDistribution.Processors.ConstructChannelDistributionDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitEvents.GetPages, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ChannelDistribution.Views.InteractionsForChannels.Processors.PopulateInteractionForChannelsWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
</channel-interaction-distribution>
<visit-summary>
<processor type="Sitecore.Cintel.Reporting.Contact.Visit.Processors.ConstructVisitsDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.Visits.GetVisitsWithLocations, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Visit.Processors.ConstructVisitsDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Visit.Processors.PopulateVisitsWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Visit.Processors.ApplyMasterDataToVisits, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</visit-summary>
<latest-statistics>
<processor type="Sitecore.Cintel.Reporting.Contact.LatestStatistics.Processors.ConstructLatestStatisticsDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.ContactSystemInfo.GetSingleContactSystemInfo, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.LatestStatistics.Processors.PopulateContactStatistics, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.Visits.GetVisitsWithLocations, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.LatestStatistics.Processors.PopulateVisitStatistics, Sitecore.Cintel"/>
</latest-statistics>
<visit-pages>
<processor type="Sitecore.Cintel.Reporting.Contact.Page.Processors.ConstructVisitPagesDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitPages.GetPages, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Page.Processors.PopulateVisitPagesWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Page.Processors.ApplyMasterDataToVisitPages, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</visit-pages>
<visit-goals>
<processor type="Sitecore.Cintel.Reporting.Contact.Goal.Processors.ConstructGoalsDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.Goals.GetGoals, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Goal.Processors.PopulateGoalsWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Goal.Views.GoalsForVisit.Processors.FilterGoalsOnVisitId, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Goal.Processors.ApplyMasterDataToGoals, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</visit-goals>
<internal-keyword-summary>
<processor type="Sitecore.Cintel.Reporting.Contact.InternalKeywordSummary.Processors.ConstructInternalKeywordSummaryDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitEvents.GetPages, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.InternalKeywordSummary.Processors.PopulateInternalKeywordSummariesWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</internal-keyword-summary>
<internal-keyword-detail>
<processor type="Sitecore.Cintel.Reporting.Contact.InternalKeywordDetail.Processors.ConstructInternalKeywordDataTable,Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitEvents.GetPages, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.InternalKeywordDetail.Processors.PopulateInternalKeywordDetailsWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.InternalKeywordDetail.Processors.FilterInternalKeywordDetailsBasedOnSearchTerm, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.InternalKeywordDetail.Processors.FilterInternalKeywordDetailsBasedOnInternalEventId, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</internal-keyword-detail>
<visit-internal-searches>
<processor type="Sitecore.Cintel.Reporting.Contact.InternalKeywordDetail.Processors.ConstructInternalKeywordDataTable,Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitEvents.GetPages, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.InternalKeywordDetail.Processors.PopulateInternalKeywordDetailsWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.InternalKeywordDetail.Processors.FilterInternalKeywordDetailsBasedOnVisitId, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</visit-internal-searches>
<paid-keyword-summary>
<processor type="Sitecore.Cintel.Reporting.Contact.ExternalKeywordSummary.Processors.ConstructExternalKeywordSummaryDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.Visits.GetVisitsWithLocations, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ExternalKeywordSummary.Processors.PopulateExternalKeywordSummariesWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ExternalKeywordSummary.Processors.FilterExternalKeywordSummariesBasedOnChannel, Sitecore.Cintel">
<channels hint="list:AddChannel">
<!-- Online/PPC Advertising -->
<channelId>{B55EC2C2-CD7A-4E03-B155-EEFDAE872B7D}</channelId>
<channelId>{EC74A09A-7FA7-4A5A-874A-6B5CA9E05773}</channelId>
<channelId>{67150678-B200-44BB-BBAE-1D7B901D0860}</channelId>
<channelId>{145304B1-C2E0-4B88-A200-D5AA18206CF7}</channelId>
<channelId>{B5234879-DFFC-47AF-8267-59D4D3DF6226}</channelId>
<channelId>{0D600460-DA2E-41A6-955A-9253D2A063C2}</channelId>
<!-- Online/Display -->
<channelId>{030BDC09-7720-4EC2-B778-EB0BC7FD13BC}</channelId>
<channelId>{5783355A-F9E4-476E-BA9D-9620E3E452EB}</channelId>
<channelId>{829FAEB1-1393-44DA-B04A-B5C01986610A}</channelId>
<channelId>{A43E7EB6-8610-4DF7-BD6B-FEE899743D30}</channelId>
<channelId>{4A0B6C13-EFC8-4A00-8A6A-B709A89B1E11}</channelId>
</channels>
</processor>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</paid-keyword-summary>
<external-keyword-summary>
<processor type="Sitecore.Cintel.Reporting.Contact.ExternalKeywordSummary.Processors.ConstructExternalKeywordSummaryDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.Visits.GetVisitsWithLocations, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ExternalKeywordSummary.Processors.PopulateExternalKeywordSummariesWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ExternalKeywordSummary.Processors.FilterExternalKeywordSummariesBasedOnChannel, Sitecore.Cintel">
<channels hint="list:AddChannel">
<!-- Online/Organic Search -->
<channelId>{5854B151-1555-49FD-8F35-D40E446BEB3C}</channelId>
<channelId>{B2747066-06F8-4E0B-9EA7-64D8859A119A}</channelId>
<channelId>{B979A670-5AAF-4E63-94AC-C3C3E5BFBE84}</channelId>
<!-- Online/Direct/Search Engine Branded -->
<channelId>{FB8FA660-0A07-4EE9-A9F4-930FC5D10AEC}</channelId>
</channels>
</processor>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</external-keyword-summary>
<paid-keyword-detail>
<processor type="Sitecore.Cintel.Reporting.Contact.ExternalKeywordDetail.Processors.ConstructExternalKeywordDetailsDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.Visits.GetVisitsWithLocations, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ExternalKeywordDetail.Processors.PopulateExternalKeywordDetailsWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ExternalKeywordDetail.Processors.FilterExternalKeywordDetailsBasedOnChannel, Sitecore.Cintel">
<channels hint="list:AddChannel">
<!-- Online/PPC Advertising -->
<channelId>{B55EC2C2-CD7A-4E03-B155-EEFDAE872B7D}</channelId>
<channelId>{EC74A09A-7FA7-4A5A-874A-6B5CA9E05773}</channelId>
<channelId>{67150678-B200-44BB-BBAE-1D7B901D0860}</channelId>
<channelId>{145304B1-C2E0-4B88-A200-D5AA18206CF7}</channelId>
<channelId>{B5234879-DFFC-47AF-8267-59D4D3DF6226}</channelId>
<channelId>{0D600460-DA2E-41A6-955A-9253D2A063C2}</channelId>
<!-- Online/Display -->
<channelId>{030BDC09-7720-4EC2-B778-EB0BC7FD13BC}</channelId>
<channelId>{5783355A-F9E4-476E-BA9D-9620E3E452EB}</channelId>
<channelId>{829FAEB1-1393-44DA-B04A-B5C01986610A}</channelId>
<channelId>{A43E7EB6-8610-4DF7-BD6B-FEE899743D30}</channelId>
<channelId>{4A0B6C13-EFC8-4A00-8A6A-B709A89B1E11}</channelId>
</channels>
</processor>
<processor type="Sitecore.Cintel.Reporting.Contact.ExternalKeywordDetail.Processors.FilterExternalKeywordDetailsForGivenChannel, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ExternalKeywordDetail.Processors.FilterExternalKeywordDetailsBasedOnSource, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</paid-keyword-detail>
<external-keyword-detail>
<processor type="Sitecore.Cintel.Reporting.Contact.ExternalKeywordDetail.Processors.ConstructExternalKeywordDetailsDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.Visits.GetVisitsWithLocations, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ExternalKeywordDetail.Processors.PopulateExternalKeywordDetailsWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ExternalKeywordDetail.Processors.FilterExternalKeywordDetailsBasedOnChannel, Sitecore.Cintel">
<channels hint="list:AddChannel">
<!-- Online/Organic Search -->
<channelId>{5854B151-1555-49FD-8F35-D40E446BEB3C}</channelId>
<channelId>{B2747066-06F8-4E0B-9EA7-64D8859A119A}</channelId>
<channelId>{B979A670-5AAF-4E63-94AC-C3C3E5BFBE84}</channelId>
<!-- Online/Direct/Search Engine Branded -->
<channelId>{FB8FA660-0A07-4EE9-A9F4-930FC5D10AEC}</channelId>
</channels>
</processor>
<processor type="Sitecore.Cintel.Reporting.Contact.ExternalKeywordDetail.Processors.FilterExternalKeywordDetailsForGivenChannel, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ExternalKeywordDetail.Processors.FilterExternalKeywordDetailsBasedOnSource, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</external-keyword-detail>
<campaigns>
<processor type="Sitecore.Cintel.Reporting.Contact.Campaign.Processors.ConstructCampaignsDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.Campaigns.GetCampaigns, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Campaign.Processors.PopulateCampaignsWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Campaign.Processors.ApplyMasterDataToCampaigns, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</campaigns>
<recent-campaigns>
<processor type="Sitecore.Cintel.Reporting.Contact.Campaign.Processors.ConstructCampaignsDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.Campaigns.GetCampaigns, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Campaign.Processors.PopulateCampaignsWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Campaign.Processors.ApplyMasterDataToCampaigns, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</recent-campaigns>
<goals>
<processor type="Sitecore.Cintel.Reporting.Contact.Goal.Processors.ConstructGoalsDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.Goals.GetGoals, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Goal.Processors.PopulateGoalsWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Goal.Processors.ApplyMasterDataToGoals, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</goals>
<profile-pattern-matches>
<processor type="Sitecore.Cintel.Reporting.Contact.ProfilePatternMatch.Processors.ConstructProfilePatternMatchTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitPatternScores.PrepareProfileKeyMapping, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitPatternScores.RetrievePatternScoresForInteraction, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitPatternScores.ProjectPatternScoresToRowBasedForm, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ProfilePatternMatch.Processors.PopulateProfilePatternMatchesWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</profile-pattern-matches>
<profile-info>
<processor type="Sitecore.Cintel.Reporting.Contact.ProfileInfo.Processors.ConstructProfileInfoTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitScoringProfiles.PrepareProfileMapping, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitScoringProfiles.RetrieveScoringProfiles, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitScoringProfiles.ProjectScoringProfilesToRowBasedForm, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ProfileInfo.Processors.FindMostRecentVisitPerProfileAndProjectToProfileInfo, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ProfileInfo.Processors.FindBestPatternMatchAndApplyToProfileInfo, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ProfileInfo.Processors.ApplyMasterDataToProfileInfo, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</profile-info>
<best-pattern-matches>
<!--
 This pipeline is intentionally identical to profile-info 
-->
<processor type="Sitecore.Cintel.Reporting.Contact.ProfileInfo.Processors.ConstructProfileInfoTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitScoringProfiles.PrepareProfileMapping, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitScoringProfiles.RetrieveScoringProfiles, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitScoringProfiles.ProjectScoringProfilesToRowBasedForm, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ProfileInfo.Processors.FindMostRecentVisitPerProfileAndProjectToProfileInfo, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ProfileInfo.Processors.FindBestPatternMatchAndApplyToProfileInfo, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ProfileInfo.Processors.ApplyMasterDataToProfileInfo, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</best-pattern-matches>
<profiling-profile-key-values>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitPatternScores.PrepareProfileKeyMapping, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitPatternScores.RetrievePatternScoresForInteraction, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitPatternScores.ProjectPatternScoresToRowBasedForm, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ProfileKeyScore.Processors.ConstructProfileKeyScoreTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ProfileKeyScore.Processors.PopulateProfileKeyScoresWithXdbData, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.ProfileKeyScore.Processors.ApplyMasterDataToProfileKeyScores, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</profiling-profile-key-values>
<automations>
<processor type="Sitecore.Cintel.Reporting.Contact.Automation.Processors.ConstructAutomationsDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Automation.Processors.PopulateAutomationsWithContactsCurrentStates, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.Automation.Processors.ApplyMasterDataToAutomations, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</automations>
<latest-events>
<processor type="Sitecore.Cintel.Reporting.Processors.LatestEventsReportProcessor, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</latest-events>
<events>
<processor type="Sitecore.Cintel.Reporting.Processors.EventsReportProcessor, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</events>
<outcome-detail>
<processor type="Sitecore.Cintel.Reporting.Contact.OutcomeDetail.Processors.ConstructOutcomeDetailDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.OutcomeDetail.Processors.PopulateOutcomesFromXdb, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Contact.OutcomeDetail.Processors.ApplyMasterDataToOutcomeDetail, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</outcome-detail>
</pipelines>
</group>
<!--
 Defines data source queries used by view pipelines. 
-->
<group groupName="ExperienceProfileContactDataSourceQueries" patch:source="Sitecore.ExperienceProfile.Reporting.config">
<pipelines>
<contact-query>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.ContactSystemInfo.GetSingleContactSystemInfo, Sitecore.Cintel"/>
</contact-query>
<visit-pattern-scores>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitPatternScores.RetrievePatternScoresForInteraction, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitPatternScores.ProjectPatternScoresToRowBasedForm, Sitecore.Cintel"/>
</visit-pattern-scores>
<visit-scoring-profiles>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitScoringProfiles.RetrieveScoringProfiles, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitScoringProfiles.ProjectScoringProfilesToRowBasedForm, Sitecore.Cintel"/>
</visit-scoring-profiles>
<visit-events-query>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitEvents.GetPages, Sitecore.Cintel"/>
</visit-events-query>
<visits-query>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.Visits.GetVisitsWithLocations, Sitecore.Cintel"/>
</visits-query>
<campaigns-query>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.Campaigns.GetCampaigns, Sitecore.Cintel"/>
</campaigns-query>
<pages-by-visit-query>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.VisitPages.GetPages, Sitecore.Cintel"/>
</pages-by-visit-query>
<goals-query>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.Goals.GetGoals, Sitecore.Cintel"/>
</goals-query>
<visit-channel>
<processor type="Sitecore.Cintel.Reporting.ReportingServerDatasource.Channel.GetChannelForVisit, Sitecore.Cintel"/>
</visit-channel>
</pipelines>
</group>
<!--
 Defines pipelines for aggregate views, i.e. views that show data for more than one particular contact. 
-->
<group groupName="ExperienceProfileAggregateViews" patch:source="Sitecore.ExperienceProfile.Reporting.config">
<pipelines>
<latest-visitors>
<processor type="Sitecore.Cintel.Reporting.Aggregate.Visitors.Processors.ConstructVisitorsDataTable, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Aggregate.Visitors.Processors.QueryLatestVisitorsFromSearch, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplySorting, Sitecore.Cintel"/>
<processor type="Sitecore.Cintel.Reporting.Processors.ApplyPaging, Sitecore.Cintel"/>
</latest-visitors>
</pipelines>
</group>
<mvc.renderPageExtenders patch:source="Sitecore.MVC.ExperienceEditor.config">
<processor type="Sitecore.Mvc.ExperienceEditor.Pipelines.RenderPageExtenders.RenderExtendersContainer, Sitecore.Mvc.ExperienceEditor"/>
<processor type="Sitecore.Mvc.ExperienceEditor.Pipelines.RenderPageExtenders.SpeakRibbon.RenderPageEditorSpeakExtender, Sitecore.Mvc.ExperienceEditor"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.Mvc.RenderPageExtenders.StoreRenderingViewerData, Sitecore.ExperienceExplorer" resolve="true" patch:source="Sitecore.ExperienceExplorer.config"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.Mvc.RenderPageExtenders.InjectExplorerControl, Sitecore.ExperienceExplorer" resolve="true" patch:source="Sitecore.ExperienceExplorer.config"/>
<processor type="Sitecore.Mvc.DeviceSimulator.Pipelines.Presentation.RenderPageExtenders.RenderDeviceSimulationExtender, Sitecore.Mvc.DeviceSimulator" patch:source="Sitecore.MVC.DeviceSimulator.config"/>
</mvc.renderPageExtenders>
<group name="ExperienceExplorer" groupName="ExperienceExplorer" patch:source="Sitecore.ExperienceExplorer.config">
<pipelines>
<resolveExplorerDatabase>
<processor type="Sitecore.ExperienceExplorer.Pipelines.ResolveExplorerDatabase.GetBySetting, Sitecore.ExperienceExplorer" resolve="true"/>
</resolveExplorerDatabase>
<initializeModel>
<processor type="Sitecore.ExperienceExplorer.Pipelines.InitializeModel.InitializePreset, Sitecore.ExperienceExplorer" resolve="true"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.InitializeModel.InitializeModes, Sitecore.ExperienceExplorer"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.InitializeModel.InitializeUser, Sitecore.ExperienceExplorer"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.InitializeModel.InitializeGeoIp, Sitecore.ExperienceExplorer" resolve="true"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.InitializeModel.InitializeTags, Sitecore.ExperienceExplorer" resolve="true"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.InitializeModel.InitializeCampaigns, Sitecore.ExperienceExplorer" resolve="true"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.InitializeModel.InitializeDevice, Sitecore.ExperienceExplorer" resolve="true"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.InitializeModel.InitializeGoals, Sitecore.ExperienceExplorer" resolve="true"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.InitializeModel.InitializePageEvents, Sitecore.ExperienceExplorer" resolve="true"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.InitializeModel.InitializeProfiles, Sitecore.ExperienceExplorer" resolve="true"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.InitializeModel.InitializeReferral, Sitecore.ExperienceExplorer" resolve="true"/>
</initializeModel>
<applyModelToTracker>
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.ApplyModelToTracker.ApplyGeoIp, Sitecore.ExperienceExplorer.Analytics" resolve="true"/>
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.ApplyModelToTracker.ApplyCampaign, Sitecore.ExperienceExplorer.Analytics"/>
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.ApplyModelToTracker.ApplyEvents, Sitecore.ExperienceExplorer.Analytics"/>
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.ApplyModelToTracker.ApplyProfiles, Sitecore.ExperienceExplorer.Analytics"/>
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.ApplyModelToTracker.ApplyContactTags, Sitecore.ExperienceExplorer.Analytics"/>
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.ApplyModelToTracker.ApplyReferral, Sitecore.ExperienceExplorer.Analytics"/>
</applyModelToTracker>
<resolveExplorerMode>
<processor type="Sitecore.ExperienceExplorer.Pipelines.ResolveExplorerMode.CheckQueryStringOrCookie, Sitecore.ExperienceExplorer"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.ResolveExplorerMode.CheckExplorerEnabled, Sitecore.ExperienceExplorer" resolve="true"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.ResolveExplorerMode.CheckAnalyticsEnabled, Sitecore.ExperienceExplorer"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.ResolveExplorerMode.CheckPageMode, Sitecore.ExperienceExplorer"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.ResolveExplorerMode.CheckSite, Sitecore.ExperienceExplorer" resolve="true">
<excludedSites hint="list">
<shell>shell</shell>
<login>login</login>
<admin>admin</admin>
<service>service</service>
<modulesShell>modules_shell</modulesShell>
<system>system</system>
<publisher>publisher</publisher>
</excludedSites>
</processor>
<processor type="Sitecore.ExperienceExplorer.Pipelines.ResolveExplorerMode.CheckPaths, Sitecore.ExperienceExplorer">
<excludedPaths hint="list">
<shell>/sitecore/shell</shell>
<login>/sitecore/login</login>
<admin>/sitecore/admin</admin>
<service>/sitecore/service</service>
<sitecoreModules>/sitecore modules/</sitecoreModules>
<layouts>/layouts/system</layouts>
<sitecoreApi>/sitecore/api/ssc</sitecoreApi>
<icon>/-/icon</icon>
<icon>/~/icon</icon>
<temp>/-/temp</temp>
<temp>/~/temp</temp>
<api>/-/api</api>
<api>/~/api</api>
<xaml>/-/xaml</xaml>
<xaml>/~/xaml</xaml>
<feed>/-/feed</feed>
<feed>/~/feed</feed>
<speak>/-/speak/</speak>
</excludedPaths>
</processor>
<processor type="Sitecore.ExperienceExplorer.Pipelines.ResolveExplorerMode.CheckIfMediaRequest, Sitecore.ExperienceExplorer" resolve="true"/>
<processor type="Sitecore.ExperienceExplorer.Pipelines.ResolveExplorerMode.EnableExperienceMode, Sitecore.ExperienceExplorer"/>
</resolveExplorerMode>
<cleanupAnalytics>
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.CleanupAnalytics.ResetAnalyticsCookie, Sitecore.ExperienceExplorer.Analytics"/>
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.CleanupAnalytics.CancelPages, Sitecore.ExperienceExplorer.Analytics"/>
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.CleanupAnalytics.ClearValue, Sitecore.ExperienceExplorer.Analytics"/>
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.CleanupAnalytics.ClearProfiles, Sitecore.ExperienceExplorer.Analytics"/>
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.CleanupAnalytics.ClearCampaign, Sitecore.ExperienceExplorer.Analytics"/>
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.CleanupAnalytics.ClearReferrer, Sitecore.ExperienceExplorer.Analytics"/>
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.CleanupAnalytics.ClearContactTags, Sitecore.ExperienceExplorer.Analytics"/>
<processor type="Sitecore.ExperienceExplorer.Analytics.Pipelines.CleanupAnalytics.ClearRenderingViewerData, Sitecore.ExperienceExplorer.Analytics" resolve="true"/>
</cleanupAnalytics>
</pipelines>
</group>
<forms.renderForm patch:source="Sitecore.ExperienceForms.Mvc.config">
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.RenderForm.SetHtmlHelperSettings, Sitecore.ExperienceForms.Mvc" resolve="true"/>
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.RenderForm.SetFormParameters, Sitecore.ExperienceForms.Mvc" resolve="true"/>
<processor type="Sitecore.ExperienceForms.Client.Pipelines.RenderForm.SetDataAttributes, Sitecore.ExperienceForms.Client" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config"/>
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.RenderForm.InitializeAjaxOptions, Sitecore.ExperienceForms.Mvc" resolve="true"/>
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.RenderForm.BuildForm, Sitecore.ExperienceForms.Mvc" resolve="true"/>
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.RenderForm.IncludeFiles, Sitecore.ExperienceForms.Mvc" resolve="true"/>
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.RenderForm.InitializeTracking, Sitecore.ExperienceForms.Mvc" resolve="true"/>
</forms.renderForm>
<forms.renderFields patch:source="Sitecore.ExperienceForms.Mvc.config">
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.RenderFields.GetChildItems, Sitecore.ExperienceForms.Mvc" resolve="true"/>
<processor type="Sitecore.ExperienceForms.Client.Pipelines.RenderFields.SetContainerAttributes, Sitecore.ExperienceForms.Client" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config"/>
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.RenderFields.RenderChildFields, Sitecore.ExperienceForms.Mvc" resolve="true"/>
</forms.renderFields>
<forms.renderField patch:source="Sitecore.ExperienceForms.Mvc.config">
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.RenderField.ResolveModel, Sitecore.ExperienceForms.Mvc" resolve="true"/>
<processor type="Sitecore.ExperienceForms.Client.Pipelines.RenderField.SetContainerAttributes, Sitecore.ExperienceForms.Client" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config"/>
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.RenderField.RenderFieldView, Sitecore.ExperienceForms.Mvc" resolve="true"/>
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.RenderField.IncludeConditions, Sitecore.ExperienceForms.Mvc" resolve="true"/>
</forms.renderField>
<forms.getModel patch:source="Sitecore.ExperienceForms.Mvc.config">
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.GetModel.GetItem, Sitecore.ExperienceForms.Mvc"/>
<processor type="Sitecore.ExperienceForms.Client.Pipelines.GetModel.GetStandardValues, Sitecore.ExperienceForms.Client" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config"/>
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.GetModel.GetRenderingSettings, Sitecore.ExperienceForms.Mvc"/>
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.GetModel.CreateModel, Sitecore.ExperienceForms.Mvc"/>
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.GetModel.InitializeTracking, Sitecore.ExperienceForms.Mvc" resolve="true"/>
<processor type="Sitecore.ExperienceForms.Client.Pipelines.GetModel.SetFieldTypeItemId, Sitecore.ExperienceForms.Client" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config"/>
<processor type="Sitecore.ExperienceForms.Client.Pipelines.GetModel.SetItemId, Sitecore.ExperienceForms.Client" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config"/>
<processor type="Sitecore.ExperienceForms.Client.Pipelines.GetModel.SetItemName, Sitecore.ExperienceForms.Client" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config"/>
</forms.getModel>
<forms.registerSubmit patch:source="Sitecore.ExperienceForms.Mvc.config"/>
<forms.executeSubmit patch:source="Sitecore.ExperienceForms.Mvc.config">
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.ExecuteSubmit.GetSubmitActions, Sitecore.ExperienceForms.Mvc"/>
<processor type="Sitecore.ExperienceForms.Mvc.Pipelines.ExecuteSubmit.ExecuteActions, Sitecore.ExperienceForms.Mvc"/>
</forms.executeSubmit>
<forms.submitError patch:source="Sitecore.ExperienceForms.Mvc.config"/>
<forms.saveForm patch:source="Sitecore.ExperienceForms.Pipelines.Client.config">
<processor type="Sitecore.ExperienceForms.Client.Pipelines.SaveForm.CreateModels, Sitecore.ExperienceForms.Client" resolve="true"/>
<processor type="Sitecore.ExperienceForms.Client.Pipelines.SaveForm.GenerateNames, Sitecore.ExperienceForms.Client">
<defaultItemName>Form Item</defaultItemName>
</processor>
<processor type="Sitecore.ExperienceForms.Client.Pipelines.SaveForm.UpdateItems, Sitecore.ExperienceForms.Client" resolve="true"/>
</forms.saveForm>
<forms.deleteForms patch:source="Sitecore.ExperienceForms.Pipelines.Client.config">
<processor type="Sitecore.ExperienceForms.Client.Pipelines.DeleteForms.GetFormData, Sitecore.ExperienceForms.Client"/>
<processor type="Sitecore.ExperienceForms.Client.Pipelines.DeleteForms.DeleteItems, Sitecore.ExperienceForms.Client"/>
</forms.deleteForms>
<forms.renameForm patch:source="Sitecore.ExperienceForms.Pipelines.Client.config">
<processor type="Sitecore.ExperienceForms.Client.Pipelines.RenameForm.GetFormItem, Sitecore.ExperienceForms.Client"/>
<processor type="Sitecore.ExperienceForms.Client.Pipelines.RenameForm.Rename, Sitecore.ExperienceForms.Client" resolve="true"/>
</forms.renameForm>
<forms.formDetails patch:source="Sitecore.ExperienceForms.Pipelines.Client.config">
<processor type="Sitecore.ExperienceForms.Client.Pipelines.FormDetails.GetFormDetails, Sitecore.ExperienceForms.Client"/>
<processor type="Sitecore.ExperienceForms.Client.Pipelines.FormDetails.CollectFormUsage, Sitecore.ExperienceForms.Client"/>
</forms.formDetails>
<forms.getLanguages patch:source="Sitecore.ExperienceForms.Pipelines.Client.config">
<processor type="Sitecore.ExperienceForms.Client.Pipelines.GetLanguages.GetItemLanguages, Sitecore.ExperienceForms.Client"/>
<processor type="Sitecore.ExperienceForms.Client.Pipelines.GetLanguages.FilterAllowedLanguages, Sitecore.ExperienceForms.Client"/>
<processor type="Sitecore.ExperienceForms.Client.Pipelines.GetLanguages.GetLanguageData, Sitecore.ExperienceForms.Client"/>
</forms.getLanguages>
<forms.removeFormVersion patch:source="Sitecore.ExperienceForms.Pipelines.Client.config">
<processor type="Sitecore.ExperienceForms.Client.Pipelines.RemoveFormVersion.GetFormVersion, Sitecore.ExperienceForms.Client"/>
<processor type="Sitecore.ExperienceForms.Client.Pipelines.RemoveFormVersion.RemoveVersion, Sitecore.ExperienceForms.Client"/>
</forms.removeFormVersion>
<forms.moveForm patch:source="Sitecore.ExperienceForms.Pipelines.Client.config">
<processor type="Sitecore.ExperienceForms.Client.Pipelines.MoveForm.GetData, Sitecore.ExperienceForms.Client"/>
<processor type="Sitecore.ExperienceForms.Client.Pipelines.MoveForm.MoveItem, Sitecore.ExperienceForms.Client"/>
</forms.moveForm>
<!--
  Note: pipeline names must be prefixed with $(Bundle.PipelineNamePrefix) - see setting above. 
-->
<bundle.beacon patch:source="Sitecore.FXM.Bundle.config">
<!--  Registers the FXM client Javascript bundle  -->
<processor type="Sitecore.FXM.Pipelines.Bundle.BundleFileProcessor, Sitecore.FXM" resolve="true">
<paths hint="list:AddPath">
<path>
sitecore/shell/client/services/assets/lib/requireJsTurnOff.js
</path>
<path>
sitecore/shell/client/services/assets/lib/beaconApi.js
</path>
<path>
sitecore/shell/client/services/assets/lib/requireJsTurnOn.js
</path>
</paths>
</processor>
<processor type="Sitecore.FXM.Pipelines.Bundle.BeaconLoaderProcessor, Sitecore.FXM" resolve="true"/>
</bundle.beacon>
<group name="FXM" groupName="FXM" patch:source="Sitecore.FXM.config">
<pipelines>
<!--
 Try to resolve Fxm context for the current request. Context is resolved only if request is for a configured site. 
-->
<tryResolveFxmContext>
<processor type="Sitecore.FXM.Pipelines.TryResolveFxmContext.ResolveDomainMatcherByExperienceEditorRequest, Sitecore.FXM" resolve="true"/>
<processor type="Sitecore.FXM.Pipelines.TryResolveFxmContext.ResolveDomainMatcherByDomainRule, Sitecore.FXM" resolve="true"/>
<processor type="Sitecore.FXM.Pipelines.TryResolveFxmContext.ResolveDomainMatcherLanguage, Sitecore.FXM" resolve="true"/>
<processor type="Sitecore.FXM.Pipelines.TryResolveFxmContext.CreateFxmContext, Sitecore.FXM"/>
</tryResolveFxmContext>
<!--  **** Tracking Request Pipelines ****  -->
<tracking.initializeContext>
<processor type="Sitecore.FXM.Pipelines.Tracking.InitializeContext.InitializeTrackingCookieProcessor, Sitecore.FXM"/>
<processor type="Sitecore.FXM.Pipelines.Tracking.InitializeContext.InitializeExternalTrackingProcessor, Sitecore.FXM"/>
<processor type="Sitecore.FXM.Pipelines.Tracking.InitializeContext.InitializeContextSiteProcessor, Sitecore.FXM" resolve="true"/>
</tracking.initializeContext>
<!--
 Run when a page visit occurs on an tracked external site. 
               Finds all page filters that match the visit and any sub-page level matchers belonging to them. 
-->
<tracking.resolveMatchingElements>
<processor type="Sitecore.FXM.Pipelines.Tracking.ResolveMatchingElements.AddMatchingPageMatchers, Sitecore.FXM" resolve="true"/>
<processor type="Sitecore.FXM.Pipelines.Tracking.ResolveMatchingElements.AddElementMatchersForExperienceEditor, Sitecore.FXM" resolve="true"/>
<processor type="Sitecore.FXM.Pipelines.Tracking.ResolveMatchingElements.RegisterElementMatchersForMatches, Sitecore.FXM" resolve="true"/>
</tracking.resolveMatchingElements>
<tracking.triggerPageMatchers>
<processor type="Sitecore.FXM.Pipelines.Tracking.TriggerPageMatchers.RegisterEventsForMatchedPagesProcessor, Sitecore.FXM" resolve="true"/>
<processor type="Sitecore.FXM.Pipelines.Tracking.TriggerPageMatchers.RegisterOutcomesForMatchedPagesProcessor, Sitecore.FXM" resolve="true"/>
</tracking.triggerPageMatchers>
<tracking.trackpagevisit>
<!--
 Run on each page visit for a tracked external site to record the page visit in the DMS in the current session. 
-->
<processor type="Sitecore.FXM.Pipelines.Tracking.TrackPageVisit.RunInitializeTrackingContextProcessor, Sitecore.FXM" resolve="true"/>
<processor type="Sitecore.FXM.Pipelines.Tracking.TrackPageVisit.TrackPageVisitProcessor, Sitecore.FXM"/>
<processor type="Sitecore.FXM.Pipelines.Tracking.TrackPageVisit.FixRequestUrlProcessor, Sitecore.FXM"/>
<processor type="Sitecore.FXM.Pipelines.Tracking.TrackPageVisit.SwitchUriForReferrerProcessor, Sitecore.FXM" resolve="true"/>
<processor type="Sitecore.FXM.Pipelines.Tracking.TrackPageVisit.TrafficTypeProcessor, Sitecore.FXM"/>
<processor type="Sitecore.FXM.Pipelines.Tracking.TrackPageVisit.SetInteractionLanguageProcessor, Sitecore.FXM" resolve="true"/>
<processor type="Sitecore.FXM.Pipelines.Tracking.TrackPageVisit.SaveDurationProcessor, Sitecore.FXM"/>
<processor type="Sitecore.FXM.Pipelines.Tracking.AfterEvent.CleanupAnalyticsCookieInResponseProcessor, Sitecore.FXM" resolve="true"/>
</tracking.trackpagevisit>
<tracking.triggerpageevent>
<!--
 Run when a page event is triggered by the client javascript to record the event in the DMS in the current session. 
-->
<processor type="Sitecore.FXM.Pipelines.Tracking.TriggerPageEvent.RunInitializeTrackingContextProcessor, Sitecore.FXM" resolve="true"/>
<processor type="Sitecore.FXM.Pipelines.Tracking.TriggerPageEvent.ResolveCurrentPageContext, Sitecore.FXM"/>
<processor type="Sitecore.FXM.Pipelines.Tracking.TriggerPageEvent.TriggerEventsProcessor, Sitecore.FXM" resolve="true"/>
<processor type="Sitecore.FXM.Pipelines.Tracking.AfterEvent.CleanupAnalyticsCookieInResponseProcessor, Sitecore.FXM" resolve="true"/>
</tracking.triggerpageevent>
<tracking.getitemrenderedcontent>
<!--
 Run when Sitecore content is requested by the FXM client javascript to be delivered and inserted into an external site. 
-->
<processor type="Sitecore.FXM.Pipelines.Rendering.ItemContentRenderingProcessor, Sitecore.FXM" resolve="true"/>
</tracking.getitemrenderedcontent>
<!--
 **** External Site Proxy Pipelines - used in the Experience Editor UI **** 
-->
<externalsiteproxy.buildrequest>
<!--
 Run on each request to the proxy, to determine a function that is later executed to perform the proxied request. 
-->
<processor type="Sitecore.FXM.Pipelines.ExternalSiteProxy.BuildRequest.DefaultBuildRequestProcessor, Sitecore.FXM"/>
</externalsiteproxy.buildrequest>
<externalsiteproxy.processresponse>
<!--
 Run on receiving the response from the proxied request, to allow for the content to be altered in any way. 
-->
<processor type="Sitecore.FXM.Pipelines.ExternalSiteProxy.ProcessResponse.ProcessHtmlResponseProcessor, Sitecore.FXM" resolve="true"/>
</externalsiteproxy.processresponse>
<externalsiteproxy.processhtmlresponse>
<!--
 Run on receiving HTML response content from a proxied request, to allow for modification of the document before returning in the proxy response. 
-->
<processor type="Sitecore.FXM.Pipelines.ExternalSiteProxy.ProcessHtmlResponse.HtmlAbsoluteTagAttributeProcessor, Sitecore.FXM">
<TagName>*</TagName>
<TagAttribute>src</TagAttribute>
</processor>
<processor type="Sitecore.FXM.Pipelines.ExternalSiteProxy.ProcessHtmlResponse.HtmlAbsoluteTagAttributeProcessor, Sitecore.FXM">
<TagName>link</TagName>
<TagAttribute>href</TagAttribute>
</processor>
<processor type="Sitecore.FXM.Pipelines.ExternalSiteProxy.ProcessHtmlResponse.HtmlProxiedTagAttributeProcessor, Sitecore.FXM">
<TagName>a</TagName>
<TagAttribute>href</TagAttribute>
</processor>
<processor type="Sitecore.FXM.Pipelines.ExternalSiteProxy.ProcessHtmlResponse.HtmlProxiedTagAttributeProcessor, Sitecore.FXM">
<TagName>area</TagName>
<TagAttribute>href</TagAttribute>
</processor>
<processor type="Sitecore.FXM.Pipelines.ExternalSiteProxy.ProcessHtmlResponse.HtmlProxiedTagAttributeProcessor, Sitecore.FXM">
<TagName>*</TagName>
<TagAttribute>action</TagAttribute>
</processor>
</externalsiteproxy.processhtmlresponse>
<!--  **** Experience Editor Integration ****  -->
<content.experienceeditor>
<processor type="Sitecore.FXM.Client.Pipelines.ExperienceEditor.ExternalPage.GetExternalPageContentProcessor, Sitecore.FXM.Client" resolve="true"/>
<processor type="Sitecore.FXM.Client.Pipelines.ExperienceEditor.ExternalPage.FramingViewstateTagsProcessor, Sitecore.FXM.Client"/>
<processor type="Sitecore.FXM.Client.Pipelines.ExperienceEditor.ExternalPage.InjectControlsProcessor, Sitecore.FXM.Client" resolve="true"/>
<processor type="Sitecore.FXM.Client.Pipelines.ExperienceEditor.ExternalPage.AddPlaceholderData, Sitecore.FXM.Client"/>
<processor type="Sitecore.FXM.Client.Pipelines.ExperienceEditor.ExternalPage.SetRequestDomainProcessor, Sitecore.FXM.Client"/>
<processor type="Sitecore.FXM.Client.Pipelines.ExperienceEditor.ExternalPage.UpdateBeaconScriptPathProcessor, Sitecore.FXM.Client" resolve="true"/>
</content.experienceeditor>
</pipelines>
</group>
<Marketing.Automation.ExportCampaignContacts patch:source="Sitecore.Marketing.Automation.Client.config">
<processor type="Sitecore.Marketing.Automation.Pipelines.PrepareExportContact, Sitecore.Marketing.Automation" resolve="true"/>
<processor type="Sitecore.Marketing.Automation.Pipelines.ExportContact, Sitecore.Marketing.Automation" resolve="true"/>
</Marketing.Automation.ExportCampaignContacts>
<group groupName="exm.messageEvents" patch:source="Sitecore.EmailExperience.Core.config">
<pipelines>
<!--
 REDIRECT URL PIPELINE
                         This pipeline is executed when Email Experience Manager receives a request to redirect
                         a page request from an email link to the correct destination page.
                      
-->
<redirectUrl>
<!--
 Retrieves the message item associated with the redirect event. 
-->
<processor type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.GetMessage, Sitecore.EmailCampaign.Cd" resolve="true"/>
<!--
 Determines whether the link provided in the request is a reference to a page on the local web site. 
-->
<processor type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.CheckInternalLink, Sitecore.EmailCampaign.Cd" resolve="true"/>
<!--  Constructs the URL to redirect the request to.  -->
<processor type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.SetRedirectToUrl, Sitecore.EmailCampaign.Cd" resolve="true">
<internalCarryoverFields hint="list:AddInternalCarryoverField">
<carryoverField type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.CarryoverField, Sitecore.EmailCampaign.Cd">
<param ref="settings/setting[@name='QueryStringKey.MessageId']/@value" desc="fieldKey"/>
<param desc="urlPattern">
SubscriptionPreferences.ashx|.*ConfirmSubscription.aspx|.*Unsubscribe.aspx|UnsubscribeFromAll.aspx.*|.*sc_pd_view=1.*
</param>
</carryoverField>
<carryoverField type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.CarryoverField, Sitecore.EmailCampaign.Cd">
<param ref="settings/setting[@name='QueryStringKey.AnalyticsContactId']/@value" desc="fieldKey"/>
<param desc="urlPattern">
SubscriptionPreferences.ashx|.*ConfirmSubscription.aspx|.*Unsubscribe.aspx|UnsubscribeFromAll.aspx.*|.*sc_pd_view=1.*
</param>
</carryoverField>
<carryoverField type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.CarryoverField, Sitecore.EmailCampaign.Cd">
<param ref="settings/setting[@name='QueryStringKey.ContactIdentifierSource']/@value" desc="fieldKey"/>
<param desc="urlPattern">
SubscriptionPreferences.ashx|.*ConfirmSubscription.aspx|.*Unsubscribe.aspx|UnsubscribeFromAll.aspx.*|.*sc_pd_view=1.*
</param>
</carryoverField>
<carryoverField type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.CarryoverField, Sitecore.EmailCampaign.Cd">
<param ref="settings/setting[@name='QueryStringKey.ContactIdentifierIdentifier']/@value" desc="fieldKey"/>
<param desc="urlPattern">
SubscriptionPreferences.ashx|.*ConfirmSubscription.aspx|.*Unsubscribe.aspx|UnsubscribeFromAll.aspx.*|.*sc_pd_view=1.*
</param>
</carryoverField>
<carryoverField type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.CarryoverField, Sitecore.EmailCampaign.Cd">
<param ref="settings/setting[@name='QueryStringKey.Campaign']/@value" desc="fieldKey"/>
<param desc="urlPattern">
SubscriptionPreferences.ashx|.*ConfirmSubscription.aspx|.*Unsubscribe.aspx|UnsubscribeFromAll.aspx.*|.*sc_pd_view=1.*
</param>
</carryoverField>
<carryoverField type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.CarryoverField, Sitecore.EmailCampaign.Cd">
<param ref="settings/setting[@name='QueryStringKey.TargetLanguage']/@value" desc="fieldKey"/>
<param desc="urlPattern">
SubscriptionPreferences.ashx|.*ConfirmSubscription.aspx|.*Unsubscribe.aspx|UnsubscribeFromAll.aspx.*|.*sc_pd_view=1.*
</param>
</carryoverField>
<carryoverField type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.CarryoverField, Sitecore.EmailCampaign.Cd">
<param ref="settings/setting[@name='QueryStringKey.TestValueIndex']/@value" desc="fieldKey"/>
<param desc="urlPattern">
SubscriptionPreferences.ashx|.*ConfirmSubscription.aspx|.*Unsubscribe.aspx|UnsubscribeFromAll.aspx.*|.*sc_pd_view=1.*
</param>
</carryoverField>
<carryoverField type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.CarryoverField, Sitecore.EmailCampaign.Cd">
<param ref="settings/setting[@name='QueryStringKey.EmailHistoryEntryId']/@value" desc="fieldKey"/>
<param desc="urlPattern">
SubscriptionPreferences.ashx|.*ConfirmSubscription.aspx|.*Unsubscribe.aspx|UnsubscribeFromAll.aspx.*|.*sc_pd_view=1.*
</param>
</carryoverField>
</internalCarryoverFields>
</processor>
<!--
 Registers the link click event in emailEventStorage and attaches the result to the pipeline argument. 
-->
<processor type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.RegisterMessageEvent, Sitecore.EmailCampaign.Cd">
<param ref="exm/emailEventStorage" desc="eventStorage"/>
<param ref="settings/setting[@name='EXM.DuplicateProtectionInterval']/@value" desc="duplicateProtectionIntervalSecs"/>
<param ref="exmLogger" desc="logger"/>
</processor>
<!--
 Identifies the xDB contact related to the event in the xDB tracker. 
-->
<processor type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.IdentifyContact, Sitecore.EmailCampaign.Cd" resolve="true">
<param ref="exmLogger" desc="logger"/>
</processor>
<!--
 Registers custom page events. Internal page references matching the IgnoredUrlPattern will not add the event. 
-->
<processor type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.RegisterPageEvents, Sitecore.EmailCampaign.Cd" resolve="true">
<IgnoredUrlPattern>
SubscriptionPreferences.ashx|.*ConfirmSubscription.aspx|.*Unsubscribe.aspx|UnsubscribeFromAll.aspx.*|.*sc_pd_view=1.*
</IgnoredUrlPattern>
</processor>
<!--
 Triggers the campaign associated with the email message. 
-->
<processor type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.TriggerCampaign, Sitecore.EmailCampaign.Cd" resolve="true">
<IgnoredUrlPattern>
SubscriptionPreferences.ashx|.*ConfirmSubscription.aspx|.*Unsubscribe.aspx|UnsubscribeFromAll.aspx.*|.*sc_pd_view=1.*
</IgnoredUrlPattern>
</processor>
<!--
 Marks the current session as an email click session. 
-->
<processor type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.MarkAsEmailClickSession, Sitecore.EmailCampaign.Cd" resolve="true"/>
<!--
 Updates the classification of the identified contact if it is currently greater than a given threshold. 
-->
<processor type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.UpdateContactClassification, Sitecore.EmailCampaign.Cd" resolve="true">
<LowerClassificationThreshold>900</LowerClassificationThreshold>
<NewClassification>0</NewClassification>
</processor>
<!--
 Resets the email bounce counter of the identified contact to zero. 
-->
<processor type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.ResetContactEmailBounceCount, Sitecore.EmailCampaign.Cd" resolve="true">
<EmailAddressesFacetName ref="model/entities/contact/facets/facet[@name='Emails']/@name"/>
</processor>
<!--
 Sets the channel id of the current visit according to the campaign activity associated with the email message. 
-->
<processor type="Sitecore.EmailCampaign.Cd.Pipelines.RedirectUrl.SetVisitChannelId, Sitecore.EmailCampaign.Cd" resolve="true"/>
</redirectUrl>
<!--
 EMAIL OPENED PIPELINE
                          This pipeline is executed when Email Experience Manager processes a email opened task.
                          The pipeline creates an interaction with a "Email Opened" and a "Email Opened First Time" page event
                          The pipeline will be aborted if:
                          - The message item cannot be found
                          - The campaign cannot be found
                      
-->
<emailOpened patch:source="Sitecore.EmailExperience.ContentManagement.config">
<!--  Gets the message item  -->
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.GetMessage, Sitecore.EmailCampaign" resolve="true"/>
<!--  Gets the contact id -->
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.GetContact, Sitecore.EmailCampaign" resolve="true">
<!--  Delay in milliseconds  -->
<Delay>500</Delay>
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
</processor>
<!--  Registers the Email Opened page event  -->
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.RegisterMessageEvent, Sitecore.EmailCampaign"/>
<!--
 Identifies the campaign associated with the message 
-->
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.IdentifyCampaign, Sitecore.EmailCampaign" resolve="true">
<AddCampaignToInteraction>false</AddCampaignToInteraction>
</processor>
<!--
 Resets the bounce contact for the preferred email address of the contact 
-->
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.EmailOpened.ResetContactEmailBounceCount, Sitecore.EmailCampaign.Cm" resolve="true">
<!--  Delay in milliseconds  -->
<Delay>500</Delay>
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
</processor>
<!--  Gets the channel id from the campaign  -->
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.SetChannelId, Sitecore.EmailCampaign" resolve="true"/>
<!--  Create the interaction  -->
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.CreateInteraction, Sitecore.EmailCampaign" resolve="true">
<!--  Delay in milliseconds  -->
<Delay>500</Delay>
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
</processor>
<!--
 Saves the touch point record to the interaction registry 
-->
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.EmailOpened.SaveInteraction, Sitecore.EmailCampaign.Cm" resolve="true">
<!--  Delay in milliseconds  -->
<Delay>500</Delay>
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
</processor>
</emailOpened>
<!--
 TRANSFORM QUERY STRING PIPELINE
                         This pipeline is executed when a message event page is requested. It can be used to
                         reformat the query string prior to the event handling. E.g. decrypting encrypted
                         content, adding support for legacy formats, etc.
                      
-->
<transformQueryString patch:source="Sitecore.EmailExperience.Core.config">
<!--  Decrypts the query string if it is encrypted.  -->
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.TransformQueryString.DecryptQueryString, Sitecore.EmailCampaign">
<param ref="queryStringEncryption" desc="queryStringEncryption"/>
<param desc="abortIfNotEncrypted">true</param>
</processor>
<!--  Marks the query as valid.  -->
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.TransformQueryString.MarkQueryValid, Sitecore.EmailCampaign"/>
</transformQueryString>
</pipelines>
</group>
<!--
 RECIPIENT LIST MANAGEMENT PIPELINE
           This pipeline is executed when a recipient list management task from the recipientListManagementTaskPool task pool is processed.
           The pipeline is executed for each task individually and adds the corresponding contact to the global opt out list.
         
-->
<exm.recipientListManagement.add patch:source="Sitecore.EmailExperience.ContentManagement.config">
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.GetMessage, Sitecore.EmailCampaign" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.RecipientListManagement.AddToGlobalOptOutList, Sitecore.EmailCampaign.Cm" resolve="true"/>
</exm.recipientListManagement.add>
<!--
 RECIPIENT LIST MANAGEMENT PIPELINE
           This pipeline is executed when a recipient list management task from the recipientListManagementTaskPool task pool is processed.
           The pipeline is executed for each task individually and removes the contact from any include lists on the message.
         
-->
<exm.recipientListManagement.remove patch:source="Sitecore.EmailExperience.ContentManagement.config">
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.GetMessage, Sitecore.EmailCampaign" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.RecipientListManagement.RemoveFromIncludeList, Sitecore.EmailCampaign.Cm" resolve="true">
<!--  Delay in milliseconds  -->
<Delay>500</Delay>
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
</processor>
</exm.recipientListManagement.remove>
<!--
 HANDLE UNDELIVERED MESSAGE PIPELINE
               This pipeline is executed when a bounced message task from the bounced messages task pool is processed.
               The pipeline is executed for each task individually and updates the number of undelivered emails on the 
               recipient's profile.
               Furthermore an interaction is created with a "Email Bounced" page event in xDB.
          
-->
<handleUndeliveredMessage patch:source="Sitecore.EmailExperience.ContentManagement.config">
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.GetMessage, Sitecore.EmailCampaign" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.UpdateUndeliveredCount, Sitecore.EmailCampaign.Cm" resolve="true">
<FacetName ref="model/entities/contact/facets/facet[@name='Emails']/@name"/>
<!--  Delay in milliseconds  -->
<Delay>500</Delay>
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
</processor>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.RegisterMessageEvent, Sitecore.EmailCampaign"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.IdentifyCampaign, Sitecore.EmailCampaign" resolve="true">
<AddCampaignToInteraction>false</AddCampaignToInteraction>
</processor>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.SetChannelId, Sitecore.EmailCampaign" resolve="true"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.CreateInteraction, Sitecore.EmailCampaign" resolve="true">
<!--  Delay in milliseconds  -->
<Delay>500</Delay>
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
</processor>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.SaveInteraction, Sitecore.EmailCampaign" resolve="true">
<!--  Delay in milliseconds  -->
<Delay>500</Delay>
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
</processor>
</handleUndeliveredMessage>
<!--
 HANDLE SPAM COMPLAINT PIPELINE
           This pipeline is executed when a spam complaint task from the spam complaints task pool is processed.
           An interaction is created with a "Email Spam Reported" page event in xDB.
      
-->
<handleSpamComplaint patch:source="Sitecore.EmailExperience.ContentManagement.config">
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.GetMessage, Sitecore.EmailCampaign" resolve="true"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.RegisterMessageEvent, Sitecore.EmailCampaign"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.IdentifyCampaign, Sitecore.EmailCampaign" resolve="true">
<AddCampaignToInteraction>false</AddCampaignToInteraction>
</processor>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.SetChannelId, Sitecore.EmailCampaign" resolve="true"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.CreateInteraction, Sitecore.EmailCampaign" resolve="true">
<!--  Delay in milliseconds  -->
<Delay>500</Delay>
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
</processor>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.SaveInteraction, Sitecore.EmailCampaign" resolve="true">
<!--  Delay in milliseconds  -->
<Delay>500</Delay>
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
</processor>
</handleSpamComplaint>
<!--
 HANDLE LIST UNSUBSCRIBE PIPELINE
           This pipeline is executed when a task from the list unsubscribe task pool is processed.
           An interaction is created with an "Unsubscribe from email" page event in xDB.
        
-->
<handleListUnsubscribe patch:source="Sitecore.EmailExperience.ContentManagement.config">
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.GetMessage, Sitecore.EmailCampaign" resolve="true"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.RegisterMessageEvent, Sitecore.EmailCampaign"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.IdentifyCampaign, Sitecore.EmailCampaign" resolve="true">
<AddCampaignToInteraction>false</AddCampaignToInteraction>
</processor>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.SetChannelId, Sitecore.EmailCampaign" resolve="true"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.CreateInteraction, Sitecore.EmailCampaign" resolve="true">
<!--  Delay in milliseconds  -->
<Delay>500</Delay>
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
</processor>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.SaveInteraction, Sitecore.EmailCampaign" resolve="true">
<!--  Delay in milliseconds  -->
<Delay>500</Delay>
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
</processor>
</handleListUnsubscribe>
<!--
 HANDLE SENT MESSAGE PIPELINE
           This pipeline is executed when a sent message task from the sent messages task pool is processed.
           An interaction is created with a "Email Sent" page event in xDB.
      
-->
<handleSentMessage patch:source="Sitecore.EmailExperience.ContentManagement.config">
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.HandleSentMessage.GetMessage, Sitecore.EmailCampaign.Cm" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.HandleSentMessage.RegisterMessageEvent, Sitecore.EmailCampaign.Cm"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.HandleSentMessage.IdentifyCampaign, Sitecore.EmailCampaign.Cm" resolve="true">
<AddCampaignToInteraction>false</AddCampaignToInteraction>
</processor>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.HandleSentMessage.CreateInteractions, Sitecore.EmailCampaign.Cm" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.HandleSentMessage.SaveInteractions, Sitecore.EmailCampaign.Cm" resolve="true">
<!--  Delay in milliseconds  -->
<Delay>500</Delay>
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
</processor>
</handleSentMessage>
<!--
 SEND EMAIL PIPELINE
           This pipeline dispatches a single email through the SMTP server.
      
-->
<SendEmail patch:source="Sitecore.EmailExperience.ContentManagement.config">
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.SendEmail.FillEmail, Sitecore.EmailCampaign.Cm" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.SendEmail.SendEmail, Sitecore.EmailCampaign.Cm" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.SendEmail.Sleep, Sitecore.EmailCampaign.Cm">
<!--
 Number of milliseconds to put the thread to sleep for after an email has been sent. 
-->
<param desc="sleep">50</param>
</processor>
</SendEmail>
<!--
 HANDLE DISPATCH FAILED PIPELINE
           This pipeline is executed when a dispatch failed task from the dispatch failed task pool is processed.
           An interaction is created with a "Dispatch Failed" page event in xDB.
      
-->
<handleDispatchFailed patch:source="Sitecore.EmailExperience.ContentManagement.config">
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.GetMessage, Sitecore.EmailCampaign" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.UpdateUndeliveredCount, Sitecore.EmailCampaign.Cm" resolve="true">
<FacetName ref="model/entities/contact/facets/facet[@name='Emails']/@name"/>
<!--  Delay in milliseconds  -->
<Delay>500</Delay>
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
</processor>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.RegisterMessageEvent, Sitecore.EmailCampaign"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.IdentifyCampaign, Sitecore.EmailCampaign" resolve="true">
<AddCampaignToInteraction>false</AddCampaignToInteraction>
</processor>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.SetChannelId, Sitecore.EmailCampaign" resolve="true"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.CreateInteraction, Sitecore.EmailCampaign" resolve="true">
<!--  Delay in milliseconds  -->
<Delay>500</Delay>
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
</processor>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.SaveInteraction, Sitecore.EmailCampaign" resolve="true">
<!--  Delay in milliseconds  -->
<Delay>500</Delay>
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
</processor>
</handleDispatchFailed>
<!--
 DISPATCH NEWSLETTER PIPELINE
           This pipeline defines the message dispatch process in the Email Experience Manager. For regular messages the pipeline is executed once. 
           For automated messages it is executed every time a message is triggered.
      
-->
<DispatchNewsletter patch:source="Sitecore.EmailExperience.ContentManagementPrimary.config">
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.DispatchNewsletter.CheckPreconditions, Sitecore.EmailCampaign.Cm" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.DispatchNewsletter.MoveToQueuing, Sitecore.EmailCampaign.Cm" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.DispatchNewsletter.DeployAnalytics, Sitecore.EmailCampaign.Cm" resolve="true">
<!--  The number of times to try deploying the campaign.  -->
<DeployCampaignRetryAttempts>3</DeployCampaignRetryAttempts>
</processor>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.DispatchNewsletter.PublishDispatchItems, Sitecore.EmailCampaign.Cm" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.DispatchNewsletter.QueueMessage, Sitecore.EmailCampaign.Cm" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.DispatchNewsletter.MoveToProcessing, Sitecore.EmailCampaign.Cm" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.DispatchNewsletter.LaunchDedicatedServers, Sitecore.EmailCampaign.Cm"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.DispatchNewsletter.SendTestMessage, Sitecore.EmailCampaign.Cm" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.DispatchNewsletter.SendMessage, Sitecore.EmailCampaign.Cm" resolve="true">
<!--
 The number of milliseconds to wait after dispatch is completed/aborted/paused in order to ensure logging statistics are updated across all dispatch servers. Can be set to 0 if there are no dedicated dispatch servers configured. 
-->
<Sleep>2000</Sleep>
</processor>
<!--
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.DispatchNewsletter.WaitForDispatchToFinish, Sitecore.EmailCampaign.Cm" resolve="true">
          <TimeToWaitBetweenChecks>1000</TimeToWaitBetweenChecks>
        </processor>
-->
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.DispatchNewsletter.MoveToSent, Sitecore.EmailCampaign.Cm" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.DispatchNewsletter.NotifyDispatchFinished, Sitecore.EmailCampaign.Cm" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.DispatchNewsletter.FinalizeDispatch, Sitecore.EmailCampaign.Cm" resolve="true"/>
</DispatchNewsletter>
<!--
 UNSUBSCRIBE FROM LIST PIPELINE
           This pipeline is executed for each subscribed list of a contact whose unsubscribing from a message.
      
-->
<UnsubscribeFromList patch:source="Sitecore.EmailExperience.ContentManagementPrimary.config">
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.UnsubscribeFromList.GetList, Sitecore.EmailCampaign.Cm" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.UnsubscribeFromList.CheckDefaultExcludeCollection, Sitecore.EmailCampaign.Cm" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.UnsubscribeFromList.CheckSegmentedList, Sitecore.EmailCampaign.Cm" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.UnsubscribeFromList.CheckSubscription, Sitecore.EmailCampaign.Cm" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.UnsubscribeFromList.UnsubscribeContact, Sitecore.EmailCampaign.Cm" resolve="true"/>
<processor type="Sitecore.EmailCampaign.Cm.Pipelines.UnsubscribeFromList.SendNotification, Sitecore.EmailCampaign.Cm" resolve="true"/>
</UnsubscribeFromList>
<!--
 SUBSCRIBE EVENT PIPELINE
           This pipeline is executed when a recipient subscribes to a message.
      
-->
<SubscribeEvent patch:source="Sitecore.EmailExperience.ContentManagementPrimary.config"/>
<!--
 UNSUBSCRIBE FROM ALL EVENT PIPELINE
           This pipeline is executed when a recipient unsubscribes from all messages.
      
-->
<UnsubscribeFromAllEvent patch:source="Sitecore.EmailExperience.ContentManagementPrimary.config"/>
<group groupName="exm" patch:source="Sitecore.EmailExperience.Core.config">
<pipelines>
<getContact>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.GetContact.GetContact, Sitecore.EmailCampaign" resolve="true"/>
</getContact>
<!--
 GENERATE BODY LINK PIPELINE
                 This pipeline is executed during dispatch when EXM generates the link to download the email campaign contents from
            
-->
<generateBodyLink>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.GenerateBodyLink.SetUrl, Sitecore.EmailCampaign" resolve="true"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.GenerateBodyLink.AddDefaultQueryStringParameters, Sitecore.EmailCampaign" resolve="true"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.GenerateBodyLink.AddCustomQueryStringParameters, Sitecore.EmailCampaign" resolve="true"/>
</generateBodyLink>
</pipelines>
</group>
<modifyHyperlink patch:source="Sitecore.EmailExperience.Core.config">
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.GenerateLink.Hyperlink.SkipAnchorLinks, Sitecore.EmailCampaign"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.GenerateLink.SetServerUrl, Sitecore.EmailCampaign" resolve="true"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.GenerateLink.Hyperlink.SkipAlreadyProcessedHyperlink, Sitecore.EmailCampaign">
<RedirectPagePath>/sitecore%20modules/Web/EXM/RedirectUrlPage.aspx</RedirectPagePath>
</processor>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.GenerateLink.MapHostname, Sitecore.EmailCampaign" resolve="true"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.GenerateLink.Hyperlink.SetAnalyticsQueryStringParameters, Sitecore.EmailCampaign"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.GenerateLink.Hyperlink.HandleInternalLink, Sitecore.EmailCampaign"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.GenerateLink.GeneratePreviewLink, Sitecore.EmailCampaign"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.GenerateLink.Hyperlink.GenerateHyperlink, Sitecore.EmailCampaign">
<RedirectPagePath>/sitecore%20modules/Web/EXM/RedirectUrlPage.aspx</RedirectPagePath>
<UrlQueryKey ref="settings/setting[@name='QueryStringKey.RedirectUrl']/@value"/>
</processor>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.GenerateLink.Hyperlink.EncryptQueryString, Sitecore.EmailCampaign">
<param ref="queryStringEncryption" desc="queryStringEncryption"/>
</processor>
</modifyHyperlink>
<modifyImageLink patch:source="Sitecore.EmailExperience.Core.config">
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.GenerateLink.SetServerUrl, Sitecore.EmailCampaign" resolve="true"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.GenerateLink.MapHostname, Sitecore.EmailCampaign" resolve="true"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.GenerateLink.GeneratePreviewLink, Sitecore.EmailCampaign"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.GenerateLink.ImageLink.GenerateImageLink, Sitecore.EmailCampaign"/>
</modifyImageLink>
<!--
 EVALUATE CONTACT
           When a tree is being constructed, relevant contacts may be added to each tree node. This pipeline determines whether or not a contact is relevant and
           therefore whether or not the contact should be added to the tree node being processed. NOTE: the PathAnalyzer.MaxStoredContacts setting determines
           how many relevant contacts can be added to a tree node.
      
-->
<group groupName="PathAnalyzer.Construction" patch:source="Sitecore.PathAnalyzer.config">
<pipelines>
<evaluateContact>
<processor type="Sitecore.PathAnalyzer.Pipelines.EvaluateContact.IsContactIdentified, Sitecore.PathAnalyzer"/>
<processor type="Sitecore.PathAnalyzer.Pipelines.EvaluateContact.MeetsVisitCountThreshold, Sitecore.PathAnalyzer">
<VisitCountThreshold>2</VisitCountThreshold>
</processor>
<processor type="Sitecore.PathAnalyzer.Pipelines.EvaluateContact.MeetsValueThreshold, Sitecore.PathAnalyzer">
<ValueThreshold>100</ValueThreshold>
</processor>
</evaluateContact>
</pipelines>
</group>
</pipelines>
<!--
 RETRYER
         When enabled, the Retryer resends failed database requests a specified number of times.
         For example, this is useful if you configure a Sitecore instance to support hot failover for database calls.
         Default value: disabled="true"
         Example transient retryer:
         <retryer disabled="false" type="Sitecore.Data.DataProviders.TransientRetryer, Sitecore.Kernel">
          <param desc="Log each exception (should be used for debug only)">true</param>
        </retryer>
    
-->
<retryer type="Sitecore.Data.DataProviders.Retryer, Sitecore.Kernel" disabled="true">
<param desc="Number of tries">6</param>
<param desc="Interval between tries">00:00:00.500</param>
<param desc="Log each exception (should be used for debug only)">true</param>
</retryer>
<!--
 List of data api implementations enabling access to SQL based databases. 
-->
<dataApis>
<!--  Data api for accessing SQL Server databases.  -->
<dataApi name="SqlServer" type="Sitecore.Data.SqlServer.SqlServerDataApi, Sitecore.Kernel">
<param connectionStringName="$(1)"/>
</dataApi>
</dataApis>
<!--  DATA PROVIDERS  -->
<dataProviders>
<main type="Sitecore.Data.SqlServer.SqlServerDataProvider, Sitecore.Kernel">
<param connectionStringName="$(1)"/>
<Name>$(1)</Name>
</main>
<filesystem type="Sitecore.Data.DataProviders.FileSystemDataProvider, Sitecore.Kernel">
<CacheOptions.DisableAll>true</CacheOptions.DisableAll>
</filesystem>
<templatefile type="Sitecore.Data.DataProviders.TemplateFileResolver, Sitecore.Kernel">
<param desc="template file">$(1)</param>
<abortChain>true</abortChain>
</templatefile>
<methodGroups>
<copyMove>
<CopyItem/>
<MoveItem/>
</copyMove>
<create>
<AddVersion/>
<CreateItem/>
</create>
<delete>
<DeleteItem/>
<RemoveVersion/>
<RemoveVersions/>
</delete>
<properties>
<GetProperty/>
<RemoveProperty/>
<SetProperty/>
</properties>
<publishing>
<AddToPublishQueue/>
<CleanupPublishQueue/>
<GetPublishQueue/>
</publishing>
<query>
<SelectIDs/>
<SelectSingleID/>
</query>
<read>
<BlobStreamExists/>
<GetItemDefinition/>
<GetItemFields/>
<GetItemVersions/>
</read>
<relations>
<GetChildIDs/>
<GetParentID/>
<GetRootID/>
<HasChildren/>
</relations>
<resolve>
<ResolvePath/>
</resolve>
<templates>
<ChangeTemplate/>
<GetTemplateItemIds/>
<GetTemplates/>
</templates>
<update>
<SaveItem/>
</update>
<workflow>
<GetItemsInWorkflowState/>
<GetWorkflowInfo/>
<SetWorkflowInfo/>
</workflow>
</methodGroups>
</dataProviders>
<!--  DATA PROVIDERS  -->
<workflowHistoryStores>
<main type="Sitecore.Data.SqlServer.SqlServerHistoryStore, Sitecore.Kernel">
<param connectionStringName="$(1)"/>
</main>
</workflowHistoryStores>
<!--  DATABASES  -->
<databases>
<!--  core  -->
<database id="core" type="Sitecore.Data.DefaultDatabase, Sitecore.Kernel" singleInstance="true" patch:source="Sitecore.Buckets.config">
<param desc="name">$(id)</param>
<connectionStringName>$(id)</connectionStringName>
<icon>Images/database_core.png</icon>
<dataProviders hint="list:AddDataProvider">
<dataProvider ref="dataProviders/main" param1="$(id)">
<prefetch hint="raw:AddPrefetch">
<childLimit>100</childLimit>
<logStats>false</logStats>
<template desc="template">{AB86861A-6030-46C5-B394-E8F99E8B87DB}</template>
<template desc="template section">{E269FBB5-3750-427A-9149-7AA950B49301}</template>
<template desc="template field">{455A3E98-A627-4B40-8035-E683A0331AC7}</template>
<template desc="language">{F68F13A6-3395-426A-B9A1-FA2DC60D94EB}</template>
<template desc="device">{B6F7EEB4-E8D7-476F-8936-5ACE6A76F20B}</template>
<item desc="root">{11111111-1111-1111-1111-111111111111}</item>
<children desc="main sections">{11111111-1111-1111-1111-111111111111}</children>
<cacheSize>150MB</cacheSize>
<template desc="application">{EB06CEC0-5E2D-4DC4-875B-01ADCC577D13}</template>
<template desc="html setting group">{B2A1FF6C-6B1F-41EF-B2E1-AA598CF7335F}</template>
<template desc="reference">{EF295CD8-19D4-4E02-9438-94C926EF5284}</template>
<template desc="menu item">{998B965E-6AB8-4568-810F-8101D60D0CC3}</template>
<template desc="html editor button">{3C8BD8A1-280B-4278-BB8B-21FA3B87AF0F}</template>
<template desc="html editor class translation">{10863561-7398-4C5D-8A99-B075B90C4E41}</template>
<template desc="html editor divider">{7BEF6918-EFF5-48DB-937F-914BD2EEB15D}</template>
<template desc="html editor drop down">{73AB3D58-6BF7-4DB5-BEDD-5EB7072D11B7}</template>
<template desc="html editor drop down button">{A473CBD2-4E48-41B3-8B1B-5695DAF90B5C}</template>
<template desc="html editor html item">{D73319BC-E3DF-45B9-B545-A255AA7E3C88}</template>
<template desc="html editor list item">{2B421E6F-E820-4A04-9A4A-E421A0262B61}</template>
<template desc="html editor snippet">{3825FE6A-6CA1-489B-A7C9-C3B4B3B38272}</template>
<template desc="html editor toolbar">{0E0DA701-BC94-4855-A0C3-92063E64BA1F}</template>
<template desc="html class">{5380D907-A1BC-41FB-BBB6-4B04E83E25D1}</template>
<template desc="html font">{A87C6D3F-D797-4147-9292-899A9DB561B3}</template>
<template desc="html translation">{B5A33A4A-7A5D-4D83-BBD3-AF9CA4582827}</template>
<template desc="html setting group">{B2A1FF6C-6B1F-41EF-B2E1-AA598CF7335F}</template>
<template desc="chunk">{8F3D8F9B-2D76-4ACE-803F-35415D2B230A}</template>
<template desc="command">{AC2CF483-11AE-4C35-AAA8-C4796423A501}</template>
<template desc="custom control">{B8D7200A-15D2-42CE-AB24-79FEF4DDCF86}</template>
<template desc="large button">{1DB34C92-03B0-4475-9A39-DA14E4D9D8FC}</template>
<template desc="large combo button">{8A63ABCF-1CA6-4FD2-ABEE-5DFC2D7B0C75}</template>
<template desc="large gallery button">{19054D88-FED7-48AD-87CD-CF458590C303}</template>
<template desc="panel">{3619F992-4177-4124-89DD-DABFC2BAF6BB}</template>
<template desc="separator">{C3443118-77AC-44C2-BAA0-F1ACCB31813A}</template>
<template desc="small button">{9F62EBD5-2280-4A35-BE51-A210D831D687}</template>
<template desc="small check button">{ABC069D5-3627-4A20-841E-D199B0EB4957}</template>
<template desc="small combo button">{33D5BE89-B49B-411E-9175-8E4F872B5CDF}</template>
<template desc="small gallery button">{6B84BD97-60E8-4E18-B1FC-9F92AE0659C5}</template>
<template desc="strip">{EC6D62A5-5D00-4329-8958-8AC1AD100EBB}</template>
<template desc="tool button">{DBC60382-0FED-4B55-8EAE-178F9099BD75}</template>
<template desc="tool button group">{32DF7EF0-56D8-4CFF-AE46-884A7533BC9D}</template>
<template desc="tool button new line">{6400BD3F-E8A1-4C38-8319-131448492439}</template>
<template desc="toolbar">{3A1A3B48-3434-4E5A-8F05-AD6E1687D888}</template>
<template desc="dictionary folder">{267D9AC7-5D85-4E9D-AF89-99AB296CC218}</template>
<template desc="dictionary entry">{6D1CD897-1936-4A3A-A511-289A94C2A7B1}</template>
<children desc="masters">{BAD98E0E-C1B5-4598-AC13-21B06218B30C}</children>
<children desc="field types">{76E6D8C7-1F93-4712-872B-DA3C96B808F2}</children>
<children desc="field types - analytics">{254C1A4A-524D-4FBE-9C7E-700B26000227}</children>
<children desc="field types - simple types">{C3D117D1-66D3-44E2-BEB2-7B72B365BAAE}</children>
<children desc="field types - list types">{72352EFD-3C06-404D-93FA-737F669F41FA}</children>
<children desc="field types - link types">{A8890705-936C-4185-A6E2-4AA1C8674F07}</children>
<children desc="field types - developer types">{BDCCCB7D-1F90-405F-8386-13A19F807B6D}</children>
<children desc="field types - system types">{7A22EC7C-AACA-4AD5-8AB9-A83C1E8C68E8}</children>
<children desc="field types - deprecated types">{9F40813C-0C21-4A46-922C-86A5149B80A8}</children>
<children desc="applications">{C74AC643-53C8-4F1E-9508-840CDC72AACA}</children>
<template desc="Xsl Rendering">{F1F1D639-4F54-40C2-8BE0-81266B392CEB}</template>
<template desc="Xml layout">{1163DA83-B2EF-4381-BF09-B2FF714B1B3F}</template>
<template desc="folder">{A87A00B1-E6DB-45AB-8B54-636FEC3B5523}</template>
<!--  MVC  -->
<template desc="Controller rendering">{2A3E91A0-7987-44B5-AB34-35C2D9DE83B9}</template>
<template desc="Item rendering">{86776923-ECA5-4310-8DC0-AE65FE88D078}</template>
<template desc="Rendering">{92D4A8C4-5754-4E1A-96A6-095BD193E12B}</template>
<template desc="Sublayout">{0A98E368-CDB9-4E1E-927C-8E0C24A003FB}</template>
<template desc="View rendering">{99F8905D-4A87-4EB8-9F8B-A9BEBFB3ADD6}</template>
<!--  SPEAK  -->
<template desc="Text">{76F63DF7-0235-4164-86AB-84B5EC48CB2A}</template>
<template desc="PageSettings">{E35EAA2D-EDEA-431C-A9E6-488272B53782}</template>
<template desc="Tab1">{8A7ACB1A-0990-4C9E-A6F0-9612D0F5F51C}</template>
<template desc="ColumnField">{D3CEFE6E-E51B-4A84-B92E-AAF8AA8E8DC8}</template>
<template desc="Text Parameters">{6437CFD5-76CA-48AA-BFBD-8B8D73EB5581}</template>
<template desc="Page-Stylesheet-File">{27C78269-CEF0-483F-9E7A-AF27ED04CE5D}</template>
<template desc="Speak-DashboardPage">{B11AFCCD-C286-4384-B694-4465D6C605DE}</template>
<template desc="Button Parameters">{8A9F4991-322D-4FA3-B40B-41B1C715C34B}</template>
<template desc="Tab2">{F62B4CD7-754C-4461-810F-2B6BD2C92A0D}</template>
<template desc="HyperlinkButton Parameters">{1DCB0B87-2D4D-4F11-9F11-293E420B19E3}</template>
<template desc="PipelineProcessor">{8861A098-F3CD-4FD3-9557-0BC6C33D738E}</template>
<template desc="AdvancedExpander Parameters">{1C98E698-030C-43FF-8B6C-08D6D7E1B8DC}</template>
<!--  Experience Analytics  -->
<template desc="ExperienceAnalyticsLineChart Parameters">{DAD532FA-6524-45CB-A57C-848CC34EB238}</template>
<template desc="ExperienceAnalyticsBarChart Parameters">{230EE01C-6CB0-46D6-925F-6C70A30706BA}</template>
<template desc="ExperienceAnalyticsAreaChart Parameters">{5BE5B7A7-7EC6-4736-B176-B9268238F41E}</template>
</prefetch>
</dataProvider>
</dataProviders>
<PropertyStore ref="PropertyStoreProvider/store[@name='$(id)']"/>
<remoteEvents.EventQueue>
<obj ref="eventing/eventQueueProvider/eventQueue[@name='$(id)']"/>
</remoteEvents.EventQueue>
<workflowProvider type="Sitecore.Workflows.Simple.WorkflowProvider, Sitecore.Kernel" hint="defer">
<param desc="database">$(id)</param>
<param ref="workflowHistoryStores/main" desc="history store" param1="$(id)"/>
</workflowProvider>
<archives hint="raw:AddArchive">
<archive name="archive"/>
<archive name="recyclebin"/>
</archives>
<cacheSizes hint="setting">
<data>100MB</data>
<items>50MB</items>
<paths>2500KB</paths>
<itempaths>50MB</itempaths>
<standardValues>2500KB</standardValues>
</cacheSizes>
<NotificationProvider type="Sitecore.Data.DataProviders.SqlServer.SqlServerNotificationProvider, Sitecore.Kernel">
<param connectionStringName="$(id)"/>
<param desc="databaseName">$(id)</param>
</NotificationProvider>
<Engines.DataEngine.Commands.AddFromTemplatePrototype patch:source="Sitecore.Buckets.config">
<obj type="Sitecore.Buckets.Commands.AddFromTemplateCommand, Sitecore.Buckets"/>
</Engines.DataEngine.Commands.AddFromTemplatePrototype>
</database>
<!--  master  -->
<database id="master" type="Sitecore.Data.DefaultDatabase, Sitecore.Kernel" singleInstance="true" patch:source="Sitecore.Buckets.config">
<param desc="name">$(id)</param>
<icon>Images/database_master.png</icon>
<dataProviders hint="list:AddDataProvider">
<dataProvider ref="dataProviders/main" param1="$(id)">
<prefetch hint="raw:AddPrefetch">
<childLimit>100</childLimit>
<logStats>false</logStats>
<template desc="template">{AB86861A-6030-46C5-B394-E8F99E8B87DB}</template>
<template desc="template section">{E269FBB5-3750-427A-9149-7AA950B49301}</template>
<template desc="template field">{455A3E98-A627-4B40-8035-E683A0331AC7}</template>
<template desc="language">{F68F13A6-3395-426A-B9A1-FA2DC60D94EB}</template>
<template desc="device">{B6F7EEB4-E8D7-476F-8936-5ACE6A76F20B}</template>
<item desc="root">{11111111-1111-1111-1111-111111111111}</item>
<children desc="main sections">{11111111-1111-1111-1111-111111111111}</children>
<cacheSize>200MB</cacheSize>
<template desc="menu item">{998B965E-6AB8-4568-810F-8101D60D0CC3}</template>
<template desc="workflow">{1C0ACC50-37BE-4742-B43C-96A07A7410A5}</template>
<template desc="state">{4B7E2DA9-DE43-4C83-88C3-02F042031D04}</template>
<template desc="command">{CB01F9FC-C187-46B3-AB0B-97A8468D8303}</template>
<template desc="action">{66882E97-C8AA-4E37-8901-7A8AA35ED2ED}</template>
<item desc="home">{110D559F-DEA5-42EA-9C1C-8A5DF7E70EF9}</item>
<!--  Rules  -->
<template desc="Action">{F90052A5-B4E6-4E6D-9812-1E1B88A6FCEA}</template>
<template desc="Condition">{F0D16EEE-3A05-4E43-A082-795A32B873C0}</template>
<template desc="Conditional Rendering Rule">{550B5CEF-242C-463F-8ED5-983922A39863}</template>
<template desc="Content Editor Warning Rule">{71A2C881-FBB3-4A23-A187-7FD50A20F924}</template>
<template desc="Insert Options Rule">{664E5035-EB8C-4BA1-9731-A098FCC9127A}</template>
<template desc="Rule">{D9BDF22F-6E17-47F3-AB64-49C717BA92DA}</template>
<template desc="Script">{AB6DD55D-75E3-4A02-9793-7054ED90FCB6}</template>
<template desc="Element Folder">{54DAE7CD-BFD8-4E69-9679-75F2AE9F9034}</template>
<template desc="Rule Elements Visibility Rule">{271F5CF1-95C7-474D-9F04-06C6EBB20D8F}</template>
<template desc="Rules Context Folder">{DDA66314-03F3-4C89-84A9-39DFFB235B06}</template>
<template desc="Rules Folder">{8EA2CF67-4250-47A2-AECA-4F70FD200DC7}</template>
<template desc="Tag">{1A9B6300-4652-477C-A4B5-B2A64E86B29F}</template>
<template desc="Tags Definition">{854BA861-63EA-4A0C-8C7B-541E9A7EC4C1}</template>
<template desc="Tags Definitions Folder">{96C8E5DD-63C3-496B-A97C-A3E37E1DACBA}</template>
<template desc="Visibility">{AA91A868-02F2-41D3-8B78-1CAD91B4DCAE}</template>
<template desc="Validation Result">{29045375-C15F-4E69-B873-75C3F5C1814B}</template>
<template desc="Validation Rule">{0512BDE9-5696-42C4-8C7D-B349EDA9CEF9}</template>
</prefetch>
</dataProvider>
</dataProviders>
<securityEnabled>true</securityEnabled>
<publishVirtualItems>true</publishVirtualItems>
<PropertyStore ref="PropertyStoreProvider/store[@name='$(id)']"/>
<remoteEvents.EventQueue>
<obj ref="eventing/eventQueueProvider/eventQueue[@name='$(id)']"/>
</remoteEvents.EventQueue>
<workflowProvider type="Sitecore.Workflows.Simple.WorkflowProvider, Sitecore.Kernel" hint="defer">
<param desc="database">$(id)</param>
<param ref="workflowHistoryStores/main" desc="history store" param1="$(id)"/>
</workflowProvider>
<archives hint="raw:AddArchive">
<archive name="archive"/>
<archive name="recyclebin"/>
</archives>
<NotificationProvider type="Sitecore.Data.DataProviders.SqlServer.SqlServerNotificationProvider, Sitecore.Kernel">
<param connectionStringName="$(id)"/>
<param desc="databaseName">$(id)</param>
</NotificationProvider>
<cacheSizes hint="setting">
<data>100MB</data>
<items>50MB</items>
<paths>2500KB</paths>
<itempaths>50MB</itempaths>
<standardValues>2500KB</standardValues>
</cacheSizes>
<Engines.DataEngine.Commands.AddFromTemplatePrototype patch:source="Sitecore.Buckets.config">
<obj type="Sitecore.Buckets.Commands.AddFromTemplateCommand, Sitecore.Buckets"/>
</Engines.DataEngine.Commands.AddFromTemplatePrototype>
</database>
<!--  web  -->
<database id="web" type="Sitecore.Data.DefaultDatabase, Sitecore.Kernel" singleInstance="true" patch:source="Sitecore.Buckets.config">
<param desc="name">$(id)</param>
<icon>Images/database_web.png</icon>
<securityEnabled>true</securityEnabled>
<dataProviders hint="list:AddDataProvider">
<dataProvider ref="dataProviders/main" param1="$(id)">
<disableGroup>publishing</disableGroup>
<prefetch hint="raw:AddPrefetch">
<childLimit>100</childLimit>
<logStats>false</logStats>
<template desc="template">{AB86861A-6030-46C5-B394-E8F99E8B87DB}</template>
<template desc="template section">{E269FBB5-3750-427A-9149-7AA950B49301}</template>
<template desc="template field">{455A3E98-A627-4B40-8035-E683A0331AC7}</template>
<template desc="language">{F68F13A6-3395-426A-B9A1-FA2DC60D94EB}</template>
<template desc="device">{B6F7EEB4-E8D7-476F-8936-5ACE6A76F20B}</template>
<item desc="root">{11111111-1111-1111-1111-111111111111}</item>
<children desc="main sections">{11111111-1111-1111-1111-111111111111}</children>
<cacheSize>100MB</cacheSize>
<template desc="alias">{54BCFFB7-8F46-4948-AE74-DA5B6B5AFA86}</template>
<template desc="layout">{3A45A723-64EE-4919-9D41-02FD40FD1466}</template>
<template desc="Sublayout">{0A98E368-CDB9-4E1E-927C-8E0C24A003FB}</template>
<template desc="xsl rendering">{F1F1D639-4F54-40C2-8BE0-81266B392CEB}</template>
<item desc="home">{110D559F-DEA5-42EA-9C1C-8A5DF7E70EF9}</item>
<children desc="main items">{110D559F-DEA5-42EA-9C1C-8A5DF7E70EF9}</children>
<!--  MVC  -->
<template desc="Controller rendering">{2A3E91A0-7987-44B5-AB34-35C2D9DE83B9}</template>
<template desc="Item rendering">{86776923-ECA5-4310-8DC0-AE65FE88D078}</template>
<template desc="Rendering">{92D4A8C4-5754-4E1A-96A6-095BD193E12B}</template>
<template desc="Sublayout">{0A98E368-CDB9-4E1E-927C-8E0C24A003FB}</template>
<template desc="View rendering">{99F8905D-4A87-4EB8-9F8B-A9BEBFB3ADD6}</template>
<!--  Rules  -->
<template desc="Action">{F90052A5-B4E6-4E6D-9812-1E1B88A6FCEA}</template>
<template desc="Condition">{F0D16EEE-3A05-4E43-A082-795A32B873C0}</template>
<template desc="Conditional Rendering Rule">{550B5CEF-242C-463F-8ED5-983922A39863}</template>
<template desc="Content Editor Warning Rule">{71A2C881-FBB3-4A23-A187-7FD50A20F924}</template>
<template desc="Insert Options Rule">{664E5035-EB8C-4BA1-9731-A098FCC9127A}</template>
<template desc="Rule">{D9BDF22F-6E17-47F3-AB64-49C717BA92DA}</template>
<template desc="Script">{AB6DD55D-75E3-4A02-9793-7054ED90FCB6}</template>
<template desc="Element Folder">{54DAE7CD-BFD8-4E69-9679-75F2AE9F9034}</template>
<template desc="Rule Elements Visibility Rule">{271F5CF1-95C7-474D-9F04-06C6EBB20D8F}</template>
<template desc="Rules Context Folder">{DDA66314-03F3-4C89-84A9-39DFFB235B06}</template>
<template desc="Rules Folder">{8EA2CF67-4250-47A2-AECA-4F70FD200DC7}</template>
<template desc="Tag">{1A9B6300-4652-477C-A4B5-B2A64E86B29F}</template>
<template desc="Tags Definition">{854BA861-63EA-4A0C-8C7B-541E9A7EC4C1}</template>
<template desc="Tags Definitions Folder">{96C8E5DD-63C3-496B-A97C-A3E37E1DACBA}</template>
<template desc="Visibility">{AA91A868-02F2-41D3-8B78-1CAD91B4DCAE}</template>
<template desc="Validation Result">{29045375-C15F-4E69-B873-75C3F5C1814B}</template>
<template desc="Validation Rule">{0512BDE9-5696-42C4-8C7D-B349EDA9CEF9}</template>
</prefetch>
</dataProvider>
</dataProviders>
<PropertyStore ref="PropertyStoreProvider/store[@name='$(id)']"/>
<remoteEvents.EventQueue>
<obj ref="eventing/eventQueueProvider/eventQueue[@name='$(id)']"/>
</remoteEvents.EventQueue>
<archives hint="raw:AddArchive">
<archive name="archive"/>
<archive name="recyclebin"/>
</archives>
<cacheSizes hint="setting">
<data>100MB</data>
<items>50MB</items>
<paths>2500KB</paths>
<itempaths>50MB</itempaths>
<standardValues>2500KB</standardValues>
</cacheSizes>
<Engines.DataEngine.Commands.AddFromTemplatePrototype patch:source="Sitecore.Buckets.config">
<obj type="Sitecore.Buckets.Commands.AddFromTemplateCommand, Sitecore.Buckets"/>
</Engines.DataEngine.Commands.AddFromTemplatePrototype>
</database>
<!--  file system  -->
<database id="filesystem" type="Sitecore.Data.DefaultDatabase, Sitecore.Kernel" singleInstance="true">
<param desc="name">$(id)</param>
<dataProviders hint="list:AddDataProvider">
<dataProvider ref="dataProviders/filesystem" param1="$(id)"/>
</dataProviders>
<readonly>true</readonly>
<securityEnabled>false</securityEnabled>
<cacheSizes hint="setting">
<data>0</data>
<items>0</items>
<paths>0</paths>
<standardValues>0</standardValues>
</cacheSizes>
</database>
</databases>
<!--

      Define archive providers for databases
      IMPORTANT: If you wish to support multiple provides, you must configure SwitchingArchiveManager (see SwitchingManagers.config.example)
        Supported attributes:
          name:       A unique provider name
          type:       The provider type
          database:   Connects the provider with a specified database.
                      If the database attribute is missing or the value of this attribute is equal to "*"
                      then the provider will be used for all databases.
                      If we have more than one provider which is connected to the same database an exception will be thrown.
                      Examples of usages:
                      <add name="<unique_name>" type="<type>" database="core"/>
                      <add name="<unique_name>" type="<type>" database="web|master"/>
                      <add name="<unique_name>" type="<type>" database="*"/>
    
-->
<archives defaultProvider="sql" enabled="true">
<providers>
<clear/>
<add name="sql" type="Sitecore.Data.Archiving.SqlArchiveProvider, Sitecore.Kernel" database="*"/>
</providers>
</archives>
<search>
<analyzer type="Lucene.Net.Analysis.Standard.StandardAnalyzer, Lucene.Net">
<param hint="version">Lucene_30</param>
</analyzer>
<categorizer type="Sitecore.Pipelines.Search.CategorizeResults+Categorizer, Sitecore.Kernel">
<Categories hint="raw:AddCategory">
<category path="/sitecore/content"/>
<category displayName="Images">
<templateID>{F1828A2C-7E5D-4BBD-98CA-320474871548}</templateID>
<templateID>{DAF085E8-602E-43A6-8299-038FF171349F}</templateID>
<templateID>{C97BA923-8009-4858-BDD5-D8BE5FCCECF7}</templateID>
<templateID>{EB3FB96C-D56B-4AC9-97F8-F07B24BB9BF7}</templateID>
</category>
<category displayName="Documents">
<templateID>{16692733-9A61-45E6-B0D4-4C0C06F8DD3C}</templateID>
<templateID>{777F0C76-D712-46EA-9F40-371ACDA18A1C}</templateID>
<templateID>{7BB0411F-50CD-4C21-AD8F-1FCDE7C3AFFE}</templateID>
<templateID>{0603F166-35B8-469F-8123-E8D87BEDC171}</templateID>
<templateID>{3DB3A3CA-A0A9-4228-994B-F70C8E99A1CE}</templateID>
<templateID>{2A130D0C-A2A9-4443-B418-917F857BF6C9}</templateID>
<templateID>{F57FB07D-332A-4934-AA67-0A629C5396E2}</templateID>
<templateID>{CC80011D-8EAE-4BFC-84F1-67ECD0223E9E}</templateID>
</category>
<category path="/sitecore/media library"/>
<category path="/sitecore/layout/devices"/>
<category path="/sitecore/layout/layouts"/>
<category path="/sitecore/layout/sublayouts"/>
<category path="/sitecore/layout/renderings"/>
<category path="/sitecore/layout"/>
<category displayName="Template Fields" templateIDs="{455A3E98-A627-4B40-8035-E683A0331AC7}"/>
<category displayName="Template Sections" templateIDs="{E269FBB5-3750-427A-9149-7AA950B49301}"/>
<category path="/sitecore/templates/branches"/>
<category path="/sitecore/templates/system" displayName="System Templates"/>
<category path="/sitecore/templates"/>
<category path="/sitecore/system/aliases"/>
<category path="/sitecore/system/languages"/>
<category path="/sitecore/system/workflows"/>
<category path="/sitecore/system"/>
<category path="/sitecore/content/applications/control panel" database="core"/>
<category path="/sitecore/content/applications" database="core"/>
</Categories>
</categorizer>
<xpathquerytranslator type="Sitecore.Search.Queries.QueryToSearchTranslator, Sitecore.Kernel" singleInstance="true"/>
</search>
<!--  AUTHENTICATION  -->
<authentication defaultProvider="forms">
<providers>
<clear/>
<add name="forms" type="Sitecore.Security.Authentication.FormsAuthenticationProvider, Sitecore.Kernel"/>
<add name="disabled" type="Sitecore.Security.Authentication.DisabledAuthenticationProvider, Sitecore.Kernel"/>
</providers>
</authentication>
<httpAuthentication defaultProvider="Digest">
<providers>
<clear/>
<add name="Basic" type="Sitecore.Security.Authentication.BasicHttpAuthenticationProvider, Sitecore.Kernel">
<Realm>sitecore</Realm>
</add>
<add name="Digest" type="Sitecore.Security.Authentication.DigestHttpAuthenticationProvider, Sitecore.Kernel">
<Realm>sitecore</Realm>
</add>
</providers>
</httpAuthentication>
<!--  USERS  -->
<userManager defaultProvider="default" enabled="true">
<providers>
<clear/>
<add name="default" type="Sitecore.Security.Accounts.UserProvider, Sitecore.Kernel"/>
<add name="disabled" type="Sitecore.Security.Accounts.DisabledUserProvider, Sitecore.Kernel"/>
</providers>
</userManager>
<!--  ROLES  -->
<rolesInRolesManager defaultProvider="sql" enabled="true">
<providers>
<clear/>
<add name="sql" type="Sitecore.Security.Accounts.SqlServerRolesInRolesProvider, Sitecore.Kernel" connectionStringName="security" rolesInRolesSupported="true" globalRolesConfigStoreName="globalRoles" raiseEvents="true"/>
<add name="disabled" type="Sitecore.Security.Accounts.DisabledRolesInRolesProvider, Sitecore.Kernel"/>
</providers>
</rolesInRolesManager>
<!--  AUTHORIZATION  -->
<authorization defaultProvider="custom">
<providers>
<clear/>
<add name="sql" type="Sitecore.Security.AccessControl.SqlServerAuthorizationProvider, Sitecore.Kernel" connectionStringName="security" embedAclInItems="true"/>
<add name="disabled" type="Sitecore.Security.AccessControl.DisabledAuthorizationProvider, Sitecore.Kernel"/>
<add name="custom" type="Sitecore.Buckets.Security.BucketAuthorizationProvider, Sitecore.Buckets" connectionStringName="security" embedAclInItems="true" patch:source="Sitecore.Buckets.config"/>
</providers>
</authorization>
<!--

      ACCESS RIGHTS
      Example of a <rights> element using a custom type (which must derive from AccessRight):
      <add name="my:access" comment="Custom right." title="Custom" type="My.Security.MyAccessRight, My.Assembly"/>

      Example of a <rules> element using a custom type (which must derive from AcessRightRule):
      <add prefix="my:" typeName="My.MyEntity" type="My.MyAcessRightRule, My.Assembly"/>
      
-->
<!--
 Adds the ability to give users/roles permission to create an item bucket or convert an item bucket into an ordinary content item. 
-->
<accessRights defaultProvider="config">
<providers>
<clear/>
<add name="config" type="Sitecore.Security.AccessControl.ConfigAccessRightProvider, Sitecore.Kernel" configRoot="accessRights"/>
</providers>
<rights defaultType="Sitecore.Security.AccessControl.AccessRight, Sitecore.Kernel">
<add name="field:read" comment="Read right for fields." title="Field Read"/>
<add name="field:write" comment="Write right for fields." title="Field Write" modifiesData="true"/>
<add name="item:read" comment="Read right for items." title="Read"/>
<add name="item:write" comment="Write right for items." title="Write" modifiesData="true"/>
<add name="item:rename" comment="Rename right for items." title="Rename" modifiesData="true"/>
<add name="item:create" comment="Create right for items." title="Create" modifiesData="true"/>
<add name="item:delete" comment="Delete right for items." title="Delete" modifiesData="true"/>
<add name="item:admin" comment="Admin right for items." title="Administer" modifiesData="true"/>
<add name="language:read" comment="Read right for languages." title="Language Read"/>
<add name="language:write" comment="Write right for languages." title="Language Write" modifiesData="true"/>
<add name="site:enter" comment="The right to enter a site." title="Site Enter"/>
<add name="insert:show" comment="Determines if the user can see the insert option" title="Show in Insert"/>
<add name="workflowState:delete" comment="The right to delete an item based on its workflow state." title="Workflow State Delete"/>
<add name="workflowState:write" comment="The right to write an item based on its workflow state." title="Workflow State Write" modifiesData="true"/>
<add name="workflowCommand:execute" comment="The right to execute a workflow command." title="Workflow Command Execute"/>
<add name="profile:customize" comment="The right to input out of range values of profile keys, that belong to this profile." title="Customize Profile Key Values"/>
<add name="bucket:makebucket" comment="Create Bucket" title="Create Bucket" type="Sitecore.Buckets.Security.BucketAccessRight, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<add name="bucket:unmake" comment="Revert Bucket" title="Revert Bucket" type="Sitecore.Buckets.Security.BucketAccessRight, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<add name="*" comment="Wildcard right. For internal use only."/>
<add name="remote:fieldread" comment="Field Read right for remoted clients." title="Field Remote Read" patch:source="Sitecore.ItemWebApi.config"/>
</rights>
<rules>
<add prefix="bucket:" ancestor="{11111111-1111-1111-1111-111111111111}" comment="/sitecore" patch:source="Sitecore.Buckets.config"/>
<add prefix="field:" ancestor="{3C1715FE-6A13-4FCF-845F-DE308BA9741D}" comment="/sitecore/templates" typeName="Sitecore.Data.Fields.Field"/>
<add prefix="insert:" comment="insert:show for Branch template" templateId="{35E75C72-4985-4E09-88C3-0EAC6CD1E64F}"/>
<add prefix="insert:" comment="insert:show for Command template" templateId="{B2613CC1-A748-46A3-A0DB-3774574BD339}"/>
<add prefix="insert:" comment="insert:show for Template template" templateId="{AB86861A-6030-46C5-B394-E8F99E8B87DB}"/>
<add prefix="item:" typeName="Sitecore.Data.Items.Item"/>
<add prefix="language:" ancestor="{64C4F646-A3FA-4205-B98E-4DE2C609B60F}" comment="/sitecore/system/language"/>
<add prefix="workflowState:" ancestor="{05592656-56D7-4D85-AACF-30919EE494F9}" comment="/sitecore/system/workflows"/>
<add prefix="workflowCommand:" ancestor="{05592656-56D7-4D85-AACF-30919EE494F9}" comment="/sitecore/system/workflows"/>
<add prefix="profile:" comment="profile:customize for Profile items only" templateId="{8E0C1738-3591-4C60-8151-54ABCC9807D1}"/>
<add prefix="remote:field" comment="remote:field for remote access to fields." templateId="{455A3E98-A627-4B40-8035-E683A0331AC7}" patch:source="Sitecore.ItemWebApi.config"/>
</rules>
</accessRights>
<!--  PRESENTATION  -->
<presentationManager defaultProvider="item" enabled="true">
<providers>
<clear/>
<add name="item" type="Sitecore.Presentation.PresentationProvider, Sitecore.Kernel"/>
</providers>
</presentationManager>
<!--  CONTROL  -->
<controlManager defaultProvider="default" enabled="true">
<providers>
<clear/>
<add name="default" type="Sitecore.Presentation.ControlProvider, Sitecore.Kernel"/>
</providers>
</controlManager>
<!--  PUBLIHING  -->
<publishManager defaultProvider="default" enabled="true">
<providers>
<clear/>
<add name="default" type="Sitecore.Publishing.PipelinePublishProvider, Sitecore.Kernel"/>
</providers>
</publishManager>
<!--  PREVIEW  -->
<previewManager defaultProvider="default" enabled="true">
<providers>
<clear/>
<add name="default" type="Sitecore.Publishing.PreviewProvider, Sitecore.Kernel"/>
</providers>
</previewManager>
<!--  CONFIG STORES  -->
<configStores>
<add name="domains" type="Sitecore.Configuration.XmlConfigStore, Sitecore.Kernel" factoryMethod="LoadFromFile" arg0="/App_Config/Security/Domains.config"/>
<add name="globalRoles" type="Sitecore.Configuration.XmlConfigStore, Sitecore.Kernel" factoryMethod="LoadFromFile" arg0="/App_Config/Security/GlobalRoles.config"/>
</configStores>
<!--  DOMAINS  -->
<itemManager defaultProvider="default">
<providers>
<clear/>
<add name="default" type="Sitecore.Data.Managers.ItemProvider, Sitecore.Kernel"/>
</providers>
</itemManager>
<!--  TEMPLATES  -->
<templateManager defaultProvider="default">
<providers>
<clear/>
<add name="default" type="Sitecore.Data.Managers.TemplateProvider, Sitecore.Kernel"/>
</providers>
</templateManager>
<!--  DOMAINS  -->
<domainManager defaultProvider="file">
<providers>
<clear/>
<add name="file" type="Sitecore.Security.Domains.ConfigStoreDomainProvider, Sitecore.Kernel" configStoreName="domains"/>
<add name="config" type="Sitecore.SecurityModel.ConfigDomainProvider, Sitecore.Kernel" domainList="domainManager/domains" defaultDomain="sitecore"/>
</providers>
<!--  Sample for use with config provider above  -->
<domains>
<domain id="sitecore" type="Sitecore.Security.Domains.Domain, Sitecore.Kernel">
<param desc="name">$(id)</param>
<ensureAnonymousUser>false</ensureAnonymousUser>
</domain>
<domain id="extranet" type="Sitecore.Security.Domains.Domain, Sitecore.Kernel">
<param desc="name">$(id)</param>
<ensureAnonymousUser>true</ensureAnonymousUser>
</domain>
<domain id="default" type="Sitecore.Security.Domains.Domain, Sitecore.Kernel">
<param desc="name">$(id)</param>
<ensureAnonymousUser>true</ensureAnonymousUser>
<isDefault>true</isDefault>
</domain>
</domains>
</domainManager>
<!--  SWITCHING PROVIDERS  -->
<switchingProviders>
<membership>
<provider providerName="sql" storeFullNames="true" wildcard="%" domains="*"/>
</membership>
<roleManager>
<provider providerName="sql" storeFullNames="true" wildcard="%" domains="*" ignoredUserDomains="" allowedUserDomains=""/>
</roleManager>
<profile>
<provider providerName="sql" storeFullNames="true" wildcard="%" domains="*" ignoredDomains=""/>
</profile>
</switchingProviders>
<!--  MEDIA PATH  -->
<mediaPath defaultProvider="default">
<providers>
<clear/>
<add name="default" type="Sitecore.Resources.Media.MediaPathProvider, Sitecore.Kernel"/>
</providers>
</mediaPath>
<!--  SITES  -->
<siteManager defaultProvider="sitecore">
<providers>
<clear/>
<add name="sitecore" type="Sitecore.Sites.SitecoreSiteProvider, Sitecore.Kernel" checkSecurity="false" patch:source="Sitecore.FXM.config">
<providers hint="raw:AddProviderReference" patch:source="Sitecore.FXM.config">
<reference name="config"/>
<reference name="fxm" patch:source="Sitecore.FXM.config"/>
</providers>
</add>
<add name="config" type="Sitecore.Sites.ConfigSiteProvider, Sitecore.Kernel" siteList="sites" checkSecurity="false"/>
<!--
 FXM SiteProvider to ensure all components in Sitecore are given external sites in the list of currently configured sites, 
             used mainly for analytics reporting.
-->
<add name="fxm" type="Sitecore.FXM.Sites.FxmSiteProvider, Sitecore.FXM" checkSecurity="false" resolve="true" patch:source="Sitecore.FXM.config"/>
</providers>
</siteManager>
<SACauthorization defaultProvider="server">
<providers>
<clear/>
<add name="server" type="Sitecore.ApplicationCenter.ServerAuthorizationProvider, Sitecore.Kernel"/>
</providers>
</SACauthorization>
<!--
 Options (first is default):
           addAspxExtension: false | true (If you set this to false, remember to configure IIS to map all requests (*) to ASP.NET)
           alwaysIncludeServerUrl: false | true
           encodeNames: true | false
           languageEmbedding: asNeeded | always | never
           languageLocation: filePath | queryString
           lowercaseUrls: true | false
           shortenUrls: true | false
           useDisplayName: false | true
    
-->
<linkManager defaultProvider="sitecore">
<providers>
<clear/>
<add name="sitecore" type="Sitecore.Links.LinkProvider, Sitecore.Kernel" addAspxExtension="false" alwaysIncludeServerUrl="false" encodeNames="true" languageEmbedding="asNeeded" languageLocation="filePath" lowercaseUrls="false" shortenUrls="true" useDisplayName="false"/>
</providers>
</linkManager>
<!--  STANDARD VALUES  -->
<standardValues defaultProvider="sitecore">
<providers>
<clear/>
<add name="sitecore" type="Sitecore.Data.StandardValuesProvider, Sitecore.Kernel"/>
</providers>
</standardValues>
<!--
 LANGUAGE FALLBACK FIELD VALUES
         Language fallback values manager is necessary to retrieve fallback values for the specified field. 
-->
<languageFallbackFieldValues defaultProvider="sitecore" patch:source="Sitecore.LanguageFallback.config">
<providers>
<clear/>
<add name="sitecore" type="Sitecore.Data.LanguageFallback.LanguageFallbackFieldValuesProvider, Sitecore.Kernel"/>
</providers>
</languageFallbackFieldValues>
<!--
 Defines the releation between a field type name, e.g. "lookup", and an implementation class 
-->
<fieldTypes>
<!--
 Defines the releation between a field type name, e.g. "lookup", and an implementation class 
-->
<!--  Simple Types  -->
<fieldType name="Checkbox" type="Sitecore.Data.Fields.CheckboxField,Sitecore.Kernel"/>
<fieldType name="Date" type="Sitecore.Data.Fields.DateField,Sitecore.Kernel"/>
<fieldType name="Datetime" type="Sitecore.Data.Fields.DateField,Sitecore.Kernel"/>
<fieldType name="File" type="Sitecore.Data.Fields.FileField,Sitecore.Kernel"/>
<fieldType name="Image" type="Sitecore.Data.Fields.ImageField,Sitecore.Kernel"/>
<fieldType name="Rich Text" type="Sitecore.Data.Fields.HtmlField,Sitecore.Kernel" resizable="true"/>
<fieldType name="Single-Line Text" type="Sitecore.Data.Fields.TextField,Sitecore.Kernel"/>
<fieldType name="Word Document" type="Sitecore.Data.Fields.WordDocumentField,Sitecore.Kernel" blob="true"/>
<fieldType name="Multi-Line Text" type="Sitecore.Data.Fields.TextField,Sitecore.Kernel" resizable="true"/>
<!--  List Types  -->
<fieldType name="Checklist" type="Sitecore.Data.Fields.MultilistField,Sitecore.Kernel" resizable="true"/>
<fieldType name="Droplist" type="Sitecore.Data.Fields.ValueLookupField,Sitecore.Kernel"/>
<fieldType name="Grouped Droplink" type="Sitecore.Data.Fields.GroupedDroplinkField,Sitecore.Kernel"/>
<fieldType name="Grouped Droplist" type="Sitecore.Data.Fields.GroupedDroplistField,Sitecore.Kernel"/>
<fieldType name="Multilist" type="Sitecore.Data.Fields.MultilistField,Sitecore.Kernel" resizable="true"/>
<fieldType name="Multilist with Search" type="Sitecore.Data.Fields.MultilistField,Sitecore.Kernel" resizable="true"/>
<fieldType name="Name Value List" type="Sitecore.Data.Fields.NameValueListField,Sitecore.Kernel"/>
<fieldType name="Name Lookup Value List" type="Sitecore.Data.Fields.NameValueListField,Sitecore.Kernel"/>
<fieldType name="Treelist" type="Sitecore.Data.Fields.MultilistField,Sitecore.Kernel"/>
<fieldType name="Treelist with Search" type="Sitecore.Data.Fields.MultilistField,Sitecore.Kernel"/>
<fieldType name="TreelistEx" type="Sitecore.Data.Fields.MultilistField,Sitecore.Kernel"/>
<!--  Link Types  -->
<fieldType name="Droplink" type="Sitecore.Data.Fields.LookupField,Sitecore.Kernel"/>
<fieldType name="Droptree" type="Sitecore.Data.Fields.ReferenceField,Sitecore.Kernel"/>
<fieldType name="General Link" type="Sitecore.Data.Fields.LinkField,Sitecore.Kernel"/>
<fieldType name="General Link with Search" type="Sitecore.Data.Fields.LinkField,Sitecore.Kernel"/>
<fieldType name="Version Link" type="Sitecore.Data.Fields.VersionLinkField,Sitecore.Kernel"/>
<!--  Developer Types  -->
<fieldType name="Frame" type="Sitecore.Data.Fields.TextField,Sitecore.Kernel" resizable="true"/>
<fieldType name="Rules" type="Sitecore.Data.Fields.RulesField,Sitecore.Kernel" resizable="true"/>
<!--  System Types  -->
<fieldType name="Datasource" type="Sitecore.Data.Fields.DatasourceField,Sitecore.Kernel"/>
<fieldType name="Custom" type="Sitecore.Data.Fields.CustomCustomField,Sitecore.Kernel"/>
<fieldType name="Internal Link" type="Sitecore.Data.Fields.InternalLinkField,Sitecore.Kernel"/>
<fieldType name="Layout" type="Sitecore.Data.Fields.LayoutField,Sitecore.Kernel"/>
<fieldType name="Template Field Source" type="Sitecore.Data.Fields.TemplateFieldSourceField,Sitecore.Kernel"/>
<fieldType name="File Drop Area" type="Sitecore.Data.Fields.FileDropAreaField,Sitecore.Kernel"/>
<fieldType name="Page Preview" type="Sitecore.Data.Fields.PagePreviewField,Sitecore.Kernel"/>
<fieldType name="Rendering Datasource" type="Sitecore.Data.Fields.RenderingDatasourceField,Sitecore.Kernel"/>
<fieldType name="Thumbnail" type="Sitecore.Data.Fields.ThumbnailField,Sitecore.Kernel"/>
<fieldType name="Security" type="Sitecore.Data.Fields.TextField,Sitecore.Kernel" resizable="true"/>
<fieldType name="UserList" type="Sitecore.Data.Fields.TextField,Sitecore.Kernel" resizable="true"/>
<!--  Deprecated Types  -->
<fieldType name="html" type="Sitecore.Data.Fields.HtmlField,Sitecore.Kernel" resizable="true"/>
<fieldType name="link" type="Sitecore.Data.Fields.LinkField,Sitecore.Kernel"/>
<fieldType name="lookup" type="Sitecore.Data.Fields.LookupField,Sitecore.Kernel"/>
<fieldType name="reference" type="Sitecore.Data.Fields.ReferenceField,Sitecore.Kernel"/>
<fieldType name="text" type="Sitecore.Data.Fields.TextField,Sitecore.Kernel"/>
<fieldType name="memo" type="Sitecore.Data.Fields.TextField,Sitecore.Kernel" resizable="true"/>
<fieldType name="tree" type="Sitecore.Data.Fields.ReferenceField,Sitecore.Kernel"/>
<fieldType name="tree list" type="Sitecore.Data.Fields.MultilistField,Sitecore.Kernel"/>
<fieldType name="valuelookup" type="Sitecore.Data.Fields.ValueLookupField,Sitecore.Kernel"/>
<fieldType name="JSON" type="Sitecore.Marketing.Data.Fields.JsonField, Sitecore.Marketing.xMgmt" patch:source="Sitecore.Marketing.config"/>
<fieldType name="Tracking" type="Sitecore.Analytics.Data.TrackingField,Sitecore.Analytics" resizable="true" patch:source="Sitecore.Analytics.FieldTypes.config"/>
</fieldTypes>
<!--  CLIENT DATASTORE  -->
<clientDataStore type="Sitecore.Data.SqlServer.SqlServerClientDataStore, Sitecore.Kernel">
<param desc="connection string name" connectionStringName="core"/>
<param desc="object lifetime">00:20:00</param>
<param ref="eventing/eventQueueProvider/eventQueue[@name='core']" desc="event queue"/>
<param type="Sitecore.Abstractions.BaseEventManager, Sitecore.Kernel" desc="eventManager" resolve="true"/>
</clientDataStore>
<!--  HOOKS  -->
<!--
 This runs all the required initialization processes, such as EventHub registration and warm-up queries for the index. If you want 
         to add your own queries, you can extend this class or add another hook. 
-->
<!--
 This runs all the required initialization processes. 
-->
<!--
 (Though not required by FXM, this could be achieved with the following config. 
-->
<!--  HOOKS  -->
<hooks>
<hook type="Sitecore.Diagnostics.HealthMonitorHook, Sitecore.Kernel"/>
<hook type="Sitecore.Diagnostics.MemoryMonitorHook, Sitecore.Kernel">
<param desc="Threshold">2GB</param>
<param desc="Check interval">00:00:05</param>
<param desc="Minimum time between log entries">00:01:00</param>
<ClearCaches>false</ClearCaches>
<GarbageCollect>false</GarbageCollect>
<AdjustLoadFactor>false</AdjustLoadFactor>
</hook>
<hook type="Sitecore.ContentSearch.Hooks.Initializer, Sitecore.ContentSearch" patch:source="Sitecore.ContentSearch.config"/>
<hook type="Sitecore.Buckets.Hooks.Initializer, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<!--
 Ensures the device detection component initialization. 
-->
<hook type="Sitecore.CES.DeviceDetection.Hooks.EnsureDeviceDetectionInitialization, Sitecore.CES.DeviceDetection" patch:source="Sitecore.CES.DeviceDetection.config"/>
<hook type="Sitecore.Analytics.Core.SubsystemLoader, Sitecore.Analytics.Core" patch:source="Sitecore.Analytics.config">
<Name>Core Services</Name>
<Subsystem ref="coreServices"/>
</hook>
<hook type="Sitecore.Analytics.Aggregation.AggregationLoader, Sitecore.Analytics.Aggregation" patch:source="Sitecore.Analytics.Processing.Aggregation.Services.config"/>
<hook type="Sitecore.Analytics.Processing.ProcessingLoader, Sitecore.Analytics.Processing" patch:source="Sitecore.Analytics.Processing.Services.config"/>
<hook type="Sitecore.Analytics.ConfigLoader, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.config"/>
<hook type="Sitecore.Analytics.BackgroundServiceLoader, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.config"/>
<hook type="Sitecore.ExperienceContentManagement.Administration.Hooks.SupportPackageHook, Sitecore.ExperienceContentManagement.Administration" patch:source="Sitecore.ExperienceContentManagement.Administration.config"/>
<!--  Hook to load the reduce subsystem.  -->
<hook type="Sitecore.ExperienceAnalytics.Core.SubSystemLoader, Sitecore.ExperienceAnalytics.Core" desc="reduceLoader" patch:source="Sitecore.ExperienceAnalytics.Reduce.config">
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
<param ref="experienceAnalytics/reduce/subsystem" desc="subsystemToLoad"/>
</hook>
<hook type="Sitecore.FXM.Hooks.FxmSiteProviderInitializerHook, Sitecore.FXM" resolve="true" patch:source="Sitecore.FXM.config"/>
<hook type="Sitecore.PathAnalyzer.Processing.SubsystemLoader, Sitecore.PathAnalyzer" patch:source="Sitecore.PathAnalyzer.Processing.config"/>
</hooks>
<!--  SCHEDULING  -->
<!--
 EMPTY BUCKET CLEANING JOB
         This job runs at the set interval time and removes item bucket folders that no longer contain any items.
         This could be cause by deleting an item from a bucket, which has no other items in it.
    
-->
<!--
 PULL POP3 BOUNCES AGENT
         Handles the reported bounced messages.
    
-->
<scheduling>
<!--
 Time between checking for scheduled tasks waiting to execute 
-->
<frequency>00:00:05</frequency>
<!--  Agent to retrieve a URL  -->
<agent type="Sitecore.Tasks.UrlAgent" method="Run" interval="00:15:00">
<param desc="url">/sitecore/service/keepalive.aspx</param>
<LogActivity>true</LogActivity>
</agent>
<!--
 Agent to process tasks from the task database (TaskDatabase) 
-->
<agent type="Sitecore.Tasks.TaskDatabaseAgent" method="Run" interval="00:10:00"/>
<!--  Agent to clean up client data  -->
<agent type="Sitecore.Tasks.CompactClientDataAgent" method="Run" interval="04:00:00"/>
<!--  Agent to clean up publishing queue  -->
<agent type="Sitecore.Tasks.CleanupPublishQueue, Sitecore.Kernel" method="Run" interval="04:00:00">
<DaysToKeep>30</DaysToKeep>
</agent>
<!--
 Agent that cleans up the event queue.
          The length of time that the EventQueue information should be kept.
          If both options are specified, IntervalToKeep is used.
          Supported options:
          DaysToKeep = The number of days that the EventQueue information should be kept. Example:<DaysToKeep>1</DaysToKeep>
          IntervalToKeep = The time in hh:mm:ss that the EventQueue information should be kept. Example: <IntervalToKeep>04:00:00</IntervalToKeep>
        
-->
<agent type="Sitecore.Tasks.CleanupEventQueue, Sitecore.Kernel" method="Run" interval="04:00:00">
<DaysToKeep>1</DaysToKeep>
</agent>
<!--  Agent to clear the HTML cache periodically  -->
<agent type="Sitecore.Tasks.HtmlCacheClearAgent" method="Run" interval="00:00:00"/>
<!--
 Agent to remove expired Client authentication tickets  
-->
<agent type="Sitecore.Tasks.CleanupAuthenticationTicketsAgent" method="Run" interval="04:00:00"/>
<!--  Agent to publish database periodically  -->
<agent type="Sitecore.Tasks.PublishAgent" method="Run" interval="00:00:00">
<param desc="source database">master</param>
<param desc="target database">web</param>
<param desc="mode (full or smart or incremental)">incremental</param>
<param desc="languages">en, da</param>
</agent>
<!--  Agent to clean up work files  -->
<agent type="Sitecore.Tasks.CleanupAgent" method="Run" interval="06:00:00" patch:source="Sitecore.ContentTesting.config">
<!--
 Specifies files to be cleaned up.
              If rolling="true", [minCount] and [maxCount] will be ignored.
              [minAge] and [maxAge] must be specified as [days.]hh:mm:ss. The default value
              of [minAge] is 30 minutes.
              [strategy]: number of files within hour, day, week, month, year
              [recursive=true|false]: descend folders?
          
-->
<files hint="raw:AddCommand" patch:source="Sitecore.ContentTesting.config">
<remove folder="/App_Data/logs" pattern="*log.*.txt" maxAge="30.00:00:00"/>
<remove folder="/App_Data/diagnostics" pattern="*.*" maxAge="30.00:00:00" recursive="true"/>
<remove folder="/App_Data/viewstate" pattern="*.txt" maxAge="2.00:00:00" recursive="true"/>
<remove folder="/temp/diagnostics" pattern="*.*" maxAge="00:10:00" recursive="true"/>
<remove folder="/App_Data/MediaCache" pattern="*.*" maxAge="90.00:00:00" recursive="true"/>
<remove folder="/App_Data/diagnostics/configuration_history" pattern="*" maxAge="30.00:00:00" recursive="false" patch:source="Sitecore.Diagnostics.config"/>
<remove folder="/App_Data/diagnostics/health_monitor" pattern="*.*" maxAge="07.00:00:00" recursive="false" patch:source="Sitecore.Diagnostics.config"/>
<remove folder="/temp/screenshots" pattern="*.*" maxAge="7.00:00:00" recursive="true" patch:source="Sitecore.ContentTesting.config"/>
</files>
</agent>
<!--  Agent to dump performance counter data  -->
<agent type="Sitecore.Tasks.CounterDumpAgent" method="Run" interval="01:00:00">
<DumpFile>
/App_Data/diagnostics/counters/counters.{date}.{time}.{processid}.txt
</DumpFile>
</agent>
<agent type="Sitecore.Tasks.CloneNotificationsCleanupAgent" method="Run" interval="1.00:00:00">
<LogActivity>true</LogActivity>
</agent>
<!--
 An agent that processes scheduled tasks embedded as items in the core database. 
-->
<agent name="Core_Database_Agent" type="Sitecore.Tasks.DatabaseAgent" method="Run" interval="00:10:00" patch:source="Sitecore.Processing.config">
<param desc="database">core</param>
<param desc="schedule root">/sitecore/system/tasks/schedules</param>
<LogActivity>true</LogActivity>
</agent>
<!--
 An agent that processes scheduled tasks embedded as items in the master database. 
-->
<agent name="Master_Database_Agent" type="Sitecore.Tasks.DatabaseAgent" method="Run" interval="00:10:00" patch:source="Sitecore.Processing.config">
<param desc="database">master</param>
<param desc="schedule root">/sitecore/system/tasks/schedules</param>
<LogActivity>true</LogActivity>
</agent>
<!--
 Agent to cleanup obsolete File Drop Area field media data 
-->
<agent type="Sitecore.Tasks.CleanupFDAObsoleteMediaData" method="Run" interval="1.00:00:00" patch:source="Sitecore.WebDAV.config">
<databases hint="raw:AddDatabase">
<database name="master"/>
<database name="web"/>
</databases>
<LogActivity>true</LogActivity>
<RebuildLinks>false</RebuildLinks>
</agent>
<!--  Agent to cleanup obsolete WebDAV links  -->
<agent type="Sitecore.Tasks.WebDAVOptionsCleanupAgent" method="Run" interval="1.00:00:00" patch:source="Sitecore.WebDAV.config">
<LogActivity>true</LogActivity>
<WebDAVLinkExpirationPeriod>1.00:00:00</WebDAVLinkExpirationPeriod>
</agent>
<!--
 An agent to optimize the specified indexes periodically. 
-->
<agent type="Sitecore.ContentSearch.Tasks.Optimize" method="Run" interval="12:00:00" async="true" patch:source="Sitecore.ContentSearch.config">
<indexes hint="list">
<index>sitecore_master_index</index>
</indexes>
</agent>
<agent type="Sitecore.ContentSearch.SolrProvider.Agents.IsSolrAliveAgent, Sitecore.ContentSearch.SolrProvider" method="Run" interval="00:10:00" patch:source="Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config"/>
<agent type="Sitecore.ContentSearch.SolrProvider.Agents.IndexingStateSwitcher, Sitecore.ContentSearch.SolrProvider" method="Run" interval="00:01:00" patch:source="Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config"/>
<!--
  EMAIL DIAGNOSTICS REPORT TASK
            The task collects support package from all Sitecore instances in solution, uploads the package 
            to Sitecore diagnostics service, receives analysis report and sends it to specified emails.
            
            The interval attribute is only required for task being awaked, but the actual work happens
            according to schedule setting. The interval attribute value must not be less than 01:00:00
      
-->
<agent name="EmailDiagnosticsReportTask" type="Sitecore.ExperienceContentManagement.Administration.Tasks.EmailDiagnosticsReportTask, Sitecore.ExperienceContentManagement.Administration" method="Run" interval="01:00:00" patch:source="Sitecore.ExperienceContentManagement.Administration.config">
<!--
  SCHEDULE
              The setting specifies schedule of how often the diagnostics is performed. The supported
              options are: daily, weekly, monthly. Due to nature of scheduled tasks, accuracy of time
              is per hour.

              SAMPLE VALUE             | SAMPLE MOMENTS WHEN REPORT IS SENT ACCORDING TO SAMPLE VALUE
              - - - - - - - - - - - - -|- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
              daily; 02:00:00          | 2018-01-01 02:13:16, 2018-01-02 20:26:33, 2018-01-03 20:49:53, ... 
              weekly; monday; 02:00:00 | 2018-01-01 02:06:00, 2018-01-08 02:31:00, 2018-01-15 02:59:24, ... 
              monthly; 31; 02:00:00    | 2018-01-31 02:01:11, 2018-02-28 02:20:40, 2018-03-31 02:35:44, ... 
         
-->
<param desc="schedule">weekly; monday; 02:00:00</param>
<!--
  COLLECTORS
              The setting specifies semicolon-delimited list of collectors, the full list is available 
              on the /sitecore/admin/supportpackage.aspx page with descriptions.
        
-->
<param desc="collectors">C01;C02;C03;C04;C05;C06;C07;C08;C09;C13;C14</param>
<!--
  LOG DAYS
              The setting specifies the number of days that log files are included into the support package
              For example, 7 days means log files for the past week will be included into the package.
        
-->
<param desc="logDays">7</param>
</agent>
<agent type="Sitecore.ListManagement.Operations.UpdateListOperationsAgent, Sitecore.ListManagement" method="Run" interval="00:00:10" resolve="true" patch:source="Sitecore.ListManagement.config"/>
<!--
 Agent which cleans up unused SMTP connections. Any connections which are not in use and have been idle for more than the configured maxConnectionIdleTime
            will be disposed 
-->
<agent type="Sitecore.EDS.Providers.CustomSmtp.Tasks.ConnectionPoolAgent, Sitecore.EDS.Providers.CustomSmtp" method="Run" interval="00:10:00" patch:source="Sitecore.EDS.Providers.CustomSMTP.config">
<param ref="exm/eds/connectionPool"/>
<param ref="exmLogger" desc="logger"/>
</agent>
<agent type="Sitecore.EDS.Providers.CustomSmtp.Tasks.PullPop3BouncesAgent, Sitecore.EDS.Providers.CustomSmtp" method="Run" interval="01:00:00" patch:source="Sitecore.EDS.Providers.CustomSMTP.Sync.config">
<param ref="exm/eds/receiversCollection"/>
</agent>
<agent type="Sitecore.Tasks.DatabaseAgent" method="Run" hint="EXM tasks" interval="00:00:59" patch:source="Sitecore.EmailExperience.ContentManagementPrimary.config">
<param desc="database">master</param>
<param ref="settings/setting[@name='EXM.TasksPath']/@value" desc="schedule root"/>
<LogActivity>true</LogActivity>
</agent>
<agent type="Sitecore.Tasks.DatabaseAgent" method="Run" hint="EXM instance tasks" interval="00:00:59" patch:source="Sitecore.EmailExperience.ContentManagementPrimary.config">
<param desc="database">master</param>
<param desc="schedule root">
/sitecore/system/Settings/Email/instance tasks/content management primary
</param>
<LogActivity>true</LogActivity>
</agent>
<!--  Page Analyzer Help  -->
<agent type="Sitecore.PathAnalyzer.Client.Tasks.HelpUpdateAgent,Sitecore.PathAnalyzer.Client" method="Run" desc="PageExplorer Help" interval="03:00:00" patch:source="Sitecore.PathAnalyzer.Client.config">
<param desc="url">
https://raw.githubusercontent.com/Sitecore/help/release/8.x/8.2/{lang}/pathanalyzer/pageanalyzer-help.md
</param>
<param desc="itemId">{91F4E02D-E8DD-46BB-A9B7-A7A2A8BE915B}</param>
<param desc="database">core</param>
</agent>
<!--  Path Analyzer Help  -->
<agent type="Sitecore.PathAnalyzer.Client.Tasks.HelpUpdateAgent,Sitecore.PathAnalyzer.Client" method="Run" desc="PathAnalyzer Help" interval="03:00:00" patch:source="Sitecore.PathAnalyzer.Client.config">
<param desc="url">
https://raw.githubusercontent.com/Sitecore/help/release/8.x/8.2/{lang}/pathanalyzer/pathanalyzer-help.md
</param>
<param desc="itemId">{7DC058D8-A23E-4277-BA55-7A59423AB707}</param>
<param desc="database">core</param>
</agent>
</scheduling>
<!--
 PROCESSORS
         Classes must have parameterless constructor.
         Supported attributes:
           mode=[on|off]
           type=name of class (case-sensitive).
           namespace=namespace containing class. If no namespace is included, it is assumed that the namespace is the same as the assembly name.
           assembly=name of dll containing the class (case-sensitive)
    
-->
<processors>
<dispatch/>
<attachFile argsType="Sitecore.Pipelines.Attach.AttachArgs">
<processor type="Sitecore.Pipelines.Attach.CheckSize,Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Attach.UpdatePath,Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Attach.Save,Sitecore.Kernel" mode="on"/>
</attachFile>
<uiAddFromTemplate>
<processor type="Sitecore.Shell.Framework.Pipelines.AddFromTemplate,Sitecore.Kernel" method="GetTemplate" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.AddFromTemplate,Sitecore.Kernel" method="Execute" mode="on"/>
<processor type="Sitecore.Buckets.Pipelines.UI.AddFromTemplate.SelectItem" method="Execute" mode="on" patch:source="Sitecore.Buckets.config"/>
</uiAddFromTemplate>
<uiArchiveItems>
<processor type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="CheckPermissions" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="Confirm" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="CheckTemplateLinks" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="CheckCloneLinks" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="CheckLinks" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="CheckLanguage" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="UncloneItems" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="Execute" mode="on"/>
</uiArchiveItems>
<closeWizard>
<processor type="Sitecore.Web.UI.Pages.WizardForm, Sitecore.Kernel" method="Confirmation" mode="on"/>
</closeWizard>
<uiCopyItems>
<processor type="Sitecore.Shell.Framework.Pipelines.CopyItems,Sitecore.Kernel" method="GetDestination" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.CopyItems,Sitecore.Kernel" method="CheckDestination" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.CopyItems,Sitecore.Kernel" method="CheckLanguage" mode="on"/>
<processor type="Sitecore.Buckets.Pipelines.UI.ItemCopy, Sitecore.Buckets" method="Execute" mode="on" patch:source="Sitecore.Buckets.config"/>
<processor type="Sitecore.Shell.Framework.Pipelines.CopyItems,Sitecore.Kernel" method="Execute" mode="on"/>
</uiCopyItems>
<uiCloneItems>
<processor type="Sitecore.Shell.Framework.Pipelines.CloneItems,Sitecore.Kernel" method="GetDestination" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.CloneItems,Sitecore.Kernel" method="CheckDestination" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.CloneItems,Sitecore.Kernel" method="CheckLanguage" mode="on"/>
<processor type="Sitecore.Buckets.Pipelines.UI.BucketItemClone, Sitecore.Buckets" method="Execute" mode="on" patch:source="Sitecore.Buckets.config"/>
<processor type="Sitecore.Shell.Framework.Pipelines.CloneItems,Sitecore.Kernel" method="Execute" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.CloneItems,Sitecore.Kernel" method="RelinkClonedSubtree" mode="on"/>
</uiCloneItems>
<uiDeleteFiles>
<processor type="Sitecore.Shell.Framework.Pipelines.DeleteFiles,Sitecore.Kernel" method="Confirm" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.DeleteFiles,Sitecore.Kernel" method="Execute" mode="on"/>
</uiDeleteFiles>
<uiDeleteItems>
<processor type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="CheckPermissions" mode="on"/>
<processor type="Sitecore.Buckets.Pipelines.UI.ItemDeleted, Sitecore.Buckets" method="Execute" mode="on" patch:source="Sitecore.Buckets.config"/>
<processor type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="Confirm" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="CheckTemplateLinks" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="CheckCloneLinks" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="CheckLinks" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="CheckLanguage" mode="on"/>
<processor type="Sitecore.ContentTesting.Pipelines.DeleteItems.DeleteTestDefinitionItems,Sitecore.ContentTesting" method="CheckActiveTests" mode="on" patch:source="Sitecore.ContentTesting.config"/>
<processor type="Sitecore.PathAnalyzer.Client.Pipelines.DeleteItems.DeletePathAnalyzerItems,Sitecore.PathAnalyzer.Client" method="CheckDefaultSiteMapGroup" mode="on" patch:source="Sitecore.PathAnalyzer.Client.config"/>
<processor type="Sitecore.PathAnalyzer.Client.Pipelines.DeleteItems.DeletePathAnalyzerItems,Sitecore.PathAnalyzer.Client" method="CheckMapItems" mode="on" patch:source="Sitecore.PathAnalyzer.Client.config"/>
<processor type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="UncloneItems" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="Execute" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="PostAction" mode="on"/>
</uiDeleteItems>
<uiRemoveLanguage>
<processor type="Sitecore.Shell.Framework.Pipelines.RemoveLanguage,Sitecore.Kernel" method="Confirm" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.RemoveLanguage,Sitecore.Kernel" method="CheckCloneItems" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.RemoveLanguage,Sitecore.Kernel" method="Execute" mode="on"/>
</uiRemoveLanguage>
<deleteVersionsUI>
<processor type="Sitecore.Shell.Framework.Commands.DeleteVersion,Sitecore.Kernel" method="Confirmation" mode="on"/>
<processor type="Sitecore.Shell.Framework.Commands.DeleteVersion,Sitecore.Kernel" method="CheckReferrers" mode="on"/>
<processor type="Sitecore.Shell.Framework.Commands.DeleteVersion,Sitecore.Kernel" method="DeleteVersions" mode="on"/>
</deleteVersionsUI>
<uiDragItemTo>
<processor type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="CheckPermissions" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="Confirm" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="CheckLanguage" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="CheckLinks" mode="on"/>
<processor type="Sitecore.Buckets.Pipelines.UI.ItemDrag, Sitecore.Buckets" method="Execute" mode="on" patch:source="Sitecore.Buckets.config"/>
<processor type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="Execute" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="RepairLinks" mode="on"/>
</uiDragItemTo>
<uiDuplicateItem>
<processor type="Sitecore.Shell.Framework.Pipelines.DuplicateItem,Sitecore.Kernel" method="CheckPermissions" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.DuplicateItem,Sitecore.Kernel" method="GetName" mode="on"/>
<processor type="Sitecore.Buckets.Pipelines.UI.ItemDuplicate, Sitecore.Buckets" method="Execute" mode="on" patch:source="Sitecore.Buckets.config"/>
<processor type="Sitecore.Shell.Framework.Pipelines.DuplicateItem,Sitecore.Kernel" method="Execute" mode="on"/>
</uiDuplicateItem>
<uiLaunchSearchResult argsType="Sitecore.Shell.Framework.Pipelines.LaunchSearchResult.LaunchSearchResultArgs">
<processor type="Sitecore.Shell.Framework.Pipelines.LaunchSearchResult,Sitecore.Kernel" method="ShowModalDialog" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.LaunchSearchResult,Sitecore.Kernel" method="SetLocation" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.LaunchSearchResult,Sitecore.Kernel" method="SendMessage" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.LaunchSearchResult,Sitecore.Kernel" method="OpenItem" mode="on"/>
</uiLaunchSearchResult>
<uiMoveItems>
<processor type="Sitecore.Shell.Framework.Pipelines.MoveItems,Sitecore.Kernel" method="CheckPermissions" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.MoveItems,Sitecore.Kernel" method="GetDestination" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.MoveItems,Sitecore.Kernel" method="CheckLinks" mode="on"/>
<processor type="Sitecore.Buckets.Pipelines.UI.ItemMove, Sitecore.Buckets" method="Execute" mode="on" patch:source="Sitecore.Buckets.config"/>
<processor type="Sitecore.Shell.Framework.Pipelines.MoveItems,Sitecore.Kernel" method="RepairLinks" mode="on"/>
</uiMoveItems>
<uiNewFolderItem>
<processor type="Sitecore.Shell.Framework.Pipelines.NewFolderItem,Sitecore.Kernel" method="CheckPermissions" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.NewFolderItem,Sitecore.Kernel" method="GetName" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.NewFolderItem,Sitecore.Kernel" method="Execute" mode="on"/>
</uiNewFolderItem>
<uiNewFileFolder>
<processor type="Sitecore.Shell.Framework.Pipelines.NewFileFolder,Sitecore.Kernel" method="GetName" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.NewFileFolder,Sitecore.Kernel" method="Execute" mode="on"/>
</uiNewFileFolder>
<uiRenameItem>
<processor type="Sitecore.Shell.Framework.Pipelines.RenameItem,Sitecore.Kernel" method="CheckPermissions" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.RenameItem,Sitecore.Kernel" method="GetNewName" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.RenameItem,Sitecore.Kernel" method="CheckLinks" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.RenameItem,Sitecore.Kernel" method="Execute" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.RenameItem,Sitecore.Kernel" method="RepairLinks" mode="on"/>
</uiRenameItem>
<uiRenamePage>
<processor type="Sitecore.Shell.Framework.Pipelines.RenamePage,Sitecore.Kernel" method="CheckPermissions" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.RenamePage,Sitecore.Kernel" method="GetNewName" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.RenamePage,Sitecore.Kernel" method="CheckLinks" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.RenamePage,Sitecore.Kernel" method="Execute" mode="on"/>
<processor type="Sitecore.Shell.Framework.Pipelines.RenamePage,Sitecore.Kernel" method="RepairLinks" mode="on"/>
</uiRenamePage>
<deleteVersions>
<processor type="Sitecore.Shell.Applications.ShellExplorer.View.Versions.ShellExplorerVersionsForm,Sitecore.Client" method="CheckFirstVersion" mode="on"/>
<processor type="Sitecore.Shell.Applications.ShellExplorer.View.Versions.ShellExplorerVersionsForm,Sitecore.Client" method="Confirmation" mode="on"/>
<processor type="Sitecore.Shell.Applications.ShellExplorer.View.Versions.ShellExplorerVersionsForm,Sitecore.Client" method="DeleteVersions" mode="on"/>
</deleteVersions>
<getItemCommands>
<processor type="Sitecore.Pipelines.GetItemCommands.StaticCommands, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.GetItemCommands.ShellCommands, Sitecore.Kernel" mode="on"/>
</getItemCommands>
<uiGetMasters argsType="Sitecore.Pipelines.GetMasters.GetMastersArgs">
<processor type="Sitecore.Pipelines.GetMasters.GetItemMasters,Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.GetMasters.GetInsertRules, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.GetMasters.RunRules, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.GetMasters.CheckSecurity, Sitecore.Kernel" mode="on"/>
</uiGetMasters>
<!--  Obsolete: use loadRichTextContent -->
<uiLoadHtml argsType="Sitecore.Pipelines.LoadHtml.LoadHtmlArgs"/>
<uiLoadLayout argsType="Sitecore.Pipelines.LoadLayout.LoadLayoutArgs">
<processor type="Sitecore.Pipelines.LoadLayout.Load, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.LoadLayout.Parse, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.LoadLayout.ConvertToDesignTime, Sitecore.Kernel" mode="on"/>
</uiLoadLayout>
<!--  Obsolete - use LoggedIn or LoggingIn pipelines  -->
<login argsType="Sitecore.Pipelines.Login.LoginArgs"/>
<loggedin argsType="Sitecore.Pipelines.LoggedIn.LoggedInArgs">
<processor type="Sitecore.Pipelines.LoggedIn.Ticket, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.LoggedIn.CleanupUserProfile, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.LoggedIn.SetPreferedClientLanguage, Sitecore.Kernel" mode="on" resolve="true"/>
</loggedin>
<loggingin argsType="Sitecore.Pipelines.LoggingIn.LoggingInArgs">
<processor type="Sitecore.Pipelines.LoggingIn.ClearCache, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.LoggingIn.CheckClientUser, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.LoggingIn.CheckStartUrl, Sitecore.Kernel" mode="on" resolve="true"/>
</loggingin>
<logout argsType="Sitecore.Pipelines.Logout.LogoutArgs">
<processor type="Sitecore.Pipelines.Logout.ClearCache, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Logout.CheckModified, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Logout.ClearSession, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Logout.RemoveTicket, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Logout.GotoLogin, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Logout.ClearDisplayMode, Sitecore.Kernel" mode="on" resolve="true"/>
</logout>
<passwordRecovery argsType="Sitecore.Pipelines.PasswordRecovery.PasswordRecoveryArgs">
<processor type="Sitecore.Pipelines.PasswordRecovery.VerifyUsername, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.PasswordRecovery.GeneratePassword, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.PasswordRecovery.PopulateMail, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.PasswordRecovery.SendPasswordRecoveryMail, Sitecore.Kernel" mode="on"/>
</passwordRecovery>
<saveUI>
<processor type="Sitecore.Pipelines.Save.BeforeSaveEvent, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Save.ParseXml, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Save.CheckItemLock, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Save.CheckCloneSource, Sitecore.Kernel" mode="on" resolve="true"/>
<processor type="Sitecore.Pipelines.Save.CheckRevision, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Save.Validators, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Save.ValidateFields, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Save.HasWritePermission, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Save.NewVersion, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Save.TightenRelativeImageLinks, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Save.CheckLock, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Save.Lock, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Save.CheckBaseTemplateFieldChange, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Save.CheckTemplateFieldChange, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.FXM.Pipelines.SaveUI.RemoveDeletedClientActionsProcessor, Sitecore.FXM" resolve="true" patch:source="Sitecore.FXM.config"/>
<processor type="Sitecore.FXM.Pipelines.SaveUI.RemoveDeletedElementReplacersProcessor, Sitecore.FXM" resolve="true" patch:source="Sitecore.FXM.config"/>
<processor type="Sitecore.FXM.Pipelines.SaveUI.AddElementReplacersProcessor, Sitecore.FXM" resolve="true" patch:source="Sitecore.FXM.config"/>
<processor type="Sitecore.FXM.Pipelines.SaveUI.ExcludeUpdatedElementReplacersFromSaveList, Sitecore.FXM" resolve="true" patch:source="Sitecore.FXM.config"/>
<processor type="Sitecore.Pipelines.Save.ConvertLayoutField, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Save.CheckLinks, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Save.Save, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Save.RenderingHack, Sitecore.Kernel" mode="off"/>
<processor type="Sitecore.Pipelines.Save.Unlock, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Save.WorkflowSaveCommand, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Save.PostAction, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Processors.SaveUI.CorrectMessageUpdateTime, Sitecore.EmailCampaign" mode="on" resolve="true" patch:source="Sitecore.EmailExperience.UI.config"/>
<processor type="Sitecore.Modules.EmailCampaign.Core.Processors.SaveUI.ClearHtmlCache, Sitecore.EmailCampaign" mode="on" patch:source="Sitecore.EmailExperience.UI.config">
<param ref="exmLogger" desc="logger"/>
</processor>
</saveUI>
<!--  Obsolete: use saveRichTextContent -->
<uiSaveHtml/>
<uiSaveLayout>
<processor type="Sitecore.Pipelines.SaveLayout.NewFile, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.SaveLayout.Overwrite, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.SaveLayout.ConvertToRuntime, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.SaveLayout.ConvertToXHtml, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.SaveLayout.Save, Sitecore.Kernel" mode="on"/>
</uiSaveLayout>
<uiReturnFieldEditorValues>
<processor type="Sitecore.Shell.Applications.ContentManager.ReturnFieldEditorValues.Validate" mode="on"/>
<processor type="Sitecore.Shell.Applications.ContentManager.ReturnFieldEditorValues.RegexValidate" mode="on"/>
<processor type="Sitecore.Shell.Applications.ContentManager.ReturnFieldEditorValues.SetValues" mode="on"/>
<processor type="Sitecore.Shell.Applications.ContentManager.ReturnFieldEditorValues.ReturnAndClose" mode="on"/>
</uiReturnFieldEditorValues>
<uiUpload>
<processor type="Sitecore.Pipelines.Upload.CheckPermissions, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Upload.CheckSize, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Upload.ResolveFolder, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Upload.Save, Sitecore.Kernel" mode="on"/>
<processor type="Sitecore.Pipelines.Upload.Done, Sitecore.Kernel" mode="on"/>
</uiUpload>
<!--
 LAUNCH SEARCH RESULT
           This pipeline is invoked when a user clicks a search result in the search UI. The pipeline opens the search result. It could,
           for example, open an item in a new tab in the Content Editor, open a file from the file system in a window, or open an external
           URL in a window.
           Arguments: (string) Datasource, (string) IndexableId, (CommandContext) Command
      
-->
<uiLaunchResult patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.UI.LaunchResultPipeline.LaunchSitecoreResult, Sitecore.Buckets" desc="sitecore"/>
</uiLaunchResult>
<!--
 ITEM BUCKET PIPELINES
           Pipeline for creating an item bucket from the UI. 
      
-->
<uiBucketItems patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.UI.BucketItems.CreateBucketProcessor, Sitecore.Buckets" method="CreateBucket" mode="on"/>
</uiBucketItems>
<uiUnBucketItems patch:source="Sitecore.Buckets.config">
<processor type="Sitecore.Buckets.Pipelines.UI.UnBucket.UnbucketProcessor, Sitecore.Buckets" method="Unbucket" mode="on"/>
</uiUnBucketItems>
</processors>
<!--
 Factory classes must implement public CreateControl() method that returns a Control 
-->
<renderingControls>
<control type="Sitecore.Web.UI.WebControls.Method, Sitecore.Kernel" template="method rendering" propertyMap="AssemblyName=assembly, ClassName=class, MethodName=method"/>
<control type="Sitecore.Web.UI.SublayoutRenderingType, Sitecore.Kernel" template="sublayout" propertyMap="Path=path"/>
<control type="Sitecore.Web.UI.WebControls.WebPage, Sitecore.Kernel" template="url rendering" propertyMap="Url=url"/>
<control type="Sitecore.Web.UI.XslControlRenderingType, Sitecore.Kernel" template="xsl rendering" propertyMap="Path=path"/>
<control type="Sitecore.Web.UI.WebControlRenderingType, Sitecore.Kernel" template="webcontrol" propertyMap="assembly=assembly, namespace=namespace, class=tag, properties=parameters"/>
<control type="Sitecore.Web.UI.XmlControlRenderingType, Sitecore.Kernel" template="xmlcontrol" propertyMap="controlName=control name, properties=parameters"/>
</renderingControls>
<!--
 CONTENT TREE VIEW
         Use this view to patch in behaviour about how items should be rendered in the content tree.
     
         Example: You want a checkbox, similar to the Hidden Items checkbox, that determines if and how an item is
         rendered in the content tree.
    
-->
<dataviews>
<dataview name="Master" Parameters="" assembly="Sitecore.Buckets" type="Sitecore.Buckets.Forms.BucketDataView" patch:source="Sitecore.Buckets.config"/>
<dataview name="RecycleBin" assembly="Sitecore.Kernel" type="Sitecore.Web.UI.HtmlControls.RecycleBinDataView" Parameters=""/>
<dataview name="FileSystem" assembly="Sitecore.Kernel" type="Sitecore.Web.UI.HtmlControls.FileSystemDataView" Parameters=""/>
<dataview name="Domain" assembly="Sitecore.Kernel" type="Sitecore.Web.UI.HtmlControls.DomainDataView" Parameters=""/>
<dataview name="FilterDataView" assembly="Sitecore.Kernel" type="Sitecore.Web.UI.HtmlControls.FilterDataView" Parameters=""/>
</dataviews>
<!--
 PAGE EXTENDERS
      Page Extenders allows additional controls to be added to every page. The Debugger, Preview and WebEdit
      are examples of this.
    
-->
<pageextenders>
<pageextender type="Sitecore.Shell.Applications.Preview.SimulatedDevicePreview.PageExtenders.PreviewExtender, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
 Page extender for SPEAK-based Experience Editor ribbon.  
-->
<pageextender type="Sitecore.ExperienceEditor.Speak.Ribbon.PageExtender.RibbonPageExtender, Sitecore.ExperienceEditor.Speak.Ribbon" patch:source="Sitecore.ExperienceEditor.config"/>
</pageextenders>
<!--
 XSL EXTENSION OBJECTS
         Classes must have parameterless constructor. If initialization is needed,
         the class may implement the interface IXslExtension.
         Supported attributes:

             mode=[on|off]
             type=full namespace of class (case-sensitive)
             namespace=unique namespace used when mapping the object into the xsl

         All other attributes will be passed to the object during initialization (assuming
         that the class implements IXslExtension)
    
-->
<xslExtensions>
<extension type="Sitecore.Xml.Xsl.XslHelper, Sitecore.Kernel" namespace="http://www.sitecore.net/sc" mode="on" singleInstance="true"/>
<extension type="Sitecore.MainUtil, Sitecore.Kernel" namespace="http://www.sitecore.net/util" mode="on" singleInstance="true"/>
<extension type="Sitecore.DateUtil, Sitecore.Kernel" namespace="http://www.sitecore.net/dateutil" mode="on" singleInstance="true"/>
<extension type="Sitecore.Xml.Xsl.SqlHelper, Sitecore.Kernel" namespace="http://www.sitecore.net/sql" mode="on" singleInstance="true"/>
<extension type="Sitecore.StringUtil, Sitecore.Kernel" namespace="http://www.sitecore.net/stringutil" mode="on" singleInstance="true"/>
<extension type="Sitecore.Web.UI.WebControls.WebEditRibbon, Sitecore.ExperienceEditor" namespace="http://www.sitecore.net/webedit" mode="on" singleInstance="true" patch:source="Sitecore.ExperienceEditor.config"/>
<extension type="Sitecore.Modules.EmailCampaign.Core.Extensions.XslUtil, Sitecore.EmailCampaign" namespace="http://www.sitecore.net/ecm" mode="on" singleInstance="true" patch:source="Sitecore.EmailExperience.Core.config"/>
</xslExtensions>
<!--
 XSL CONTROLS
         Classes must implement the interface IXslControl.
         Supported attributes:

             mode=[on|off]
             tag=control tag (ex. 'sc:text'). Can be '*' which matches all unhandled tags. Case sensitive.
             tagPrefix=unique control tag prefix (ex. 'sc'). Only used if 'tag' is not set. Case sensitive.
             type=full namespace of class. Case-sensitive.
             assembly=name of dll containing the class. Case-sensitive.

         All other attributes will be passed to the object during initialization
    
-->
<xslControls>
<control type="Sitecore.Web.UI.XslControls.Date" assembly="Sitecore.Kernel" mode="on" tag="sc:date"/>
<control type="Sitecore.Web.UI.XslControls.ContentDot" assembly="Sitecore.Kernel" mode="on" tag="sc:dot"/>
<control type="Sitecore.Web.UI.XslControls.Html" assembly="Sitecore.Kernel" mode="on" tag="sc:html"/>
<control type="Sitecore.Web.UI.XslControls.Image" assembly="Sitecore.Kernel" mode="on" tag="sc:image"/>
<control type="Sitecore.Web.UI.XslControls.Link" assembly="Sitecore.Kernel" mode="on" tag="sc:link"/>
<control type="Sitecore.Web.UI.XslControls.Memo" assembly="Sitecore.Kernel" mode="on" tag="sc:memo"/>
<control type="Sitecore.Web.UI.XslControls.Security" assembly="Sitecore.Kernel" mode="on" tag="sc:sec"/>
<control type="Sitecore.Web.UI.XslControls.Text" assembly="Sitecore.Kernel" mode="on" tag="sc:text"/>
<control type="Sitecore.Web.UI.XslControls.WordStyle" assembly="Sitecore.Kernel" mode="on" tag="sc:wordstyle"/>
<control type="Sitecore.Web.UI.XslControls.EnableSecurity" assembly="Sitecore.Kernel" mode="on" tag="sc:enableSecurity"/>
<control type="Sitecore.Web.UI.XslControls.DisableSecurity" assembly="Sitecore.Kernel" mode="on" tag="sc:disableSecurity"/>
<control type="Sitecore.Web.UI.XslControls.EditFrame" assembly="Sitecore.Kernel" mode="on" tag="sc:editFrame"/>
</xslControls>
<!--
 CONTROL SOURCES
         Supported attributes:

             mode=[on|off]

             Assembly based controls:
             assembly=name of dll containing the controls.
             namespace=namespace of controls
             prefix=prefix used when specifying controls from the assembly

             Xml controls:
             folder=name of folder containing xml control files
             prefix=prefix used when specifying controls from the folder

         All other attributes will be passed to the control factory during initialization
    
-->
<controlSources>
<source folder="/sitecore/shell/override" namespace="Sitecore.Web.UI.XmlControls" mode="on" deep="true"/>
<source folder="/layouts" namespace="Sitecore.Web.UI.XmlControls" mode="on" deep="false"/>
<source folder="/sitecore/shell/controls" namespace="Sitecore.Web.UI.XmlControls" mode="on" deep="true"/>
<source folder="/sitecore/shell/applications" namespace="Sitecore.Web.UI.XmlControls" mode="on" deep="true"/>
<source folder="/sitecore modules" namespace="Sitecore.Web.UI.XmlControls" mode="on" deep="true"/>
<source assembly="Sitecore.Kernel" namespace="Sitecore.Web.UI.HtmlControls" mode="on"/>
<source assembly="Sitecore.Kernel" namespace="Sitecore.Web.UI.WebControls" mode="on"/>
<source assembly="Sitecore.Kernel" namespace="Sitecore.Shell.Web.UI.WebControls" prefix="shell" mode="on"/>
<source assembly="Sitecore.Kernel" namespace="Sitecore.Shell.Applications.ContentEditor" prefix="content" mode="on"/>
<source assembly="Sitecore.Kernel" namespace="Sitecore.Shell.Web.Applications.ContentEditor" prefix="shell" mode="on"/>
<source assembly="Sitecore.Kernel" namespace="Sitecore.WebControls" mode="on"/>
<source assembly="System.Web" namespace="System.Web.UI.WebControls" prefix="asp" mode="on"/>
<source assembly="System.Web" namespace="System.Web.UI.HtmlControls" prefix="html" mode="on"/>
<source assembly="Sitecore.Kernel" namespace="Sitecore.Web.UI.Portal" mode="on"/>
<source assembly="ComponentArt.Web.UI" namespace="ComponentArt.Web.UI" prefix="ca" mode="on"/>
<source assembly="Sitecore.Buckets" namespace="Sitecore.Buckets.FieldTypes" prefix="contentExtension" mode="on" patch:source="Sitecore.Buckets.config"/>
<source assembly="Sitecore.Buckets" namespace="Sitecore.Buckets.Controls" mode="on" patch:source="Sitecore.Buckets.config"/>
<source folder="/sitecore modules/shell/emailcampaign" namespace="Sitecore.Modules.EmailCampaign.XmlControls" prefix="EmailCampaign" mode="on" deep="true" patch:source="Sitecore.EmailExperience.UI.config"/>
<source assembly="Sitecore.EmailCampaign.Cm.UI" namespace="Sitecore.Modules.EmailCampaign.UI.Controls" prefix="EmailCampaign" mode="on" patch:source="Sitecore.EmailExperience.UI.config"/>
<source assembly="Sitecore.EmailCampaign.Cm.UI" namespace="Sitecore.Modules.EmailCampaign.UI.HtmlControls" mode="on" patch:source="Sitecore.EmailExperience.UI.config"/>
</controlSources>
<!--  UI  -->
<ui>
<usings>
<using>System</using>
<using>System.Collections</using>
<using>System.Reflection</using>
<using>System.Runtime.CompilerServices</using>
<using>System.Web.UI</using>
<using>System.Web.UI.HtmlControls</using>
<using>System.Web.UI.WebControls</using>
<using>Sitecore</using>
<using>Sitecore.Configuration</using>
<using>Sitecore.Data</using>
<using>Sitecore.Data.Fields</using>
<using>Sitecore.Data.Items</using>
<using>Sitecore.Diagnostics</using>
<using>Sitecore.Reflection</using>
<using>Sitecore.Globalization</using>
<using>Sitecore.Sites</using>
<using>Sitecore.Web.UI</using>
<using>Sitecore.Web.UI.HtmlControls</using>
<using>Sitecore.Shell.Web.UI.WebControls</using>
<using>Sitecore.Web.UI.WebControls</using>
<using>Sitecore.Xml</using>
<using id="EmailCampaign" patch:source="Sitecore.EmailExperience.UI.config">Sitecore.Modules.EmailCampaign.UI.HtmlControls</using>
</usings>
<references>
<reference>System.dll</reference>
<reference>System.Data.dll</reference>
<reference>System.Web.dll</reference>
<reference>System.Web.Services.dll</reference>
<reference>System.Xml.dll</reference>
<reference>/bin/Sitecore.Kernel.dll</reference>
<reference>/bin/Sitecore.Client.dll</reference>
<reference id="Sitecore.Buckets" patch:source="Sitecore.Buckets.config">/bin/Sitecore.Buckets.dll</reference>
<reference id="EmailCampaign" patch:source="Sitecore.EmailExperience.UI.config">/bin/Sitecore.EmailCampaign.Cm.UI.dll</reference>
</references>
<forms>
<controls assembly="Sitecore.Kernel"/>
</forms>
</ui>
<!--  XamlSharp  -->
<xamlsharp>
<compilers>
<compiler type="Sitecore.Web.UI.XamlSharp.Xaml.XamlFileCompiler,Sitecore.Kernel">
<extension>xaml.xml</extension>
</compiler>
</compilers>
<controlcompilers>
<controlcompiler type="Sitecore.Web.UI.XamlSharp.Xaml.ControlCompilers.UriControlCompiler,Sitecore.Kernel"/>
<controlcompiler type="Sitecore.Web.UI.XamlSharp.Xaml.ControlCompilers.XamlControlCompiler,Sitecore.Kernel"/>
<controlcompiler type="Sitecore.Web.UI.XamlSharp.Xaml.ControlCompilers.WebControlCompiler,Sitecore.Kernel"/>
<controlcompiler type="Sitecore.Web.UI.XamlSharp.Xaml.ControlCompilers.HtmlControlCompiler,Sitecore.Kernel"/>
</controlcompilers>
<extensions>
<extension type="Sitecore.Web.UI.XamlSharp.Xaml.Extensions.AttributeExtension,Sitecore.Kernel">
<nodename>attribute</nodename>
<namespaceuri>http://www.sitecore.net/xaml</namespaceuri>
</extension>
<extension type="Sitecore.Web.UI.XamlSharp.Xaml.Extensions.CallTemplateExtension,Sitecore.Kernel">
<nodename>call-template</nodename>
<namespaceuri>http://www.sitecore.net/xaml</namespaceuri>
</extension>
<extension type="Sitecore.Web.UI.XamlSharp.Xaml.Extensions.ForEachExtension,Sitecore.Kernel">
<nodename>for-each</nodename>
<namespaceuri>http://www.sitecore.net/xaml</namespaceuri>
</extension>
<extension type="Sitecore.Web.UI.XamlSharp.Xaml.Extensions.IfExtension,Sitecore.Kernel">
<nodename>if</nodename>
<namespaceuri>http://www.sitecore.net/xaml</namespaceuri>
</extension>
<extension type="Sitecore.Web.UI.XamlSharp.Xaml.Extensions.IncludeExtension,Sitecore.Kernel">
<nodename>include</nodename>
<namespaceuri>http://www.sitecore.net/xaml</namespaceuri>
</extension>
<extension type="Sitecore.Web.UI.XamlSharp.Xaml.Extensions.ParamExtension,Sitecore.Kernel">
<nodename>param</nodename>
<namespaceuri>http://www.sitecore.net/xaml</namespaceuri>
</extension>
<extension type="Sitecore.Web.UI.XamlSharp.Xaml.Extensions.RegisterExtension,Sitecore.Kernel">
<nodename>register</nodename>
<namespaceuri>http://www.sitecore.net/xaml</namespaceuri>
</extension>
<extension type="Sitecore.Web.UI.XamlSharp.Xaml.Extensions.SetVariableExtension,Sitecore.Kernel">
<nodename>set-variable</nodename>
<namespaceuri>http://www.sitecore.net/xaml</namespaceuri>
</extension>
<extension type="Sitecore.Web.UI.XamlSharp.Xaml.Extensions.StyleExtension,Sitecore.Kernel">
<nodename>style</nodename>
<namespaceuri>http://www.sitecore.net/xaml</namespaceuri>
</extension>
<extension type="Sitecore.Web.UI.XamlSharp.Xaml.Extensions.StyleAttributeExtension,Sitecore.Kernel">
<nodename>styleattribute</nodename>
<namespaceuri>http://www.sitecore.net/xaml</namespaceuri>
</extension>
<extension type="Sitecore.Web.UI.XamlSharp.Xaml.Extensions.TemplateExtension,Sitecore.Kernel">
<nodename>template</nodename>
<namespaceuri>http://www.sitecore.net/xaml</namespaceuri>
</extension>
<extension type="Sitecore.Web.UI.XamlSharp.Xaml.Extensions.UsingExtension,Sitecore.Kernel">
<nodename>using</nodename>
<namespaceuri>http://www.sitecore.net/xaml</namespaceuri>
</extension>
<extension type="Sitecore.Web.UI.XamlSharp.Xaml.Extensions.ValueOfExtension,Sitecore.Kernel">
<nodename>value-of</nodename>
<namespaceuri>http://www.sitecore.net/xaml</namespaceuri>
</extension>
<extension type="Sitecore.Web.UI.XamlSharp.Xaml.Extensions.VariableExtension,Sitecore.Kernel">
<nodename>variable</nodename>
<namespaceuri>http://www.sitecore.net/xaml</namespaceuri>
</extension>
</extensions>
<attributeAssigners>
<attributeAssigner type="Sitecore.Web.UI.XamlSharp.Xaml.Attributes.IDAttributeAssigner,Sitecore.Kernel"/>
<attributeAssigner type="Sitecore.Web.UI.XamlSharp.Xaml.Attributes.StyleAttributeAssigner,Sitecore.Kernel"/>
<attributeAssigner type="Sitecore.Web.UI.XamlSharp.Xaml.Attributes.FontAttributeAssigner,Sitecore.Kernel"/>
<attributeAssigner type="Sitecore.Web.UI.XamlSharp.Xaml.Attributes.ExtensibleAttributeAssigner,Sitecore.Kernel"/>
<attributeAssigner type="Sitecore.Web.UI.XamlSharp.Xaml.Attributes.StyleRefAttributeAssigner,Sitecore.Kernel">
<namespaceuri>http://www.sitecore.net/xaml</namespaceuri>
</attributeAssigner>
<attributeAssigner type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssigner,Sitecore.Kernel">
<namespaceuri>http://www.sitecore.net/ajax</namespaceuri>
<events hint="list:AddEvent">
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>activate</attributeName>
<htmlName>onactivate</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>change</attributeName>
<htmlName>onchange</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>click</attributeName>
<htmlName>onclick</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>contextmenu</attributeName>
<htmlName>oncontextmenu</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>dblclick</attributeName>
<htmlName>ondblclick</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>deactivate</attributeName>
<htmlName>ondeactivate</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>drag</attributeName>
<htmlName>ondrag</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>dragend</attributeName>
<htmlName>ondragend</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>dragenter</attributeName>
<htmlName>ondragenter</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>dragleave</attributeName>
<htmlName>ondragleave</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>dragover</attributeName>
<htmlName>ondragover</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>dragstart</attributeName>
<htmlName>ondragstart</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>drop</attributeName>
<htmlName>ondrop</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>gotfocus</attributeName>
<htmlName>onfocus</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>keydown</attributeName>
<htmlName>onkeydown</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>keypress</attributeName>
<htmlName>onkeypress</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>keyup</attributeName>
<htmlName>onkeyup</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>lostfocus</attributeName>
<htmlName>onblur</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>loaded</attributeName>
<htmlName>onload</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>mousedown</attributeName>
<htmlName>onmousedown</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>mouseenter</attributeName>
<htmlName>onmouseenter</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>mouseleave</attributeName>
<htmlName>onmouseleave</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>mouseout</attributeName>
<htmlName>onmouseout</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>mouseover</attributeName>
<htmlName>onmouseover</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>mouseup</attributeName>
<htmlName>onmouseup</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>sizechanged</attributeName>
<htmlName>onresize</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>unloaded</attributeName>
<htmlName>onunload</htmlName>
</event>
</events>
</attributeAssigner>
<attributeAssigner type="Sitecore.Web.UI.XamlSharp.Ajax.RestAttributeAssigner,Sitecore.Kernel">
<namespaceuri>http://www.sitecore.net/rest</namespaceuri>
<events hint="list:AddEvent">
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>activate</attributeName>
<htmlName>onactivate</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>change</attributeName>
<htmlName>onchange</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>click</attributeName>
<htmlName>onclick</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>contextmenu</attributeName>
<htmlName>oncontextmenu</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>dblclick</attributeName>
<htmlName>ondblclick</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>deactivate</attributeName>
<htmlName>ondeactivate</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>drag</attributeName>
<htmlName>ondrag</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>dragend</attributeName>
<htmlName>ondragend</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>dragenter</attributeName>
<htmlName>ondragenter</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>dragleave</attributeName>
<htmlName>ondragleave</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>dragover</attributeName>
<htmlName>ondragover</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>dragstart</attributeName>
<htmlName>ondragstart</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>drop</attributeName>
<htmlName>ondrop</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>gotfocus</attributeName>
<htmlName>onfocus</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>keydown</attributeName>
<htmlName>onkeydown</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>keypress</attributeName>
<htmlName>onkeypress</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>keyup</attributeName>
<htmlName>onkeyup</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>lostfocus</attributeName>
<htmlName>onblur</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>loaded</attributeName>
<htmlName>onload</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>mousedown</attributeName>
<htmlName>onmousedown</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>mouseenter</attributeName>
<htmlName>onmouseenter</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>mouseleave</attributeName>
<htmlName>onmouseleave</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>mouseout</attributeName>
<htmlName>onmouseout</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>mouseover</attributeName>
<htmlName>onmouseover</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>mouseup</attributeName>
<htmlName>onmouseup</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>sizechanged</attributeName>
<htmlName>onresize</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>unloaded</attributeName>
<htmlName>onunload</htmlName>
</event>
</events>
</attributeAssigner>
<attributeAssigner type="Web.UI.XamlSharp.Xaml.Attributes.JavascriptAttributeAssigner,Sitecore.Kernel">
<namespaceuri>http://www.sitecore.net/javascript</namespaceuri>
<events hint="list:AddEvent">
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>activate</attributeName>
<htmlName>onactivate</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>change</attributeName>
<htmlName>onchange</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>click</attributeName>
<htmlName>onclick</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>contextmenu</attributeName>
<htmlName>oncontextmenu</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>dblclick</attributeName>
<htmlName>ondblclick</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>deactivate</attributeName>
<htmlName>ondeactivate</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>drag</attributeName>
<htmlName>ondrag</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>dragend</attributeName>
<htmlName>ondragend</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>dragenter</attributeName>
<htmlName>ondragenter</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>dragleave</attributeName>
<htmlName>ondragleave</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>dragover</attributeName>
<htmlName>ondragover</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>dragstart</attributeName>
<htmlName>ondragstart</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>drop</attributeName>
<htmlName>ondrop</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>gotfocus</attributeName>
<htmlName>onfocus</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>keydown</attributeName>
<htmlName>onkeydown</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>keypress</attributeName>
<htmlName>onkeypress</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>keyup</attributeName>
<htmlName>onkeyup</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>lostfocus</attributeName>
<htmlName>onblur</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>loaded</attributeName>
<htmlName>onload</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>mousedown</attributeName>
<htmlName>onmousedown</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>mouseenter</attributeName>
<htmlName>onmouseenter</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>mouseleave</attributeName>
<htmlName>onmouseleave</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>mouseout</attributeName>
<htmlName>onmouseout</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>mouseover</attributeName>
<htmlName>onmouseover</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>mouseup</attributeName>
<htmlName>onmouseup</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>sizechanged</attributeName>
<htmlName>onresize</htmlName>
</event>
<event type="Sitecore.Web.UI.XamlSharp.Ajax.AjaxAttributeAssignerEvent,Sitecore.Kernel">
<attributeName>unloaded</attributeName>
<htmlName>onunload</htmlName>
</event>
</events>
</attributeAssigner>
</attributeAssigners>
<attributeEvaluators>
<attributeEvaluator type="Sitecore.Web.UI.XamlSharp.Xaml.Attributes.ExpressionAttributeEvaluator,Sitecore.Kernel"/>
</attributeEvaluators>
<sources>
<source type="Sitecore.Web.UI.XamlSharp.Xaml.ImportControlSource,Sitecore.Kernel"/>
<source type="Sitecore.Web.UI.XamlSharp.Renderings.RenderingControlSource,Sitecore.Kernel">
<namespaceuri>http://www.sitecore.net/renderings</namespaceuri>
</source>
<source type="Sitecore.Web.UI.XamlSharp.Xaml.XamlFileControlSource,Sitecore.Kernel">
<watchers hint="list:AddWatcher">
<watcher type="Sitecore.Web.UI.XamlSharp.Xaml.XamlFileWatcher,Sitecore.Kernel">
<folder>/sitecore/shell/Applications</folder>
<filter>*.xaml.xml</filter>
<codefilter>*.xaml.xml.cs</codefilter>
<includesubdirectories>true</includesubdirectories>
</watcher>
</watchers>
</source>
<source type="Sitecore.Web.UI.XamlSharp.Xaml.XamlFileControlSource,Sitecore.Kernel">
<watchers hint="list:AddWatcher">
<watcher type="Sitecore.Web.UI.XamlSharp.Xaml.XamlFileWatcher,Sitecore.Kernel">
<folder>/sitecore modules</folder>
<filter>*.xaml.xml</filter>
<codefilter>*.xaml.xml.cs</codefilter>
<includesubdirectories>true</includesubdirectories>
</watcher>
</watchers>
</source>
<source type="Sitecore.Web.UI.XamlSharp.AssemblyControlSource,Sitecore.Kernel">
<assemblyname>Sitecore.Kernel</assemblyname>
<namespace>Sitecore.Web.UI.HtmlControls</namespace>
</source>
<source type="Sitecore.Web.UI.XamlSharp.AssemblyControlSource,Sitecore.Kernel">
<assemblyname>Sitecore.Kernel</assemblyname>
<namespace>Sitecore.Web.UI.WebControls</namespace>
</source>
<source type="Sitecore.Web.UI.XamlSharp.AssemblyControlSource,Sitecore.Kernel">
<namespaceuri>http://www.sitecore.net/microsoft/webcontrols</namespaceuri>
<assemblyname>System.Web</assemblyname>
<namespace>System.Web.UI.WebControls</namespace>
</source>
<source type="Sitecore.Web.UI.XamlSharp.AssemblyControlSource,Sitecore.Kernel">
<namespaceuri>http://www.sitecore.net/microsoft/htmlcontrols</namespaceuri>
<assemblyname>System.Web</assemblyname>
<namespace>System.Web.UI.HtmlControls</namespace>
</source>
<source type="Sitecore.Web.UI.XamlSharp.XmlControlSource,Sitecore.Kernel">
<namespaceuri>http://www.sitecore.net/xmlcontrols</namespaceuri>
</source>
</sources>
<definitionCreators>
<definitionCreator type="Sitecore.Web.UI.XamlSharp.Xaml.ControlDefinitionCreator,Sitecore.Kernel">
<extension>xaml.xml</extension>
</definitionCreator>
</definitionCreators>
<htmlControls>
<htmlControl tag="a" type="System.Web.UI.HtmlControls.HtmlAnchor,System.Web"/>
<htmlControl tag="button" type="System.Web.UI.HtmlControls.HtmlButton,System.Web"/>
<htmlControl tag="form" type="System.Web.UI.HtmlControls.HtmlForm,System.Web"/>
<htmlControl tag="head" type="System.Web.UI.HtmlControls.HtmlHead,System.Web"/>
<htmlControl tag="img" type="System.Web.UI.HtmlControls.HtmlImage,System.Web"/>
<htmlControl tag="head" type="System.Web.UI.HtmlControls.HtmlHead,System.Web"/>
<htmlControl tag="input" attribute="type" value="button" type="System.Web.UI.HtmlControls.HtmlInputButton,System.Web"/>
<htmlControl tag="input" attribute="type" value="checkbox" type="System.Web.UI.HtmlControls.HtmlInputCheckBox,System.Web"/>
<htmlControl tag="input" attribute="type" value="file" type="System.Web.UI.HtmlControls.HtmlInputFile,System.Web"/>
<htmlControl tag="input" attribute="type" value="hidden" type="System.Web.UI.HtmlControls.HtmlInputHidden,System.Web"/>
<htmlControl tag="input" attribute="type" value="image" type="System.Web.UI.HtmlControls.HtmlInputImage,System.Web"/>
<htmlControl tag="input" attribute="type" value="password" type="System.Web.UI.HtmlControls.HtmlInputPassword,System.Web"/>
<htmlControl tag="input" attribute="type" value="radio" type="System.Web.UI.HtmlControls.HtmlInputRadioButton,System.Web"/>
<htmlControl tag="input" attribute="type" value="reset" type="System.Web.UI.HtmlControls.HtmlInputReset,System.Web"/>
<htmlControl tag="input" attribute="type" value="submit" type="System.Web.UI.HtmlControls.HtmlInputSubmit,System.Web"/>
<htmlControl tag="input" attribute="type" value="text" type="System.Web.UI.HtmlControls.HtmlInputText,System.Web"/>
<htmlControl tag="link" type="System.Web.UI.HtmlControls.HtmlLink,System.Web"/>
<htmlControl tag="meta" type="System.Web.UI.HtmlControls.HtmlMeta,System.Web"/>
<htmlControl tag="select" type="System.Web.UI.HtmlControls.HtmlSelect,System.Web"/>
<htmlControl tag="table" type="System.Web.UI.HtmlControls.HtmlTable,System.Web"/>
<htmlControl tag="td" type="System.Web.UI.HtmlControls.HtmlTableCell,System.Web"/>
<htmlControl tag="tr" type="System.Web.UI.HtmlControls.HtmlTableRow,System.Web"/>
<htmlControl tag="textarea" type="System.Web.UI.HtmlControls.HtmlTextArea,System.Web"/>
<htmlControl tag="title" type="System.Web.UI.HtmlControls.HtmlTitle,System.Web"/>
</htmlControls>
</xamlsharp>
<!--  Language Definitions  -->
<languageDefinitions>
<languages>
<language id="af" region="ZA" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_South_Africa.PNG"/>
<language id="ar" region="AE" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_united_arab_emirates.png"/>
<language id="ar" region="BH" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_Bahrain.PNG"/>
<language id="ar" region="DZ" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_Algeria.PNG"/>
<language id="ar" region="EG" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_Egypt.PNG"/>
<language id="ar" region="IQ" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_Iraq.PNG"/>
<language id="ar" region="JO" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_Jordan.PNG"/>
<language id="ar" region="KW" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_Kuwait.PNG"/>
<language id="ar" region="LB" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_Lebanon.PNG"/>
<language id="ar" region="LY" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_Libya.PNG"/>
<language id="ar" region="MA" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_Morocco.PNG"/>
<language id="ar" region="OM" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_Oman.PNG"/>
<language id="ar" region="QA" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_Qatar.PNG"/>
<language id="ar" region="SA" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_Saudi_Arabia.PNG"/>
<language id="ar" region="SY" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_Syria.PNG"/>
<language id="ar" region="TN" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_Tunisia.PNG"/>
<language id="ar" region="YE" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_Yemen.PNG"/>
<language id="be" region="BY" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_Belarus.PNG"/>
<language id="bg" region="BG" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_Bulgaria.PNG"/>
<language id="ca" region="ES" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Spain.PNG"/>
<language id="cs" region="CZ" codepage="65001" encoding="utf-8" charset="iso-8859-2" icon="flags/16x16/flag_Czech_Republic.PNG"/>
<language id="da" region="" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Denmark.PNG"/>
<language id="de" region="AT" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Austria.PNG"/>
<language id="de" region="CH" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Switzerland.PNG"/>
<language id="de" region="DE" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Germany.PNG" spellchecker="de-DE.tdf"/>
<language id="de" region="LI" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Liechtenstein.PNG"/>
<language id="de" region="LU" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Luxembourg.PNG"/>
<language id="el" region="GR" codepage="65001" encoding="utf-8" charset="iso-8859-7" icon="flags/16x16/flag_Greece.PNG"/>
<language id="en" region="AU" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Australia.PNG"/>
<language id="en" region="BZ" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Belize.PNG"/>
<language id="en" region="CA" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Canada.PNG"/>
<language id="en" region="GB" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_great_britain.png"/>
<language id="en" region="IE" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Ireland.PNG"/>
<language id="en" region="JM" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Jamaica.PNG"/>
<language id="en" region="NZ" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_New_Zealand.PNG"/>
<language id="en" region="PH" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_philippines.png"/>
<language id="en" region="TT" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Trinidad_and_Tobago.PNG"/>
<language id="en" region="US" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_USA.PNG" spellchecker="en-US.tdf"/>
<language id="en" region="ZA" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_South_Africa.PNG"/>
<language id="en" region="ZW" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Zimbabwe.PNG"/>
<language id="es" region="AR" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_Argentina.PNG"/>
<language id="es" region="BO" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Bolivia.PNG"/>
<language id="es" region="CL" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Chile.PNG"/>
<language id="es" region="CO" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Colombia.PNG"/>
<language id="es" region="CR" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Costa_Rica.PNG"/>
<language id="es" region="DO" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Dominican_Republic.PNG"/>
<language id="es" region="EC" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_equador.png"/>
<language id="es" region="ES" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Spain.PNG"/>
<language id="es" region="GT" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Guatemala.PNG"/>
<language id="es" region="HN" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Honduras.PNG"/>
<language id="es" region="MX" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Mexico.PNG"/>
<language id="es" region="NI" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Nicaragua.PNG"/>
<language id="es" region="PA" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Panama.PNG"/>
<language id="es" region="PE" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Peru.PNG"/>
<language id="es" region="PR" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Puerto_Rico.PNG"/>
<language id="es" region="PY" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Paraquay.PNG"/>
<language id="es" region="SV" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_El_Salvador.PNG"/>
<language id="es" region="UY" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Uruquay.PNG"/>
<language id="es" region="VE" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Venezuela.PNG"/>
<language id="et" region="EE" codepage="65001" encoding="utf-8" charset="windows-1257" icon="flags/16x16/flag_Estonia.PNG"/>
<language id="eu" region="ES" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Spain.PNG"/>
<language id="fa" region="IR" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_Iran.PNG"/>
<language id="fi" region="FI" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Finland.PNG"/>
<language id="fo" region="FO" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Faroe_Islands.PNG"/>
<language id="fr" region="BE" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Belgium.PNG"/>
<language id="fr" region="CA" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Canada.PNG"/>
<language id="fr" region="CH" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Switzerland.PNG"/>
<language id="fr" region="FR" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_France.PNG" spellchecker="fr-FR.tdf"/>
<language id="fr" region="LU" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Luxembourg.PNG"/>
<language id="fr" region="MC" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_monaco.png"/>
<language id="gl" region="ES" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Spain.PNG"/>
<language id="gu" region="IN" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_India.PNG"/>
<language id="he" region="IL" codepage="65001" encoding="utf-8" charset="windows-1255" icon="flags/16x16/flag_Israel.PNG"/>
<language id="hi" region="IN" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_India.PNG"/>
<language id="hr" region="BA" codepage="65001" encoding="utf-8" charset="iso-8859-2" icon="flags/16x16/flag_Bosnia_and_Herzegovina.PNG"/>
<language id="hr" region="HR" codepage="65001" encoding="utf-8" charset="iso-8859-2" icon="flags/16x16/flag_Croatia.PNG"/>
<language id="hu" region="HU" codepage="65001" encoding="utf-8" charset="iso-8859-2" icon="flags/16x16/flag_Hungary.PNG"/>
<language id="hy" region="AM" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_Armenia.PNG"/>
<language id="id" region="ID" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Indonesia.PNG"/>
<language id="is" region="IS" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Iceland.PNG"/>
<language id="it" region="CH" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Switzerland.PNG"/>
<language id="it" region="IT" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Italy.PNG"/>
<language id="ja" region="JP" codepage="65001" encoding="utf-8" charset="iso-2022-jp" icon="flags/16x16/flag_Japan.PNG"/>
<language id="ka" region="GE" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_Georgia.PNG"/>
<language id="kk" region="KZ" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_Kazakhstan.PNG"/>
<language id="kn" region="IN" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_India.PNG"/>
<language id="ko" region="KR" codepage="65001" encoding="utf-8" charset="ks_c_5601-1987" icon="flags/16x16/flag_south_korea.png"/>
<language id="ky" region="KG" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_Kyrgyzstan.PNG"/>
<language id="lt" region="LT" codepage="65001" encoding="utf-8" charset="windows-1257" icon="flags/16x16/flag_Lithuania.PNG"/>
<language id="lv" region="LV" codepage="65001" encoding="utf-8" charset="windows-1257" icon="flags/16x16/flag_Latvia.PNG"/>
<language id="mi" region="NZ" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_New_Zealand.PNG"/>
<language id="mk" region="MK" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_Macedonia.PNG"/>
<language id="mn" region="MN" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_Mongolia.PNG"/>
<language id="mr" region="IN" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_India.PNG"/>
<language id="ms" region="BN" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_brunei.png "/>
<language id="ms" region="MY" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Malaysia.PNG"/>
<language id="mt" region="MT" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_Malta.PNG"/>
<language id="nb" region="NO" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Norway.PNG"/>
<language id="nl" region="BE" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Belgium.PNG"/>
<language id="nl" region="NL" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Netherlands.PNG"/>
<language id="nn" region="NO" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Norway.PNG"/>
<language id="pa" region="IN" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_India.PNG"/>
<language id="pl" region="PL" codepage="65001" encoding="utf-8" charset="iso-8859-2" icon="flags/16x16/flag_Poland.PNG"/>
<language id="pt" region="BR" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Brazil.PNG"/>
<language id="pt" region="PT" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Portugal.PNG"/>
<language id="ro" region="RO" codepage="65001" encoding="utf-8" charset="iso-8859-2" icon="flags/16x16/flag_Romania.PNG"/>
<language id="ru" region="RU" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_Russia.PNG"/>
<language id="sa" region="IN" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_India.PNG"/>
<language id="se" region="FI" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Finland.PNG"/>
<language id="se" region="NO" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Norway.PNG"/>
<language id="se" region="SE" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Sweden.PNG"/>
<language id="sk" region="SK" codepage="65001" encoding="utf-8" charset="iso-8859-2" icon="flags/16x16/flag_Slovakia.PNG"/>
<language id="sl" region="SI" codepage="65001" encoding="utf-8" charset="iso-8859-2" icon="flags/16x16/flag_Slovenia.PNG"/>
<language id="sq" region="AL" codepage="65001" encoding="utf-8" charset="iso-8859-2" icon="flags/16x16/flag_Albania.PNG"/>
<language id="sv" region="FI" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Finland.PNG"/>
<language id="sv" region="SE" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Sweden.PNG"/>
<language id="sw" region="KE" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_Kenya.PNG"/>
<language id="ta" region="IN" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_India.PNG"/>
<language id="te" region="IN" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_India.PNG"/>
<language id="th" region="TH" codepage="65001" encoding="utf-8" charset="windows-874" icon="flags/16x16/flag_Thailand.PNG"/>
<language id="tn" region="ZA" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_South_Africa.PNG"/>
<language id="tr" region="TR" codepage="65001" encoding="utf-8" charset="iso-8859-9" icon="flags/16x16/flag_Turkey.PNG"/>
<language id="tt" region="RU" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_Russia.PNG"/>
<language id="uk" region="UA" codepage="65001" encoding="utf-8" charset="koi8-r" icon="flags/16x16/flag_Ukraine.PNG"/>
<language id="ur" region="PK" codepage="65001" encoding="utf-8" charset="windows-1256" icon="flags/16x16/flag_pakistan.png "/>
<language id="vi" region="VN" codepage="65001" encoding="utf-8" charset="windows-1258" icon="flags/16x16/flag_Vietnam.PNG"/>
<language id="xh" region="ZA" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_South_Africa.PNG"/>
<language id="zh" region="CN" codepage="65001" encoding="utf-8" charset="gb2312" icon="flags/16x16/flag_china.png"/>
<language id="zh" region="SG" codepage="65001" encoding="utf-8" charset="gb2312" icon="flags/16x16/flag_Singapore.PNG"/>
<language id="zh" region="TW" codepage="65001" encoding="utf-8" charset="big5" icon="flags/16x16/flag_Taiwan.PNG"/>
<language id="zu" region="ZA" codepage="65001" encoding="utf-8" charset="iso-8859-1" icon="flags/16x16/flag_South_Africa.PNG"/>
</languages>
</languageDefinitions>
<!--
 CLIENT SCRIPTS
           These script files are included in the client, e.g. '<script src="/myscript.js" language="JavaScript"/>'
    
-->
<clientscripts>
<everypage/>
<htmleditor/>
</clientscripts>
<!--
 REPLACEMENTS
         Specifies text replacements
         The special replacement with id="publish" is used automatically when publishing
         If mode="off" the replacer will be ignored
    
-->
<replacers>
<replacer id="publish" type="Sitecore.Text.Replacer, Sitecore.Kernel" mode="off" singleInstance="true">
<param desc="name">$(id)</param>
<replacements hint="raw:AddReplacement">
<regex find="Test[12]" replaceWith="Test" simpleTest="Test" ignoreCase="true" forPublish="true"/>
<simple find="Text" replaceWith="NewText" ignoreCase="false" forPublish="true"/>
</replacements>
</replacer>
</replacers>
<!--
 ENCODE NAME REPLACEMENTS
           Specifies text replacements to use when encoding special chars in friendly urls
    
-->
<encodeNameReplacements>
<replace find="&" mode="on" replaceWith=",-a-,"/>
<replace find="?" mode="on" replaceWith=",-q-,"/>
<replace find="/" mode="on" replaceWith=",-s-,"/>
<replace find="*" mode="on" replaceWith=",-w-,"/>
<replace find="." mode="on" replaceWith=",-d-,"/>
<replace find=":" mode="on" replaceWith=",-c-,"/>
<replace find=" " mode="on" replaceWith="-"/>
</encodeNameReplacements>
<!--
  SITES
          Enable different web sites for different domains in the same Sitecore structure
          Supported attributes:

              mode: [on|off]. If set to 'off', the site will be disabled. Default value: 'on'.

              name: Name of the site.

              hostName: The host name of the incoming url. May include wildcards (ex. www.site.net, *.site.net, *.net, pda.*, print.*.net)
                        It's possible to set more than one mask by using '|' symbol as a separator (ex. pda.*|print.*.net)

              targetHostName: The host name to use when generating URLs to items within this site from the context of another site.
                              If the targetHostName attribute is absent, Sitecore uses the value of the hostName attribute instead.
                              Used only when the value of the Rendering.SiteResolving setting is true.

              port: The port number of the incoming url. Default value: 80
              
              externalPort: The port number that is used to generate links that can access the site from outside the network when the site is behind NAT.

              virtualFolder: The prefix to match for incoming URL's.
                             This value will be removed from the URL and the remainder will be treated as the item path.

              physicalFolder: The physical location of files for the site.
                              If the site is based on physical files, this is the path to the folder holding the files.
                              For non-physical sites, this is the place where Sitecore looks for a default.aspx file (to start the pipelines).

              rootPath: The path to the root item of the site.
                        The item path specified in the URL will be appended to this value to find the item.

              startItem: The path to the start item of the site.
                         This is used as the default item path if no path is specified in the URL.
                         It will be combined with rootPath to find the default item of the site.

              language: Default language for the site.

              database: Database containing items to be used for rendering the site.
              content: Database containing items to be edited.
              contentLanguage: The default editing language in the client.
              contentStartItem: The path to the start item when using the client.

              masterDatabase: The database containing the data to be shown in preview and web edit modes.

              device: The name of the device to use for the site. If not specified, the device resolver will find a 'best match device'.

              filterItems: If true, the site will always show the current version of an item (without publishing)
              filteredItemsCacheSize: The size of the cache used to store filtered items. Specify the value in bytes or append the value with KB, MB or GB

              cacheHtml: If true, HTML caching will be enabled. If false, no HTML will be cached for any rendering. Default value: false.
              htmlCacheSize: The size of the html cache. Specify the value in bytes or append the value with KB, MB or GB

              cacheMedia: If true, media caching will be enabled. If false, no media will be cached. Default value: true.
              mediaCachePath: The path to the folder where media data will be cached. Default value: {temp folder}/{site name}/mediacache.

              cacheRenderingParameters: Specifies whether the RenderingItem Parameters cache should be enabled.
                                       If false, caching is disabled and the value of the Parameters property of the RenderingItem object is recalculated every time it is accessed.
                                       To improve the performance of page rendering on content delivery servers, you should enable caching of the Parameters value.
                                       We recommend that you disable RenderingItem Parameters caching on content management servers.
                                       Default value: false
              renderingParametersCacheSize: The size of the RenderingItem Parameters cache. Specify the value in bytes or append the value with KB, MB or GB.

              domain: The security domain of the site.
              requireLogin: If true, login will be required to enter the site.
              loginPage: The path to the login page to use. Must point to a physical file or a page in a site that does NOT require login.

              enableDebugger: Indicates if the debugger is enabled on the site. Typically this is only the website.
              enablePreview: Indicates if preview is enabled on the site. Typically this is only the website.
              enableWebEdit: Indicates if WebEdit is enabled on the site. Typically this is only the website.
              enableWorkflow: Must be true to enable workflows for the site.
              enableTracking: Determines whether website tracking is enabled or not. 

              enforceVersionPresence: If set to true, '404 Not Found' error page will be shown if a context item does not have a requested version.
                                      Default value: false.

              allowDebug: Must be true to be able to debug the site.

              browserTitle: The title of the browser window when browsing the site.

              disableBrowserCaching: If set to true, browser caching is disabled for the site. If set to false, browser caching is enabled for the site. If absent,
                                     the value of the DisableBrowserCaching setting in the <settings> section determines browser caching for the site.

              disableClientData: If set to true, the use of ClientDataStore will be disabled for the site.

              disableXmlControls: If set to true, loading Xml Controls as pages will be disabled.

              defaultDevice: The device to use if no specific device matches the request. This setting takes precedence over the default
              device as it is set by Default checkbox for Device item.
              
              dictionaryDomain: The default domain to use when looking up dictionary phrases for the website. If a phrase does not exist in
                                this dictionary domain, Sitecore attempts to locate that phrase in the default dictionary domain - 
                                /sitecore/system/Dictionary in the current database. If the phrase cannot be found in the default dictionary
                                domain, Sitecore attempts to locate that phrase in the default dictionary domain in the Core database, if that
                                database exists.
                                You can override the site-specific dictionary domain by passing parameters to the Translate.Text() method.

              inherits: Indicates that the attributes should be inherited from another site. To enable inheritance, you must specify the name of the source site.
                        Attributes that are explicitly specified overwrite the attributes that are inherited from the source site.
                        
              analyticsDefinitions: The database where the Analytics definition items for this site are stored. To use the content database for the site, specify "content". 
                                    If this attribute is not specified, the current context database is used. If the context database is not set, for example, for code 
                                    that runs in a background job, the value of the DefaultDefinitionDatabase setting in the Sitecore.Analytics.config file is used. 
             previewUnpublishableItems: Allows users to preview items that cannot be published yet. Default value: false.
    
-->
<sites>
<site name="shell" virtualFolder="/sitecore/shell" physicalFolder="/sitecore/shell" rootPath="/sitecore/content" startItem="/home" language="en" contentLanguage="en" database="core" domain="sitecore" loginPage="/sitecore/login" content="master" contentStartItem="/Home" enableWorkflow="true" enableTracking="false" analyticsDefinitions="content" xmlControlPage="/sitecore/shell/default.aspx" browserTitle="Sitecore" htmlCacheSize="10MB" registryCacheSize="15MB" viewStateCacheSize="1MB" xslCacheSize="25MB" disableBrowserCaching="true" enableItemLanguageFallback="false" enableFieldLanguageFallback="false" patch:source="Sitecore.Owin.Authentication.IdentityServer.Disabler.config" itemwebapi.mode="StandardSecurity" itemwebapi.access="ReadWrite" itemwebapi.allowanonymousaccess="false"/>
<site name="login" virtualFolder="/sitecore/login" physicalFolder="/sitecore/login" enableTracking="false" database="core" domain="sitecore" disableXmlControls="true" language="en"/>
<site name="admin" virtualFolder="/sitecore/admin" physicalFolder="/sitecore/admin" enableTracking="false" enableWorkflow="true" domain="sitecore" loginPage="/sitecore/admin/login.aspx" patch:source="Sitecore.Owin.Authentication.IdentityServer.Disabler.config"/>
<site name="service" enableTracking="true" virtualFolder="/sitecore/service" physicalFolder="/sitecore/service"/>
<site name="modules_shell" virtualFolder="/sitecore modules/shell" physicalFolder="/sitecore modules/shell" rootPath="/sitecore/content" startItem="/home" language="en" database="core" domain="sitecore" content="master" enableTracking="false" enableWorkflow="true"/>
<site name="modules_website" virtualFolder="/sitecore modules/web" physicalFolder="/sitecore modules/web" rootPath="/sitecore/content" startItem="/home" language="en" database="web" domain="extranet" allowDebug="true" cacheHtml="true"/>
<!--
 ITEM WEB API SETTINGS FOR A SITE
           Supported attributes (first is default):
             itemwebapi.mode: [Off|StandardSecurity|AdvancedSecurity]
               If set to Off, Item Web API is turned off.
               If set to StandardSecurity, Item Web API is turned on. Default Sitecore security model is used.
               If set to AdvancedSecurity, Item Web API is turned on. Default Sitecore security model is extended with a requirement to explicitely set the 'remote:fieldread' access right for content fields.
             itemwebapi.access: [ReadOnly|ReadWrite]
               If set to ReadOnly, then only READ operation is allowed.
               If set to ReadWrite, then CREATE, READ, UPDATE, and DELETE operations are allowed.
             itemwebapi.allowanonymousaccess: [false|true].
               Defines if access is allowed for non-authenticated user.
      
-->
<site name="website" enableTracking="true" virtualFolder="/" physicalFolder="/" rootPath="/sitecore/content" startItem="/home" language="en" database="web" domain="extranet" allowDebug="true" cacheHtml="true" htmlCacheSize="50MB" registryCacheSize="0" viewStateCacheSize="0" xslCacheSize="25MB" filteredItemsCacheSize="10MB" enablePreview="true" enableWebEdit="true" enableDebugger="true" disableClientData="false" cacheRenderingParameters="true" renderingParametersCacheSize="10MB" enableItemLanguageFallback="false" enableFieldLanguageFallback="false" itemwebapi.mode="Off" itemwebapi.access="ReadOnly" itemwebapi.allowanonymousaccess="false" patch:source="Sitecore.ItemWebApi.config"/>
<site name="scheduler" enableTracking="false" domain="sitecore"/>
<site name="system" enableTracking="false" domain="sitecore"/>
<site name="publisher" domain="sitecore" enableTracking="false" enableWorkflow="true"/>
<site name="exm" enableTracking="true" inherits="shell" virtualFolder="/" physicalFolder="/" startItem="/none" cacheHtml="true" htmlCacheSize="50MB" patch:source="Sitecore.EmailExperience.Core.config"/>
</sites>
<!--  CACHE SIZES  -->
<cacheSizes>
<sites>
<website>
<html>50MB</html>
<registry>0</registry>
<viewState>0</viewState>
<xsl>25MB</xsl>
</website>
</sites>
</cacheSizes>
<!--  MEDIA  -->
<mediaLibrary>
<!--
 MEDIA PROVIDER
         The media provider used to generate URLs, create media items, control media caching, parse media requests, and other
         media related functionality.      
      
-->
<mediaProvider type="Sitecore.Resources.Media.MediaProvider, Sitecore.Kernel"/>
<!--
 MEDIA REQUEST PREFIXES
           Allows you to configure additional media prefixes (in addition to the prefix defined by the Media.MediaLinkPrefix setting)
           The prefixes are used by Sitecore to recognize media URLs.
           Notice: For each custom media prefix, you must also add a corresponding entry to the <customHandlers> section
      
-->
<mediaPrefixes>
<prefix value="~/media"/>
<!--  Prefix to identify WebDAV media requests  -->
<prefix value="/sitecore_files" patch:source="Sitecore.WebDAV.config"/>
</mediaPrefixes>
<requestParser type="Sitecore.Resources.Media.MediaRequest, Sitecore.Kernel"/>
<mediaTypes>
<mediaType name="Any" extensions="*">
<mimeType>application/octet-stream</mimeType>
<forceDownload>true</forceDownload>
<sharedTemplate>system/media/unversioned/file</sharedTemplate>
<versionedTemplate>system/media/versioned/file</versionedTemplate>
<metaDataFormatter type="Sitecore.Resources.Media.MediaMetaDataFormatter"/>
<mediaValidator type="Sitecore.Resources.Media.MediaValidator"/>
<thumbnails>
<generator type="Sitecore.Resources.Media.MediaThumbnailGenerator, Sitecore.Kernel">
<extension>png</extension>
<filePath>
/sitecore/shell/themes/Standard/Applications/32x32/Document.png
</filePath>
</generator>
<width>150</width>
<height>150</height>
<backgroundColor>#FFFFFF</backgroundColor>
</thumbnails>
<prototypes>
<media type="Sitecore.Resources.Media.Media, Sitecore.Kernel"/>
<mediaData type="Sitecore.Resources.Media.MediaData, Sitecore.Kernel"/>
</prototypes>
</mediaType>
<mediaType name="AVI video" extensions="avi">
<mimeType>video/x-msvideo</mimeType>
<forceDownload>false</forceDownload>
<sharedTemplate>system/media/unversioned/Movie</sharedTemplate>
<versionedTemplate>system/media/versioned/Movie</versionedTemplate>
</mediaType>
<mediaType name="Windows Bitmap image" extensions="bmp, dib">
<mimeType>image/bmp</mimeType>
<forceDownload>false</forceDownload>
<sharedTemplate>system/media/unversioned/image</sharedTemplate>
<versionedTemplate>system/media/versioned/image</versionedTemplate>
<mediaValidator type="Sitecore.Resources.Media.ImageValidator"/>
<thumbnails>
<generator type="Sitecore.Resources.Media.ImageThumbnailGenerator, Sitecore.Kernel">
<extension>png</extension>
</generator>
<width>150</width>
<height>150</height>
<backgroundColor>#FFFFFF</backgroundColor>
</thumbnails>
<prototypes>
<media type="Sitecore.Resources.Media.ImageMedia, Sitecore.Kernel"/>
</prototypes>
</mediaType>
<mediaType name="Flash" extensions="swf">
<mimeType>application/x-shockwave-flash</mimeType>
<forceDownload>false</forceDownload>
<sharedTemplate>system/media/unversioned/Flash</sharedTemplate>
<versionedTemplate>system/media/versioned/Flash</versionedTemplate>
<thumbnails>
<generator type="Sitecore.Resources.Media.MediaThumbnailGenerator, Sitecore.Kernel">
<extension>png</extension>
</generator>
<staticFile>/sitecore/shell/Themes/standard/images/flash.png</staticFile>
</thumbnails>
<prototypes>
<media type="Sitecore.Resources.Media.SwfMedia, Sitecore.Kernel"/>
</prototypes>
</mediaType>
<mediaType name="Flash video" extensions="flv">
<mimeType>video/x-flv</mimeType>
<forceDownload>false</forceDownload>
<sharedTemplate>system/media/unversioned/Movie</sharedTemplate>
<versionedTemplate>system/media/versioned/Movie</versionedTemplate>
</mediaType>
<mediaType name="GIF image" extensions="gif">
<mimeType>image/gif</mimeType>
<forceDownload>false</forceDownload>
<sharedTemplate>system/media/unversioned/image</sharedTemplate>
<versionedTemplate>system/media/versioned/image</versionedTemplate>
<mediaValidator type="Sitecore.Resources.Media.ImageValidator"/>
<thumbnails>
<generator type="Sitecore.Resources.Media.ImageThumbnailGenerator, Sitecore.Kernel">
<extension>png</extension>
</generator>
<width>150</width>
<height>150</height>
<backgroundColor>#FFFFFF</backgroundColor>
</thumbnails>
<prototypes>
<media type="Sitecore.Resources.Media.ImageMedia, Sitecore.Kernel"/>
</prototypes>
</mediaType>
<mediaType name="HTML" extensions="htm,html,stm">
<mimeType>text/html</mimeType>
<forceDownload>true</forceDownload>
<sharedTemplate>system/media/unversioned/file</sharedTemplate>
<versionedTemplate>system/media/versioned/file</versionedTemplate>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_html.png</defaultThumbnailFile>
</mediaType>
<mediaType name="JPEG image" extensions="jpg, jpeg, jpe, jfif">
<mimeType>image/jpeg</mimeType>
<forceDownload>false</forceDownload>
<sharedTemplate>system/media/unversioned/jpeg</sharedTemplate>
<versionedTemplate>system/media/versioned/jpeg</versionedTemplate>
<mediaValidator type="Sitecore.Resources.Media.ImageValidator"/>
<thumbnails>
<generator type="Sitecore.Resources.Media.ImageThumbnailGenerator, Sitecore.Kernel">
<extension>png</extension>
</generator>
<width>150</width>
<height>150</height>
<backgroundColor>#FFFFFF</backgroundColor>
</thumbnails>
<prototypes>
<media type="Sitecore.Resources.Media.JpegMedia, Sitecore.Kernel"/>
</prototypes>
</mediaType>
<mediaType name="MP3" extensions="mp3">
<mimeType>audio/mp3</mimeType>
<forceDownload>false</forceDownload>
<sharedTemplate>system/media/unversioned/mp3</sharedTemplate>
<versionedTemplate>system/media/versioned/mp3</versionedTemplate>
<prototypes>
<media type="Sitecore.Resources.Media.Mp3Media, Sitecore.Kernel"/>
</prototypes>
</mediaType>
<mediaType name="MP4 video" extensions="mp4">
<mimeType>video/mp4</mimeType>
<forceDownload>false</forceDownload>
<sharedTemplate>system/media/unversioned/Movie</sharedTemplate>
<versionedTemplate>system/media/versioned/Movie</versionedTemplate>
</mediaType>
<mediaType name="PDF file" extensions="pdf">
<mimeType>application/pdf</mimeType>
<forceDownload>true</forceDownload>
<sharedTemplate>system/media/unversioned/pdf</sharedTemplate>
<versionedTemplate>system/media/versioned/pdf</versionedTemplate>
</mediaType>
<mediaType name="PNG image" extensions="png">
<mimeType>image/png</mimeType>
<forceDownload>false</forceDownload>
<sharedTemplate>system/media/unversioned/image</sharedTemplate>
<versionedTemplate>system/media/versioned/image</versionedTemplate>
<mediaValidator type="Sitecore.Resources.Media.ImageValidator"/>
<thumbnails>
<generator type="Sitecore.Resources.Media.ImageThumbnailGenerator, Sitecore.Kernel">
<extension>png</extension>
</generator>
<width>150</width>
<height>150</height>
<backgroundColor>#FFFFFF</backgroundColor>
</thumbnails>
<prototypes>
<media type="Sitecore.Resources.Media.ImageMedia, Sitecore.Kernel"/>
</prototypes>
</mediaType>
<mediaType name="SVG image" extensions="svg">
<mimeType>image/svg+xml</mimeType>
<forceDownload>false</forceDownload>
<sharedTemplate>system/media/unversioned/image</sharedTemplate>
<versionedTemplate>system/media/versioned/image</versionedTemplate>
<mediaValidator type="Sitecore.Resources.Media.ImageValidator"/>
<thumbnails>
<generator type="Sitecore.Resources.Media.SvgThumbnailGenerator, Sitecore.Kernel"/>
</thumbnails>
<prototypes>
<media type="Sitecore.Resources.Media.SvgMedia, Sitecore.Kernel"/>
</prototypes>
</mediaType>
<mediaType name="QuickTime movie" extensions="mov, qt">
<mimeType>video/quicktime</mimeType>
<forceDownload>false</forceDownload>
<sharedTemplate>system/media/unversioned/Movie</sharedTemplate>
<versionedTemplate>system/media/versioned/Movie</versionedTemplate>
</mediaType>
<mediaType name="TIFF image" extensions="tiff, tif">
<mimeType>image/tiff</mimeType>
<forceDownload>false</forceDownload>
<sharedTemplate>system/media/unversioned/image</sharedTemplate>
<versionedTemplate>system/media/versioned/image</versionedTemplate>
<mediaValidator type="Sitecore.Resources.Media.ImageValidator"/>
<thumbnails>
<generator type="Sitecore.Resources.Media.ImageThumbnailGenerator, Sitecore.Kernel">
<extension>png</extension>
</generator>
<width>150</width>
<height>150</height>
<backgroundColor>#FFFFFF</backgroundColor>
</thumbnails>
<prototypes>
<media type="Sitecore.Resources.Media.ImageMedia, Sitecore.Kernel"/>
</prototypes>
</mediaType>
<mediaType name="Zip file" extensions="zip">
<mimeType>application/x-zip-compressed</mimeType>
<forceDownload>true</forceDownload>
<sharedTemplate>system/media/unversioned/zip</sharedTemplate>
<versionedTemplate>system/media/versioned/zip</versionedTemplate>
<metaDataFormatter type="Sitecore.Resources.Media.ZipMetaDataFormatter"/>
<prototypes>
<media type="Sitecore.Resources.Media.ZipMedia, Sitecore.Kernel"/>
</prototypes>
</mediaType>
<mediaType name="Video for Adobe Flash Player" extensions="f4v">
<mimeType>video/x-f4v</mimeType>
<forceDownload>false</forceDownload>
<sharedTemplate>system/media/unversioned/Movie</sharedTemplate>
<versionedTemplate>system/media/versioned/Movie</versionedTemplate>
</mediaType>
<mediaType name="Windows Media video" extensions="WMV">
<mimeType>video/x-ms-wmv</mimeType>
<forceDownload>false</forceDownload>
<sharedTemplate>system/media/unversioned/Movie</sharedTemplate>
<versionedTemplate>system/media/versioned/Movie</versionedTemplate>
</mediaType>
<mediaType name="Word document" extensions="doc">
<mimeType>application/msword</mimeType>
<forceDownload>true</forceDownload>
<sharedTemplate>system/media/unversioned/doc</sharedTemplate>
<versionedTemplate>system/media/versioned/doc</versionedTemplate>
</mediaType>
<mediaType name="Word 2007 document" extensions="docx">
<mimeType>
application/vnd.openxmlformats-officedocument.wordprocessingml.document
</mimeType>
<forceDownload>true</forceDownload>
<sharedTemplate>system/media/unversioned/docx</sharedTemplate>
<versionedTemplate>system/media/versioned/docx</versionedTemplate>
</mediaType>
<mediaType name="PPTX File" extensions="pptx">
<mimeType>
application/vnd.openxmlformats-officedocument.presentationml.presentation
</mimeType>
<forceDownload>true</forceDownload>
<sharedTemplate>system/media/unversioned/file</sharedTemplate>
<versionedTemplate>system/media/versioned/file</versionedTemplate>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_powerpoint.png</defaultThumbnailFile>
</mediaType>
<mediaType name="PPT File" extensions="ppt">
<mimeType>application/vnd.ms-powerpoint</mimeType>
<forceDownload>true</forceDownload>
<sharedTemplate>system/media/unversioned/file</sharedTemplate>
<versionedTemplate>system/media/versioned/file</versionedTemplate>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_powerpoint.png</defaultThumbnailFile>
</mediaType>
<mediaType name="XLSX File" extensions="xlsx">
<mimeType>
application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
</mimeType>
<forceDownload>true</forceDownload>
<sharedTemplate>system/media/unversioned/file</sharedTemplate>
<versionedTemplate>system/media/versioned/file</versionedTemplate>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_excel.png</defaultThumbnailFile>
</mediaType>
<mediaType name="XLS File" extensions="xls">
<mimeType>application/vnd.ms-excel</mimeType>
<forceDownload>true</forceDownload>
<sharedTemplate>system/media/unversioned/file</sharedTemplate>
<versionedTemplate>system/media/versioned/file</versionedTemplate>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_excel.png</defaultThumbnailFile>
</mediaType>
<!--
 
    This file contains a list of common file extensions and their corresponding MIME types 
    
    Notice that the extensions that are also (by default) defined in Sitecore's web.config 
    are commented out (such as "jpg", "gif", etc.). If you add additional extensions (including
    template information, etc.) to Sitecore's web.config file, you should comment them out below. 
    Otherwise the definitions in the web.config file might not work as expected. 
  
-->
<mediaType extensions="323">
<mimeType>text/h323</mimeType>
</mediaType>
<mediaType extensions="acx">
<mimeType>application/internet-property-stream</mimeType>
</mediaType>
<mediaType extensions="ai,eps,ps">
<mimeType>application/postscript</mimeType>
</mediaType>
<mediaType extensions="aif,aifc,aiff">
<mimeType>audio/x-aiff</mimeType>
</mediaType>
<mediaType extensions="asf,asr,asx">
<mimeType>video/x-ms-asf</mimeType>
</mediaType>
<mediaType extensions="au,snd">
<mimeType>audio/basic</mimeType>
</mediaType>
<!--

  <mediaType extensions="avi"><mimeType>video/x-msvideo</mimeType></mediaType>
  
-->
<mediaType extensions="axs">
<mimeType>application/olescript</mimeType>
</mediaType>
<mediaType extensions="bcpio">
<mimeType>application/x-bcpio</mimeType>
</mediaType>
<mediaType extensions="bin,class,dms,exe,lha,lzh">
<mimeType>application/octet-stream</mimeType>
</mediaType>
<!--

  <mediaType extensions="bmp,dib"><mimeType>image/bmp</mimeType></mediaType>
  
-->
<mediaType extensions="cat">
<mimeType>application/vnd.ms-pkiseccat</mimeType>
</mediaType>
<mediaType extensions="cdf">
<mimeType>application/x-cdf</mimeType>
</mediaType>
<mediaType extensions="cer,crt,der">
<mimeType>application/x-x509-ca-cert</mimeType>
</mediaType>
<mediaType extensions="clp">
<mimeType>application/x-msclip</mimeType>
</mediaType>
<mediaType extensions="cmx">
<mimeType>image/x-cmx</mimeType>
</mediaType>
<mediaType extensions="cod">
<mimeType>image/cis-cod</mimeType>
</mediaType>
<mediaType extensions="cpio">
<mimeType>application/x-cpio</mimeType>
</mediaType>
<mediaType extensions="crd">
<mimeType>application/x-mscardfile</mimeType>
</mediaType>
<mediaType extensions="crl">
<mimeType>application/pkix-crl</mimeType>
</mediaType>
<mediaType extensions="csh">
<mimeType>application/x-csh</mimeType>
</mediaType>
<mediaType extensions="css">
<mimeType>text/css</mimeType>
</mediaType>
<mediaType extensions="csv">
<mimeType>text/csv</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_excel.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="dcr,dir,dxr">
<mimeType>application/x-director</mimeType>
</mediaType>
<mediaType extensions="dll">
<mimeType>application/x-msdownload</mimeType>
</mediaType>
<mediaType extensions="dot">
<mimeType>application/msword</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_word.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="docm">
<mimeType>application/vnd.ms-word.document.macroEnabled.12</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_word.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="dotm">
<mimeType>application/vnd.ms-word.template.macroEnabled.12</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_word.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="dotx">
<mimeType>
application/vnd.openxmlformats-officedocument.wordprocessingml.template
</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_word.png</defaultThumbnailFile>
</mediaType>
<!--

  <mediaType extensions="docx"><mimeType>application/vnd.openxmlformats-officedocument.wordprocessingml.document</mimeType></mediaType>
  
-->
<mediaType extensions="dvi">
<mimeType>application/x-dvi</mimeType>
</mediaType>
<mediaType extensions="etx">
<mimeType>text/x-setext</mimeType>
</mediaType>
<mediaType extensions="evy">
<mimeType>application/envoy</mimeType>
</mediaType>
<!--

  <mediaType extensions="f4v"><mimeType>video/x-f4v</mimeType></mediaType>
  
-->
<mediaType extensions="fif">
<mimeType>application/fractals</mimeType>
</mediaType>
<mediaType extensions="flr,vrml,wrl,wrz,xaf,xof">
<mimeType>x-world/x-vrml</mimeType>
</mediaType>
<!--

  <mediaType extensions="flv"><mimeType>video/x-flv</mimeType></mediaType>
  <mediaType extensions="gif"><mimeType>image/gif</mimeType></mediaType>
  
-->
<mediaType extensions="gtar">
<mimeType>application/x-gtar</mimeType>
</mediaType>
<mediaType extensions="gz">
<mimeType>application/x-gzip</mimeType>
</mediaType>
<mediaType extensions="hdf">
<mimeType>application/x-hdf</mimeType>
</mediaType>
<mediaType extensions="hlp">
<mimeType>application/winhlp</mimeType>
</mediaType>
<mediaType extensions="hqx">
<mimeType>application/mac-binhex40</mimeType>
</mediaType>
<mediaType extensions="hta">
<mimeType>application/hta</mimeType>
</mediaType>
<mediaType extensions="htc">
<mimeType>text/x-component</mimeType>
</mediaType>
<!--

  <mediaType extensions="htm,html,stm"><mimeType>text/html</mimeType></mediaType>
  
-->
<mediaType extensions="htt">
<mimeType>text/webviewhtml</mimeType>
</mediaType>
<mediaType extensions="ico">
<mimeType>image/x-icon</mimeType>
</mediaType>
<mediaType extensions="ief">
<mimeType>image/ief</mimeType>
</mediaType>
<mediaType extensions="iii">
<mimeType>application/x-iphone</mimeType>
</mediaType>
<mediaType extensions="ins,isp">
<mimeType>application/x-internet-signup</mimeType>
</mediaType>
<mediaType extensions="jfif">
<mimeType>image/pipeg</mimeType>
</mediaType>
<!--

  <mediaType extensions="jpg,jpeg,jpe,jfif"><mimeType>image/jpeg</mimeType></mediaType>
  
-->
<mediaType extensions="js">
<mimeType>application/x-javascript</mimeType>
</mediaType>
<mediaType extensions="latex">
<mimeType>application/x-latex</mimeType>
</mediaType>
<mediaType extensions="lsf,lsx">
<mimeType>video/x-la-asf</mimeType>
</mediaType>
<mediaType extensions="m13,m14,mvb">
<mimeType>application/x-msmediaview</mimeType>
</mediaType>
<mediaType extensions="m3u">
<mimeType>audio/x-mpegurl</mimeType>
</mediaType>
<mediaType extensions="m4v">
<mimeType>video/mp4</mimeType>
</mediaType>
<mediaType extensions="man">
<mimeType>application/x-troff-man</mimeType>
</mediaType>
<mediaType extensions="mdb">
<mimeType>application/x-msaccess</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_access.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="me">
<mimeType>application/x-troff-me</mimeType>
</mediaType>
<mediaType extensions="mht,mhtml,nws">
<mimeType>message/rfc822</mimeType>
</mediaType>
<mediaType extensions="midi,mid,kar,rmi">
<mimeType>audio/midi</mimeType>
</mediaType>
<mediaType extensions="mny">
<mimeType>application/x-msmoney</mimeType>
</mediaType>
<!--

  <mediaType extensions="mov,qt"><mimeType>video/quicktime</mimeType></mediaType>
  
-->
<mediaType extensions="movie">
<mimeType>video/x-sgi-movie</mimeType>
</mediaType>
<!--

  <mediaType extensions="mp3"><mimeType>audio/mpeg</mimeType></mediaType>
  <mediaType extensions="mp4"><mimeType>video/mp4</mimeType></mediaType>
  <mediaType extensions="mpeg,mp2,mpa,mpe,mpg,mpv2"><mimeType>video/mpeg</mimeType></mediaType>
  
-->
<mediaType extensions="mpp">
<mimeType>application/vnd.ms-project</mimeType>
</mediaType>
<mediaType extensions="ms">
<mimeType>application/x-troff-ms</mimeType>
</mediaType>
<mediaType extensions="oda">
<mimeType>application/oda</mimeType>
</mediaType>
<mediaType extensions="odt">
<mimeType>application/vnd.oasis.opendocument.text</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_word.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="ogg">
<mimeType>video/ogg</mimeType>
</mediaType>
<mediaType extensions="p10">
<mimeType>application/pkcs10</mimeType>
</mediaType>
<mediaType extensions="p12,pfx">
<mimeType>application/x-pkcs12</mimeType>
</mediaType>
<mediaType extensions="p7b,spc">
<mimeType>application/x-pkcs7-certificates</mimeType>
</mediaType>
<mediaType extensions="p7c,p7m">
<mimeType>application/x-pkcs7-mime</mimeType>
</mediaType>
<mediaType extensions="p7r">
<mimeType>application/x-pkcs7-certreqresp</mimeType>
</mediaType>
<mediaType extensions="p7s">
<mimeType>application/x-pkcs7-signature</mimeType>
</mediaType>
<mediaType extensions="pbm">
<mimeType>image/x-portable-bitmap</mimeType>
</mediaType>
<!--

  <mediaType extensions="pdf"><mimeType>application/pdf</mimeType></mediaType>
  
-->
<mediaType extensions="pgm">
<mimeType>image/x-portable-graymap</mimeType>
</mediaType>
<mediaType extensions="pko">
<mimeType>application/ynd.ms-pkipko</mimeType>
</mediaType>
<mediaType extensions="pma,pmc,pml,pmr,pmw">
<mimeType>application/x-perfmon</mimeType>
</mediaType>
<!--

  <mediaType extensions="png"><mimeType>image/png</mimeType></mediaType>
  
-->
<mediaType extensions="pnm">
<mimeType>image/x-portable-anymap</mimeType>
</mediaType>
<mediaType extensions="potm">
<mimeType>
application/vnd.ms-powerpoint.template.macroEnabled.12
</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_powerpoint.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="potx">
<mimeType>
application/vnd.openxmlformats-officedocument.presentationml.template
</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_powerpoint.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="ppam">
<mimeType>
application/vnd.ms-powerpoint.addin.macroEnabled.12
</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_powerpoint.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="ppm">
<mimeType>image/x-portable-pixmap</mimeType>
</mediaType>
<mediaType extensions="ppa,ppt,pot,pps">
<mimeType>application/vnd.ms-powerpoint</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_powerpoint.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="ppsm">
<mimeType>
application/vnd.ms-powerpoint.slideshow.macroEnabled.12
</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_powerpoint.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="ppsx">
<mimeType>
application/vnd.openxmlformats-officedocument.presentationml.slideshow
</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_powerpoint.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="pptm">
<mimeType>
application/vnd.ms-powerpoint.presentation.macroEnabled.12
</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_powerpoint.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="prf">
<mimeType>application/pics-rules</mimeType>
</mediaType>
<mediaType extensions="pub">
<mimeType>application/x-mspublisher</mimeType>
</mediaType>
<mediaType extensions="ra,ram,rm">
<mimeType>audio/x-pn-realaudio</mimeType>
</mediaType>
<mediaType extensions="ras">
<mimeType>image/x-cmu-raster</mimeType>
</mediaType>
<mediaType extensions="rgb">
<mimeType>image/x-rgb</mimeType>
</mediaType>
<mediaType extensions="roff,t,tr">
<mimeType>application/x-troff</mimeType>
</mediaType>
<mediaType extensions="rtf">
<mimeType>application/rtf</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_rtf.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="rtx">
<mimeType>text/richtext</mimeType>
</mediaType>
<mediaType extensions="scd">
<mimeType>application/x-msschedule</mimeType>
</mediaType>
<mediaType extensions="sct">
<mimeType>text/scriptlet</mimeType>
</mediaType>
<mediaType extensions="setpay">
<mimeType>application/set-payment-initiation</mimeType>
</mediaType>
<mediaType extensions="setreg">
<mimeType>application/set-registration-initiation</mimeType>
</mediaType>
<mediaType extensions="sgml,sgm">
<mimeType>text/sgml</mimeType>
</mediaType>
<mediaType extensions="sh">
<mimeType>application/x-sh</mimeType>
</mediaType>
<mediaType extensions="shar">
<mimeType>application/x-shar</mimeType>
</mediaType>
<mediaType extensions="sit">
<mimeType>application/x-stuffit</mimeType>
</mediaType>
<mediaType extensions="spl">
<mimeType>application/futuresplash</mimeType>
</mediaType>
<mediaType extensions="src">
<mimeType>application/x-wais-source</mimeType>
</mediaType>
<mediaType extensions="sst">
<mimeType>application/vnd.ms-pkicertstore</mimeType>
</mediaType>
<mediaType extensions="stl">
<mimeType>application/vnd.ms-pkistl</mimeType>
</mediaType>
<mediaType extensions="sv4cpio">
<mimeType>application/x-sv4cpio</mimeType>
</mediaType>
<mediaType extensions="sv4crc">
<mimeType>application/x-sv4crc</mimeType>
</mediaType>
<!--

  <mediaType extensions="swf"><mimeType>application/x-shockwave-flash</mimeType></mediaType>
  
-->
<mediaType extensions="tar">
<mimeType>application/x-tar</mimeType>
</mediaType>
<mediaType extensions="tcl">
<mimeType>application/x-tcl</mimeType>
</mediaType>
<mediaType extensions="tex">
<mimeType>application/x-tex</mimeType>
</mediaType>
<mediaType extensions="texi,texinfo">
<mimeType>application/x-texinfo</mimeType>
</mediaType>
<mediaType extensions="tgz">
<mimeType>application/x-compressed</mimeType>
</mediaType>
<!--

  <mediaType extensions="tif,tiff"><mimeType>image/tiff</mimeType></mediaType>
  
-->
<mediaType extensions="trm">
<mimeType>application/x-msterminal</mimeType>
</mediaType>
<mediaType extensions="tsv">
<mimeType>text/tab-separated-values</mimeType>
</mediaType>
<mediaType extensions="txt,asc,bas,c,h">
<mimeType>text/plain</mimeType>
</mediaType>
<mediaType extensions="uls">
<mimeType>text/iuls</mimeType>
</mediaType>
<mediaType extensions="ustar">
<mimeType>application/x-ustar</mimeType>
</mediaType>
<mediaType extensions="vcf">
<mimeType>text/x-vcard</mimeType>
</mediaType>
<mediaType extensions="wav">
<mimeType>audio/x-wav</mimeType>
</mediaType>
<mediaType extensions="wcm,wdb,wks,wps">
<mimeType>application/vnd.ms-works</mimeType>
</mediaType>
<mediaType extensions="wmf">
<mimeType>application/x-msmetafile</mimeType>
</mediaType>
<!--

  <mediaType extensions="wmv"><mimeType>video/x-ms-wmv</mimeType></mediaType>
  
-->
<mediaType extensions="wri">
<mimeType>application/x-mswrite</mimeType>
</mediaType>
<mediaType extensions="xbm">
<mimeType>image/x-xbitmap</mimeType>
</mediaType>
<mediaType extensions="xls,xla,xlc,xlm,xlt,xlw">
<mimeType>application/vnd.ms-excel</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_excel.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="xlam">
<mimeType>application/vnd.ms-excel.addin.macroEnabled.12</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_excel.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="xlsb">
<mimeType>
application/vnd.ms-excel.sheet.binary.macroEnabled.12
</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_excel.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="xlsm">
<mimeType>application/vnd.ms-excel.sheet.macroEnabled.12</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_excel.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="xltm">
<mimeType>application/vnd.ms-excel.template.macroEnabled.12</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_excel.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="xltx">
<mimeType>
application/vnd.openxmlformats-officedocument.spreadsheetml.template
</mimeType>
<defaultThumbnailFile>WordProcessing/32x32/imp_exp_excel.png</defaultThumbnailFile>
</mediaType>
<mediaType extensions="xml">
<mimeType>text/xml</mimeType>
</mediaType>
<mediaType extensions="xpm">
<mimeType>image/x-xpixmap</mimeType>
</mediaType>
<mediaType extensions="xwd">
<mimeType>image/x-xwindowdump</mimeType>
</mediaType>
<mediaType extensions="z">
<mimeType>application/x-compress</mimeType>
</mediaType>
<!--

  <mediaType extensions="zip"><mimeType>application/zip</mimeType></mediaType>
  
-->
</mediaTypes>
<watcher>
<ignoreList>
<ignore contains="icon16x16"/>
<ignore contains="icon32x32"/>
<ignore contains="icon48x48"/>
<ignore contains="_thumb"/>
<ignorepath contains=".svn"/>
</ignoreList>
</watcher>
<requestProtection patch:source="Sitecore.Media.RequestProtection.config">
<!--
  IGNORE SITES
              Specifies a list of site names for which the media protection module should not sign image ULRs with a hash value. When
              Sitecore processes an incoming media request for these sites, it does not check if there is a valid hash value.
        
-->
<ignoreSites>
<site name="shell"/>
<site name="login"/>
<site name="admin"/>
<site name="service"/>
<site name="scheduler"/>
<site name="system"/>
<site name="publisher"/>
</ignoreSites>
<!--
  PROTECTED MEDIA QUERY PARAMETERS
              Specifies a list of parameters that are used to calculate hash values for media requests. 
              The list of parameters is used when the module calculates hash values and appends them to the query strings of the generated
              media URLs, and when the hash values are calculated for incoming media requests and compared to the expected hash values.
              You should add any custom image scaling parameters to this setting if these parameters affect the dimensions or file size of
              dynamically resized images.
        
-->
<protectedMediaQueryParameters>
<parameter name="w" description="width"/>
<parameter name="h" description="height"/>
<parameter name="mw" description="max width"/>
<parameter name="mh" description="max height"/>
<parameter name="sc" description="scale"/>
<parameter name="as" description="allow stretch"/>
<parameter name="bc" description="background color"/>
<parameter name="db" description="database name"/>
<parameter name="iar" description="ignore aspect ratio"/>
<parameter name="la" description="language code"/>
<parameter name="thn" description="thumbnail"/>
<parameter name="vs" description="version number"/>
<parameter name="sc_content" description="content database"/>
<parameter name="sc_lang" description="content language name"/>
<parameter name="sc_site" description="context site"/>
<parameter name="gray" description="grayscale filter"/>
<parameter name="rev" description="media revision"/>
</protectedMediaQueryParameters>
</requestProtection>
</mediaLibrary>
<!--  RENDERING  -->
<rendering>
<typesThatShouldNotBeExpanded>
<type>System.Web.UI.WebControls.Repeater</type>
<type>System.Web.UI.WebControls.DataList</type>
<type>System.Web.UI.WebControls.GridView</type>
<type>System.Web.UI.WebControls.ListView</type>
<type>System.Web.UI.WebControls.FormView</type>
<type>Microsoft.Reporting.WebForms.ReportViewer</type>
<type>Telerik.Web.UI.RadGrid</type>
</typesThatShouldNotBeExpanded>
</rendering>
<!--  ICONS  -->
<icons>
<collection name="Applications">
Applications/16x16/document.png| Applications/16x16/folder.png| Applications/16x16/copy.png| Applications/16x16/document_plain.png| Applications/16x16/edit.png| Applications/16x16/find.png| Applications/16x16/form_blue.png| Applications/16x16/form_green.png| Applications/16x16/form_red.png| Applications/16x16/form_yellow.png| Applications/16x16/gear.png| Applications/16x16/gears.png| Applications/16x16/music.png| Applications/16x16/notebook.png| Applications/16x16/photo_portrait.png| Applications/16x16/photo_scenery.png| Applications/16x16/preferences.png| Applications/16x16/scroll.png| Applications/16x16/star_blue.png| Applications/16x16/star_green.png| Applications/16x16/star_grey.png| Applications/16x16/star_red.png| Applications/16x16/star_yellow.png
</collection>
<collection name="Business">
Business/16x16/address_book.png| Business/16x16/address_book2.png| Business/16x16/briefcase.png| Business/16x16/briefcase2.png| Business/16x16/data.png| Business/16x16/cabinet.png| Business/16x16/calendar.png| Business/16x16/chart.png| Business/16x16/date-time.png| Business/16x16/funnel.png| Business/16x16/index.png| Business/16x16/message.png| Business/16x16/note.png| Business/16x16/paperclip.png| Other/16x16/at.png| Business/16x16/paragraph.png| Business/16x16/percent.png| Business/16x16/shoppingbasket.png| Business/16x16/shoppingcart.png
</collection>
<collection name="Networking">
Network/16x16/certificate.png| Network/16x16/download.png| Network/16x16/earth.png| Network/16x16/earth2.png| Network/16x16/environment.png| Network/16x16/home.png| Network/16x16/id_card.png| Network/16x16/inbox.png| Network/16x16/key1.png| Network/16x16/link.png| Network/16x16/lock.png| Network/16x16/mail.png| Network/16x16/server.png| Network/16x16/shield.png
</collection>
<collection name="Objects">
People/16x16/alarmclock.png| People/16x16/book_blue.png| People/16x16/books.png| People/16x16/box.png| People/16x16/brush3.png| People/16x16/clock.png| People/16x16/colors.png| People/16x16/cube_blue.png| People/16x16/cube_green.png| People/16x16/cube_yellow.png| People/16x16/cubes.png| People/16x16/cubes_blue.png| People/16x16/cubes_green.png| People/16x16/cubes_yellow.png| Software/16x16/component.png| Software/16x16/component_green.png| Software/16x16/component_red.png| Software/16x16/component_yellow.png| Software/16x16/components.png| People/16x16/flower_blue.png| Applications/16x16/heart.png| People/16x16/hourglass.png| Applications/16x16/lightbulb_on.png| People/16x16/masks.png| People/16x16/medal.png| People/16x16/monitor.png| People/16x16/movie.png| People/16x16/palette.png| People/16x16/pawn_glass_blue.png| People/16x16/pda.png| People/16x16/pencil.png| People/16x16/printer.png| People/16x16/workstation1.png| People/16x16/yinyang.png
</collection>
<collection name="People">
People/16x16/user1.png| People/16x16/user2.png| People/16x16/user3.png| People/16x16/users1.png| People/16x16/users2.png| People/16x16/users3.png| People/16x16/dude1.png| People/16x16/dude2.png| People/16x16/dude3.png| People/16x16/dude4.png| People/16x16/dude5.png| other/16x16/woman1.png| other/16x16/woman2.png| other/16x16/woman3.png| other/16x16/woman4.png| People/16x16/worker.png| People/16x16/magician.png| People/16x16/policeman_bobby.png| People/16x16/policeman_german.png| People/16x16/policeman_usa.png| Network/16x16/security_agent.png| Network/16x16/spy.png| People/16x16/pilot1.png| People/16x16/pilot2.png| People/16x16/angel.png| People/16x16/ghost.png
</collection>
</icons>
<!--  PORTRAITS  -->
<portraits>
<collection name="Applications">
Office/48x48/default_user.png| Office/48x48/man_1.png| Office/48x48/man_2.png| Office/48x48/man_3.png| Office/48x48/man_4.png| Office/48x48/man_5.png| Office/48x48/man_6.png| Office/48x48/man_7.png| Office/48x48/man_8.png| Office/48x48/woman_1.png| Office/48x48/woman_2.png| Office/48x48/woman_3.png| Office/48x48/woman_4.png| Office/48x48/woman_5.png| Office/48x48/woman_6.png| Office/48x48/woman_7.png| Office/48x48/woman_8.png
</collection>
</portraits>
<!--  PUBLISHING  -->
<publishing>
<smartPublishTriggers>
<trigger templateId="{AB86861A-6030-46C5-B394-E8F99E8B87DB}" note="template"/>
<trigger templateId="{455A3E98-A627-4B40-8035-E683A0331AC7}" note="template field"/>
</smartPublishTriggers>
</publishing>
<!--
 FILE WATCHERS
      Define configuration of the FileWatchers.
      Allowed nodes for child nodes:
        folder:     defines configuration of folder to watch. You can define the folder either as a value of the node
                    or as a reference to some other element inside sitecore element.
                    The folder node is required.
                    Only 1 element is allowed.
        filter:     defines file filter configuration. You can define the folder either as a value of the node
                    or as a reference to some other element inside sitecore element.
                    The filter node is required.
                    More than 1 element is allowed.
        ignore:     defines file or folder ingore filter. For example it could be  equal  to ".svn|.cvs"  in order to filter files that related to a versioning system.
                    This node is optional.
                    More than 1 element is allowed.
    
-->
<watchers>
<media>
<folder ref="settings/setting[@name='MediaFolder']/@value"/>
<filter>*</filter>
</media>
<xsl>
<folder>/xsl</folder>
<filter>*.xslt</filter>
</xsl>
<layout>
<folder ref="settings/setting[@name='LayoutFolder']/@value"/>
<filter>*</filter>
</layout>
<config>
<folder>/App_Config</folder>
<filter>*.config</filter>
</config>
</watchers>
<log4net>
<!--
 LOGGING SETTINGS
         The file element defines the location of the log files. This location must
         be the same as the setting in LogFolder. The file element is a relative or
         absolute path that always uses slashes (/) as separators. A valid file
         element for a relative path would be:

           <file value="/data/logs/log.{date}.{processid}.txt"/>

         A valid element for an absolute path would be:

           <file value="C:/inetpub/wwwroot/data/logs/log.{date}.{processid}.txt"/>

         The macros supported are:

           {date}: Replaced with the current date (in the format yyyyMMdd)
           {time}: Replaced with the current time (in the format HHmmss)
           {processid}: Replaced with the current Windows process id

         For further information refer to the Log4Net documentation.
    
-->
<appender name="LogFileAppender" type="log4net.Appender.RollingFileAppender, Sitecore.Logging">
<file value="/App_Data/logs/log.{date}.{time}.txt"/>
<appendToFile value="true"/>
<rollingStyle value="Size"/>
<maxSizeRollBackups value="-1"/>
<maximumFileSize value="10MB"/>
<layout type="log4net.Layout.PatternLayout">
<conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n"/>
</layout>
<encoding value="utf-8"/>
</appender>
<appender name="WebDAVLogFileAppender" type="log4net.Appender.SitecoreLogFileAppender, Sitecore.Logging">
<file value="/App_Data/logs/WebDAV.log.{date}.{time}.txt"/>
<appendToFile value="true"/>
<layout type="log4net.Layout.PatternLayout">
<conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n"/>
</layout>
<encoding value="utf-8"/>
</appender>
<appender name="PublishingLogFileAppender" type="log4net.Appender.SitecoreLogFileAppender, Sitecore.Logging">
<file value="/App_Data/logs/Publishing.log.{date}.{time}.txt"/>
<appendToFile value="true"/>
<layout type="log4net.Layout.PatternLayout">
<conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n"/>
</layout>
<encoding value="utf-8"/>
</appender>
<root>
<priority value="INFO"/>
<appender-ref ref="LogFileAppender"/>
<appender-ref ref="AzureFallbackAppender" desc="AzureFallbackAppender" patch:source="Sitecore.ExperienceContentManagement.Administration.config"/>
</root>
<logger name="Sitecore.Diagnostics.WebDAV" additivity="false">
<level value="INFO"/>
<appender-ref ref="WebDAVLogFileAppender"/>
</logger>
<logger name="Sitecore.Diagnostics.Publishing" additivity="false" patch:source="Sitecore.ExperienceContentManagement.Administration.config">
<level value="INFO"/>
<appender-ref ref="PublishingLogFileAppender"/>
<appender-ref ref="AzureFallbackAppender" desc="AzureFallbackAppender" patch:source="Sitecore.ExperienceContentManagement.Administration.config"/>
</logger>
<appender name="ClientLogAppender" type="log4net.Appender.SitecoreLogFileAppender, Sitecore.Logging" patch:source="Sitecore.JSNLog.config">
<file value="/App_Data/logs/Client.log.{date}.{time}.txt"/>
<appendToFile value="true"/>
<layout type="log4net.Layout.PatternLayout">
<conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n"/>
</layout>
<encoding value="utf-8"/>
</appender>
<logger name="ClientRoot" additivity="false" patch:source="Sitecore.ExperienceContentManagement.Administration.config">
<level value="INFO"/>
<appender-ref ref="ClientLogAppender"/>
<appender-ref ref="AzureFallbackAppender" desc="AzureFallbackAppender" patch:source="Sitecore.ExperienceContentManagement.Administration.config"/>
</logger>
<appender name="SearchLogFileAppender" type="log4net.Appender.SitecoreLogFileAppender, Sitecore.Logging" patch:source="Sitecore.ContentSearch.config">
<file value="/App_Data/logs/Search.log.{date}.{time}.txt"/>
<appendToFile value="true"/>
<layout type="log4net.Layout.PatternLayout">
<conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n"/>
</layout>
<encoding value="utf-8"/>
</appender>
<appender name="CrawlingLogFileAppender" type="log4net.Appender.SitecoreLogFileAppender, Sitecore.Logging" patch:source="Sitecore.ContentSearch.config">
<file value="/App_Data/logs/Crawling.log.{date}.{time}.txt"/>
<appendToFile value="true"/>
<layout type="log4net.Layout.PatternLayout">
<conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n"/>
</layout>
<encoding value="utf-8"/>
</appender>
<logger name="Sitecore.Diagnostics.Search" additivity="false" patch:source="Sitecore.ExperienceContentManagement.Administration.config">
<level value="INFO"/>
<appender-ref ref="SearchLogFileAppender"/>
<appender-ref ref="AzureFallbackAppender" desc="AzureFallbackAppender" patch:source="Sitecore.ExperienceContentManagement.Administration.config"/>
</logger>
<logger name="Sitecore.Diagnostics.Crawling" additivity="false" patch:source="Sitecore.ExperienceContentManagement.Administration.config">
<level value="INFO"/>
<appender-ref ref="CrawlingLogFileAppender"/>
<appender-ref ref="AzureFallbackAppender" desc="AzureFallbackAppender" patch:source="Sitecore.ExperienceContentManagement.Administration.config"/>
</logger>
<appender name="OwinLogFileAppender" type="log4net.Appender.RollingFileAppender, Sitecore.Logging" patch:source="Sitecore.Owin.config">
<file value="/App_Data/logs/Owin.log.{date}.{time}.txt"/>
<appendToFile value="true"/>
<rollingStyle value="Size"/>
<maxSizeRollBackups value="-1"/>
<maximumFileSize value="10MB"/>
<layout type="log4net.Layout.PatternLayout">
<conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n"/>
</layout>
<encoding value="utf-8"/>
</appender>
<logger name="Sitecore.Owin.Diagnostics" additivity="false" patch:source="Sitecore.ExperienceContentManagement.Administration.config">
<level value="INFO"/>
<appender-ref ref="OwinLogFileAppender"/>
<appender-ref ref="AzureFallbackAppender" desc="AzureFallbackAppender" patch:source="Sitecore.ExperienceContentManagement.Administration.config"/>
</logger>
<appender name="AggregationLogFileAppender" type="log4net.Appender.SitecoreLogFileAppender, Sitecore.Logging" patch:source="Sitecore.Analytics.Processing.Aggregation.config">
<file value="/App_Data/logs/Aggregation.log.{date}.{time}.txt"/>
<appendToFile value="true"/>
<layout type="log4net.Layout.PatternLayout">
<conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n"/>
</layout>
<encoding value="utf-8"/>
</appender>
<logger name="Sitecore.Analytics.Aggregation" additivity="false" patch:source="Sitecore.Analytics.Processing.Aggregation.config">
<level value="INFO"/>
<appender-ref ref="AggregationLogFileAppender"/>
</logger>
<appender name="ContactMergeLogFileAppender" type="log4net.Appender.SitecoreLogFileAppender, Sitecore.Logging" patch:source="Sitecore.Xdb.Processing.ContactMerge.config">
<file value="/App_Data/logs/contactMergeDataUpgrade.log.{date}.txt"/>
<appendToFile value="true"/>
<layout type="log4net.Layout.PatternLayout">
<conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n"/>
</layout>
<encoding value="utf-8"/>
</appender>
<logger name="Sitecore.Xdb.Processing.ContactMerge.Logger" additivity="false" patch:source="Sitecore.Xdb.Processing.ContactMerge.config">
<level value="WARN"/>
<appender-ref ref="ContactMergeLogFileAppender"/>
</logger>
<!--
  AZURE FALLBACK APPENDER
            The appender is only designed to work in Azure PaaS environment to be used by automatic diagnostics and support package collection tools.
            The Azure environment is detected automatically, otherwise the appender is disabled.
      
-->
<appender name="AzureFallbackAppender" type="Sitecore.ExperienceContentManagement.Administration.Logging.AzureFallbackAppender, Sitecore.ExperienceContentManagement.Administration" patch:source="Sitecore.ExperienceContentManagement.Administration.config">
<file value="/App_Data/logs/{machineName}/azure.log.{date}.{time}.txt"/>
<appendToFile value="true"/>
<rollingStyle value="Size"/>
<maxSizeRollBackups value="-1"/>
<maximumFileSize value="10MB"/>
<immediateFlush value="false"/>
<layout type="log4net.Layout.PatternLayout">
<conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n"/>
</layout>
<encoding value="utf-8"/>
</appender>
<logger name="Sitecore.FXM.Diagnostics" patch:source="Sitecore.FXM.config" additivity="false">
<appender-ref ref="AzureFallbackAppender" desc="AzureFallbackAppender"/>
<level value="INFO" patch:source="Sitecore.FXM.config"/>
<appender-ref ref="FxmLogFileAppender" patch:source="Sitecore.FXM.config"/>
</logger>
<logger name="Sitecore.EDS" patch:source="Sitecore.EDS.Core.config" additivity="false">
<appender-ref ref="AzureFallbackAppender" desc="AzureFallbackAppender"/>
<level value="INFO" patch:source="Sitecore.EDS.Core.config"/>
<appender-ref ref="EdsLogFileAppender" patch:source="Sitecore.EDS.Core.config"/>
</logger>
<logger name="Sitecore.EXM" patch:source="Sitecore.EmailExperience.Core.config" additivity="false">
<appender-ref ref="AzureFallbackAppender" desc="AzureFallbackAppender"/>
<level value="INFO" patch:source="Sitecore.EmailExperience.Core.config"/>
<appender-ref ref="ExmLogFileAppender" patch:source="Sitecore.EmailExperience.Core.config"/>
</logger>
<appender name="FxmLogFileAppender" type="log4net.Appender.SitecoreLogFileAppender, Sitecore.Logging" patch:source="Sitecore.FXM.config">
<file value="/App_Data/logs/Fxm.log.{date}.{time}.txt"/>
<appendToFile value="true"/>
<layout type="log4net.Layout.PatternLayout">
<conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n"/>
</layout>
<encoding value="utf-8"/>
</appender>
<appender name="EdsLogFileAppender" type="log4net.Appender.SitecoreLogFileAppender, Sitecore.Logging" patch:source="Sitecore.EDS.Core.config">
<file value="/App_Data/logs/Eds.log.{date}.txt"/>
<appendToFile value="true"/>
<layout type="log4net.Layout.PatternLayout">
<conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n"/>
</layout>
<encoding value="utf-8"/>
</appender>
<appender name="ExmLogFileAppender" type="log4net.Appender.SitecoreLogFileAppender, Sitecore.Logging" patch:source="Sitecore.EmailExperience.Core.config">
<file value="/App_Data/logs/Exm.log.{date}.txt"/>
<appendToFile value="true"/>
<layout type="log4net.Layout.PatternLayout">
<conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n"/>
</layout>
<encoding value="utf-8"/>
</appender>
</log4net>
<!--  SIMPLE SETTINGS  -->
<!--  SETTINGS  -->
<!--  Max length of experience profile search  -->
<!--  SETTINGS  -->
<settings>
<!--
  ALIASES
            Turn the following setting on to use aliases
      
-->
<setting name="AliasesActive" value="true"/>
<!--
  ALLOW LOGOUT OF ALL USERS
            Indicates if the logout screen presents all users or
            just users with the same name
      
-->
<setting name="AllowLogoutOfAllUsers" value="false"/>
<!--
  ALLOW DUPLICATE ITEM NAMES ON THE SAME LEVEL
          Specifies whether the duplicate item names are allowed on the same level in the content tree.
          Default value: true
    
-->
<setting name="AllowDuplicateItemNamesOnSameLevel" value="true"/>
<!--
  ALLOW PREVIEW OF RULES EXECUTION RESULTS
            Indicates if preview of rules execution results is allowed.
            Default value: true
      
-->
<setting name="AllowPreviewOfRulesExecutionResults" value="true"/>
<!--
  QUERY STRINGS IN URL RENDERINGS
            If this setting is true, all the query strings of the main page is passed
            to all url renderings
      
-->
<setting name="AppendQSToUrlRendering" value="true"/>
<!--
  AUTHENTICATION CLIENT SESSION TIMEOUT
            Specifies the number of minutes before Sitecore considers user authentication session tickets as expired.
            This setting is only relevant for users logging in to Sitecore Client and when the Sitecore license has a limited number
            of concurrent editors. 
            All expired sessions will automatically be removed when a new user tries to log in and the maximum
            number of concurrent editors has been reached. 
            The default is 60 minutes (1 hour).
      
-->
<setting name="Authentication.ClientSessionTimeout" value="60"/>
<!--
  PHYSICAL MEMBERSHIP WILDCARD
            Specifies the default membership wildcard used by the providers.
            Default: %
      
-->
<setting name="Authentication.DefaultMembershipProviderWildcard" value="%"/>
<!--
  SAVE RAW URL ON LOGIN
            Specifies whether the original request URL is passed to the login page
            (saved in 'url' query string parameter).
            Default: false
      
-->
<setting name="Authentication.SaveRawUrl" value="false"/>
<!--
  VIRTUAL MEMBERSHIP WILDCARD
            Specifies the membership wildcard to use in high level code.
            Default: *
      
-->
<setting name="Authentication.VirtualMembershipWildcard" value="*"/>
<!--
  CLIENT PERSISTENT LOGIN DURATION
            Specifies the number of days before client "remember me" information
            expires. The default is 180 days.
      
-->
<setting name="Authentication.ClientPersistentLoginDuration" value="180"/>
<!--
  AUTOMATIC DATA BIND
            Indicates if the data bind function is run automatically
      
-->
<setting name="AutomaticDataBind" value="false"/>
<!--
  AUTOMATIC LOCK ON SAVE
            If true, the a lock is automatically taken on an item
            when a user saves the item.
      
-->
<setting name="AutomaticLockOnSave" value="false"/>
<!--
  AUTOMATIC UNLOCK ON SAVED
            If true, the a saved item is automatically unlocked after
            saving.
      
-->
<setting name="AutomaticUnlockOnSaved" value="false"/>
<!--
  BEGIN REQUEST ON POST AUTHENTICATE
            If true, then httpRequestBegin pipeline is executed on PostAuthenticateRequest event.
            If false, then httpRequestBegin pipeline is executed on BeginRequest event.
            Default: true.
      
-->
<setting name="BeginRequestOnPostAuthenticate" value="true"/>
<!--
  ACCESS RESULT CACHE SIZE
            Determines the size of the access result cache.
            Specify the value in bytes or append the value with KB, MB or GB
            A value of 0 (zero) disables the cache.
      
-->
<setting name="Caching.AccessResultCacheSize" value="10MB"/>
<!--
  AVERAGE ITEM SIZE
            The average size of an item in bytes (used when caching items).
            Default: 5000
      
-->
<setting name="Caching.AverageItemSize" value="5000"/>
<!--
  CACHE VIEWSTATE
            Indicates if ViewState is cached.
            Set this to false to ease memory pressure. See also Caching.DefaultViewStateCacheSize.
      
-->
<setting name="Caching.CacheViewState" value="true"/>
<!--
  CLIENT DATA CACHE SIZE
            Determines the default size of the client data cache of a database
            Specify the value in bytes or append the value with KB, MB or GB
      
-->
<setting name="Caching.DefaultClientDataCacheSize" value="25MB"/>
<!--
  DATA CACHE SIZE
            Determines the default size of the data cache of a database
            Specify the value in bytes or append the value with KB, MB or GB
      
-->
<setting name="Caching.DefaultDataCacheSize" value="50MB"/>
<!--
  FILTERED ITEMS CACHE SIZE
            Determines the default size of the filtered items cache of a site
            Specify the value in bytes or append the value with KB, MB or GB
            A value of 0 (zero) disables the cache by default.
            Default value: 2MB
      
-->
<setting name="Caching.DefaultFilteredItemsCacheSize" value="10MB"/>
<!--
  HTML CACHE SIZE
            Determines the default size of the html cache of a site
            Specify the value in bytes or append the value with KB, MB or GB
      
-->
<setting name="Caching.DefaultHtmlCacheSize" value="25MB"/>
<!--
  ITEM PATHS CACHE SIZE
            Determines the default size of the item paths cache of a database
            Specify the value in bytes or append the value with KB, MB or GB
      
-->
<setting name="Caching.DefaultItemPathsCacheSize" value="50MB"/>
<!--
  PATH CACHE SIZE
            Determines the default size of the path cache of a database
            Specify the value in bytes or append the value with KB, MB or GB
      
-->
<setting name="Caching.DefaultPathCacheSize" value="500KB"/>
<!--
  REGISTRY CACHE SIZE
            Determines the default size of the registry cache of a site
            Specify the value in bytes or append the value with KB, MB or GB
      
-->
<setting name="Caching.DefaultRegistryCacheSize" value="25MB"/>
<!--
  VIEWSTATE CACHE SIZE
            Determines the default size of the viewstate cache of a site
            Specify the value in bytes or append the value with KB, MB or GB
      
-->
<setting name="Caching.DefaultViewStateCacheSize" value="25MB"/>
<!--
  XSL CACHE SIZE
            Determines the default size of the xsl cache of a site
            Specify the value in bytes or append the value with KB, MB or GB
      
-->
<setting name="Caching.DefaultXslCacheSize" value="50MB"/>
<!--
  CACHING - DISABLE CACHE SIZE LIMITS
            If true, Sitecore does not limit cache size growth and ignores any maximum cache sizes 
            specified in the web.config file.            
            Enabling this setting can improve the application's performance in 64-bit environments 
            by allowing Sitecore to take full advantage of the available memory.
            After setting this value to true, monitor the system at regular intervals, as this 
            configuration can cause Sitecore to consume too much memory and cause Out Of Memory errors.
            It is only recommended to set the setting to true in 64-bit environments.
            Default value: false
      
-->
<setting name="Caching.DisableCacheSizeLimits" value="false"/>
<!--
  CACHING ENABLED
            Determines if caching should be enabled at all
            Specify 'true' to enable caching and 'false' to disable all caching
      
-->
<setting name="Caching.Enabled" value="true"/>
<!--
  FAST MEDIA CACHE MAP SIZE
            Determines the size of the fast media cache map cache.
            Specify the value in bytes or append the value with KB, MB or GB
      
-->
<setting name="Caching.FastMediaCacheMapSize" value="1MB"/>
<!--
  HTML LIFETIME
            The lifetime of HTML fragments added to the cache.
            Default value: 00:00:00 (ie. eternal life)
      
-->
<setting name="Caching.HtmlLifetime" value="00:00:00"/>
<!--
  ISUSERINROLE CACHE SIZE
            Determines the size of the IsInRole cache, which improves the
            performance of security providers by caching user/role relationships.
            Specify the value in bytes or append the value with KB, MB or GB
            Default value: 1MB.
      
-->
<setting name="Caching.IsUserInRoleCacheSize" value="5MB"/>
<!--
  CACHING - CACHE KEY INDEXING ENABLED - ACCESS RESULT CACHE
            Determines whether or not the system uses extended indexed storage for the cache keys of the AccessResultCache.
            
            Using indexed storage for cache keys can in certain scenarios significantly reduce the time it takes to perform partial cache
            clearing of the AccessResultCache. This setting is useful on large solutions where the size of this cache is very large and
            where partial cache clearing causes a measurable overhead.
            However, enabling this setting on content management servers with many editors and many content items can degrade performance.
            Default value: false
      
-->
<setting name="Caching.CacheKeyIndexingEnabled.AccessResultCache" value="false"/>
<!--
  CACHING - CACHE KEY INDEXING ENABLED - ITEM CACHE
            Determines whether or not the system uses extended indexed storage for the cache keys of the ItemCache.
            
            Using indexed storage for cache keys can in certain scenarios significantly reduce the time it takes to perform partial cache
            clearing of the ItemCache. This setting is useful on large solutions where the size of this cache is very large and where
            partial cache clearing causes a measurable overhead.
            However, enabling this setting on content management servers with many editors, many languages, and/or many versions can degrade
            performance.
            Default value: false
      
-->
<setting name="Caching.CacheKeyIndexingEnabled.ItemCache" value="false"/>
<!--
  CACHING - CACHE KEY INDEXING ENABLED - ITEM PATHS CACHE
            Determines whether or not the system uses extended indexed storage for the cache keys of the ItemPathsCache.
            
            Using indexed storage for cache keys can in certain scenarios significantly reduce the time it takes to perform partial cache
            clearing of the ItemPathsCache. This setting is useful on large solutions where the size of this cache is very large and where
            partial cache clearing causes a measurable overhead.
            However, enabling this setting on content management servers with many editors, many languages, and/or many content items can
            degrade performance.
            Default value: false
      
-->
<setting name="Caching.CacheKeyIndexingEnabled.ItemPathsCache" value="false"/>
<!--
  CACHING - CACHE KEY INDEXING ENABLED - PATH CACHE
            Determines whether or not the system uses extended indexed storage for cache keys of the PathCache.
            
            Using indexed storage for PathCache keys insignificantly slows adding item paths to the PathCache. However, it can drastically reduce
            the time it takes to perform partial cache clearing of the PathCache. This setting is useful on large solutions where items are frequently
            renamed, moved, copied and deleted.
            Default value: false
      
-->
<setting name="Caching.CacheKeyIndexingEnabled.PathCache" value="false"/>
<!--
  ITEM CACHING ENABLED
            Determines if caching of items should be enabled
            Specify 'true' to enable caching and 'false' to disable
      
-->
<setting name="Caching.ItemCachingEnabled" value="true"/>
<!--
  LOAD FACTOR
            The default load factor to use for cached values.
            The size of all cached values are multiplied with this value before being added to the cache.
      
-->
<setting name="Caching.LoadFactor" value="1.0"/>
<!--
  MAXIMUM LOAD FACTOR
            The maximum load factor to use for cached values.
            The load factor might be increased up to this value during heavy memory load.
      
-->
<setting name="Caching.MaxLoadFactor" value="3.0"/>
<!--
  SCAVENGE INTERVAL
            Determines how often scavengable caches are scavenged.
            Default value: 3 minutes.
      
-->
<setting name="Caching.ScavengeInterval" value="00:03:00"/>
<!--
  SECURITY CACHE EXPIRATION
            Sets the absolute expiration on the cached security data.
            A value of 00:00:00 disables automatic expiration of security caches.

            Default value: 00:00:00
      
-->
<setting name="Caching.SecurityCacheExpiration" value="00:00:00"/>
<!--
  STANDARD VALUES SIZE
            The average size of a standard values.
            Default value: 100.
      
-->
<setting name="Caching.StandardValues.AverageValueSize" value="100"/>
<!--
  STANDARD VALUES CACHE SIZE
            The default size of the standard value cache.
            Default value: 1MB.
      
-->
<setting name="Caching.StandardValues.DefaultCacheSize" value="5MB"/>
<!--
  USER PROFILE CACHE SIZE
            Determines the size of the user profile cache size, which improves the
            performance of security providers by caching profile properties.
            Specify the value in bytes or append the value with KB, MB or GB
            Default value: 1MB.
      
-->
<setting name="Caching.UserProfileCacheSize" value="5MB"/>
<!--
  ENABLE OR DISABLE CLIENT FEEDS
            Disable client feeds to remove all links to the feeds from the Sitecore Client and turn off client feed generation.
            Default value: true, client feeds are enabled.
      
-->
<setting name="ClientFeeds.Enabled" value="true"/>
<!--
  CLIENT FEEDS ITEM EXPIRATION
            Items that are older than the specified time interval (in days) will not be included in the client feed.
            Default value: 0, expiration is disabled.
      
-->
<setting name="ClientFeeds.ItemExpiration" value="0"/>
<!--
  MAXIMUM NUMBER OF ITEMS IN FEED
            The maximum number of items to include in the client feed.
            Default value: 50
      
-->
<setting name="ClientFeeds.MaximumItemsInFeed" value="50"/>
<!--
  CONTENT EDITOR CHECK SECURITY ON TREE NODES
            Determines if the content editor checks the security settings on subitems
            when rendering the tree. Setting this to false may increase performance.
            Default value: true.
      
-->
<setting name="ContentEditor.CheckSecurityOnTreeNodes" value="true"/>
<!--
  CONTENT EDITOR CHECK HASCHILDREN ON TREE NODES
            Determines if the content editor uses the HasChildren method when rendering
            a tree node. Setting this to false may increase performance.
            Default value: true.
      
-->
<setting name="ContentEditor.CheckHasChildrenOnTreeNodes" value="true"/>
<!--
  CONTENT EDITOR SHOW FIELD SHARING LABELS
            Determines whether or not the Content Editor displays field sharing labels ([shared] and [unversioned]) to users 
            that are not Sitecore administrators.
            Default value: false
      
-->
<setting name="ContentEditor.ShowFieldSharingLabels" value="false"/>
<!--
  CHECK SECURITY ON LANGUAGES
            Indicates if the security settings on languages are applied to the
            Content Editor.
      
-->
<setting name="CheckSecurityOnLanguages" value="true"/>
<!--
  CLIENT LANGUAGE
            Specifies the default language of the Sitecore client if no language
            could be determined in any other way.
      
-->
<setting name="ClientLanguage" value="en"/>
<!--
  CONTENT EDITOR CLASSIC FRAME EVENT PROPAGATION
            Indicates whether the Content Editor uses classic frame event propagation.
            In classic propagation all item events are sent to all frames in the content editor.
            This may hurt server and client performance.
            If classic mode is not used, only events relating to items that are either selected
            in the content editor or subitems thereof, are propagated.
            Default value: false
      
-->
<setting name="ContentEditor.ClassicFrameEventPropagation" value="false"/>
<!--
  CONTENT EDITOR - RENDER ITEM HELP AS HTML
          Specifies whether help information defined in the Item Help section should be treated as an HTML markup.
          If set to false, then the item help information will be encoded before it is rendered.
          If set to true, then the item help information will be cleared of JavaScript code and then rendered as is.
          Default value: false.
          Please note: setting this value to true is unsafe, because it will then be possible to inject any HTML tags (like iframe) and CSS into Sitecore.
    
-->
<setting name="ContentEditor.RenderItemHelpAsHtml" value="false"/>
<!--
  CONTENT EDITOR SHOW GUTTER
            Indicates whether the Content Editor show the gutter panel to the left of the
            treeview as default.
            Default value: true
      
-->
<setting name="ContentEditor.ShowGutter" value="true"/>
<!--
  CONTENT EDITOR SHOW SEARCH PANEL
            Indicates whether the Content Editor show the search panel above the treeview as default
            Default value: true
      
-->
<setting name="ContentEditor.ShowSearchPanel" value="true"/>
<!--
  CONTENT EDITOR SHOW VALIDATOR BAR
            Indicates whether the Content Editor show the validator bar to the right of the
            content as default.
            Default value: true
      
-->
<setting name="ContentEditor.ShowValidatorBar" value="true"/>
<!--
  CONTENT EDITOR SORT LANGUAGES
          Indicates whether the Content Editor show languages in the language selection dropdown
          in the same order as /sitecore/system/Languages child items.
          Default value: false
    
-->
<setting name="ContentEditor.SortLanguages" value="false"/>
<!--
  ENABLE COUNTERS
            Indicates if performance counters are enabled.
            Default value: true
      
-->
<setting name="Counters.Enabled" value="true"/>
<!--
  COUNTERS INSTANCE NAME
            Instance name for performance counters.
            Default value: (value of InstanceName setting)
      
-->
<setting name="Counters.InstanceName" value=""/>
<!--
  RESET COUNTERS
            Indicates if performance counters will be reset on Sitecore startup.
            Default value: true
      
-->
<setting name="Counters.ResetOnStartup" value="true"/>
<!--
  DATA FOLDER
            Path to data folder
            Can be site path (ex. /folder/...) or absolute (ex. c:\folder\...)
      
-->
<setting name="DataFolder" value="/App_Data"/>
<!--
  DEBUG BORDERS
            Control html tag used for debug borders (usually span or div)
            and color
      
-->
<setting name="DebugBorderColor" value="red"/>
<setting name="DebugBorderTag" value="span"/>
<!--
  DEBUG FOLDER
            Path to debug folder
            Can be site path (ex. /folder/...) or absolute (ex. c:\folder\...)
      
-->
<setting name="DebugFolder" value="/App_Data/debug"/>
<!--
  DEFAULT BASE TEMPLATE
            The guid of the default base templates. Set the value to the empty string ("")
            to disable automatic base templates.
            To create a template that will not use this value, set the templates
            base template to: {00000000-0000-0000-0000-000000000000}
            Default value: the id of the Standard template
      
-->
<setting name="DefaultBaseTemplate" value="{1930BBEB-7805-471A-A3BE-4858AC7CF696}"/>
<!--
  DEFAULT ICON
            Default icon for items in the Sitecore client
      
-->
<setting name="DefaultIcon" value="/sitecore/shell/themes/Standard/Applications/32x32/Document.png"/>
<!--
  START DOCUMENT
            The document that will be shown first when entering the Sitecore client.
            Path is rooted in /sitecore/content and must start with /.
      
-->
<setting name="DefaultItem" value="/home"/>
<!--
  LANGUAGE
            The default language for the web site.
      
-->
<setting name="DefaultLanguage" value="en"/>
<!--
  LAYOUT FILE
            The path to the layout file to use for items that do not specify a layout file themselves.
            Default value: ""
      
-->
<setting name="DefaultLayoutFile" value=""/>
<!--
  ISO CODE
            The culture iso code for users who do not have the Regional ISO Code set in their profile.
      
-->
<setting name="DefaultRegionalIsoCode" value=""/>
<!--
  LAYOUT PAGE EVENT
            The name of page event where the layout pipeline will be run.
            Presently, there are three valid values: 'preInit', 'init' or 'load'.
            Default value is: 'preInit'.
      
-->
<setting name="LayoutPageEvent" value="preInit"/>
<!--
  DEFAULT PUBLISHING TARGETS
            Pipe separated list of default publishing targets.
            Targets in this list will be preselected in the Publish dialog.
      
-->
<setting name="DefaultPublishingTargets" value=""/>
<!--
  DEFAULT SQL TIMEOUT
            The default timeout for all SQL commands issued by the Sitecore APIs, such as
            the SqlServerDataProvider, the OracleDataProvider or the SqlUtil classes.
            Default value: 00:05:00 (5 minutes)
      
-->
<setting name="DefaultSQLTimeout" value="00:05:00"/>
<!--
  Sort order is used for displaying items in the
            Sitecore client and for API functions that returns sorted
            sets.
      
-->
<setting name="DefaultSortOrderValue" value="100"/>
<!--
  THEME
            The default theme to use in the Sitecore client
      
-->
<setting name="DefaultTheme" value="standard"/>
<!--
  DISABLE BROWSER CACHING
            If true, all pages will have:
              Cache-Control: no-cache, no-store
              Pragma: no-cache
            in the http header
      
-->
<setting name="DisableBrowserCaching" value="true"/>
<!--
  ENABLE EVENT QUEUES
            If enabled, Sitecore sends local events to the event queue available to remote instances,
            and handles events in the queue from remote instances.
            Default value: true
      
-->
<setting name="EnableEventQueues" value="true"/>
<!--
  ENABLE SITE.CONFIG FILES
            If true, the SiteResolver pipeline processor checks for the existence of a "site.config"
            file in the physical subdirectory corresponding to the requested URL. If a "site.config"
            file exists, Sitecore uses that file to determine the context site (Sitecore.Context.Site)
            for the current request. 
            For example, when processing a request for the URL http://site.com/parent/child.aspx, 
            Sitecore first checks for the existence of <webroot>/parent/site.config. 
            Syntax: The site.config files should contain the following XML markup:
              <site reference="[name of the site definition from the web.config]" />
            Default value: false
      
-->
<setting name="EnableSiteConfigFiles" value="false"/>
<!--
  ENABLE XSLT document()
            Determine whether XSLT document() support should be enabled.
            If this is not enabled, it will be an error if the XSLT file contains 'document()' references.
            Document support can be set for individual XSLT files by using the XslFile.EnableDocument property.
            Default value: true.
      
-->
<setting name="EnableXslDocumentFunction" value="true"/>
<!--
  ENABLE XSLT SCRIPTS
            Determine whether XSLT script support should be enabled.
            If script support is not enabled, it will be an error if the XSLT file contains script blocks.
            Default value: false.
      
-->
<setting name="EnableXslScripts" value="false"/>
<!--
  ERROR HANDLER
            Url of page handling generic errors
      
-->
<setting name="ErrorPage" value="/sitecore/service/error.aspx"/>
<!--
  EVENT QUEUE PERSIST STAMP INTERVAL
            The minimum interval between saving the event queue's last processed event stamp.
            Default value: 00:00:10 (10 seconds)
      
-->
<setting name="EventQueue.PersistStampInterval" value="00:00:10"/>
<!--
  EVENT QUEUE PERSIST STAMP MAX AGE
            The maximum age of remote events to be replayed at application startup. 
            When Sitecore starts, it will check this setting. Remote events that are older than this age will not be replayed. 
            Default value: 00:10:00 (10 minutes)
      
-->
<setting name="EventQueue.PersistStampMaxAge" value="00:10:00"/>
<!--
 EVENT QUEUE SAVED ITEM REMOTE SERIALIZE ALL FIELDS
           This setting allows you to specify which fields should be serialized when the item:saved:remote event is triggered.
           There are two options:               
           1) Set this setting to 'true' and place all the fields or types that you would not like to serialize in the 'ExcludeField' and/or 'ExcludeType' lists.
           2) Set this setting to 'false' and place all the fields and types that you would like to serialize in the 'IncludeField' and/or 'IncludeType' lists.
           Default value: true.
      
-->
<setting name="EventQueue.SavedItemRemote.SerializeAllFields" value="true"/>
<!--
 FAST QUERY DESCENDANTS DISABLED
           Determines whether ability to select items through Ancestors/Descendants axes should be disabled in fast query.
           Default value: false
      
-->
<setting name="FastQueryDescendantsDisabled" value="false"/>
<!--
  GRID PAGE SIZE
            Defines the number of rows in a UI grid.
            Default:15
      
-->
<setting name="GridPageSize" value="15"/>
<!--
  FEEDS ITEM EXPIRATION
            Items that are older than the specified time interval (in days) will not be included in the feed.
            Default value: 0, expiration is disabled.
      
-->
<setting name="Feeds.ItemExpiration" value="0"/>
<!--
  MAXIMUM NUMBER OF ITEMS IN FEED
            The maximum number of items to include in the feed.
            Default value: 50
      
-->
<setting name="Feeds.MaximumItemsInFeed" value="50"/>
<!--
  IGNORE URLS
            Set IgnoreUrlPrefixes to a '|' separated list of url prefixes that should not be
            regarded and processed as friendly urls (ie. forms etc.)
      
-->
<setting name="IgnoreUrlPrefixes" value="/sitecore/default.aspx|/trace.axd|/webresource.axd|/sitecore/shell/Controls/Rich Text Editor/Telerik.Web.UI.DialogHandler.aspx|/sitecore/shell/applications/content manager/telerik.web.ui.dialoghandler.aspx|/sitecore/shell/Controls/Rich Text Editor/Telerik.Web.UI.SpellCheckHandler.axd|/Telerik.Web.UI.WebResource.axd|/sitecore/admin/upgrade/|/layouts/testing|/sitecore/service/xdb/disabled.aspx"/>
<!--
  ITEM CLONING ENABLED
            Specifies whether the Item Cloning feature is enabled.
            Default value on CM and Standalone servers: true.
            Default value on CD, Processing and Reporting servers: false.
    
-->
<setting name="ItemCloning.Enabled" value="true"/>
<!--
  ITEM CLONING NON INHERITED FIELDS
            Specifies a pipe-separated list of field names or field IDs which should be not be inherited by clones from their source item,
            in addition to the following fields from the standard template that are never be inherited: 
              Updated, Updated by, Revision, Created, Created by, Source, Workflow, Workflow State, Lock
            Example: "__Renderings" (or "{F1A1FE9E-A60C-4DDB-A3A0-BB5B29FE732E}") will exclude the __Renderings field (also known as the 
            Layout field) so that clones do not inherit presentation details from their source items.
            Default value: ""
      
-->
<setting name="ItemCloning.NonInheritedFields" value=""/>
<!--
  ITEM CLONING - INHERIT WORKFLOW DATA
            Specify whether you want the workflow and workflow state fields to be inherited by clones from their source item.
            Note: When you change the setting value, clones move in or out the workflow, which may affect their behavior, for example, on publishing.
            Default value: false
      
-->
<setting name="ItemCloning.InheritWorkflowData" value="false"/>
<!--
  ITEM CLONING - FORCE UPDATE
            Specify whether clones should be updated automatically when:
              - a new version is added to the original item.
              - a new language is added to the original item.
              - a new sub-item is added to the original item.
              Note: If true, all the clones of the original item are updated automatically.
            Default value: false
      
-->
<setting name="ItemCloning.ForceUpdate" value="false"/>
<!--
  ITEM CLONING - DELETE CLONES WITH ORIGINAL ITEM
          Specifies whether item clones should be deleted when the original item is deleted.
          If true, when the original item is deleted all its clones are deleted and not just uncloned.
          Default value: false
    
-->
<setting name="ItemCloning.DeleteClonesWithOriginalItem" value="false"/>
<!--
  ITEM CLONING - FORCE UPDATE - CHANGE TEMPLATE
          Specify whether clones should be updated automatically when a different template is selected for the original item.
          Note: If true, all the clones of the original item are updated automatically.
          Default value: false
    
-->
<setting name="ItemCloning.ForceUpdate.ChangeTemplate" value="false"/>
<!--
  ITEM CLONING - RELINK CLONED SUBTREE
          Indicates that after cloning an item tree structure, all the internal links inside the cloned structure should be re-linked to point to the items in the cloned sub-tree. 
          When the setting value is false, the links in the cloned structure will still link to the items in the original structure.
          Default value: false
    
-->
<setting name="ItemCloning.RelinkClonedSubtree" value="false"/>
<!--
  HEALTH MONITOR INTERVAL
            Specifies the interval between running the healthMonitor pipeline.
            Default value: 00:10:00 (10 minutes)
      
-->
<setting name="HealthMonitorInterval" value="00:10:00"/>
<!--
  HEARTBEAT INTERVAL
            Specifies the interval between heartbeats.
            Default value: 00:00:02 (2 seconds)
      
-->
<setting name="HeartbeatInterval" value="00:00:02"/>
<!--
  SITECORE - SERVICES - HEARTBEAT - EXCLUDE CONNECTION
          Specify the connection strings of the databases to exclude from the heartbeat check.
          A '|' separated list of the database connection strings that should be excluded from the heartbeat check.
          Default value: LocalSqlServer
    
-->
<setting name="Sitecore.Services.Heartbeat.ExcludeConnection" value="LocalSqlServer"/>
<!--
  HTML EDITOR DEFAULT CONFIGURATION TYPE
            Specifies the type responsible for setting up the rich text editor. Can be overriden at profile level. Must inherit from Sitecore.Shell.Controls.RichTextEditor.EditorConfiguration,Sitecore.Client.
            Default value: Sitecore.Shell.Controls.RichTextEditor.EditorConfiguration,Sitecore.Client
      
-->
<setting name="HtmlEditor.DefaultConfigurationType" value="Sitecore.Shell.Controls.RichTextEditor.EditorConfiguration,Sitecore.Client"/>
<!--
  HTML EDITOR DEFAULT PROFILE
            Path to the default html editor profile.
            Default value: /sitecore/system/Settings/Html Editor Profiles/Rich Text Default
      
-->
<setting name="HtmlEditor.DefaultProfile" value="/sitecore/system/Settings/Html Editor Profiles/Rich Text Default"/>
<!--
  HTML EDITOR LINE BREAK
            Specifies the tag that the HTML editor inserts on Enter. Values can be
            "br", "div" and "p".
      
-->
<setting name="HtmlEditor.LineBreak" value="p"/>
<!--
  HTML EDITOR REMOVE SCRIPTS
            If true, the rich text editor removes script tags and inline scripts from RTE field values before saving. Setting the value to true reduces the potential for cross-site scripting and other script-related issues.
            Default value: true
      
-->
<setting name="HtmlEditor.RemoveScripts" value="true"/>
<!--
  HTML EDITOR SUPPORT WEB CONTROLS
            Indicates if the Html Editor supports web controls. If true, Web Controls are shown as yellow boxes.
            Default value: true
      
-->
<setting name="HtmlEditor.SupportWebControls" value="true"/>
<!--
  HTML EDITOR VALIDATOR SERVICE URL
            Specifies the url that validates XHtml.
      
-->
<setting name="HtmlEditor.ValidatorServiceUrl" value="http://validator.w3.org/check"/>
<!--
  IMAGES
            List of file extensions to regard as images when uploading (separated by |).
            Must begin and end with a pipe character (|)
      
-->
<setting name="ImageTypes" value="|gif|jpg|png|"/>
<!--
  KEEP LOCK AFTER SAVE FOR ADMIN USERS
            Set this value to true if you want to Administrator users to keep the lock on an item after saving
            it in the Page Editor.
            Notice: For regular users, the "Keep Lock After Save" item in the core database will determine whether
            to keep the lock or not.
            Default value: false
      
-->
<setting name="KeepLockAfterSaveForAdminUsers" value="false"/>
<!--
  PROFILE ITEM DATABASE
            Specifies the database where user profile items are stored (at the following path:
            /sitecore/system/Settings/Security/Profiles)
            Default value: core
      
-->
<setting name="ProfileItemDatabase" value="core"/>
<!--
  PROFILING RENDER FIELD THRESHOLD
            Defines the threshold value (in milliseconds) for logging long field render operations.
            Default value: 100
      
-->
<setting name="Profiling.RenderFieldThreshold" value="100"/>
<!--
  PROFILING SHEER UI
            Determines if debug information about Sheer UI request are displayed
            in the client.
      
-->
<setting name="Profiling.SheerUI" value="false"/>
<!--
  PROFILING SHEER UI WARNING THRESHOLD
            Defines the number of milliseconds before logging a long Sheer UI request.
            Requires that Profiling.SheerUI = "true"
      
-->
<setting name="Profiling.SheerUIWarningThreshold" value="800"/>
<!--
  ICONS CACHE FOLDER
            A relative path to the folder used for caching icons (only used when using icons stored in zip files).
            Default value: $(tempFolder)/IconCache
      
-->
<setting name="Icons.CacheFolder" value="/temp/IconCache"/>
<!--
  USE ZIPPED ICONS
            Indicates whether to use icons stored in zip files. If you set this to false, all icons
            must be available as physical files stored in folders below /sitecore/shell/Themes/Standard.
            Default value: true
      
-->
<setting name="Icons.UseZippedIcons" value="true"/>
<!--
  INDEX FOLDER
            The path to the folder where the Lucene.Net search indexes are stored.
            Default value: $(dataFolder)/indexes
      
-->
<setting name="IndexFolder" value="/App_Data/indexes"/>
<!--
  INSTANCE NAME
            Unique name for Sitecore instance.
            Default value: (machine name and IIS site name)
      
-->
<setting name="InstanceName" value=""/>
<!--
  INVALID CHARS
            Characters that are invalid in an item name
      
-->
<setting name="InvalidItemNameChars" value="\/:?"<>|[]"/>
<!--
  ITEM NAME VALIDATION
            Regular expression for validating item names
      
-->
<setting name="ItemNameValidation" value="^[\w\*\$][\w\s\-\$]*(\(\d{1,}\)){0,1}$"/>
<!--
  ITEM NAME ALLOW MIXING REPLACEMENT CHARACTERS
          Specifies whether you can create items with names that contain the values defined in the 'find' and 'replaceWith' properties in the 
         'encodeNameReplacements' section.
          Default value: true.
    
-->
<setting name="ItemNameAllowMixingReplacementCharacters" value="true"/>
<!--
  ITEM NOT FOUND HANDLER
            Url of page handling 'Item not found' errors
      
-->
<setting name="ItemNotFoundUrl" value="/sitecore/service/notfound.aspx"/>
<!--
  ITEM RESOLVING - FIND BEST MATCH
          Specifies the mode in which item resolving tries to find items with names that contain the values defined in the 'find' and 'replaceWith'
          properties in the 'encodeNameReplacements' section, for example, spaces and dashes.
          The setting can have the following values:
            - Disabled - item resolving will not try to match such items. No performance improvement.
            - Enabled - item resolving will try to find a matching item on each nesting level separately. 
              This value might have a small negative impact on performance.
            - DeepScan - item resolving will try to match an item by scanning the whole content tree.
              This value can have a noticeable impact on performance if you have many items with names on the same level with names
              whose only difference is that they contain characters that are defined in the 'encodeNameReplacement' section.
          Default value: DeepScan.
    
-->
<setting name="ItemResolving.FindBestMatch" value="DeepScan"/>
<!--
  JOBS - EXECUTE IN MANAGED THREAD POOL
            This setting specifies whether jobs should be executed in Sitecore's managed thread pool.
            If true, jobs are queued to the managed thread pool.
            If false, Sitecore creates a new thread for each job that is started.
            Default value: true
      
-->
<setting name="Jobs.ExecuteInManagedThreadPool" value="true"/>
<!--
  JOB QUEUE INTERVAL
            Gets the interval between the JobManager checking its queue for pending actions.
            Default value: "00:00:02" (2 seconds)
      
-->
<setting name="Jobs.QueueProcessingInterval" value="00:00:02"/>
<!--
  LANGUAGES ALWAYS STRIP LANGUAGE
            This setting specifies if the StripLanguage processor in the <preprocessRequest> pipeline will parse and remove languages from
            the URL, even when the languageEmbedding attribute of the linkProvider is set to "never". You should only change this setting 
            to "false" if the default behavior causes problems in your solution.
            Default value: true 
      
-->
<setting name="Languages.AlwaysStripLanguage" value="true"/>
<!--
  LANGUAGES AUTO REMOVE ITEM DATA
            Indicates if item data is automatically removed from a database when a language is deleted.
            Default value: true
      
-->
<setting name="Languages.AutoRemoveItemData" value="true"/>
<!--
  LANGUAGES AUTO RENAME ITEM DATA
            Indicates if item data languages are automatically renamed when a language is renamed.
            Default value: true
      
-->
<setting name="Languages.AutoRenameItemData" value="true"/>
<!--
  LAYOUT FOLDER
            The default path to the layout file root folder.
            The layout folder is the place where layout files (.aspx) and
            user controls (.ascx) are stored by default. The system will
            watch this folder for file changes and reload caches etc. as
            necessary.
            The value can be a virtual or physical path.
            Default value: /layouts
      
-->
<setting name="LayoutFolder" value="/layouts"/>
<!--
  LAYOUT NOT FOUND HANDLER
            Url of page handling 'Layout not found' errors
      
-->
<setting name="LayoutNotFoundUrl" value="/sitecore/service/nolayout.aspx"/>
<!--
  REMEMBER LAST LOGGED IN USER NAME
            Specifies whether Sitecore will remember the last logged in user name on the login page (stored encrypted in a cookie).
            If you set this to true, the system sets last logged in user name on the login page.
            Default: false
      
-->
<setting name="Login.RememberLastLoggedInUserName" value="false"/>
<!--
  LICENSE
            This value define the physical location of the license file.
            Can be site path (ex. /folder/...) or absolute (ex. c:\folder\...)
      
-->
<setting name="LicenseFile" value="/App_Data/license.xml"/>
<!--
  LINK DATABASE - MAXIMUM BATCH SIZE
            This setting specifies the maximum number of records that Compact method can process in a single iteration.
            If you set this value too low, it can cause excessive amounts of network traffic and may have a significant impact 
            on system throughput.
            If you set this value too high, it may affect tasks that require communication with SQL Server. For example, it may affect the size of transactions
            sent to SQL Server and this might require you to set higher 'lock timeout' values as it takes longer to process large batches.
            Default: 1000
      
-->
<setting name="LinkDatabase.MaximumBatchSize" value="1000"/>
<!--
  LINK DATABASE - UPDATE DURING PUBLISH
            If true, the system performs incremental updates to the link database during publishing operations.
            If false, the system does not perform updates to the link database for item operations that occur in the context of
            a publishing operation.
            Default: true
      
-->
<setting name="LinkDatabase.UpdateDuringPublish" value="true"/>
<!--
  LINK ITEM NOT FOUND HANDLER
            Url of page handling 'Link item not found' errors
      
-->
<setting name="LinkItemNotFoundUrl" value="/sitecore/service/notfound.aspx"/>
<!--
  LOG FOLDER
            Path to log folder. This must be the same location as the
            settings in the log4net section below.
            Can be site path (ex. /folder/...) or absolute (ex. c:\folder\...)
      
-->
<setting name="LogFolder" value="/App_Data/logs"/>
<!--
  LOGIN BACKGROUND IMAGE URL
            Sets the background image used on the login page /sitecore/shell/default.aspx
            Default value: "//"
      
-->
<setting name="Login.BackgroundImageUrl" value="/sitecore/login/drop_wallpaper.jpg"/>
<!--
  LOGIN DISABLE AUTOCOMPLETE
            If false, browsers suggest autocomplete for used editor names on shared/public computers,
            as an autocomplete="off" attribute is not added on the Sitecore login forms on the
             /sitecore/login/default.aspx and /sitecore/admin/login.aspx pages. 
            Default value: true
      
-->
<setting name="Login.DisableAutoComplete" value="true"/>
<!--
  LOGIN DISABLE PASSWORD RECOVERY
            If true, Sitecore hides the "Forgot Your Password?" link on the login page.  
            Default: false
      
-->
<setting name="Login.DisablePasswordRecovery" value="false"/>
<!--
  LOGIN DISABLE REMEMBER ME
            If true, Sitecore disables the "Remember me" checkbox on the login page.
            Default: false
      
-->
<setting name="Login.DisableRememberMe" value="false"/>
<!--
  LOGIN DISABLE LICENSE INFROMATION
            If true, Sitecore hides the "License Information" link on the login page.
            Default: true
      
-->
<setting name="Login.DisableLicenseInfo" value="true"/>
<!--
  LOGIN SITECORE URL
            Specifies the Url of the Sitecore pane on the login startpage.
      
-->
<setting name="Login.SitecoreUrl" value="https://sdn.sitecore.net/startpage.aspx"/>
<!--
  MAIL SERVER
            SMTP server used for sending mails by the Sitecore server
            Is used by MainUtil.SendMail()
            Default value: ""
      
-->
<setting name="MailServer" value=""/>
<!--
  MAIL SERVER USER
            If the SMTP server requires login, enter the user name in this setting
      
-->
<setting name="MailServerUserName" value=""/>
<!--
  MAIL SERVER PASSWORD
            If the SMTP server requires login, enter the password in this setting
      
-->
<setting name="MailServerPassword" value=""/>
<!--
  MAIL SERVER PORT
            If the SMTP server requires a custom port number, enter the value in this setting.
            The default value is: 25
      
-->
<setting name="MailServerPort" value="25"/>
<!--
  MASTER VARIABLES REPLACER
            Specifies that class that will replace variables when creating
            a new master, e.g. "$id" and "$parentid"
      
-->
<setting name="MasterVariablesReplacer" value="Sitecore.Data.MasterVariablesReplacer,Sitecore.Kernel.dll"/>
<!--
  MAX TREE DEPTH
            Specifies the maximum allowed depth of an item tree.
            Default value: 20
      
-->
<setting name="MaxTreeDepth" value="20"/>
<!--
  MAX ITEM NAME
            Specifies the maximum length of an item name.
            Default value: 100
      
-->
<setting name="MaxItemNameLength" value="100"/>
<!--
  MEDIA FOLDER
            Root folder of upload folder being watched for new media library files
            Files copied to this folder (or below) will be automatically added to the media library.
            Can be site path (ex. /folder/...) or absolute (ex. c:\folder\...)
            It should be different from Media.FileFolder setting
      
-->
<setting name="MediaFolder" value="/upload"/>
<!--
  MEDIA ALWAYS INCLUDE SERVER URL
            If true, Sitecore will generate absolute URLs when it uses the MediaProvider API and/or the link provider to render media URLs.
            If blank, Sitecore will use the same value as the alwaysIncludeServerUrl attribute from the link provider.
            Default value: "" (use the value from the link provider)
      
-->
<setting name="Media.AlwaysIncludeServerUrl" value=""/>
<!--
  MEDIA ALWAYS APPEND REVISION
            If true, Sitecore will append media item revision when it uses the MediaProvider API and/or the link provider to render media URLs.
            Default value: false (do not append media item revision)
      
-->
<setting name="Media.AlwaysAppendRevision" value="false"/>
<!--
  MEDIA - AUTO SET ALT
            Indicates if the Alt field on the Image template is set automatically to the file
            path when the image is uploaded. If false, the Alt field is blank.
      
-->
<setting name="Media.AutoSetAlt" value="false"/>
<!--
  MEDIA - CACHE FILE MEDIA BY MODIFIED DATE
            If true, in addition to varying by the standard media request parameters such as height and width, 
            Sitecore varies media cache entries for file-based media by both file path and the last modification 
            date of the media file.
            If false, Sitecore varies file media cache entries only by file path and standard media request 
            parameters and does not account for the last modification date of the file. A false value decreases 
            the number of file system I/O operations performed for each media request, but could cause Sitecore 
            to serve stale data for file media items if a process other than the Sitecore CMS user interfaces 
            initiated that change.
            Default value: true
      
-->
<setting name="Media.CacheFileMediaByModifiedDate" value="true"/>
<!--
  MEDIA - CACHE FOLDER
            The folder under which media files are cached by the system.
            Default value: /App_Data/MediaCache
      
-->
<setting name="Media.CacheFolder" value="/App_Data/MediaCache"/>
<!--
  MEDIA - CACHING ENABLED
            Indicates if caching of media files is enabled.
            Default value: true
      
-->
<setting name="Media.CachingEnabled" value="true"/>
<!--
  MEDIA - DEFAULT IMAGE BACKGROUND COLOR
            The default background color for dynamically resizing images to different aspect ratios than the originals. 
            Sitecore applies this background color only for image types that do not support transparency (image/jpeg, image/gif and image/bmp).
            When resizing any other image types (including image/png), Sitecore always applies a transparent background.
            You can specify a color name (such as Black or Red) or a hex color code (such as #CE55E2).
            If you specify no value, Sitecore applies a black background color when resizing such images. 
            Default value: "" 
      
-->
<setting name="Media.DefaultImageBackgroundColor" value=""/>
<!--
  MEDIA - IMAGE FORMAT
            The default ImageFormat to use when it's not possible to deduce this from an extension.
            The value must be parsable to a valid System.Drawing.Imaging.ImageFormat value.
            If the value is not set, the Sitecore.Resources.Media.MediaConfig.GetImageFormat() method may
            return null causing image functions to fail.
      
-->
<setting name="Media.DefaultImageFormat" value="Jpeg"/>
<!--
  MEDIA - DISABLE FILE MEDIA
            Enables or disables storage of media as files rather than database records.
            If true, user interfaces do not present options to store media as files. 
            All files will be stored in the database, disregarding the value of the Media.UploadAsFiles setting.   
            
            Default value: false
      
-->
<setting name="Media.DisableFileMedia" value="false"/>
<!--
  MEDIA - ENABLE RANGE RETRIEVAL REQUEST
            Enables or disables range retrieval requests (see http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.2)
      
-->
<setting name="Media.EnableRangeRetrievalRequest" value="true"/>
<!--
  MEDIA - FILE FOLDER
            The folder under which media files are stored by the system.
            Default value: /App_Data/MediaFiles
            It should be different from MediaFolder setting
      
-->
<setting name="Media.FileFolder" value="/App_Data/MediaFiles"/>
<!--
  MEDIA - FILE SYSTEM WATCHER - BUFFER SIZE
            The size (in bytes) of the internal buffer used by the file system watchers that monitor the file system change 
            notifications and raise events when a directory, or file in a directory, changes.
            If you get log entries about internal buffer overflow, increasing the value of this setting may solve this problem. 
            The minimum size is 4096 (4 KB).
            The maximum size is 65536 (64 KB).
            Be aware that increasing this value could hurt performance. See http://msdn.microsoft.com/en-us/library/system.io.filesystemwatcher.internalbuffersize%28v=vs.110%29.aspx.
            Default value: 8192
      
-->
<setting name="Media.FileSystemWatcher.BufferSize" value="8192"/>
<!--
  MEDIA - USE FILE EXTENSION IN ITEM NAMES
            Indicating whether to include a file extension when generating an item name from a file name.
            Default value: "false"
      
-->
<setting name="Media.IncludeExtensionsInItemNames" value="false"/>
<!--
  MEDIA - INTERPOLATION
            The interpolation mode to use when resizing images.
            See also the System.Drawing.Drawing2D.InterpolationMode enum.
            Valid values:  Bicubic
                           Bilinear
                           Default
                           High
                           HighQualityBicubic
                           HighQualityBilinear
                           Low
                           NearestNeighbor
            Default value: High
      
-->
<setting name="Media.InterpolationMode" value="High"/>
<!--
  MEDIA LOWER CASE URLs
            If true, Sitecore will generate lower case URLs when it uses the MediaProvider API and/or the link provider to render media URLs.
            If blank, Sitecore will use the same value as the lowercaseUrls attribute from the link provider.
            Default value: "" (use the value from the link provider)
      
-->
<setting name="Media.LowercaseUrls" value=""/>
<!--
  MEDIA - MAX IMAGE WIDTH
            Gets the max width of the image in a Rich Text field.
            Default value: 0
      
-->
<setting name="Media.MaxImageWidth" value="0"/>
<!--
  MEDIA - MAX SIZE IN DATABASE
            The maximum allowed size of media intended to be stored in a database (binary blob).
            This value must be less than the ASP.NET httpRuntime.maxRequestLength setting.
            Default value: 500MB
      
-->
<setting name="Media.MaxSizeInDatabase" value="500MB"/>
<!--
  MEDIA - MAX SIZE IN MEMORY
            The maximum size of media to load into memory for processing (resizing etc.).
            Default value: 40MB
      
-->
<setting name="Media.MaxSizeInMemory" value="40MB"/>
<!--
  MEDIA - MEDIA LINK PREFIX
            The prefix to use when Sitecore generates media links. The setting is used in the front-end as well as the back-end.
            Notice: If you specify a custom media link prefix, you must also add a corresponding entry to the <customHandlers> section.

            If the value is not set, the default media request prefix will be used (which by default is "-/media")
            Default value: ""
      
-->
<setting name="Media.MediaLinkPrefix" value=""/>
<!--
  MEDIA - MEDIA LINK SERVER URL
            The server URL to use when Sitecore generates media links and when Media.AlwaysIncludeServerUrl is set to true. This is typically
            used when all media is served from one or more dedicated instances or when your solution is configured to store Sitecore media on
            a content delivery network. 
            The URL must use this format: <protocol>://<hostname>, for example http://example.com 
            If the value is not set, the URL of the current server will be used.
            Default value: ""
      
-->
<setting name="Media.MediaLinkServerUrl" value=""/>
<!--
  MEDIA - OPEN CONTENT EDITOR AFTER UPLOAD
            Determines if the content editor must be opened after a file has been uploaded.
            This ensures that users will supply meta data for the new media item.
            Default value: true
      
-->
<setting name="Media.OpenContentEditorAfterUpload" value="true"/>
<!--
  MEDIA - RESIZING MAX HEIGHT 
            Maximum height for dynamically resized images. 
            If the requested height exceeds this value, Sitecore resizes the image to this height.
            A value of 0 disables this height limit.
            Default value: 1024
      
-->
<setting name="Media.Resizing.MaxHeight" value="1024"/>
<!--
  MEDIA - RESIZING MAX WIDTH
            Maximum width for dynamically resized images. 
            If the requested width exceeds this value, Sitecore resizes the image to this width.
            A value of 0 disables this width limit.
            Default value: 1280
      
-->
<setting name="Media.Resizing.MaxWidth" value="1280"/>
<!--
  MEDIA - RESIZING - QUALITY
            Specifies the level of compression to use when resizing images. 
            See also the System.Drawing.Imaging.Encoder.Quality field.
            The range of values is 0 (lowest quality) to 100 (highest quality).
            Default value: 95
      
-->
<setting name="Media.Resizing.Quality" value="95"/>
<!--
  MEDIA - RESIZING - COMPOSITING MODE
            Specifies how the source colors are combined with the background colors when resizing images.
            See also the System.Drawing.Drawing2D.CompositingMode enum.
            Valid values:  SourceOver  (the source color is blended with the background color, as determined by the alpha component of the source color)
                           SourceCopy  (the source color overwrites the background color)
            Default value: SourceCopy
      
-->
<setting name="Media.Resizing.CompositingMode" value="SourceCopy"/>
<!--
  MEDIA - RESIZING - PIXEL OFFSET MODE
            Specifies how pixels are offset when resizing images. 
            See also the System.Drawing.Drawing2D.PixelOffsetMode enum.
            Valid values:  Default     (default)
                           HighSpeed   (high speed, low quality)
                           HighQuality (high quality, low speed)
                           None        (no pixel offset)
                           Half        (pixels are offset by -.5 units, for high speed antialiasing)
            Default value: Half
      
-->
<setting name="Media.Resizing.PixelOffsetMode" value="Half"/>
<!--
  MEDIA - REQUEST EXTENSION
            The extension to use in media request URLs.
            If the value is not set, the Extension field of the individual media items will be used (ie. JPG, GIF, etc.)
            Default value: "ashx"
      
-->
<setting name="Media.RequestExtension" value="ashx"/>
<!--
  STREAM BUFFER
            Block size used when writing media to the response stream.
            Default: 100000
      
-->
<setting name="Media.StreamBufferSize" value="100000"/>
<!--
  UPLOAD AS FILES
            Controls whether Sitecore stores media as files or as database records by default.
            This setting is ignored if the Media.DisableFileMedia setting is true.
            Default: false
      
-->
<setting name="Media.UploadAsFiles" value="false"/>
<!--
  MEDIA - UPLOAD AS VERSIONABLE AS DEFAULT
            This setting controls if uploaded media is versionable by default or not.
      
-->
<setting name="Media.UploadAsVersionableByDefault" value="false"/>
<!--
  MEDIA - USE ITEM PATHS FOR URLS
            This setting controls if item paths are used for constructing media URLs.
            If false, short ids will be used.
            Default value: true
      
-->
<setting name="Media.UseItemPaths" value="true"/>
<!--
  MEDIA - USE LEGACY RESIZING
            This setting controls whether to use legacy resizing (ie. bypass the Sitecore.ImageLib library).
            Default value: false
      
-->
<setting name="Media.UseLegacyResizing" value="false"/>
<!--
  MEDIA - STREAM PARTIALLY CACHED FILES
            Indicates whether to start streaming files before they have been fully written to the cache.
            Default value: true.
      
-->
<setting name="Media.StreamPartiallyCachedFiles" value="true"/>
<!--
  MEDIA - WHITESPACE REPLACEMENT
            The character to use when replacing whitespace in the names of uploaded media.
            Default value: A single space character.
      
-->
<setting name="Media.WhitespaceReplacement" value=" "/>
<!--
  REMOVE UNUSED BLOBS ON SAVE
            Specifies whether unused blobs should be deleted from an item when it is saved. This setting only checks items that contain blob fields.
            To improve performance during a bulk upload of media files, set this setting to "false".
            When this setting is set to "false", you must run the CleanupDatabase task periodically.
            Default value: true.
      
-->
<setting name="RemoveUnusedBlobsOnSave" value="true"/>
<!--
  MEDIA RESPONSE - CACHEABILITY
            The <see cref="HttpCacheability">cacheability</see> to use in media response headers.
            Possible values: NoCache, Private, Public, Server, ServerAndNoCache, ServerAndPrivate
            Default value: private
      
-->
<setting name="MediaResponse.Cacheability" value="private"/>
<!--
  MEDIA RESPONSE - CacheExtensions
            The <see cref="HttpCachePolicy.AppendCacheExtension">cache extension(s)</see> to use in media response headers.
            Default value: ""
      
-->
<setting name="MediaResponse.CacheExtensions" value=""/>
<!--
  MEDIA RESPONSE - MAX AGE
            The <see cref="HttpCachePolicy.SetMaxAge">max age</see> to use in media response headers.
            Set it to "00:00:00" to omit this header.
            Default value: 7.00:00:00 (seven days)
      
-->
<setting name="MediaResponse.MaxAge" value="7.00:00:00"/>
<!--
  MEDIA RESPONSE - SLIDING EXPIRATION
            The <see cref="HttpCachePolicy.SetSlidingExpiration">sliding expiration</see> to use in media response headers.
            Set it to "" to omit this header. To include it, use "true" or "false".
            Default value: ""
      
-->
<setting name="MediaResponse.SlidingExpiration" value=""/>
<!--
  MEDIA RESPONSE - VARY HEADER
            Specifies the value for the Vary HTTP header to use in media response headers.
            Set it to "" to omit this header.
            Default value: ""
      
-->
<setting name="MediaResponse.VaryHeader" value=""/>
<!--
  ACCESS DENIED HANDLER
            Url of page handling 'Acess denied' errors
      
-->
<setting name="NoAccessUrl" value="/sitecore/service/noaccess.aspx"/>
<!--
  NO LICENSE FOUND HANDLER
            Url of page handling missing license errors
      
-->
<setting name="NoLicenseUrl" value="/sitecore/service/nolicense.aspx"/>
<!--
  PACKAGE PATH
            Specifies the path where packages are located.
      
-->
<setting name="PackagePath" value="/App_Data/packages"/>
<!--
  PAGE STATE STORE
            Specifies the type responsible for storing SheerUI page state. Must implement the IPageStateStore interface. 
            Possible values are "DatabasePageStateStore" or "FilePageStateStore".
            Default value: Sitecore.Web.UI.FilePageStateStore, Sitecore.Kernel
      
-->
<setting name="PageStateStore" value="Sitecore.Web.UI.FilePageStateStore, Sitecore.Kernel"/>
<!--
  PAGE PREVIEW SITE NAME 
            Specifies the name of the site that is used to generate page previews, for example "website".
            If blank, Sitecore uses the value in the Preview.DefaultSite setting.
            Default value: "" (use the value of the Preview.DefaultSite setting)
       
-->
<setting name="PagePreview.SiteName" value=""/>
<!--
  PAGE PREVIEW SESSION EXPIRATION PERIOD
            Specifies the period of time during which page previews are valid.
            Default value: 365.00:00:00 (1 year)
      
-->
<setting name="PagePreview.SessionExpirationPeriod" value="365.00:00:00"/>
<!--
  PAGE PREVIEW MAX PREVIEW SESSIONS COUNT
            Specifies the maximum number of preview sessions that are stored for a language version of an item.
            Default value: 32
      
-->
<setting name="PagePreview.MaxSessionsCount" value="32"/>
<!--
  PORTAL PRINCIPAL RESOLVER
            Returns an IPortalPrincipalResolver interface that resolves the current
            portal user.
      
-->
<setting name="PortalPrincipalResolver" value="Sitecore.Web.UI.Portal.PortalPrincipalResolver,Sitecore.Kernel"/>
<!--
  PORTAL Storage
            Returns an IPortalStorage which fetches data for the current portal user.
      
-->
<setting name="PortalStorage" value="Sitecore.Web.UI.Portal.PortalCookieStorage,Sitecore.Kernel"/>
<!--
  PREVIEW - RESOLVE SITE
            If false, the Preview.DefaultSite setting specifies the context site to use when a user previews an item.
            If true, when a user previews an item, Sitecore tries to resolve the root item and the context site based on the current content language
            and the path to the item. If Sitecore cannot resolve the context site, it uses the site that is specified in the Preview.DefaultSite setting.
            Default value: true
      
-->
<setting name="Preview.ResolveSite" value="true"/>
<!--
  PROCESS HISTORY
            The number of process histories to show in the log file at startup.
            Set to 0 (zero) to disable
      
-->
<setting name="ProcessHistoryCount" value="1"/>
<!--
  PROCESSING - MAX DEGREE OF PARALLELISM
            This setting defines the maximum number of locks that can be stored in the LockSet collection that controls parallel execution.
            The classes that use the LockSet collection and are affected by the setting: DataEngine, SQLDataProvider,
            SQLServerClientDataStore, SQLServerDataProvider, SQLLinkDatabase, Pipeline, SqlRolesInRolesProvider.
            
            The optimal value for this setting depends on your solution and on the CPU capacity of the server.
            We highly recommend that you perform tests with the expected load before you change this setting in a production environment.
            
            Default value: 256
      
-->
<setting name="Processing.MaxDegreeOfParallelism" value="256"/>
<!--
  AUTO SMART PUBLISHING
            Automatically schedule a smart publish when proxy definitions etc. change?
      
-->
<setting name="Publishing.AutoScheduleSmartPublish" value="true"/>
<!--
  PUBLISHING SECURITY
            Check security rights when publishing?
            When CheckSecurity=true, Read rights are required for all source items. When it is
            determined that an item should be updated or created in the target database,
            Write right is required on the source item. If it is determined that the item
            should be deleted from target database, Delete right is required on the target item.
            In summary, only the Read, Write and Delete rights are used. All other rights are ignored.
            Default value: false
      
-->
<setting name="Publishing.CheckSecurity" value="false"/>
<!--
  PUBLISHING REVISIONS
            Compare revisions while publishing?
      
-->
<setting name="Publishing.CompareRevisions" value="true"/>
<!--
  PUBLISHING - DISABLE DATABASE CACHES
            Provides a default value for the PublishContext class that indicates whether to populate the database caches with the data that
            is retrieved during publishing.
            The value you specify is used for incremental publishing operations. For other publishing operations, the default value
            specified in this setting is overridden by the OverridePublishContext processor in the publish pipeline to match the type of
            publishing operation.
            If true, Sitecore publishes the items as usual, but does not populate the database caches with the item data that is retrieved
            during the publishing operation. This can significantly reduce the amount of memory used by the ASP.NET worker process,
            especially in solutions with a large number of items, versions, and languages.
            If false, the item data is cached during publishing as usual.
            Default value: false
      
-->
<setting name="Publishing.DisableDatabaseCaches" value="false"/>
<!--
 PUBLISHING - EXECUTE IN MANAGED THREAD POOL
           This setting specifies whether publishing jobs should be executed in Sitecore's managed thread pool.
           If true, publishing jobs are queued to the managed thread pool.
           If false, Sitecore creates a new thread for each publishing job.
           Default value: false
      
-->
<setting name="Publishing.ExecuteInManagedThreadPool" value="false"/>
<!--
  PUBLISHING LOG INTERVAL
            Interval between logging published item info to the log.
            Set to 0 (zero) to disable.
      
-->
<setting name="Publishing.LogInterval" value="0"/>
<!--
  PUBLISHING - MAX DEGREE OF PARALLELISM
            This setting allows you to limit the number of concurrent publishing operations.
            You must enable the /App_Config/Include/Sitecore.Publishing.Parallel.config file for this setting to take effect.

            Important: changing the value of this setting to anything other than the default value '1' and enabling the 
            Sitecore.Publishing.Parallel.config file will increase the load on the database server.

            If the value is set to -1, there is no limit on the number of concurrently running operations.
            Default value: 1
      
-->
<setting name="Publishing.MaxDegreeOfParallelism" value="1"/>
<!--
  PUBLISHING PUBLISH DIALOG POLLING INTERVAL
            Defines the interval in ms with which the Publish Dialog requests the
            server for the publishing status.
      
-->
<setting name="Publishing.PublishDialogPollingInterval" value="500"/>
<!--
 PUBLISHING PUBLISH EMPTY ITEMS
           Specifies whether empty items (i.e. items without publishable versions) should be published.
           Default value: false
      
-->
<setting name="Publishing.PublishEmptyItems" value="false"/>
<!--
  PUBLISHING INSTANCE
            Assigns the instance name of dedicated Sitecore installation for publishing operations.
            When empty, all publishing operations are performed on the local installation of Sitecore.
            Default vaue: (empty)
      
-->
<setting name="Publishing.PublishingInstance" value=""/>
<!--
  PUBLISHING - RECOVERY - ENABLED
            Determines whether the system should restart interrupted publishing operations after a system failure, such as server restart.
            To activate this feature, you must enable the /App_Config/Include/Sitecore.Publishing.Recovery.config file which overrides this
            setting and provides additional configuration.
            Default value: false
      
-->
<setting name="Publishing.Recovery.Enabled" value="false"/>
<!--
  PUBLISHING SECURITY
            Check delete rights on target item when publishing?
            Default value: true
      
-->
<setting name="Publishing.RequireTargetDeleteRightWhenCheckingSecurity" value="true"/>
<!--
  PUBLISHING STATUS UPDATE INTERVAL
            The time between updating the status cache for running publishing jobs.
            Default value: 00:00:02
      
-->
<setting name="Publishing.StatusUpdateInterval" value="00:00:02"/>
<!--
  PUBLISHING PRIORITY
            The thread priority of publishing jobs.
            Valid values: Lowest, BelowNormal, Normal, AboveNormal, Highest
            Default value: BelowNormal
      
-->
<setting name="Publishing.ThreadPriority" value="BelowNormal"/>
<!--
  TIME BEFORE PUBLISHING STATUS EXPIRES
            The time before a cached status registration expires.
            Default value: 02:00:00
      
-->
<setting name="Publishing.TimeBeforeStatusExpires" value="02:00:00"/>
<!--
  Query.MaxItems
            Specifies the max number of items in a query result set.
            If the number is 0, all items are returned. This may affect system performance, if a
            large query result is returned.
            This also controls the number of items in Lookup, Multilist and Valuelookup fields.
            Default value: 100
      
-->
<setting name="Query.MaxItems" value="100"/>
<!--
  RECYCLE BIN
            If true, when deleting items in the client, they will
            be moved to the recycle bin rather than being deleted
            Default value: true
      
-->
<setting name="RecycleBinActive" value="true"/>
<!--
  RENDERING - HTML ENCODED FIELD TYPES
            Specifies a pipe-separated list of field types that should be HTML encoded when rendered by the <renderField> pipeline.
            Default value: text|single-line text
      
-->
<setting name="Rendering.HtmlEncodedFieldTypes" value="text|single-line text"/>
<!--
  IMAGES AS XHTML
            Indicate whether to render images as XHTML.
            Default value: true
      
-->
<setting name="Rendering.ImagesAsXhtml" value="true"/>
<!--
  DUPLICATE PLACEHOLDERS
            Indicate whether to process duplicate placeholders
            Default value: false
      
-->
<setting name="Rendering.ProcessDuplicatePlaceholders" value="false"/>
<!--
  SITE RESOLVING
            While rendering item links, some items may belong to different site. Setting this to true
            make LinkManager try to resolve target site in order to use the right host name.
            Default value: true
      
-->
<setting name="Rendering.SiteResolving" value="true"/>
<!--
  RENDERING - SITE RESOLVING MATCH CURRENT LANGUAGE
            Affects how cross-site links are rendered when Rendering.SiteResolving is enabled.
            If true, the link provider will take the language attribute of the site definitions into consideration when resolving
            which site/hostname to use when rendering a cross-site link.
            Default value: true
      
-->
<setting name="Rendering.SiteResolvingMatchCurrentLanguage" value="true"/>
<!--
  RENDERING - SITE RESOLVING MATCH CURRENT SITE
            Affects how cross-site links are rendered when Rendering.SiteResolving is enabled.
            If true, the link provider will check if the target item is located under the start item for the current site before it
            tries to find a match in the full list of site definitions. This ensures that when the target item can be resolved using
            the current site, the target link will not change to a different site/hostname.
            Default value: true
      
-->
<setting name="Rendering.SiteResolvingMatchCurrentSite" value="true"/>
<!--
  USE SERVER-SIDE REDIRECT FOR REQUEST ERRORS
            If true, Sitecore will use Server.Transfer instead of Response.Redirect to redirect request to service pages
            when an error occurs (item not found, access denied etc).
            Default value: false
      
-->
<setting name="RequestErrors.UseServerSideRedirect" value="false"/>
<!--
  REQUIRE LOCK BEFORE EDITING
            If true, the user must have a lock on a document before
            he can edit it, otherwise it is always ready for editing
      
-->
<setting name="RequireLockBeforeEditing" value="true"/>
<!--
  SEARCH CLASSIC SEARCH MAX RESULTS
            Specifies the maximum number of results to return when using the Search application (classic search) to search.
            If the value is set to 0, all the items that match the query are returned.
            Default value: 15
      
-->
<setting name="Search.ClassicSearch.MaxResults" value="15"/>
<!--
  SEARCH CONTENT TREE SEARCH MAX RESULTS
            Specifies the maximum number of results to return when using the search panel above the content tree to search.
            If the value is set to 0, all the items that match the query are returned.
            Default value: 25
      
-->
<setting name="Search.ContentTreeSearch.MaxResults" value="25"/>
<!--
  SEARCH INSTANT SEARCH MAX RESULTS
            Specifies the maximum number of results to return when using
            the instant search panel (on the status bar in the Sitecore Desktop) to search.
            If the value is set to 0, all the items that match the query are returned.
            Default value: 15
      
-->
<setting name="Search.InstantSearch.MaxResults" value="15"/>
<!--
  RULES - MAX CACHED RULES
            Determines the size of the rules cache.
            Specify the value in bytes or append the value with KB, MB or GB
            A value of 0 (zero) disables the cache.
            Default value: 4MB
      
-->
<setting name="Rules.MaxCachedRules" value="4MB"/>
<!--
  RULES - ITEM EVENT HANDLERS - RUN DURING PUBLISHING
            Specifies whether the rule item handlers should be fired during publishing when an item is saved, deleted, or when an item
            version is removed.
            This setting only affects the instance that runs the publishing operation.
            To suppress rules execution on content delivery instances, use the Rules.ItemEventHandlers.SupportedDatabases setting.
            Default value: true
      
-->
<setting name="Rules.ItemEventHandlers.RunDuringPublishing" value="true"/>
<!--
  RULES - ITEM EVENT HANDLERS - SUPPORTED DATABASES
            Specifies a pipe-separated list of database names. For example: "core|master". 
            The rule item event handlers that normally fire when an item is saved, deleted, or an item version is removed, are only fired
            for the specified databases.
            For example, on content delivery instances, you can use this setting to disable the rule item event handlers in the web database
            to prevent performance degradation during publishing due to rules execution.
            If blank, the item event handlers are executed for every Sitecore database.
            Default value: ""
      
-->
<setting name="Rules.ItemEventHandlers.SupportedDatabases" value=""/>
<!--
  SERIALIZATION - INVALID FILE NAME CHARS
            When generating file names that correspond to item names, the serialization API encodes the "$" and "%" characters, as well 
            as any characters that are invalid in path names as returned by the System.IO.Path.GetInvalidFileNameChars() method. 
            You can use this setting to specify additional characters that must be encoded, such as to meet the requirements of a source 
            control system that does not allow specific characters in file names.
            Default value: ""
      
-->
<setting name="Serialization.InvalidFileNameChars" value=""/>
<!--
  SERIALIZATION - SERIALIZATION FOLDER PATH MAX LENGTH
            In Windows, there is 248 characters limit on the length of file system paths. To avoid exceeding the maximum path length, the 
            serialization API will shorten long path names. This setting specifies the maximum length of the path to the data/serialization 
            folder, which determines how long item paths can be before they are shortened.
            Important: The value of this setting must be the same on all Sitecore instances accessing the serialized data. 
            Important: When changing this value, it's recommended to remove the contents of the serialization folder and serialize all items 
            again. Otherwise duplicates of serialized items may appear in the serialization folder.
            Example: A value of "90" for this setting will mean that item paths longer than 150 characters will be shortened, since Sitecore 
            reserves 8 characters (and 248 - 8 - 90 = 150). 
            Default value: 90
      
-->
<setting name="Serialization.SerializationFolderPathMaxLength" value="90"/>
<!--
  SERIALIZATION FOLDER
            Points to the root of serialized databases tree (when using serialization functionality).
            Default value: $(dataFolder)/serialization
      
-->
<setting name="SerializationFolder" value="/App_Data/serialization"/>
<!--
  SERVER TIME ZONE
            This setting specifies the server time zone that is used by the server to convert UTC time to local time, for example "GMT Standard Time".
            The value must be parsable to a valid Time Zone ID. See http://msdn.microsoft.com/en-us/library/gg154758.aspx
            If blank, Sitecore uses the operating system time zone.
            Default value: "" (use the operating system time zone)
      
-->
<setting name="ServerTimeZone" value=""/>
<!--
  COLLECT RENDERING DATA
            Indicates if renderings statistics should be collected.
            Default value: true
      
-->
<setting name="Statistics.CollectRenderingData" value="true"/>
<!--
  TASKS - EMAIL REMINDER SUBJECT
            The subject to use for email reminders.
            Default value: Reminder from Sitecore
      
-->
<setting name="Tasks.EmailReminderSubject" value="Reminder from Sitecore"/>
<!--
  TASKS - EMAIL REMINDER STANDARD TEXT
            The leading text to use for email reminders. Custom text will be appended.
            Default value: This is a reminder from Sitecore regarding the item: '{item}' in the database '{database}'
      
-->
<setting name="Tasks.EmailReminderText" value="This is a reminder from Sitecore regarding the item: '{item}' in the database '{database}'"/>
<!--
  TEMP FOLDER
            Folder used for temporary files
      
-->
<setting name="TempFolder" value="/temp"/>
<!--
  THUMBNAILS BACKGROUND COLOR
            The background color for thumbnails - must be on the form #RRGGBB.
      
-->
<setting name="ThumbnailsBackgroundColor" value="#FFFFFF"/>
<!--
  VALIDATORS.AUTOMATICUPDATE
            Indicating whether validators are automatically run in the content editor.
      
-->
<setting name="Validators.AutomaticUpdate" value="true"/>
<!--
  VALIDATORS.UPDATEDELAY
            The delay in ms after a key was press until a update request is send.
      
-->
<setting name="Validators.UpdateDelay" value="750"/>
<!--
  UI CALENDAR TIME OF DAY
            Defines the default time of day when the user user the calendar drop down
            to select a day. The drop down does not allow the user to set the time
            of day.
      
-->
<setting name="UI.CalendarTimeOfDay" value="12:00:00"/>
<!--
  UPLOAD CLASSIC
            Indicates if uploading runs in classic (no flash) mode.
            Default: false
      
-->
<setting name="Upload.Classic" value="false"/>
<!--
  SIMPLE UPLOAD OVERWRITING
            Indicates if simple upload dialog has overwriting on.
            Default: false
      
-->
<setting name="Upload.SimpleUploadOverwriting" value="false"/>
<!--
  UPLOAD USER SELECTABLE DESTINATION
            Defines if the user can select the destination database or file.
            Default: true
      
-->
<setting name="Upload.UserSelectableDestination" value="false"/>
<!--
  REDIRECT URL PREFIXES
            Pipe-separated list of URL prefixes to redirect. 
            To support IIS authentication, configure redirection for all URLs secured with IIS authentication. Otherwise, 
            URLs containing embedded languages in the URL might be able to bypass IIS security, which could result in a
            vulnerability. 
            For example, under the default configuration, Sitecore redirects URLs such as "/en/sitecore" to "/sitecore?sc_lang=en" 
            to ensure that IIS authentication is enforced for such URLs.
            Default value: /sitecore
      
-->
<setting name="RedirectURLPrefixes" value="/sitecore"/>
<!--
  UNLOCK COPIED ITEMS
            A value indicating whether to unlock items after copying.
            Only the copies are unlocked. The original items stay locked.
            Default value: true.
      
-->
<setting name="UnlockAfterCopy" value="true"/>
<!--
  VERSION FILE PATH
            The path to the version file.
            Default value: /sitecore/shell/sitecore.version.xml
      
-->
<setting name="VersionFilePath" value="/sitecore/shell/sitecore.version.xml"/>
<!--
  VIEWSTATE STORE
          Specifies the type responsible for storing SheerUI viewstate. Must implement the IViewStateStore interface. 
          Possible values are "Sitecore.Data.DataProviders.DatabaseViewStateStore,Sitecore.Kernel" or 
          "Sitecore.Web.UI.Sheer.FileViewStateStore,Sitecore.Kernel".
          Default value: Sitecore.Web.UI.Sheer.FileViewStateStore,Sitecore.Kernel
    
-->
<setting name="ViewStateStore" value="Sitecore.Web.UI.Sheer.FileViewStateStore,Sitecore.Kernel"/>
<!--
  WEB EDIT JQuery UI STYLESHEET
            The stylesheet to include in the page editor in WebEdit mode.
            Default value: /sitecore/shell/Controls/Lib/jQuery/jQueryUI/1.10.3/smoothness/jquery-ui-1.10.3.min.css
      
-->
<!--
  WEB EDIT JQuery UI STYLESHEET
            The stylesheet to include in the experience editor in WebEdit mode.
            Default value: /sitecore/shell/Controls/Lib/jQuery/jQueryUI/1.10.3/smoothness/jquery-ui-1.10.3.min.css
      
-->
<setting name="WebEdit.JQueryUIStylesheet" value="/sitecore/shell/Controls/Lib/jQuery/jQueryUI/1.10.3/smoothness/jquery-ui-1.10.3.min.css" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
  WEB SITE STYLESHEET
            CSS file for HTML content of Sitecore database.
            The file pointed to by WebStylesheet setting is automatically included in Html and Rich Text fields.
            By using it, you can make the content of HTML fields look the same as the actual Web Site
      
-->
<setting name="WebStylesheet" value="/default.css"/>
<!--
  LOGIN MESSAGES
            These are the messages that are shown on the login page of the Sitecore
            client
      
-->
<setting name="WelcomeTitle" value="Welcome to Sitecore"/>
<!--
WORD FIELD INLINE EDITING WIDTH
           Defines width of a Word Field control that appears in the inline editing mode.
      
-->
<setting name="WordField.InlineEditing.Width" value="400px"/>
<!--
WORD FIELD INLINE EDITING HEIGHT
           Defines height of a Word Field control that appears in the inline editing mode.
      
-->
<setting name="WordField.InlineEditing.Height" value="300px"/>
<!--
WORD FIELD INLINE EDITING PADDING
           Defines padding of a Word Field control that appears in the inline editing mode.
      
-->
<setting name="WordField.InlineEditing.Padding" value="10px"/>
<!--
  WORKBOX - SINGLE COMMENT FOR BULK OPERATION
          Enables using a single comment for workflow bulk actions. 
          Default value: false
      
-->
<setting name="Workbox.SingleCommentForBulkOperation" value="false"/>
<!--
  WORKBOX - STATE COMMAND FILTERING - ITEM THRESHOLD
          The maximum number of items allowed in a workflow state to perform command filtering for the state
          when rendered in the workbox. Command filtering per state may have a negative impact on performance
          for the workbox for large volumes of items in a single workflow state.
          Default value: 2000
      
-->
<setting name="Workbox.StateCommandFiltering.ItemThreshold" value="2000"/>
<!--
  WorldLingo.Enabled
            Indicates if WorldLingo is enabled.
      
-->
<setting name="WorldLingo.Enabled" value="false"/>
<!--
  WorldLingo.Url
            Specifies the Url of the the WorldLingo service.
      
-->
<setting name="WorldLingo.Url" value="http://www.worldlingo.com/S000.1/api"/>
<!--
  WorldLingo.Password
            Specifies the Password of the the WorldLingo service. When the password is
            "secret" the service runs in an evaluation mode - the output language is
            random and the phrase is limited to 25 words.
      
-->
<setting name="WorldLingo.Password" value="secret"/>
<!--
  XHTML SCHEMA FILE
            The file name of the schema file that validates XHTML.
            Default value: /sitecore/shell/schemas/Sitecore xhtml5.xsd
      
-->
<setting name="XHtmlSchemaFile" value="/sitecore/shell/schemas/Sitecore xhtml5.xsd"/>
<!--
  XmlControls.ThrowException
            Specifies if an exception is thrown when an Xml Control cannot be loaded.
            If true, it might prevent the Sitecore client from working, but it
            increases debugging. Any errors are written to the log.
      
-->
<setting name="XmlControls.ThrowException" value="false"/>
<!--
  XmlControls.OutputDebugFiles
            Specifies if the code for compiled XmlControls will be saved as *.cs file.
            If true, the *.cs files will be saved in to the debug folders associated with the XmlControls, 
            typically /sitecore/shell/applications/debug or /sitecore/shell/controls/debug.
            Default value: false
      
-->
<setting name="XmlControls.OutputDebugFiles" value="false"/>
<!--
 PREVIEW AS ANONYMOUS
           This setting specifies whether Sitecore will use the Anonymous user account when you preview an item.
           If true, Sitecore uses the Anonymous user account when you preview an item.
           If false, Sitecore uses the current user account when you preview an item.
           Default value: true
      
-->
<setting name="Preview.AsAnonymous" value="true"/>
<!--
 Preview.DefaultSite
           Specifies name of the default site for WebEdit preview mode
      
-->
<setting name="Preview.DefaultSite" value="website"/>
<!--
  EmailValidation
            The regular expression used for e-mail validation
            Default: ^[a-zA-Z0-9_-]+(?:\.[a-zA-Z0-9_-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$
      
-->
<setting name="EmailValidation" value="^[a-zA-Z0-9_-]+(?:\.[a-zA-Z0-9_-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$"/>
<!--
  HOST NAME VALIDATION
            Regular expression for validating Host Name
      
-->
<setting name="HostNameValidationPattern" value="^([a-zA-Z0-9]+)([a-zA-Z0-9-.]*)([a-zA-Z0-9]+)$"/>
<!--
  PROTECT FROM EXTERNAL LINK WITH BLANK TARGET
            Protects your website from a security vulnerability that exists when an external link contains target="_blank".
            See  https://dev.to/ben/the-targetblank-vulnerability-by-example
            If set to true, sitecore adds the rel="noopener noreferrer" attribute to the link.
            Default: true
    
-->
<setting name="ProtectExternalLinksWithBlankTarget" value="true"/>
<!--
 INTERNING ENABLED
           If enabled, Sitecore would re-use same immutable object instances, and enable InternManager<T> API.
           This can reduce memory consumption, and simplify Garbage Collection.
           The tradeoff is additional CPU cost of putting an object to intern pool.         
           Default value: false.
     
-->
<setting name="Interning.Enabled" value="true" patch:source="Sitecore.Interning.config"/>
<!--
 INTERNING KNOWN FIELD VALUES 
           If enabled, Sitecore would ensure to use intern pool for the known field values. 

           EXAMPLE: Every item under workflow would have one among known limited values.
                    Since a field value is cached as string, a lot of duplicated strings representing same workflow would present in memory.

           This setting is useful on large solutions where memory consumption is high.
           Default value: false.
     
-->
<setting name="Interning.InternKnownFieldValues" value="true" patch:source="Sitecore.Interning.config"/>
<!--
 INTERNING TRACK STATISTICS
           A statistics of all method calls, and unique objects count would be tracked on per-type basic if setting and performace counters are enabled.          
           Default value: false.
     
-->
<setting name="Interning.TrackStatistics" value="false" patch:source="Sitecore.Interning.config"/>
<!--
  CACHING - LANGUAGE FALLBACK FIELD VALUES - DEFAULT CACHE SIZE
              Determines the default size of the cache that stores the language fallback field values.
              Specify the value in bytes or append the value with KB, MB or GB.
              
              Default value: 20MB.
      
-->
<setting name="Caching.LanguageFallbackFieldValues.DefaultCacheSize" value="20MB" patch:source="Sitecore.LanguageFallback.config"/>
<!--
  LANGUAGE FIELD FALLBACK - ALLOW VARY FALLBACK SETTINGS PER LANGUAGE
              If set to 'true', then values from both versioned 'Enable Language Fallback' and shared 'Enable Shared Language Fallback' checkbox fields
              on the field definition item are used to determine whether language fallback functionality should be enabled for the corresponding field.
              It allows you to have different fallback settings for the same field in different content languages.
              
              Example: when 'en-CA' tries to fallback to 'en', the checkbox field will be retrieved from the field definition item in 'en-CA',
              thus such version should exist. If retrieved value is 'false', then the 'Enable Shared Language Fallback' checkbox field is used.
              
              Note: enabling this feature has negative impact on performance.

              If set to 'false', only the shared 'Enable Shared Language Fallback' checkbox field on the field definition item is used to determine whether
              language fallback functionality should be enabled for the corresponding field.
                                          
              Default value: false.
      
-->
<setting name="LanguageFieldFallback.AllowVaryFallbackSettingsPerLanguage" value="false" patch:source="Sitecore.LanguageFallback.config"/>
<!--
  MEDIA - REQUEST PROTECTION - ENABLED
            Specifies whether media request protection is enabled or not.
            Default value: true
      
-->
<setting name="Media.RequestProtection.Enabled" value="true" patch:source="Sitecore.Media.RequestProtection.config"/>
<!--
  MEDIA - REQUEST PROTECTION - HASH PARAMETER NAME
            The name of the query string parameter that stores the calculated hash value.
            Default value: hash
      
-->
<setting name="Media.RequestProtection.HashParameterName" value="hash" patch:source="Sitecore.Media.RequestProtection.config"/>
<!--
  MEDIA - REQUEST PROTECTION - LOGGING - ENABLED
            Specifies whether the media request protection feature will output detailed information to the Sitecore log file.
            Default value: true
      
-->
<setting name="Media.RequestProtection.Logging.Enabled" value="true" patch:source="Sitecore.Media.RequestProtection.config"/>
<!--
  MEDIA - REQUEST PROTECTION - SHARED SECRET
            Specifies the shared secret to use as a salt when generating hash values. You should change the shared secret to a random string
            and not use the default value.
            In a multi-instance setup, use the same value for Media.RequestProtection.SharedSecret on every instance. Otherwise, dynamic image
            signing will not work correctly if the image URL is generated by one instance and the request is handled by a different instance.
      
-->
<setting name="Media.RequestProtection.SharedSecret" value="D1FA5,7C4AED9.F0A32E84AA0/FAEF|D0DE9E|\8FD6AEC+8F87F-B037_66C8)34C99921(EB23BE79!AD9D5D@CC1DD#9AD2361$32102%900B723^CF98;0957FC" patch:source="Sitecore.Media.RequestProtection.config"/>
<!--
  WEBDAV ASSOCIATE USERNAME WITH LINK
            If "true" Sitecore associates the username of the current Sitecore user 
            with a WebDAV link via a server side object which stores additional information as well, 
            such as the current database and language.
            Sitecore will not prompt for a username and password when serving WebDAV requests, 
            as long as the server side object still exists at the time of the request.
            This approach could potentially allow unauthorized access on unsecure networks.
            Supported values: 
              true -    the username of the current Sitecore user will always be associated with 
                        with a WebDAV link via a server side object.
              false -   the username of the current Sitecore user will never be associated with 
                        with a WebDAV link via a server side object.
              default - the username of the current Sitecore user will not be associated with 
                        with a WebDAV link via a server side object unless it is absolutely required, 
                        such as to support clients that don't support opening WebDAV views in iframes.       
            Default value: default
      
-->
<setting name="WebDAV.AssociateUsernameWithLink" value="default" patch:source="Sitecore.WebDAV.config"/>
<!--
  WEBDAV FEATURE ENABLED
            Determines if WebDAV feature should be enabled at all.
            Specify 'true' to enable WebDAV and 'false' to disable the feature.
            Default value: false
      
-->
<setting name="WebDAV.Enabled" value="false" patch:source="Sitecore.WebDAV.config"/>
<!--
  WEBDAV ENGINE LOG LEVEL
            Allows to enable \ disable \ configure IT Hit 
            WebDAV Server Engine log file.
            Supported values: All, Debug, Info, Warn, Error, Fatal, Off
            Default value: Off
      
-->
<setting name="WebDAV.EngineLogLevel" value="Off" patch:source="Sitecore.WebDAV.config"/>
<!--
  WEBDAV FILE DROP AREA MEDIA LOCATION
            The location of media items related to a File Drop Area media items.
            Default value: /sitecore/media library
      
-->
<setting name="WebDAV.FileDropAreaMediaLocation" value="/sitecore/media library" patch:source="Sitecore.WebDAV.config"/>
<!--
  WEBDAV FOLDER
            Folder that is configured for processing WebDAV requests.
      
-->
<setting name="WebDAV.Folder" value="/sitecore_files" patch:source="Sitecore.WebDAV.config"/>
<!--
  WEBDAV LICENSE FILE
            Indicates the location of license file for WebDAV Engine.
      
-->
<setting name="WebDAV.LicenseFile" value="/bin/ITHit.WebDAV.Server.lic" patch:source="Sitecore.WebDAV.config"/>
<!--
  WEBDAV MEDIA HANDLER NAME
            Indicates the WebDAV handler name.
      
-->
<setting name="WebDAV.MediaHandlerName" value="sitecore_webDAV.ashx" patch:source="Sitecore.WebDAV.config"/>
<!--
  WEBDAV REQUIRE AUTHENTICATION
            If "true" Sitecore will prompt for a username and password if the username is not available.
            If "false" Sitecore will not prompt for a username and password of the username 
            even if it is not available. Sitecore will only provide access to files, in this case, 
            if they are available to the Anonymous user.
            Default value: true
      
-->
<setting name="WebDAV.PromptWhenUsernameUnknown" value="true" patch:source="Sitecore.WebDAV.config"/>
<!--
  WEBDAV URL DISPLAY NAME
            The last part of WebDAV URL before the path to the media item.
            The value of this setting will be shown in the WebDAV view
            as the root folder for the media library, if the computer is configured to display folder names.
            Default value: /media
      
-->
<setting name="WebDAV.URLDisplayName" value="/media" patch:source="Sitecore.WebDAV.config"/>
<!--
 WEBDAV USE SHORT URL
           Uses a shorter URL format for opening WebDAV folders, using the unique ID of the folder.
           Setting this to false will use the full media library path in the WebDAV URL, which can reduce performance.
           Default value: true
      
-->
<setting name="WebDAV.UseShortURL" value="true" patch:source="Sitecore.WebDAV.config"/>
<!--
  CES - DISCOVERY - MAX DISCOVERY SERVICE REQUEST ATTEMPTS
            Specifies the maximum number of attempts that can be made to request the CES endpoints from the CES Discovery service.
            If a request fails because of a connection issue, then it is repeated.
            
            Default value: 3
      
-->
<setting name="CES.Discovery.MaxDiscoveryServiceRequestAttempts" value="3" patch:source="Sitecore.Contact.Enrichment.Services.Client.config"/>
<!--
  CONTENT SEARCH ENABLED
            This setting specifies whether or not the Content Search feature is enabled.
            Default value: true
      
-->
<setting name="ContentSearch.Enabled" value="true" patch:source="Sitecore.ContentSearch.config"/>
<!--
  INDEXING DISABLE DATABASE CACHES
            Indicates whether or not to populate database caches with data retrieved during indexing.
            If true, Sitecore indexes every version and language of the items as usual, but does not cache this item data in the database
            caches. This can reduce the amount of memory used for cached data and improve performance, especially in solutions with a large 
            number of items, versions, and languages.
            If false, Sitecore indexes every version and language of the items and caches the item data in the database caches.
            Default value: false
      
-->
<setting name="ContentSearch.Indexing.DisableDatabaseCaches" value="false" patch:source="Sitecore.ContentSearch.config"/>
<!--
  INDEX UPDATE BATCH SIZE
            Determines the amount of items that should be processed during the index update within a batch.
            Default value: 300
      
-->
<setting name="ContentSearch.IndexUpdate.BatchSize" value="300" patch:source="Sitecore.ContentSearch.config"/>
<!--
  PARALLEL INDEXING
            Use parallel optimization when indexing.
      
-->
<setting name="ContentSearch.ParallelIndexing.Enabled" value="true" patch:source="Sitecore.ContentSearch.config"/>
<!--
  PARALLEL INDEXING MAX THREAD LIMIT
            This setting allows you to limit the number of threads used for indexing operations when parallel indexing is enabled.
            If the value is set to 0, there is no limit to the number of threads.
            
            Default value: 3
            
            Note: Consider to change the ContentSearch.IndexUpdate.BatchSize value while changing this setting value. The larger MaxThreadLimit value, the larger
            BatchSize value should be to prevent a performance penalty. BatchSize value should not be less than ContentSearch.ParallelIndexing.MaxThreadLimit * 100.
      
-->
<setting name="ContentSearch.ParallelIndexing.MaxThreadLimit" value="3" patch:source="Sitecore.ContentSearch.config"/>
<!--
  CONTENT SEARCH SEARCH MAX RESULTS
            The max number of results that a query returns.
            Every search requires that you set a limiter on the results. in accordance with Lucene best practices, this can be set but it is best kept
            as the default. It would be best to set this when you have an extremely large amount of items and you don't need to bring back all the items.
            
            A common scenario is that people search for everything but only look at page 1 or 2 of the results.
            
            Default value: 1000000
      
-->
<setting name="ContentSearch.SearchMaxResults" value="1000000" patch:source="Sitecore.ContentSearch.config"/>
<!--
  ENABLE FULL LEVEL DEBUG OF CONTENT SEARCHES
            When enabled this will output full verbose search logging. Usage is for developers and also very useful for support.
            You will need to make sure that Log4Net is also set the DEBUG level for its verbosity.
      
-->
<setting name="ContentSearch.EnableSearchDebug" value="false" patch:source="Sitecore.ContentSearch.config"/>
<!--
 CONTENT SEARCH - CRAWLING - STOP ON CRAWL ERROR
           This setting specifies whether the Sitecore crawlers stop crawling if an error occurs while processing an indexable.
           If true, the Sitecore crawlers stop crawling and throw an exception.
           If false, the Sitecore crawlers skip this indexable and then continue crawling.
           Default value: false
      
-->
<setting name="ContentSearch.Crawling.StopOnCrawlError" value="false" patch:source="Sitecore.ContentSearch.config"/>
<!--
 CONTENT SEARCH - CRAWLING - STOP ON CRAWL FIELD ERROR
           This setting specifies whether the Sitecore document builder classes will add document data to the index if an error occurs while
           processing one or more fields for the document.
           If false, the document will be added to the index.
           If true, the document will be skipped.
           Default value: false
      
-->
<setting name="ContentSearch.Crawling.StopOnCrawlFieldError" value="false" patch:source="Sitecore.ContentSearch.config"/>
<!--
 CONTENT SEARCH - DOCUMENT MAPPING - STOP ON PROPERTY MAPPING ERROR
           This setting specifies whether the document mapper will throw an exception if an error occurs during property mapping.
           If true, an exception is thrown when an error occurs.
           If false, the property where an error occurs is skipped, but property mapping will continue for the remaining properties.
           Default value: true
      
-->
<setting name="ContentSearch.DocumentMapping.StopOnPropertyMappingError" value="true" patch:source="Sitecore.ContentSearch.config"/>
<!--
 USE LEGACY SEARCH ENGINE
           This setting specifies whether the classic search functionality in Sitecore should use the legacy Sitecore.Search indexes.
           The classic search functionality is initiated from the search field above the content tree, the quick search field in the task
           bar, and the Search application. 
           If false, the search functionality uses the Sitecore.ContentSearch search indexes.
           If true, the search functionality uses the legacy Sitecore.Search search indexes.
      
-->
<setting name="Search.UseLegacySearchEngine" value="false" patch:source="Sitecore.ContentSearch.config"/>
<!--
  CONTENT SEARCH - DEFAULT INDEX TYPE
            This setting specifies the index type that should be used when an item appears in more than one index.
      
-->
<setting name="ContentSearch.DefaultIndexType" value="Sitecore.ContentSearch.LuceneProvider.LuceneIndex, Sitecore.ContentSearch.LuceneProvider" patch:source="Sitecore.ContentSearch.config"/>
<!--
 CONTENT SEARCH - DEFAULT INDEX CONFIGURATION PATH 
           This setting specifies an XPath expression that points to the default index configuration. The default configuration is used for
           every index that does not have a specified configuration.
      
-->
<!--
 DEFAULT INDEX CONFIGURATION PATH
           If an index has no configuration specified then it uses this XPath to find the default.
           Note: If you have multiple provider types active at once make sure the configurations are individually referenced rather than relying on the default. 
      
-->
<setting name="ContentSearch.DefaultIndexConfigurationPath" value="contentSearch/indexConfigurations/defaultSolrIndexConfiguration" patch:source="Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config"/>
<!--
  SEARCH PROVIDER
            Set to which provider is currently being used
            (Options: Lucene or Solr)
      
-->
<setting name="ContentSearch.Provider" value="Solr" patch:source="Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config"/>
<!--
  CONNECTION TIMEOUT
            The timeout interval for the Solr server connection in milliseconds.
            A value of -1 (minus one) means that the default SolrNet timeout interval is used.
            Default value: -1
      
-->
<setting name="ContentSearch.Solr.ConnectionTimeout" value="-1" patch:source="Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config"/>
<!--
 SEND POST REQUESTS TO SOLR
           This setting specified whether POST method is always used to communicate with SOLR. If value is false, GET can be used for some Solr commands.
           The setting can be useful if you face issues related to URI length limitation.  
           Default value: false
      
-->
<setting name="ContentSearch.Solr.SendPostRequests" value="false" patch:source="Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config"/>
<!--
  BATCH MODE
            Commits to the database in batches (to reduce trips to the database / server).
      
-->
<setting name="ContentSearch.Update.BatchModeEnabled" value="true" patch:source="Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config"/>
<!--
  BATCH SIZE
            The size of document batch before flushing to the database.
      
-->
<setting name="ContentSearch.Update.BatchSize" value="500" patch:source="Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config"/>
<!--
  SUGGEST HANDLER
        The name of suggest request handler as configured in solr 
-->
<setting name="ContentSearch.Solr.SuggestHandler" value="/suggest" patch:source="Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config"/>
<!--
  SPELL CHECK HANDLER
        The name of spell check request handler as configured in solr 
-->
<setting name="ContentSearch.Solr.SpellCheckHandler" value="/spell" patch:source="Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config"/>
<!--
  SOLR SCHEMA CLASS
            Specifies the schema type used by Solr. If you change the value of this setting, you must rebuild all the indexes.
            Possible values are "managed" or "classic".
            Default value: "managed" 
-->
<setting name="ContentSearch.Solr.SolrSchemaClass" value="managed" patch:source="Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config"/>
<!--
 ITEM BUCKETS ENABLED
           This setting specifies whether or not the Item Buckets feature is enabled.
           Default value: true
      
-->
<setting name="BucketConfiguration.ItemBucketsEnabled" value="true" patch:source="Sitecore.Buckets.config"/>
<!--
 AUTO BUCKET TRIGGER COUNT
           If you enable the AutoBucket events, this setting specifies the maximum number of children that an item can have 
               before it is automatically converted into an item bucket.
      
-->
<setting name="BucketConfiguration.BucketTriggerCount" value="100" patch:source="Sitecore.Buckets.config"/>
<!--
 BUCKET FOLDER TEMPLATE
           If you want to change the template of the folder item that organizes all the hidden bucketable items, 
           you must change this setting to point to the GUID of the new folder item. We recommend that you use the default value.
      
-->
<setting name="BucketConfiguration.BucketTemplateId" value="{ADB6CA4F-03EF-4F47-B9AC-9CE2BA53FF97}" patch:source="Sitecore.Buckets.config"/>
<!--
 DISPLAY SECURED ITEMS
           This setting determines what happens to results that are returned when the user does not have read access to them.
           Options include "hide" or "blur".
      
-->
<setting name="BucketConfiguration.SecuredItems" value="hide" patch:source="Sitecore.Buckets.config"/>
<!--
 MAXIMUM POSSIBLE FACETS LOADED
           This setting determines how many items are returned per facet search. If this limit is hit, 0 items are returned for that facet. 
               We recommend that to find a good balance between this number and the number of items that are in your content tree.
      
-->
<setting name="MaxFacets" value="10000000" patch:source="Sitecore.Buckets.config"/>
<!--
 BUCKET FOLDER PATH FORMAT
           This setting determines the folder structure that is created in the content tree. Edit this setting to change the folder structure.
           The format currently supports date formatting, names, for example, "Content Bucket" or blank. Blank creates a dummy called "Repository".
           USAGE: This is a universal resolver for every date format. You should only change it if you do not have a multilingual solution.
               
           RESERVED CHARACTERS: Do not use any of characters that are listed in the web.config file  in the "InvalidItemNameCharacters" setting. 
                                    The default list is :?&quot;&lt;&gt;|[]

      
-->
<setting name="BucketConfiguration.BucketFolderPath" value="yyyy\/MM\/dd\/HH\/mm" patch:source="Sitecore.Buckets.config"/>
<!--
 BUCKETING FOLDER PROVIDER
           This class determines the folder that the items are created in. This implements an interface called IDynamicBucketFolder and returns a 
           string that contains the folder path.
      
-->
<setting name="BucketConfiguration.DynamicBucketFolderPath" value="Sitecore.Buckets.Util.BucketFolderPathResolver, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<!--
 EXCLUDE CONTEXT ITEM IN SEARCH
           This setting includes or excludes the current item from the search results.
      
-->
<setting name="BucketConfiguration.ExcludeContextItemFromResult" value="false" patch:source="Sitecore.Buckets.config"/>
<!--
 FORCE CLIENT LANGUAGE IN SEARCH
           This setting determines whether or not to restrict search results to the language currently used in the Sitecore client when searching 
           through the UI.
           Set to false to include search results in all languages. Set to true to only include search results in the current client language.
           Default value: false
      
-->
<setting name="BucketConfiguration.ForceClientLanguageInSearch" value="false" patch:source="Sitecore.Buckets.config"/>
<!--
 BUCKET CONFIGURATION - MAX DEGREE OF PARALLELISM
           This setting allows you to limit the number of threads used for creating, syncing, or reverting an item bucket.
           If the value is set to -1, there is no limit on the number of concurrently running operations.
           Default value: 2 
      
-->
<setting name="BucketConfiguration.MaxDegreeOfParallelism" value="2" patch:source="Sitecore.Buckets.config"/>
<!--
 INCLUDE STANDARD VALUES IN SEARCH AND REPLACE
           This setting determines whether or not the Template Standard Values are updated by the Search and Replace command.
      
-->
<setting name="BucketConfiguration.SearchAndReplaceIncludeStandardValues" value="true" patch:source="Sitecore.Buckets.config"/>
<!--
 BUCKET CONFIGURATION - SEARCH UI SERVICE PROVIDER
           This class allows you to override/substitute the web service that the search UI calls to retrieve information and perform various operations.
      
-->
<setting name="BucketConfiguration.SearchUIServiceProvider" value="Sitecore.Buckets.Search.Service.BucketClientService, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<!--
 SUPPORTED SEARCH AND REPLACE FIELD TYPES
           Field types that are parsed and can be replaced by the Search and Replace command.
      
-->
<setting name="BucketConfiguration.SupportedSearchAndReplaceFields" value="rich text|single-line text|multi-line text|general link with search|general link|text" patch:source="Sitecore.Buckets.config"/>
<!--
 ENABLE BUCKET SPECIFIC DEBUG IN LOGS
           If enabled, debug information related to the Item Buckets functionality is written to the log file. 
           Only have this turned on while you are debugging, switch it off in your production environment.
      
-->
<setting name="BucketConfiguration.EnableBucketDebug" value="false" patch:source="Sitecore.Buckets.config"/>
<!--
 DEFAULT RESULTS PER PAGE IN UI
           The number of results that are displayed per page in the search results by default.  
-->
<setting name="BucketConfiguration.DefaultNumberOfResultsPerPage" value="20" patch:source="Sitecore.Buckets.config"/>
<!--
 RESOLVE FACET VALUE TO FRIENDLY NAME
           If you are storing a field in the index that is being faceted on, it may be stored as an ID. This Setting
           when set to true, will try and resolve this to the friendly item name instead. 
           
           USAGE: In an environment with huge amounts of items (e.g. 1 Million), this will not scale properly.           
      
-->
<setting name="BucketConfiguration.ResolveFacetValueToFriendlyName" value="false" patch:source="Sitecore.Buckets.config"/>
<!--
 DEVICE DETECTION ENABLE
            Determines whether device detection is enabled or not.
            Default value: true
      
-->
<setting name="DeviceDetection.Enabled" value="true" patch:source="Sitecore.CES.DeviceDetection.config"/>
<!--
 DEVICE DETECTION CACHE SIZE
             Specifies the size of the DeviceDetection cache.
             Specify the value in bytes or append the value with KB, MB or GB
             A value of 0 (zero) disables the cache.
        
-->
<setting name="DeviceDetection.DeviceDetectionCacheSize" value="10MB" patch:source="Sitecore.CES.DeviceDetection.config"/>
<!--
 DEVICE DETECTION SERVICE NAME
              Specifies the name of the device detection service.
      
-->
<setting name="DeviceDetection.ServiceName" value="DeviceDetection" patch:source="Sitecore.CES.DeviceDetection.config"/>
<!--
 DEVICE DETECTION DATABASE UPDATE CHECK INTERVAL
              Specifies how often database update checks are performed.
              The default value: 1.00:00:00 (1 day)
      
-->
<setting name="DeviceDetection.DatabaseUpdateCheckInterval" value="1.00:00:00" patch:source="Sitecore.CES.DeviceDetection.config"/>
<!--
 DEVICE DETECTION FAIL DATABASE CHECK INTERVAL
              Specifies how often to retry initialize database in case of initialize fail.
              The default value: 00:10:00 (10 minutes)
       
-->
<setting name="DeviceDetection.FailDatabaseCheckInterval" value="00:10:00" patch:source="Sitecore.CES.DeviceDetection.config"/>
<!--
 DEVICE DETECTION ENSURE INITIALIZATION TIMEOUT
              Specifies how long EnsureInitialization method will wait for provider initialization.
              The default value: 00:02:00 (2 minutes)
       
-->
<setting name="DeviceDetection.CheckInitializationTimeout" value="00:02:00" patch:source="Sitecore.CES.DeviceDetection.config"/>
<!--
 DEVICE DETECTION DATABASE PATH
              Specifies the path where device databases are stored.
              The default value: /App_Data/DeviceDetection
      
-->
<setting name="DeviceDetection.DatabasePath" value="/App_Data/DeviceDetection" patch:source="Sitecore.CES.DeviceDetection.config"/>
<!--
  CES - GEO IP - CACHING - GEO IP CACHE EXPIRY TIME
            Specifies the length of time that IP Geolocation information cache entries should be stored if they have not been accessed. 
            
            Default value: 1:00:00:00 (1 day)
      
-->
<setting name="CES.GeoIp.Caching.GeoIpCacheExpiryTime" value="1:00:00:00" patch:source="Sitecore.CES.GeoIp.config"/>
<!--
  CES - GEO IP - CACHING - GEO IP CACHE SIZE
            Specifies  the size of the IP Geolocation information cache.
            Specify the value in bytes or append the value with KB, MB or GB.
            A value of 0 (zero) disables the cache.
            
            This cache is disabled by default, because IP geolocation information is cached with the analytics information.
            It should be enabled when analytics caching is turned off. For example, when xDB is disabled.

            
            Default value: 0 (zero)
      
-->
<setting name="CES.GeoIp.Caching.GeoIpCacheSize" value="0" patch:source="Sitecore.CES.GeoIp.config"/>
<!--
  CES - GEO IP - GEO IP SERVICE NAME
            Specifies the name of the CES IP Geolocation service.
            
            Default value: GeoIP
      
-->
<setting name="CES.GeoIp.GeoIpServiceName" value="GeoIP" patch:source="Sitecore.CES.GeoIp.config"/>
<!--
  CES - GEO IP - LOCAL FILTER IP RANGES FILE PATH
            Specifies the path of the locally stored file with filter Ip ranges.
            
            Default value: /App_Data/Sitecore.CES.GeoIp/IpFilterRanges.csv
      
-->
<setting name="CES.GeoIp.LocalFilterIpRangesFilePath" value="/App_Data/Sitecore.CES.GeoIp/IpFilterRanges.csv" patch:source="Sitecore.CES.GeoIp.config"/>
<!--
  OUTPUT EXCEPTION DETAILS
            If set to 'true', exception output includes type of an exception and a stack trace;
            otherwise, only an exception message.
            Default: false
      
-->
<setting name="ItemWebApi.OutputExceptionDetails" value="false" patch:source="Sitecore.ItemWebApi.config"/>
<!--
  OWIN ASSERT STAGE MARKERS
            Gets a value indicating whether exception should be thrown if processors are located in a wrong order
            in the owin.initialize pipeline.
            
            True if exception should be thrown when there is a middleware that is executed on
            a later stage than the next StageMarker processor specifies.
            
            Default value: true.
      
-->
<setting name="Owin.AssertStageMarkers" value="true" patch:source="Sitecore.Owin.config"/>
<!--
  OWIN AUTHENTICATION ENABLED
            Determines if OWIN based authentication is enabled.
            
            Default value: true 
-->
<setting name="Owin.Authentication.Enabled" value="true" patch:source="Sitecore.Owin.Authentication.config"/>
<!--
  FEDERATED AUTHENTICATION ENABLED
            Determines if federated authentication is enabled. Sitecore federated authentication is based on OWIN authentication,
            To enable federated authentication, you must enable "Owin.Authentication.Enabled".
            
            Default value: true 
-->
<setting name="FederatedAuthentication.Enabled" value="true" patch:source="Sitecore.Owin.Authentication.config"/>
<setting name="FederatedAuthentication.IdentityProcessingPathPrefix" value="/identity/" patch:source="Sitecore.Owin.Authentication.config"/>
<!--
  CACHING OWIN TRANSFORMED IDENTITIES CACHE SIZE
            Determines the size of the TransformedIdentitiesCacheSize cache, which improves
            the performance of the Bearer Token authentication.
            Specify the value in bytes or append the value with KB, MB or GB
            
            Default value: 50MB 
-->
<setting name="Caching.Owin.TransformedIdentitiesCacheSize" value="50MB" patch:source="Sitecore.Owin.Authentication.config"/>
<!--  The URI of the IdentityServer provider.  -->
<setting name="FederatedAuthentication.IdentityServer.Authority" value="https://127.0.0.1" patch:source="Sitecore.Owin.Authentication.IdentityServer.config"/>
<!--  The client identifier on the IdentityServer.  -->
<setting name="FederatedAuthentication.IdentityServer.ClientId" value="Sitecore" patch:source="Sitecore.Owin.Authentication.IdentityServer.config"/>
<!--
 The client identifier for the Resource Owner Password flow on the IdentityServer. 
-->
<setting name="FederatedAuthentication.IdentityServer.ResourceOwnerClientId" value="SitecorePassword" patch:source="Sitecore.Owin.Authentication.IdentityServer.config"/>
<!--
 This setting enables XConnect Collection and Search Client to access data extraction services. It is recommended to disable data extraction when not in use. 
-->
<setting name="XConnect.Client.EnableDataExtraction" value="true" patch:source="Sitecore.XConnect.Client.config"/>
<!--
 ANALYTICS DEFAULT DEFINITION DATABASE
                 Specifies the name of default database where
                 content item definitions are stored.
              
-->
<setting name="Analytics.DefaultDefinitionDatabase" value="master" patch:source="Sitecore.Analytics.config"/>
<!--
  ANALYTICS EMAIL FROM ADDRESS
                  Specifies the From address in emails that contain reports.
                  Default: <none>
              
-->
<setting name="Analytics.EMailFromAddress" value="" patch:source="Sitecore.Analytics.config"/>
<!--
  ANALYTICS GEOIPS CACHESIZE
                  Determines the number of cached items in the GeoIp Lookup Manager.
                  Default: 1000
              
-->
<setting name="Analytics.GeoIps.CacheSize" value="1000" patch:source="Sitecore.Analytics.config"/>
<!--
  XDB ENABLED
                  Determines whether xDB is enabled or not.
                  Default value: true
              
-->
<setting name="Xdb.Enabled" value="true" patch:source="Sitecore.Xdb.config"/>
<!--
  XDB DISABLED PAGE HANDLER
                  The URL of the page that is displayed when the Xdb is disabled. 
                  All applications that depend on the Xdb must redirect to this page when Xdb is disabled.
              
-->
<setting name="XdbDisabledUrl" value="/sitecore/service/xdb/disabled.aspx" patch:source="Sitecore.Xdb.config"/>
<!--
  ANALYTICS - MAX ACCEPTED CLOCK DEVIATION
                  Defines the largest acceptable deviation between the current server's system time and the system time
                  of other Sitecore servers in the same environment.
                  The system uses this setting to compensate for any system time deviation between servers.
                  Default: 0.00:00:10
              
-->
<setting name="Analytics.MaxAcceptedClockDeviation" value="0.00:00:10" patch:source="Sitecore.Xdb.config"/>
<!--
  XDB TRACKING ENABLED
                  Determines whether tracking is enabled or not.
                  Default value: true
              
-->
<setting name="Xdb.Tracking.Enabled" value="true" patch:source="Sitecore.Xdb.config"/>
<!--
  XDB TRACKING - KEY BEHAVIOR CACHE - MAXIMUMCACHEENTRYCOUNT
                  Specifies the maximum number of items that you can store in the cache for a given category (goals, page events, etc.).
                  Default: 50
              
-->
<setting name="Xdb.Tracking.KeyBehaviorCache.MaximumCacheEntryCount" value="50" patch:source="Sitecore.Xdb.config"/>
<!--
  XDB TRACKING - KEY BEHAVIOR CACHE - MAXIMUMINTERACTIONOPERIOD
                  Specifies the maximum time period (compared against start date time) for interactions that can be included in cache rebuilds or updates.
                  Default: 30 days
              
-->
<setting name="Xdb.Tracking.KeyBehaviorCache.MaximumInteractionPeriod" value="30.00:00:00" patch:source="Sitecore.Xdb.config"/>
<!--
  XDB TRACKING - KEY BEHAVIOR CACHE - MAXIMUMINTERACTIONCOUNT
                  Specifies the maximum number of interactions that can be included in cache rebuilds or updates
                  Default: 25
              
-->
<setting name="Xdb.Tracking.KeyBehaviorCache.MaximumInteractionCount" value="25" patch:source="Sitecore.Xdb.config"/>
<!--
  ANALYTICS BUFFER REPORTS OUTPUT
            Specifies whether to buffer the output for reports.
            If a large amount of data is used in the reports ( > 1GB), this setting should be set to "false".
            Default value: true
            
-->
<setting name="Analytics.BufferReportsOutput" value="true" patch:source="Sitecore.Xdb.Remote.Server.config"/>
<!--
  ANALYTICS AUTO DETECT BOTS
            Enable auto detection of bots.
            Default: true
      
-->
<setting name="Analytics.AutoDetectBots" value="true" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  ANALYTICS CAMPAIGN QUERY STRING KEY
            Specifies the key for triggering campaigns on the query string.
            Default: sc_camp
      
-->
<setting name="Analytics.CampaignQueryStringKey" value="sc_camp" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  ANALYTICS CLUSTER NAME
            Domain name of the web cluster this instance belongs to.
            Default: default-cd-cluster
      
-->
<setting name="Analytics.ClusterName" value="default-cd-cluster" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  ANALYTICS CONTACT MAXIMUM INTERACTIONS 
            Maximum number of interactions in contact history that can be loaded
            by personalization components on website pages.
            Default: 25
      
-->
<setting name="Analytics.ContactHistory.MaxInteractions" value="25" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  ANALYTICS EVENT QUERY STRING KEY
            Specifies the key for triggering events on the query string.
            Default: sc_trk
      
-->
<setting name="Analytics.EventQueryStringKey" value="sc_trk" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  ANALYTICS FORWARDED REQUEST HTTP HEADER
            Specifies the name of an HTTP header variable containing the IP address of the webclient.
            Only for use behind load-balancers that mask web client IP addresses from webservers.
            IMPORTANT: If this setting is used incorrectly, it allows IP address spoofing.
            Typical values are "X-Forwarded-For" and "X-Real-IP".
            Default value: "" (disabled)
      
-->
<setting name="Analytics.ForwardedRequestHttpHeader" value="" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  ANALYTICS HOST NAME
            Global domain name of the Sitecore website. 
            Default: <None>
      
-->
<setting name="Analytics.HostName" value="" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  ANALYTICS LOG LEVEL
            Determines which level of log errors are also logged in Analytics.
            Possible values are: None, Debug, Information, Warning, Error, and Fatal.
            Default: Error
      
-->
<setting name="Analytics.LogLevel" value="Error" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  ANALYTICS LONG RUNNING PAGE REQUEST
            Defines the threshold for long running pages in milliseconds.
            Default: 5000
      
-->
<setting name="Analytics.LongRunningRequest" value="5000" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  ANALYTICS PATTERNS MINIMAL PROFILE SCORE COUNT
            Specifies the minimum number of content items with profile values that must be requested before Sitecore
            maps the contact's accumulated score to a pattern card.
            Default: 3
      
-->
<setting name="Analytics.Patterns.MinimalProfileScoreCount" value="3" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  ANALYTICS PERFORM LOOKUP
            Determines if this server performs the lookups (DNS and URLs).
            Default: true
      
-->
<setting name="Analytics.PerformLookup" value="true" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  ANALYTICS - REDACT IP ADDRESS
            Determines if the IP addresses that initiated the interaction are redacted when writing to the database.
            When the setting is enabled, the database stores an empty IP address (0.0.0.0) instead of the actual IP address.
            Default value: false
      
-->
<setting name="Analytics.RedactIpAddress" value="false" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  ANALYTICS ROBOTS IGNORE ROBOTS
            Ignore requests and do not write information to the Analytics database when the visitor 
            classification identifies the visitor as a robot.
            Default: true
      
-->
<setting name="Analytics.Robots.IgnoreRobots" value="true" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  ANALYTICS ROBOTS SESSION TIMEOUT
            The ASP.NET Session Timeout for auto detected robots. 
            When the automatic robot detection identifies a session as being a robot, the ASP.NET
            Session Timeout is set to this value (in minutes).
            Default: 1
      
-->
<setting name="Analytics.Robots.SessionTimeout" value="1" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  ANALYTICS SAMPLING PERCENTAGE
            Specifies the percentage of sessions that analytics data should be collected for.
            Default: 100 (collect data for all sessions)
      
-->
<setting name="Analytics.Sampling.Percentage" value="100" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  ANALYTICS SUPPRESS TRACKING INITIALIZATION EXCEPTIONS
            Specifies whether exceptions thrown during tracking initialization should be suppressed.
            Default: true
      
-->
<setting name="Analytics.SuppressTrackingInitializationExceptions" value="true" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  ANALYTICS TRACKING COOKIE LIFETIME
            Specifies the lifetime of the tracking cookie in hours.
            Default: 87600 (10 years)
      
-->
<setting name="Analytics.CookieLifetime" value="87600" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
 ANALYTICS TRACKING COOKIE DOMAIN
            Specifies the name of the cookie domain for multi-domain tracking to share the contact cookie cross all domains.
            Default: <None>
     
-->
<setting name="Analytics.CookieDomain" value="" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  ANALYTICS USE SUBMIT QUEUE
            Specifies if the submit queue should be used when the contact or session submit operations cannot access the database.
            If set to true, the contact or session is queued until the database is back up (see the <submitQueue> section).
            Default: true
      
-->
<setting name="Analytics.UseSubmitQueue" value="true" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  WEBEDIT PAGE DAILY VISITS CACHE EXPIRATION
            Sets the absolute expiration on the cached daily visits data in Page Editor.
            Makes sense only when analytics is enabled.            
            Default value: 1.00:00:00 (1 day)
      
-->
<setting name="WebEdit.PageDailyVisitsCacheExpiration" value="1.00:00:00" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  WEBEDIT TEST STATISTICS CACHE EXPIRATION
              Sets the absolute expiration on the cached test statistics data in Page Editor.
              Makes sense only when analytics is enabled.            
              Default value: 01:00:00 (1 hour)
      
-->
<setting name="WebEdit.TestStatisticsCacheExpiration" value="01:00:00" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  ANALYTICS ITEMRECORDS ID CACHE SIZE
              Sets the size of the cache, which stores analytics definition IDs by name.
              Default value: 10MB
      
-->
<setting name="Analytics.ItemRecordsIDCache.Size" value="10MB" patch:source="Sitecore.Analytics.Tracking.config"/>
<!--
  MVC: Flag for controlling data source nesting.
            Default: "true"
      
-->
<setting name="Mvc.AllowDataSourceNesting" value="true" patch:source="Sitecore.Mvc.config"/>
<!--
  MVC: Path to controller items.
            Default: "/sitecore/layout/controllers"
      
-->
<setting name="Mvc.ControllersPath" value="/sitecore/layout/controllers" patch:source="Sitecore.Mvc.config"/>
<!--
  MVC: Flag to control whether or not rendering parameters should be decoded twice (Sitecore double-encodes them).
            Default: "true"
      
-->
<setting name="Mvc.DecodeRenderingParametersTwice" value="true" patch:source="Sitecore.Mvc.config"/>
<!--
  MVC: Name of default action to invoke on a controller.
            Default: "Index"
      
-->
<setting name="Mvc.DefaultActionName" value="Index" patch:source="Sitecore.Mvc.config"/>
<!--
  MVC: Name of default controller to invoke when handling form posts from renderings
            Default: "" (Means that renderings that contain empty Form Controller fields cannot handle form posts)
      
-->
<setting name="Mvc.DefaultFormControllerName" value="" patch:source="Sitecore.Mvc.config"/>
<!--
  MVC: Default extension of view files.
            Default: "cshtml"
      
-->
<setting name="Mvc.DefaultViewExtension" value="cshtml" patch:source="Sitecore.Mvc.config"/>
<!--
  MVC: Internal prefix used to filter out route keys that should be ignored.
            Default: "sc_ignore_"
      
-->
<setting name="Mvc.IgnoreKeyPrefix" value="sc_ignore_" patch:source="Sitecore.Mvc.config"/>
<!--
  MVC: Pipe separated list of route URL's that are valid for use with Sitecore.Mvc.
            The key of route and value separated by colon.
            Default: "|Sitecore.Mvc.Web:api/sitecore/{controller}/{action}|Sitecore.Mvc:sitecore/shell/api/sitecore/{controller}/{action}|"
      
-->
<setting name="Mvc.LegalRoutes" value="|Sitecore.Mvc.Web:api/sitecore/{controller}/{action}|Sitecore.Mvc:sitecore/shell/api/sitecore/{controller}/{action}|" patch:source="Sitecore.Mvc.config"/>
<!--
  MVC: Pipe separated list of route URL's that are not valid for use with Sitecore.Mvc.
            For instance, the default ASP.NET route ({controller}/{action}/{id}) catches most requests
            that are actually meant to be handled by the default Sitecore route.
            Default: "{controller}/{action}/{id}"
      
-->
<setting name="Mvc.IllegalRoutes" value="|{controller}/{action}/{id}|" patch:source="Sitecore.Mvc.config"/>
<!--
  MVC: Path to the model items.
            Default: "/sitecore/layout/models"
      
-->
<setting name="Mvc.ModelsPath" value="/sitecore/layout/models" patch:source="Sitecore.Mvc.config"/>
<!--
  MVC: Flag for controlling whether Razor View Engine will look at physical view last modified dates 
            when determining to use a view file from a pre-compiled assembly or from the file system.
            Default: "false"
      
-->
<setting name="Mvc.UsePhysicalViewsIfNewer" value="false" patch:source="Sitecore.Mvc.config"/>
<!--
  MVC: Path to the base file folder that contains the views used for item renderings.
            Default: "/views/renderers"
      
-->
<setting name="Mvc.RenderersViewFolder" value="/views/renderers" patch:source="Sitecore.Mvc.config"/>
<!--
  MVC: Path to the rendering items.
            Default: "/sitecore/layout/renderings"
      
-->
<setting name="Mvc.RenderingsPath" value="/sitecore/layout/renderings" patch:source="Sitecore.Mvc.config"/>
<!--
  MVC: Name of the default action to invoke in the Sitecore controller.
            Default: "Index"
      
-->
<setting name="Mvc.SitecoreActionName" value="Index" patch:source="Sitecore.Mvc.config"/>
<!--
  MVC: The name of the Sitecore controller.
            Default: "Sitecore"
      
-->
<setting name="Mvc.SitecoreControllerName" value="Sitecore" patch:source="Sitecore.Mvc.config"/>
<!--
  MVC: The name of the fall-through route handled by Sitecore.
            Default: "Sitecore"
      
-->
<setting name="Mvc.SitecoreRouteName" value="Sitecore" patch:source="Sitecore.Mvc.config"/>
<!--
  MVC: Flag for controlling whether or not detailed error messages are shown when a controller cannot be found.
            Default: "true"
      
-->
<setting name="Mvc.DetailedErrorOnMissingController" value="true" patch:source="Sitecore.Mvc.config"/>
<!--
  MVC: Pipe separated list of the legal file extensions for views.
            Default: "|cshtml|"
      
-->
<setting name="Mvc.ViewExtensions" value="|cshtml|" patch:source="Sitecore.Mvc.config"/>
<!--
  MVC: If the setting is true, the TransferMvcLayout processor will use the Legacy View Engine Transfer Logic, 
            otherwise - new one, which depends only on *.aspx extension.
            Default: "true"
      
-->
<setting name="Mvc.UseLegacyViewEngineTransferLogic" value="true" patch:source="Sitecore.Mvc.config"/>
<!--
  SITECORE SERVICES SECURITY POLICY
                  Specifies the Sitecore.Services.Infrastructure.Web.Http.Security.IAuthorizePolicy derived type that will set the security policy 
                  for the Sitecore services.
                  
                  Policies:
                  
                  Sitecore.Services.Infrastructure.Web.Http.Security.ServicesOffPolicy, Sitecore.Services.Infrastructure
                  - Policy denies access to all Entity and Item Services
                  
                  Sitecore.Services.Infrastructure.Web.Http.Security.ServicesLocalOnlyPolicy, Sitecore.Services.Infrastructure
                  - Policy denies access to all Entity and Item Services from requests originating from remote clients
                  
                  Sitecore.Services.Infrastructure.Web.Http.Security.ServicesOnPolicy, Sitecore.Services.Infrastructure
                  - Policy allows access to all Entity and Item Services
                  
                  Default: Sitecore.Services.Infrastructure.Web.Http.Security.ServicesLocalOnlyPolicy, Sitecore.Services.Infrastructure      
            
-->
<setting name="Sitecore.Services.SecurityPolicy" patch:source="SitecoreServices.EnabledRemoteAccess.config" value="Sitecore.Services.Infrastructure.Web.Http.Security.ServicesOnPolicy, Sitecore.Services.Infrastructure"/>
<!--
  SITECORE SERVICES ROUTE MAPPER
                  Specifies the Sitecore.Services.Infrastructure.Web.Http.IMapRoutes derived type that will configure routes 
                  for the Sitecore services
                  
                  Default: Sitecore.Services.Infrastructure.Web.Http.DefaultRouteMapper, Sitecore.Services.Infrastructure    
            
-->
<setting name="Sitecore.Services.RouteMapper" value="Sitecore.Services.Infrastructure.Web.Http.DefaultRouteMapper, Sitecore.Services.Infrastructure" patch:source="Sitecore.Services.Client.config"/>
<!--
  SITECORE SERVICES FALLBACK HTTP CONTROLLER SELECTOR" 
                  Specifies the System.Web.Http.Dispatcher.IHttpControllerSelector derived type that will be used to fallback
                  to if the Sitecore.Services.Infrastructure.Web.Http.Dispatcher.NamespaceHttpControllerSelector fails to locate a
                  controller to handle an incoming routed request.
                  
                  Default: System.Web.Http.Dispatcher.DefaultHttpControllerSelector, System.Web.Http    
            
-->
<setting name="Sitecore.Services.FallbackHttpControllerSelector" value="System.Web.Http.Dispatcher.DefaultHttpControllerSelector, System.Web.Http" patch:source="Sitecore.Services.Client.config"/>
<!--
  SITECORE SERVICES ASSEMBLIES RESOLVER" 
                  Specifies the System.Web.Http.Dispatcher.IAssembliesResolver, derived type that will be used manage the list of 
                  assemblies available for the application.
                  
                  Default: Sitecore.Services.Infrastructure.Web.Http.Dispatcher.FilteredAssembliesResolver, Sitecore.Services.Infrastructure    
            
-->
<setting name="Sitecore.Services.AssembliesResolver" value="Sitecore.Services.Infrastructure.Web.Http.Dispatcher.FilteredAssembliesResolver, Sitecore.Services.Infrastructure" patch:source="Sitecore.Services.Client.config"/>
<!--
  SITECORE EXTENSION VALIDATION FOLDER PATH
                  Specifies the folder in which to locate javascript validator extensions
            
                  Default: /sitecore/shell/client/Services/Assets/lib/extensions/validators      
            
-->
<setting name="Sitecore.Extensions.Validation.FolderPath" value="/sitecore/shell/client/Services/Assets/lib/extensions/validators" patch:source="Sitecore.Services.Client.config"/>
<!--
  SITECORE SERVICES ALLOW ANONYMOUS USER
                  Specifies whether anonymous users will be permitted to access the Sitecore Item Web API services
                  Default: false      
            
-->
<setting name="Sitecore.Services.AllowAnonymousUser" value="false" patch:source="Sitecore.Services.Client.config"/>
<!--
  SITECORE SERVICES ANONYMOUS USER
                  Specifies the user to impersonate if a request from an anonymous user is permitted to 
                  access the Sitecore Item Web API services
                  Default: sitecore\ServicesAPI      
            
-->
<setting name="Sitecore.Services.AnonymousUser" value="sitecore\ServicesAPI" patch:source="Sitecore.Services.Client.config"/>
<!--
  SITECORE SERVICES TOKEN AUTHORIZATION
                  Specifies if enabled Authorization Tokens are enabled or not. 
                  The setting Sitecore.Services.Token.SecurityKey is needed in ConnectionString.config.
                  Example: <add name="Sitecore.Services.Token.SecurityKey" connectionString="key=GHUwnYMxb75Td25yqyVdQQ8QQ8RzBG6T" />
                  Default: false.
            
-->
<setting name="Sitecore.Services.Token.Authorization.Enabled" value="false" patch:source="Sitecore.Services.Client.config"/>
<!--
  SITECORE SERVICES TOKEN AUTHORIZATION TIMEOUT
                  Specifies the authorization timeout in minutes.
                  Default: 20
            
-->
<setting name="Sitecore.Services.Token.Authorization.Timeout" value="20" patch:source="Sitecore.Services.Client.config"/>
<!--
 
                  Please use this value to pass API Key to Service.
                  Currently this can be passed through headers or as a query string.
                  Query string gets the priority if it is passed in both (Query string and headers).
            
-->
<setting name="Sitecore.Services.ApiKeyParams" value="sc_apikey" patch:source="Sitecore.Services.Client.config"/>
<!--
  SITECORE SERVICES ISTHROTTLEENABLED
                  Users can specify their throttle strategy through the API key item or by using the Throttle attribute of the controller. 
                  When the value of this setting = true, the throttle that is specified in the API key item or in the Throttle attribute of the controller is applied.
                  Example: If the value of this setting = true and in the API key item, the Throttle Strategy field is set to Simple Interval, this strategy is applied in the request pipeline.
                  Default value: false
            
-->
<setting name="Sitecore.Services.IsThrottleEnabled" value="false" patch:source="Sitecore.Services.Client.config"/>
<!--
 
                  Timeout in seconds during which the cached user name is valid. 
                  The cache is used in Sitecore.Services.Infrastructure.Sitecore.Security.UserService.UserExists(string userName) method.
            
-->
<setting name="Sitecore.Services.UserNamesCache.InvalidationTimeout" value="10" patch:source="Sitecore.Services.Client.config"/>
<!--
  SUPPORT PACKAGE RESPONSE TIMEOUT
            Specifies the time out for responding to support package generation requests by remote Sitecore instances. 
            Default value: 00:00:30
      
-->
<setting name="SupportPackage.ResponseTimeout" value="00:00:30" patch:source="Sitecore.ExperienceContentManagement.Administration.config"/>
<!--
  SUPPORT PACKAGE COLLECTION TIMEOUT
            Specifies the time out for generating support packages by remote Sitecore instances. 
            Default value: 00:05:00
      
-->
<setting name="SupportPackage.CollectionTimeout" value="00:05:00" patch:source="Sitecore.ExperienceContentManagement.Administration.config"/>
<!--
  SUPPORT PACKAGE RUN DIAGNOSTICS TASK FROM ADDRESSS
            Specifies the email address the scheduled diagnostics task will use to send email
            Default value: ""
      
-->
<setting name="SupportPackage.RunDiagnosticsTask.FromAddress" value="" patch:source="Sitecore.ExperienceContentManagement.Administration.config"/>
<!--
  SUPPORT PACKAGE RUN DIAGNOSTICS TASK MAIL TO
            Specifies the pipe-separated list of email addresses the scheduled diagnostics task will send email to.
            Default value: ""
      
-->
<setting name="SupportPackage.RunDiagnosticsTask.MailTo" value="" patch:source="Sitecore.ExperienceContentManagement.Administration.config"/>
<!--
  SUPPORT PACKAGE RUN DIAGNOSTICS TASK SUBJECT
            Specifies the subject pattern of email addresses the scheduled diagnostics task will send email with.
            Default value: "Sitecore Diagnostics Report {0:yyyy-MM-dd}"
      
-->
<setting name="SupportPackage.RunDiagnosticsTask.Subject" value="Sitecore Diagnostics Report {0:yyyy-MM-dd}" patch:source="Sitecore.ExperienceContentManagement.Administration.config"/>
<!--
  SUPPORT PACKAGE RUN DIAGNOSTICS TASK BODY
            Specifies the body pattern of email addresses the scheduled diagnostics task will send email with.
            Default value: "Please find the attached diagnostics report. You have received this email because this email is specified in the SupportPackage.RunDiagnosticsTask.MailTo setting."
      
-->
<setting name="SupportPackage.RunDiagnosticsTask.Body" value="Please find the attached diagnostics report. You have received this email because this email is specified in the SupportPackage.RunDiagnosticsTask.MailTo setting." patch:source="Sitecore.ExperienceContentManagement.Administration.config"/>
<!--
  SUPPORT PACKAGE DIAGNOSTICS SERVICE URL
            Specifies the diagnostics service endpoint URL for optional support package analysis.
            Default value: https://diagnostics.cloud.sitecore.net/api/v1
      
-->
<setting name="SupportPackage.DiagnosticsServiceUrl" value="https://diagnostics.cloud.sitecore.net/api/v1" patch:source="Sitecore.ExperienceContentManagement.Administration.config"/>
<!--
 Defines the delay after app startup after which the validation will occur. 
-->
<setting name="Messaging.GatewayClient.ConnectionValidation.StartDelaySeconds" value="15" patch:source="Sitecore.Messaging.GatewayClient.config"/>
<!--
 The validation is performed on all unhealthy gateway connections on each iteration.  This value controls
                the delay duraction between each of these iterations, according the formula : iterationCount ^ 2 * seed
-->
<setting name="Messaging.GatewayClient.ConnectionValidation.ExponentialDelaySeedSeconds" value="30" patch:source="Sitecore.Messaging.GatewayClient.config"/>
<!--
 Defines the maximum duration the validation task will run for, typically if there are unhealthy connections. 
-->
<setting name="Messaging.GatewayClient.ConnectionValidation.RunDurationHours" value="24" patch:source="Sitecore.Messaging.GatewayClient.config"/>
<!--
 When true, the validation task will complete when all connections are first identfied as healthy. 
-->
<setting name="Messaging.GatewayClient.ConnectionValidation.FinishWhenNoErrors" value="true" patch:source="Sitecore.Messaging.GatewayClient.config"/>
<!--
  SPEAK COMPONENT KNOCKOUT PRESENTER
            The name of the Knockout Presenter.
            Default: scKoPresenter
      
-->
<setting name="Speak.Components.KnockoutPresenter" value="scKoPresenter" patch:source="Sitecore.Speak.config"/>
<!--
  SPEAK COMPONENT SPEAK PRESENTER
            The name of the SPEAK Presenter.
            Default: scSpeakPresenter
      
-->
<setting name="Speak.Components.SpeakPresenter" value="scSpeakPresenter" patch:source="Sitecore.Speak.config"/>
<!--
  SPEAK HTML MINIFY SCRIPTS
            Indicates whether scripts should be bundled and minified.
            Default: false
      
-->
<setting name="Speak.Html.MinifyScripts" value="false" patch:source="Sitecore.Speak.config"/>
<!--
  SPEAK HTML MINIFY STYLESHEETS
            Indicates whether stylesheets should be bundled and minified.
            Default: false
      
-->
<setting name="Speak.Html.MinifyStylesheets" value="false" patch:source="Sitecore.Speak.config"/>
<!--
  SPEAK HTML REQUIRE JS CUSTOM HANDLER
            Specifies the prefix that should trigger the HTTP request customer handler (see the customHandlers section in the web.config file).
            Default: /-/speak/v1/
      
-->
<setting name="Speak.Html.RequireJsCustomHandler" value="/-/speak/v1/" patch:source="Sitecore.Speak.config"/>
<!--
  SPEAK HTML REQUIRE JS CONFIG FILE
            Specifies the path of the main.js config version SPEAK 2.0 file which configures Require.js.
            Default: /-/speak/v1/assets/main-config.js
      
-->
<setting name="Speak.Html.RequireJsConfigPath" value="/-/speak/v1/assets/main-config.js" patch:source="Sitecore.Speak.config"/>
<!--
  SPEAK HTML REQUIRE JS MAIN FILE
            Specifies the path of the main.js version SPEAK 2.0 file which configures Require.js.
            Default: /-/speak/v1/assets/main-2.0.js
      
-->
<setting name="Speak.Html.RequireJsMainFile" value="/-/speak/v1/assets/main-2.0.js" patch:source="Sitecore.Speak.config"/>
<!--
  SPEAK HTML REQUIRE JS MAIN FILE
            Specifies the path of the minfied SPEAK version for 2.0 of main.js file which configures Require.js.
            Default: /-/speak/v1/assets/main-2.0.min.js
      
-->
<setting name="Speak.Html.RequireJsMainFileMinified" value="/-/speak/v1/assets/main-2.0.min.js" patch:source="Sitecore.Speak.config"/>
<!--
  SPEAK BINDING JS FILE
            Specifies the path of the binding plugin required by SPEAK to apply bindings.
            Default: /sitecore/shell/client/Speak/Assets/lib/core/2.0/deps/scBindingPlugin.js
      
-->
<setting name="Speak.Html.BindingPluginFile" value="/sitecore/shell/client/Speak/Assets/lib/core/2.0/deps/scBindingPlugin.js" patch:source="Sitecore.Speak.config"/>
<!--
  SPEAK BINDING JS FILE MINIFIED
            Specifies the path of the binding plugin minified required by SPEAK to apply bindings.
            Default: /sitecore/shell/client/Speak/Assets/lib/core/2.0/deps/scBindingPlugin.min.js
      
-->
<setting name="Speak.Html.BindingPluginFileMinified" value="/sitecore/shell/client/Speak/Assets/lib/core/2.0/deps/scBindingPlugin.min.js" patch:source="Sitecore.Speak.config"/>
<!--
  THE MAIN FILE for the CMS 7.1
            Specifies the path of the main.js file which configures Require.js.
            Default: /-/speak/v1/assets/main.js
      
-->
<setting name="Speak.Html.RequireJSBackwardCompatibilityFile" value="/-/speak/v1/assets/main.js" patch:source="Sitecore.Speak.config"/>
<!--
  SPEAK REQUIRE WAIT SECONDS
            Overrides the Require.js waitSeconds setting
            Default: 30
      
-->
<setting name="Speak.Html.RequireJsWaitSeconds" value="30" patch:source="Sitecore.Speak.config"/>
<!--
  SPEAK HTTPCACHING ETAGENABLED
            Determines if the Http Cache Header If-None-Match should be checked.
            If the value is true, the etag is set to every item and file touched
            during the request.
            Default: false
      
-->
<setting name="Speak.HttpCaching.ETagEnabled" value="false" patch:source="Sitecore.Speak.config"/>
<!--
  SPEAK HTTPCACHING SETMAXAGE
            Determines if the Http Cache Header SetMaxAge should be set.
            If the value is true, the header is set to 0 seconds, making the
            browser request the file from the server every time. If value is 
            false, the file is retrieved from the browser cache.
            Default: true
      
-->
<setting name="Speak.HttpCaching.SetMaxAge" value="true" patch:source="Sitecore.Speak.config"/>
<!--
  IS PRODUCTION MODE
            Indicates whether the system is in production mode or not.
            Default: false
      
-->
<setting name="IsProductionMode" value="false" patch:source="Sitecore.Speak.config"/>
<!--
  MASTER RENDERING ID
            The item ID of the Master rendering, which can be expanded.
            Default: {5AA4AD6B-1228-45C1-B4C3-B1847AE60FA2}
      
-->
<setting name="Speak.Mvc.MasterRenderingID" value="{3DC89CCA-D94A-4C46-A16D-AF6D0CB7E721}" patch:source="Sitecore.Speak.config"/>
<!--
  LaunchPad ItemId  
            The LaunchPad item ID for the GobalLogo usage.
            Default: {6B846FBD-8549-4C91-AE6B-18286EFE82D2}
      
-->
<setting name="Speak.GobalLogo.LaunchPadId" value="{6B846FBD-8549-4C91-AE6B-18286EFE82D2}" patch:source="Sitecore.Speak.config"/>
<!--
  LAUNCHPAD - ENABLED PERSONALIZED FRAMES
            Controls whether to show personalized frames with Experience Analytics charts on the LaunchPad.
            Default: true
            
-->
<setting name="LaunchPad.EnablePersonalizedFrames" value="true" patch:source="Sitecore.Speak.LaunchPad.config"/>
<!--
  WEB EDIT AFFECT WORKFLOW FOR DATA SOURCE ITEMS
            Move datasources through the workflow with the context item.
            Default value: true
      
-->
<setting name="WebEdit.AffectWorkflowForDatasourceItems" value="true" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
  WEB EDIT AUTO SAVE ON EDIT FRAME
            Indicates whether whether item is automatically saved when edit frame is closed after editing.
            Default value: true
      
-->
<setting name="WebEdit.AutoSaveOnEditFrame" value="true" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
 WEB EDIT ITEM USAGES CACHE SIZE
             Specifies the size of the cache for Item Usages.
             Specify the value in bytes or append the value with KB, MB or GB
             A value of 0 (zero) disables the cache.
        
-->
<setting name="WebEdit.ItemUsagesCacheSize" value="10MB" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
  WEB EDIT BUNDLED JS FILES PATH
            Specifies the path where bundled JavaScript files are stored if WebEdit.EnableJSBundling = true
            Default value: /sitecore/shell/Applications/Page Modes/Ouput/
      
-->
<setting name="WebEdit.BundledJSFilesPath" value="/sitecore/shell/Applications/Page Modes/Ouput/" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
  WEB EDIT CONTENT EDITOR STYLESHEET
            The stylesheet to include in the content editor in WebEdit mode.
            Default value: /webedit.css
      
-->
<setting name="WebEdit.ContentEditorStylesheet" value="/webedit.css" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
  WEBEDIT DEFAULT BUTTON PATH
            Specifies default location of edit frame buttons in the core database.
            Default value: /sitecore/content/Applications/WebEdit/Edit Frame Buttons/Default
      
-->
<setting name="WebEdit.DefaultButtonPath" value="/sitecore/content/Applications/WebEdit/Edit Frame Buttons/Default" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
  WEBEDIT DISABLE ANIMATIONS
            Disables animation effects in the Experience Editor.
            Default value: false
      
-->
<setting name="WebEdit.DisableAnimations" value="false" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
  WEB EDIT ALL VERSIONS
            Allows switch to the shared layout of the page.
            Default value: true
      
-->
<setting name="WebEdit.EditAllVersions" value="true" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
  WEB EDIT ENABLE VALIDATION
            If true, the Experience Editor will execute item and field validation rules whenever a user tries to save items in the Experience Editor.
            Only 'Critical' and 'Fatal' validators are evaluated, and item validation rules are executed for the current context item only.
            Field validation rules are only executed for fields that the current user can modify in the Experience Editor.
            Default value: true
      
-->
<setting name="WebEdit.EnableValidation" value="true" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
  WEB EDIT ENABLE STYLESHEET BUNDLING
            Indicates whether web edit specific CSS files should be bundled into one file.
            Default value: true
      
-->
<setting name="WebEdit.EnableStylesheetBundling" value="true" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
  WEB EDIT ENABLE JS BUNDLING
            Indicates whether web edit specific JavaScript files should be bundled into one file.
            Default value: true
      
-->
<setting name="WebEdit.EnableJSBundling" value="true" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
  WEB EDIT EXPERIENCE EDITOR STYLESHEET
            The stylesheet to include in the experience editor.
            Default value: /shell/client/Sitecore/ExperienceEditor/Ribbon.css
      
-->
<setting name="WebEdit.ExperienceEditorStylesheet" value="/sitecore/shell/client/Sitecore/ExperienceEditor/Ribbon.css" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
  WEB EDIT PLACEHOLDERS EDITABLE WITHOUT SETTINGS
            Indicates whether placeholders should be editable in the Experience Editor if placeholder settings are not specified.
            Default value: false
      
-->
<setting name="WebEdit.PlaceholdersEditableWithoutSettings" value="false" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
  WEB EDIT SHOW NUMBER OF LOCKED ITEMS ON BUTTON
            Indicates whether WebEdit counts and shows user's locked items.
            Default value: true
      
-->
<setting name="WebEdit.ShowNumberOfLockedItemsOnButton" value="true" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
  WEB EDIT USE POPUP EDITOR
            Indicates whether WebEdit uses the popup content editor.
            Default value: false
      
-->
<setting name="WebEdit.UsePopupContentEditor" value="false" patch:source="Sitecore.ExperienceEditor.config"/>
<setting name="Sitecore.ContentTagging.DefaultConfigurationName" value="Default" patch:source="Sitecore.ContentTagging.config"/>
<setting name="Sitecore.ContentTagging.OpenCalais.CalaisEndpoint" value="https://api.thomsonreuters.com/permid/calais" patch:source="Sitecore.ContentTagging.OpenCalais.config"/>
<setting name="Sitecore.ContentTagging.OpenCalais.CalaisAccessToken" value="" patch:source="Sitecore.ContentTagging.OpenCalais.config"/>
<setting name="Sitecore.ContentTagging.OpenCalais.CalaisLanguage" value="English" patch:source="Sitecore.ContentTagging.OpenCalais.config"/>
<!--
  DATABASE
            The name of the Database where content is stored.
      
-->
<setting name="ListManagement.Database" value="master" patch:source="Sitecore.ListManagement.config"/>
<!--
  BATCH SIZE
            Defines default batch size for large subscription operations
            (e.g. Import contacts from CSV storage, Recalculate subscriptions, Remove duplicates)
      
-->
<setting name="ListManagement.BatchSize" value="250" patch:source="Sitecore.ListManagement.config"/>
<!--
  FACETS TO MAP
            The list of contact facets retrieved from XConnect to map data from a CSV file.
            Only fields that belong to facets listed here are mapped. All other fields are skipped.
      
-->
<setting name="ListManagement.Import.FacetsToMap" value="Emails|Personal|Addresses" patch:source="Sitecore.ListManagement.config"/>
<!--
  REQUIRED MAPPING FIELDS
            The list of the required mapping fields. If at least one of these fields is missing in a CSV file
            or is not mapped properly, the entire contact is skipped and not imported.
                
            Please note that the field names below should correspond to the Import Dialog mapping fields configured 
            in the 'core' database (you may use predefined Branches to add new mapping fields):
            '/sitecore/client/Applications/List Manager/Dialogs/ImportWizardDialog/PageSettings/TabControl Parameters/Map/ImportModel'
          
-->
<setting name="ListManagement.Import.RequiredFields" value="Identifier|PreferredEmail_SmtpAddress|Personal_FirstName|Personal_LastName" patch:source="Sitecore.ListManagement.config"/>
<!--
  IMPORT MAXIMUM THREADS
            Defines the maximum count of threads that can be used for importing operation.
          
-->
<setting name="ListManagement.Import.MaxThreads" value="8" patch:source="Sitecore.ListManagement.config"/>
<!--
  SYNC TIMEOUT
            Defines default timeout in seconds for indexing synchronization.
      
-->
<setting name="ListManagement.SyncTimeout" value="30" patch:source="Sitecore.ListManagement.config"/>
<!--
  RETRY COUNT
            Count of retries of request to xDB in case of failure.
      
-->
<setting name="ListManagement.XdbRequestRetriesCount" value="4" patch:source="Sitecore.ListManagement.config"/>
<!--
 CONTENT TESTING - AUTOMATIC CONTENT TESTING - ENABLED
           Determines whether automatic content testing features should be enabled.
           Default value: true
      
-->
<setting name="ContentTesting.AutomaticContentTesting.Enabled" value="true" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - ALWAYS SHOW TEST CANDIDATE NOTIFICATION
           Determines whether show test candidate notification is always enabled in the Content Testing.
           Default value: true
      
-->
<setting name="ContentTesting.AlwaysShowTestCandidateNotification" value="true" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - COMMAND ROUTE PREFIX
           The prefix used for controller routes.
           Default value: sitecore/shell/api/ct/
      
-->
<setting name="ContentTesting.CommandRoutePrefix" value="sitecore/shell/api/ct/" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - COMMAND ROUTE PREFIX MVC
           The prefix used for controller routes for mvc controllers.
           Default value: sitecore/shell/api/ct/mvc
      
-->
<setting name="ContentTesting.CommandRoutePrefix.Mvc" value="sitecore/shell/ct/" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - CUSTOM PATH FOR GENERATED FILES
           The path used for modifying the default path for generated files. 
           Default value: /temp
      
-->
<setting name="ContentTesting.CustomFileGenerationPath" value="/temp" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - DEFAULT CONFIDENCE LEVEL           
           The confidence level used when creating new content tests.
           Default value: 95
      
-->
<setting name="ContentTesting.DefaultConfidenceLevel" value="95" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - DEFAULT TRAFFIC ALLOCATION
           The content test traffic allocation as a percentage.
           Default value: 100
      
-->
<setting name="ContentTesting.DefaultTrafficAllocation" value="100" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - END TEST RULESET
           The path to the ruleset that determines whether a test can finish automatically.
           Default value: /sitecore/system/Settings/Content Testing/End Test Behavior
      
-->
<setting name="ContentTesting.EndTestRuleset" value="/sitecore/system/Settings/Content Testing/End Test Behavior" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - GENERATE SCREENSHOTS 
           Determines when screenshots should be generated.
           Must be one of ( all | limited | none )
           Default value: all
      
-->
<setting name="ContentTesting.GenerateScreenshots" value="all" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - MAXIMUM CONTENT TEST DURATION
           The maximum duration in days of a content test.
           
           Default value: 14
      
-->
<setting name="ContentTesting.MaximumContentTestDuration" value="14" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - MAXIMUM MV TEST DURATION
           The maximum duration in days of a multivariate content test.
           Default value: 90
      
-->
<setting name="ContentTesting.MaximumOptimizationTestDuration" value="90" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - MAXIMUM TOP EXPERIENCES
           Determines the upper limit for experiences if experiences is more than 1000. 
           Default value: 100
      
-->
<setting name="ContentTesting.MaximumTopExperience" value="100" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - MINIMUM DURATION
           The minimum duration in days of a content test.
           Default value: 7
      
-->
<setting name="ContentTesting.MinimumDuration" value="7" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - PHANTOM JS - REMOVE ABANDONED JS FILES
           Determines whether should remove abandoned JavaScript files.
           Default value: false
      
-->
<setting name="ContentTesting.PhantomJS.RemoveAbandonedJS" value="false" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - PHANTOM JS - ENABLE DISK CACHE
           Determines whether the PhantomJS tool should use disk caching for web resources.
           Default value: true
      
-->
<setting name="ContentTesting.PhantomJS.EnableDiskCache" value="true" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - PHANTOM JS - ENABLE JAVASCRIPT
           Determines whether the PhantomJS tool should allow JavaScript on pages.
           Default value: true
      
-->
<setting name="ContentTesting.PhantomJS.EnableJavaScript" value="true" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - PHANTOM JS - EXECUTABLE PATH
           The path to the PhantomJS tool that is used to generate screenshots of pages.
           Default value: $(dataFolder)/tools/phantomjs/phantomjs.exe
      
-->
<setting name="ContentTesting.PhantomJS.ExecutablePath" value="/App_Data/tools/phantomjs/phantomjs.exe" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - PHANTOM JS - IGNORE SSL ERRORS
           Determines whether the PhantomJS tool should ignore errors with SSL when accessing resources.
           Default value: true
      
-->
<setting name="ContentTesting.PhantomJS.IgnoreSSLErrors" value="true" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - PHANTOM JS - .JS FILE MAX TIMESPAN
           The maximum timespan an abandoned .js file can exist in minute.
           Default value: 5
      
-->
<setting name="ContentTesting.PhantomJS.JSFileMaxTimespan" value="5" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - PHANTOM JS - LOAD IMAGES
           Determines whether the PhantomJS tool should load images on pages.
           Default value: true
      
-->
<setting name="ContentTesting.PhantomJS.LoadImages" value="true" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - PHANTOM JS - LOCK NAVIGATION
           Determines whether the PhantomJS tool will load content from other URLs including iFrames.
           Default value: true
      
-->
<setting name="ContentTesting.PhantomJS.LockNavigation" value="true" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - PHANTOM JS - SSL PROTOCOL
           The SSL protocol to instruct the PhantomJS tool to use for SSL resources.
           Must be one of ( SSLv3 | SSLv2 | TLSv1 | any )
           Default value: any
      
-->
<setting name="ContentTesting.PhantomJS.SSLProtocol" value="any" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - PHANTOM JS - TIMEOUT
           The timeout in milliseconds used when executing calls to PhantomJS
           Default value: 60000
      
-->
<setting name="ContentTesting.PhantomJS.Timeout" value="60000" patch:source="Sitecore.ContentTesting.config"/>
<!--
  CONTENT TESTING - DATABASE - REPORTING - NAME
            The reporting database name. Using to store Personalization rules.
            Default value: reporting
      
-->
<setting name="ContentTesting.Database.Reporting.Name" value="reporting" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - SCREENSHOT - VIEWPORT - DEFAULT HEIGHT
           The height of the view port used to generate screenshots of pages if not specified in the screenshot task.
           Default value: 800
      
-->
<setting name="ContentTesting.Screenshot.ViewPort.DefaultHeight" value="800" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - SCREENSHOT - VIEWPORT - DEFAULT WIDTH
           The width of the view port used to generate screenshots of pages if not specified in the screenshot task.
           Default value: 1200
      
-->
<setting name="ContentTesting.Screenshot.ViewPort.DefaultWidth" value="1200" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - SUGGESTED TEST INDEX NAME
           The default suggested test index name.
           Default value: sitecore_suggested_test_index
      
-->
<setting name="ContentTesting.SuggestedTestIndexName" value="sitecore_suggested_test_index" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - SUGGESTED TESTS - MAXIMUM
           The maximum number of suggested tests to show.
           Default value: 50
      
-->
<setting name="ContentTesting.SuggestedTests.Maximum" value="50" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - TEST EXTENSION PERIOD
           The number of days that the test can be extended when no winner is found.
           Default value: 14
      
-->
<setting name="ContentTesting.TestExtensionPeriod" value="14" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - TEST STRATEGY
           The default content test strategy.
           Default value: /sitecore/system/Settings/Content Testing/Test Strategies/Subgroup Round Robin Sticky
      
-->
<setting name="ContentTesting.TestStrategy" value="/sitecore/system/Settings/Content Testing/Test Strategies/Subgroup Round Robin Sticky" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - TESTING INDEX NAME
           The default testing index name.
           Default value: sitecore_testing_index
      
-->
<setting name="ContentTesting.TestingIndexName" value="sitecore_testing_index" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - VISITOR - COMBINATION STORAGE
           Specifies the storage mechanism to use for the visitors test combinations.
           Must be one of ( xdbfacet | cookie )
           Default value: xdbfacet
      
-->
<setting name="ContentTesting.Visitor.TestCombinationStorage" value="xdbfacet" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - INTERACTION DDATA SOURCE - MAX BATCH SIZE
           The number of interaction data source max batch size for machine learning data projection usage.
           Default value: 1000
      
-->
<setting name="ContentTesting.ML.InteractionDataSource.MaxBatchSize" value="1000" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - INTERACTION DATA SOURCE - DEFAULT SPLIT ITEM COUNT
           The number of interaction data source default split item count for machine learning data projection usage.
           Default value: 1000
      
-->
<setting name="ContentTesting.ML.InteractionDataSource.DefaultSplitItemCount" value="1000" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - MODEL TRAINING - MAX DURATION
           The maximum allowed duration in minutes of a machine learning model training.
           Default value: 20
      
-->
<setting name="ContentTesting.ML.ModelTraining.MaxDuration" value="20" patch:source="Sitecore.ContentTesting.config"/>
<!--
 CONTENT TESTING - MINIMUM UNIQUE VISITORS
           The minimum amount of unique visitors to start machine learning model training on each non-winning test experiences.
           Default value: 1000
      
-->
<setting name="ContentTesting.ML.MinimumUniqueVisitors" value="1000" patch:source="Sitecore.ContentTesting.config"/>
<settings name="ExperienceProfile.Api.MaxSearchLength" value="250" patch:source="Sitecore.ExperienceProfile.config"/>
<!--
  EXPERIENCE EXPLORER IS ENABLED
            Global setting for enabling Experience Explorer on server
            Is useful in multi-server environment
            Default value: true
      
-->
<setting name="ExperienceExplorer.Enabled" value="true" patch:source="Sitecore.ExperienceExplorer.config"/>
<!--
  EXPERIENCE EXPLORER TESTING IP
            The IP used for testing Geo Ip Service Connectivity
            Default value: 195.184.101.134
      
-->
<setting name="ExperienceExplorer.GeoTestingIp" value="195.184.101.134" patch:source="Sitecore.ExperienceExplorer.config"/>
<!--
  EXPERIENCE EXPLORER DEFAULT GEO IP
            The IP used as default when preset is not defined.
            Default value: 74.124.9.9
      
-->
<setting name="ExperienceExplorer.GeoIp.DefaultIp" value="74.124.9.9" patch:source="Sitecore.ExperienceExplorer.config"/>
<!--
  EXPERIENCE EXPLORER DATABASE
            Represents context database to be used within the explorer mode.
            Default value: master
      
-->
<setting name="ExperienceExplorer.Database" value="master" patch:source="Sitecore.ExperienceExplorer.config"/>
<!--
 EXPERIENCE ANALYTICS - AGGREGATION - SEGMENT DEPLOY DATE OFFSET PADDING
           Controls additional padding when interaction's SaveDateTime is compared with segment's deploy date.
           The timespan built from the value of this setting is added to the segment's deploy date.
           When a segment is being deployed, the DeployDate will be DateTime.UtcNow.Add(SegmentDeployDateOffsetPadding)
           Interaction data for the particular segment will be processed if interaction.SaveDateTime > segment.DeployDate
           Default value: 00:30:00 (30 minutes)
            
-->
<setting name="ExperienceAnalytics.Aggregation.SegmentDeployDateOffsetPadding" value="00:30:00" patch:source="Sitecore.ExperienceAnalytics.Aggregation.config"/>
<!--
 EXPERIENCE ANALYTICS - DEFAULT DATE RANGE OFFSET - FROM
           The default offset (in days) that is used in a date range filter for the 'from date'.
           Default value: -90
        
-->
<setting name="ExperienceAnalytics.DefaultDateRangeOffset.From" value="-90" patch:source="Sitecore.ExperienceAnalytics.Client.config"/>
<!--
 EXPERIENCE ANALYTICS - DEFAULT DATE RANGE OFFSET - TO
           The default offset (in days) that is used in a date range filter for the 'to date'.
           Default value: -1
        
-->
<setting name="ExperienceAnalytics.DefaultDateRangeOffset.To" value="-1" patch:source="Sitecore.ExperienceAnalytics.Client.config"/>
<!--
 EXPERIENCE ANALYTICS - REDUCE - DEFAULT KEEP COUNT THRESHOLD
           If the number of segment records exceeds this value,
           the reduce operation will take top X records sorted by Visits and Value and ignore all other thresholds.
           For example, it will take top 1000 records per segment, date and site, and will collapse the rest of the records,
           but only if the number of original records exceeds 1000.
           Default value: 1000
            
-->
<setting name="ExperienceAnalytics.Reduce.DefaultKeepCountThreshold" value="1000" patch:source="Sitecore.ExperienceAnalytics.Reduce.config"/>
<!--
 EXPERIENCE ANALYTICS - REDUCE - DEFAULT VALUE THRESHOLD
           Similar to DefaultVisitThreshold, but the check is performed against the "Value" metric.
           Since there could be negative values, the check is performed in absolute value.
           By default, this threshold is inactive and reserved for special cases.
           Default value: -1 (disabled)
            
-->
<setting name="ExperienceAnalytics.Reduce.DefaultValueThreshold" value="-1" patch:source="Sitecore.ExperienceAnalytics.Reduce.config"/>
<!--
 EXPERIENCE ANALYTICS - REDUCE - DEFAULT VISIT THRESHOLD
           Identifies the threshold for the "Visits" metric when a segment record to be considered significant, i.e. excluded from "long tail".
           If it is set to 10, for example, then any segment record with less than 10 visit metric will be considered insignificant
           and will be reduced as a part of the "long tail".
           IMPORTANT: This threshold will be taken into account only if the number of original records is less than value of KeepCountThreshold.
           Default value: 10
            
-->
<setting name="ExperienceAnalytics.Reduce.DefaultVisitThreshold" value="10" patch:source="Sitecore.ExperienceAnalytics.Reduce.config"/>
<!--
 EXPERIENCE ANALYTICS - REDUCE - DEFAULT RETENTION PERIOD
                number of days to keep the records non-reduced.
                This parameter also specifies the date for which to perform the reduce, i.e.:
                (DateTime.Now in local server time - retention period).
                Default: 7.00:00:00 (7 days)
            
-->
<setting name="ExperienceAnalytics.Reduce.DefaultRetentionPeriod" value="7.00:00:00" patch:source="Sitecore.ExperienceAnalytics.Reduce.config"/>
<!--
 EXPERIENCE ANALYTICS - REDUCE - DEFAULT ORDERBY
                order of the most significant metrics which will be used during the reduce process 
                in the ORDER BY clause to find the least significant rows 
                Default: Visits,Value
            
-->
<setting name="ExperienceAnalytics.Reduce.DefaultOrderBy" value="Visits,abs(Value)" patch:source="Sitecore.ExperienceAnalytics.Reduce.config"/>
<!--
 EXPERIENCE ANALYTICS - REDUCE - TIMEOUT
           The maximum amount of time the reducer can run. After this amount of time, the reducer will be aborted. 
           Default value: 1 hour
            
-->
<setting name="ExperienceAnalytics.Reduce.Timeout" value="01:00:00" patch:source="Sitecore.ExperienceAnalytics.Reduce.config"/>
<!--
 EXPERIENCE ANALYTICS - API - CACHE EXPIRATION
               TTL for reporting data cache on server and client side. Used in conjunction with the cacheEnabled=true flag on reporting/dataProvider.
               Default value: 00:15:00 (15 minutes)
            
-->
<setting name="ExperienceAnalytics.Api.CacheExpiration" value="00:15:00" patch:source="Sitecore.ExperienceAnalytics.WebAPI.config"/>
<!--
 EXPERIENCE ANALYTICS - API - CACHE EXPIRATION FOR SAFE REQUEST
               TTL for reporting data cache on server side. Used in conjunction with the cacheEnabled=true flag on reporting/dataProvider.
               Default value: 1:00:00:00 (24 hours)
            
-->
<setting name="ExperienceAnalytics.Api.ServerSideSafeRequestCacheExpiration" value="1:00:00:00" patch:source="Sitecore.ExperienceAnalytics.WebAPI.config"/>
<!--
 EXPERIENCE ANALYTICS - API - CACHE EXPIRATION FOR SAFE REQUEST
               TTL for reporting data cache on client side. Used in conjunction with the cacheEnabled=true flag on reporting/dataProvider.
               Default value: 365:00:00:00 (365 days)
            
-->
<setting name="ExperienceAnalytics.Api.ClientSideSafeRequestCacheExpiration" value="365:00:00:00" patch:source="Sitecore.ExperienceAnalytics.WebAPI.config"/>
<!--
 EXPERIENCE ANALYTICS - API - CACHE EXPIRATION FOR RISKY REQUEST
               TTL for reporting data cache on server side. Used in conjunction with the cacheEnabled=true flag on reporting/dataProvider.
               Default value: 24:00 (24 hours)
            
-->
<setting name="ExperienceAnalytics.Api.ServerSideRiskyRequestCacheExpiration" value="01:00:00" patch:source="Sitecore.ExperienceAnalytics.WebAPI.config"/>
<!--
 EXPERIENCE ANALYTICS - API - CACHE EXPIRATION FOR RISKY REQUEST
               TTL for reporting data cache on client side. Used in conjunction with the cacheEnabled=true flag on reporting/dataProvider.
               Default value: 24:00 (24 hours)
            
-->
<setting name="ExperienceAnalytics.Api.ClientSideRiskyRequestCacheExpiration" value="1:00:00:00" patch:source="Sitecore.ExperienceAnalytics.WebAPI.config"/>
<!--
 EXPERIENCE ANALYTICS - API - INTERNAL CACHE EXPIRATION
               TTL for internal data cache e.g. segments. Used in conjunction with the cacheEnabled=true flag on reporting/dataProvider.
               Default value: 00:05:00 (5 minutes)
            
-->
<setting name="ExperienceAnalytics.InternalCacheExpiration" value="00:05:00" patch:source="Sitecore.ExperienceAnalytics.WebAPI.config"/>
<!--
 EXPERIENCE ANALYTICS - API - KEYS TOP DEFAULT
               The default value for keyTop query parameter.
               Default value: 100
            
-->
<setting name="ExperienceAnalytics.Api.KeysTopDefault" value="100" patch:source="Sitecore.ExperienceAnalytics.WebAPI.config"/>
<!--
 EXPERIENCE ANALYTICS - API - MASTER DATABASE
               The content database used to decorate server data with labels and other auxiliary information.
               Default value: master
            
-->
<setting name="ExperienceAnalytics.Api.MasterDatabase" value="master" patch:source="Sitecore.ExperienceAnalytics.WebAPI.config"/>
<!--
 EXPERIENCE ANALYTICS - API - CACHE EXPIRATION FOR DIMENSION KEYS
               TTL for dimension keys cache on server side. 
               Default value: 365:00:00:00 (365 days)
            
-->
<setting name="ExperienceAnalytics.Api.DimensionKeysCacheExpiration" value="365:00:00:00" patch:source="Sitecore.ExperienceAnalytics.WebAPI.config"/>
<!--
 SITECORE EXPERIENCEFORMS CONNECTIONSTRINGNAME PARAMETER
           Specifies the connection string name pointing to the Sitecore Experience Forms database. 
      
-->
<setting name="Sitecore.ExperienceForms.ConnectionStringName" value="experienceforms" patch:source="Sitecore.ExperienceForms.config"/>
<!--
 SITECORE EXPERIENCEFORMS FIELDSPREFIX PARAMETER
           Specifies the prefix used by the MVC rendering for the fields collection names.
      
-->
<setting name="Sitecore.ExperienceForms.FieldsPrefix" value="Fields" patch:source="Sitecore.ExperienceForms.config"/>
<!--
 SITECORE EXPERIENCEFORMS FIELDSINDEXNAME PARAMETER
           Specifies the index name used by the MVC rendering for the field index indentifier.
      
-->
<setting name="Sitecore.ExperienceForms.FieldsIndexName" value="Index" patch:source="Sitecore.ExperienceForms.config"/>
<!--
 BUNDLE BASE PATH
        All created bundles will be available at $(bundle.basepath)/$(bundlename)
        Must start with "~/"
      
-->
<setting name="Bundle.BasePath" value="~/bundle" patch:source="Sitecore.FXM.Bundle.config"/>
<!--
 BUNDLE PIPELINE NAME PREFIX
        A bundle pipeline is execute to create and register each bundle.  The name of that pipeline is expected to 
        be <PipelineNamePrefix><bundle name>.
      
-->
<setting name="Bundle.PipelineNamePrefix" value="bundle." patch:source="Sitecore.FXM.Bundle.config"/>
<!--
 FXM PAGE PARAMETER
      Default value: Sitecore.FXM.ComponentSettingsHelper.QueryPageParameterDefaultValue
      
-->
<setting name="FXM.QueryPageParameter" value="" patch:source="Sitecore.FXM.config"/>
<!--
 FXM URL PARAMETER
      Default value: Sitecore.FXM.ComponentSettingsHelper.QueryUrlParameterDefaultValue
      
-->
<setting name="FXM.QueryUrlParameter" value="" patch:source="Sitecore.FXM.config"/>
<!--
 FXM BASE HOST DOMAIN
        When the Sitecore site and external sites are hosted on a common base domain but under different
        sub domains (and the sub domain isn't 'www'), then this setting should be set to the common base domain.  
        The following table best explains this:
        
        Site A                  Site B                    Base Host Domain
        shop.mysite.co.uk       jobs.mysite.co.uk         mysite.co.uk
        shop.mysite.co.uk       www.mysite.co.uk              -             (www is a special case and accounted for)
        www.mysite.co.uk        mysite.co.uk                  -
        shop.mysite.co.uk       mysite.co.uk                  -
        shop.mysite.co.uk       jobs.mysite.com               -
        mysite.co.uk            mysite.com                    -
      
-->
<setting name="FXM.BaseHostDomain" value="" patch:source="Sitecore.FXM.config"/>
<!--
 FXM P3P HEADER
        A 'P3P' HTTP header is required to enable cross domain requests to be permitted by all versions of Internet Explorer.  
        All FXM service responses include a P3P header, with a value that can be controlled via this configuration setting.  
        An appropriate value is provided by default, though there are potentially legal consequences attached to P3P values, 
        so Sitecore advises customers to carefully consider the P3P value for their business.
      
-->
<setting name="FXM.P3PHeader" value="CURa ADMa DEVa TAIi PSAi PSDi IVAi IVDi CONi HISa TELi OUR IND DSP CAO COR" patch:source="Sitecore.FXM.config"/>
<!--
 FXM PROTOCOL
        The protocol used when making the tracking calls by the FXM client Javascript back to the Sitecore instance.  This defaults
        to using the same protocol as was used to request the current page in the browser.  Alternative values are either 'http' or 'https'.
        Note that when tracking secure pages ('https'), this setting will require the Sitecore instance to also be available
        on https.  Changing this value to 'http', might yield browser warning messages to the user resembling "there are insecure
        elements on this page".
      
-->
<setting name="FXM.Protocol" value="//" patch:source="Sitecore.FXM.config"/>
<!--
 FXM HOSTNAME
        The host name used when making the tracking calls by the FXM client Javascript back to the Sitecore instance.  This defaults
        to using the same host name as was used to request the current page in the browser. This should be set to the DNS name assigned
        to the Content Delivery Server.
      
-->
<setting name="FXM.Hostname" value="" patch:source="Sitecore.FXM.config"/>
<!--
 FXM BUNDLED JS PATH
        Specifies the path where bundled JavaScript files are stored.
        Note: the path shouldn't be specified outside \Website folder due to limitations.
      
-->
<setting name="FXM.BundledJSFilesPath" value="/temp/fxm" patch:source="Sitecore.FXM.config"/>
<!--
 FXM SHARE SESSIONS WHEN POSSIBLE
        This provides the option to record visits across multiple sites made in the same browser session, to be 
        recorded in the same analytics interaction.  This behavior is limited by the same restrictions as tracking 
        contacts across sites, so on Safari and IE 8 & 9 page visits cannot be recorded in the same interaction.  
        The analytics data model does not officially support visits to multiple sites within the same interaction, 
        so turning this setting on is not recommended.
      
-->
<setting name="FXM.ShareSessionsWhenPossible" value="false" patch:source="Sitecore.FXM.config"/>
<!--  Specifies the path to the rule items.  -->
<setting name="MarketingAutomation.RulesPath" value="/sitecore/system/Settings/Rules/XConnect - Conditions" patch:source="Sitecore.Marketing.Automation.Client.config"/>
<!--  Specifies if Context.ContentLanguage.Name is used  -->
<setting name="MarketingAutomation.UseContextContentLanguage" value="false" patch:source="Sitecore.Marketing.Automation.Client.config"/>
<!--
 Specifies the number of contacts retrieved at a time when exporting contacts. 
-->
<setting name="MarketingAutomation.ExportContactsBatchSize" value="250" patch:source="Sitecore.Marketing.Automation.Client.config"/>
<!--
 Specifies the size of contacts batch retrieved when contacts are purged from a plan. 
-->
<setting name="MarketingAutomation.PurgeContactsBatchSize" value="250" patch:source="Sitecore.Marketing.Automation.Client.config"/>
<!--
 The size of the cache used to track duplicate opens/clicks. 
-->
<setting name="EXM.OpenAndClickCache" value="1MB" patch:source="Sitecore.EmailExperience.ContentDelivery.config"/>
<!--
 The number of threads that you can use for sending messages. 
-->
<setting name="NumberThreads" value="10" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 Specifies how many sending threads can generate messages at the same time.
           Value should be no less than 1.
           Default value: Environment.ProcessorCount * 2 
-->
<setting name="MaxGenerationThreads" value="" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 The number of recipients in each batch enqueued in the dispatch queue. 
-->
<setting name="DispatchEnqueueBatchSize" value="300" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 The number of threads that adds recipient batches to dispatch queue. 
-->
<setting name="DispatchEnqueueThreadsNumber" value="4" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 The number of contacts that each dispatch thread will attempt to process at a time. 
-->
<setting name="EXM.DispatchBatchSize" value="100" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 Specifies whether the message sending process is emulated without actual message transmission via MTA. 
-->
<setting name="MtaEmulation.Active" value="false" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 The minimum amount of time to emulate a single sending (milliseconds). 
-->
<setting name="MtaEmulation.MinSendTime" value="200" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 The maximum amount of time to emulate a single sending (milliseconds). 
-->
<setting name="MtaEmulation.MaxSendTime" value="400" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--  The probability of a connection fail (%). -->
<setting name="MtaEmulation.FailProbability" value="0.01" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 The period of time (in seconds) after which the module considers automated message failed. 
-->
<setting name="ResetTimeout" value="3600" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 Specifies the name of the default global opt-out contact list. 
-->
<setting name="StandardMessages.DefaultGlobalOptOutList" value="Common Global Opt-out" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 Specifies the path of the Subscription Confirmation message used by the self-service subscription control. 
-->
<setting name="StandardMessages.SubscriptionConfirmation" value="Service Messages/Self-Service Subscription/Subscription Confirmation" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 Specifies the path of the Subscription Notification message used by the self-service subscription control. 
-->
<setting name="StandardMessages.SubscriptionNotification" value="Service Messages/Self-Service Subscription/Subscription Notification" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 Specifies the path of the Unsubscribe Notification message used by the self-service subscription control. 
-->
<setting name="StandardMessages.UnsubscribeNotification" value="Service Messages/Self-Service Subscription/Unsubscribe Notification" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 Specifies the path of the Dispatch Completed status message. 
-->
<setting name="StandardMessages.DispatchCompleted" value="Service Messages/Status Messages/Dispatch Completed" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 Specifies the path of the Triggered Activation status message. 
-->
<setting name="StandardMessages.TriggeredNotification" value="Service Messages/Status Messages/Automated Notification" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 The total allowed size in bytes of all attachments for a message. 
-->
<setting name="EXM.AttachmentTotalSizeInBytes" value="7340032" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 Check if recipient lists have pending operations before dispatch. 
-->
<setting name="EXM.CheckRecipientListsStatus" value="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--  Specifies the path of the 'EXM' tasks.  -->
<setting name="EXM.TasksPath" value="/sitecore/system/Settings/Email/Tasks" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--  Specifies the path of the Email Test Definition.  -->
<setting name="EXM.EmailTestDefinitionPath" value="/sitecore/system/Marketing Control Panel/Test Lab/Emails" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 Specifies whether the MTA connection should be tested before attempting starting a dispatch 
-->
<setting name="EXM.CheckMtaConnection" value="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 Specifies whether the Email Cloud suppression list is checked during dispatch. A contact will never receive an email if they are on the 
      suppression list, as the Email Cloud will skip sending to the contact, even if this check is disabled, so this check is only made to avoid sending 
      an email to the Email Cloud. 
-->
<setting name="EXM.CheckSuppressionList" value="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--  Sets whether EXM is enabled  -->
<setting name="EXM.Enabled" value="true" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 The private key for legacy data encrypting/decrypting. 
-->
<setting name="PrivateKey" value="" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 The name of UserAgent that will be used to request pages for rendering emails in the dispatch process. 
-->
<setting name="DispatchUserAgent" value="ECM Dispatch" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 The key name of the flag in a session's custom data storage used for marking it as an email click session. 
-->
<setting name="EmailClickSessionKey" value="EXMClickedThroughSession" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 The name of the web site for EXM events that are not associated with a specific web site. E.g. message sent, message undelivered, spam complaint received. 
-->
<setting name="EXM.DefaultEventSiteName" value="exm" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 The maximum number of messages (or message related campaigns, tests, etc.) to create in a single folder. 
-->
<setting name="MaxMessageFolderSize" value="50" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Specifies the property name of a user profile, which will be used as a Contact phone number. 
-->
<setting name="PhoneFieldName" value="phone" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Specifies the property name of a user profile, which will be used as a Contact preferred language. 
-->
<setting name="LanguageFieldName" value="" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 The user name to log in with if anonymous access is disabled. 
-->
<setting name="IIS.User" value="" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 The password to log in with if anonymous access is disabled. 
-->
<setting name="IIS.Password" value="" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 The path to the handler which should process email open events. 
-->
<setting name="EXM.OpenHandlerPath" value="/sitecore%20modules/Web/EXM/RegisterEmailOpened.ashx" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Specifies the key for the contact identifier source on the query string. 
-->
<setting name="QueryStringKey.ContactIdentifierSource" value="ex_id_s" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Specifies the key for the contact identifier identifier on the query string. 
-->
<setting name="QueryStringKey.ContactIdentifierIdentifier" value="ex_id_i" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Specifies the key for identifying email campaign on the query string. Legacy, used to handle links sent by previous ECM versions. 
-->
<setting name="QueryStringKey.Campaign" value="ec_camp" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Specifies the key for identifying contact on the query string. 
-->
<setting name="QueryStringKey.AnalyticsContactId" value="ec_contact_id" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Specifies the key for identifying the target URL in a redirect request. 
-->
<setting name="QueryStringKey.RedirectUrl" value="ec_url" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 The key is used to identify page requests of the module. 
-->
<setting name="QueryStringKey.EcmId" value="ec_id" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 The key is used to identify page requests of the module. 
-->
<setting name="QueryStringKey.ExmEncryptedQuery" value="ec_eq" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Specifies the key for setting the context user of a web page renderd as a message body. 
-->
<setting name="QueryStringKey.Recipient" value="ec_recipient" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Specifies the key for confirming subscriptions from emails. 
-->
<setting name="QueryStringKey.Subscription" value="ec_subscr" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Specifies the key for identifying message on the query string. 
-->
<setting name="QueryStringKey.MessageId" value="ec_message_id" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Specifies the key for identifying the target language in the query string. 
-->
<setting name="QueryStringKey.TargetLanguage" value="ec_lang" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Specifies the key for identifying the test value index in the query string. 
-->
<setting name="QueryStringKey.TestValueIndex" value="ec_tvi" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 The key which should be used for online versions of emails.  
-->
<setting name="QueryStringKey.OnlineVersionQueryStringKey" value="sc_pd_view" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Specifies the key for identifying the email history entry id in the query string. 
-->
<setting name="QueryStringKey.EmailHistoryEntryId" value="ec_emailid" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--  The Channel Id associated with the campaign.  -->
<setting name="CampaignClassification.Channel" value="{DDAFB85B-1511-48B8-9374-2A8A1F371645}" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--  The regular expression used for e-mail validation.  -->
<setting name="EXM.EmailValidationRegex" value="^[\p{L}0-9\+\-_\!\$\%\&\*\?]+(?:\.[\p{L}0-9\+\-_\'\!\$\%\&\*\?]+)*@(([\p{L}0-9\-]+(?:[\p{L}0-9\-]*\.[\p{L}0-9]+)+)|(\[\d{1,3}(\.\d{1,3}){3}\]))$" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--  The regular expression used for url validation.  -->
<setting name="EXM.UrlValidationRegex" value="^(http|https){1}\:\/\/(([a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]?)\.)*([a-zA-Z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9]?)(:\d{2,5})?(\/[a-zA-Z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9]?)*(\/{1})?$" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
The host name that is used to download the message source when a message is being previewed and/or dispatched to recipients 
-->
<setting name="EXM.RendererUrl" value="" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--  The size of the message body cache.  -->
<setting name="EXM.MessageBodyMaxCacheSize" value="5MB" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Specifies if Context.ContentLanguage.Name should be used for the Marketing Operations API
-->
<setting name="EXM.UseContextContentLanguage" value="false" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Specifies if PII sensitive data should be logged by EXM 
-->
<setting name="EXM.IncludePIIinLogFiles" value="false" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Specifies if EXM should clear the exm#lang cookie when rendering an email campaign 
-->
<setting name="EXM.ClearLanguageCookieOnRendering" value="true" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Value in seconds in which two email events (e.g. opens and clicks) related to the same message and contact are considered duplicates. 
            Within this interval only the first registration will be stored. 
-->
<setting name="EXM.DuplicateProtectionInterval" value="300" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Specifies comma separated URLs that should be used for handling unsubscribe requests initated by List-Unsubscribe header 
-->
<setting name="EXM.ListUnsubscribeUrl" value="/sitecore%20modules/Web/EXM/ListUnsubscribe.aspx" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 The size of the cache used to track unique opens/clicks. 
-->
<setting name="EXM.UniqueEventCache" value="1MB" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Aggregation.config"/>
<!--  Specifies whether verbose logging is enabled.  -->
<setting name="EXM.Debug" value="false" patch:source="Sitecore.ExM.Framework.config"/>
<!--
 PATH ANALYZER - CACHING - TREE CACHE EXPIRATION
           Sets the absolute expiration on cached tree data.
           A value of 00:00:00 disables automatic expiration.

           Default value: 00:15:00 (15 minutes)
        
-->
<setting name="PathAnalyzer.Caching.TreeCacheExpiration" value="00:15:00" patch:source="Sitecore.PathAnalyzer.config"/>
<!--
 PATH ANALYZER - AGGREGATION - MAP DEPLOY DATE OFFSET PADDING
           Controls additional padding when interaction's SaveDateTime is compared with map deploy date.
           The timespan built from the value of this setting is added to the map deploy date.
           When a map is being deployed, the DeployDate will be DateTime.UtcNow.Add(MapDeployDateOffsetPadding)
           Interaction data for the particular map will be processed if interaction.SaveDateTime > map.DeployDate
           Default value: 00:30:00 (30 minutes)
        
-->
<setting name="PathAnalyzer.Aggregation.MapDeployDateOffsetPadding" value="00:30:00" patch:source="Sitecore.PathAnalyzer.config"/>
<!--
 PATH ANALYZER - AGGREGATION - COLLAPSE DUPLICATE RECORDS
           When sequences of records are being processed, collapse records with the same RecordId into one.
           Default value: true
        
-->
<setting name="PathAnalyzer.Aggregation.CollapseDuplicateRecords" value="true" patch:source="Sitecore.PathAnalyzer.config"/>
<!--
 PATH ANALYZER - ENSURE MAP DEPLOYMENT
          Every Minute the agent making sure the maps are deployed if they are in deployed state
          Default value: true
      
-->
<setting name="PathAnalyzer.EnsureMapDeployment" value="true" patch:source="Sitecore.PathAnalyzer.config"/>
<!--
 PATH ANALYZER - MAX STORED CONTACTS
           Sets the maximum count of stored contact IDs on nodes in the tree.
           Default value: 10
        
-->
<setting name="PathAnalyzer.MaxStoredContacts" value="10" patch:source="Sitecore.PathAnalyzer.config"/>
<!--
 PATH ANALYZER - MAX NODES TO RETURN
           Sets the maximum number of child nodes that we can return from the server.
           Default value: 30
        
-->
<setting name="PathAnalyzer.MaxNodeCount" value="30" patch:source="Sitecore.PathAnalyzer.config"/>
<!--
 PATH ANALYZER - PRUNING - MAX TREE DEPTH
           Specifies the maximum depth of trees. Tree node sequences will not be added beyond this depth.
        
-->
<setting name="PathAnalyzer.Pruning.MaxTreeDepth" value="20" patch:source="Sitecore.PathAnalyzer.config"/>
<!--
 PATH ANALYZER - PRUNING - MAX TREE NODE COUNT
           A tree containing more nodes than the amount specified by this setting will be eligible for pruning.
        
-->
<setting name="PathAnalyzer.Pruning.MaxTreeNodeCount" value="10000" patch:source="Sitecore.PathAnalyzer.config"/>
<!--
 PATH ANALYZER - PRUNING - VISIT COUNT THRESHOLD
           Specifies the visit count threshold using by the tree pruning process.
           Statistically insignificant nodes with subtree counts less than this threshold setting are eligible for pruning.
        
-->
<setting name="PathAnalyzer.Pruning.VisitCountThreshold" value="2" patch:source="Sitecore.PathAnalyzer.config"/>
<!--
 PATH ANALYZER - REMOTE SERVICES - ENABLED
           Specifies the dictionary domain name containing Path Analyzer string resource definitions.
        
-->
<setting name="PathAnalyzer.Resources.DictionaryDomainName" value="core:PathAnalyzerDictionary" patch:source="Sitecore.PathAnalyzer.config"/>
<!--
 PATH ANALYZER - CACHING - RESPONSE CACHE EXPIRATION
           Sets the absolute expiration on cached controller response data.
           A value of 00:00:00 disables automatic expiration.

           Default value: 00:01:00 (1 minute)
        
-->
<setting name="PathAnalyzer.Caching.ResponseCacheExpiration" value="00:01:00" patch:source="Sitecore.PathAnalyzer.Services.config"/>
<!--
 PATH ANALYZER - RESPONSE - NODE NAME RESOLVING MODE
           Possible values: 0(raw) | 1(name) | 2(displayname)
           Default value: 0
        
-->
<setting name="PathAnalyzer.Response.NodeNameResolvingMode" value="0" patch:source="Sitecore.PathAnalyzer.Services.config"/>
</settings>
<tracking>
<untrackedPages>
<add path="/sitecore/default.aspx"/>
<add path="/sitecore/service/error.aspx"/>
<add path="/sitecore/service/Heartbeat.aspx"/>
<add path="/sitecore/service/keepalive.aspx"/>
<add path="/sitecore/service/nolicense.aspx"/>
</untrackedPages>
<sessionContextManager type="Sitecore.Analytics.Data.HttpSessionContextManager, Sitecore.Analytics" singleInstance="true" patch:source="Sitecore.Analytics.Tracking.config"/>
<contactManager type="Sitecore.Analytics.Tracking.ContactManager, Sitecore.Analytics" singleInstance="true" patch:source="Sitecore.Analytics.Tracking.Database.config">
<param ref="tracking/sharedSessionState/manager" desc="sharedSessionStateManager" patch:source="Sitecore.Analytics.Tracking.Database.config"/>
<!--
 The default contact repository is a stub that prevents the contact manager from reading and writing to the collection database.
             This behavior is overridden by the Sitecore.Analytics.Tracking.Database.config file.
        
-->
</contactManager>
<nullContactRepository type="Sitecore.Analytics.Data.ContactRepository, Sitecore.Analytics" singleInstance="true" patch:source="Sitecore.Analytics.Tracking.config">
<param type="Sitecore.Analytics.DataAccess.Null.NullDataAdapterProvider" desc="dataAdapterProvider"/>
</nullContactRepository>
<sharedSessionState defaultProvider="InProc" patch:source="Sitecore.Analytics.Tracking.config">
<providers>
<clear/>
<add name="InProc" type="System.Web.SessionState.InProcSessionStateStore"/>
</providers>
<manager type="Sitecore.Analytics.Tracking.SharedSessionState.SharedSessionStateManager, Sitecore.Analytics">
<param ref="tracking/sharedSessionState/config" desc="configuration"/>
</manager>
<config type="Sitecore.Analytics.Tracking.SharedSessionState.SharedSessionStateConfig, Sitecore.Analytics">
<param desc="maxLockAge">5000</param>
<!--
 If an item in session state is already locked, this parameter is the time in milliseconds that the system is idle before making another attempt to apply a lock. 
-->
<param desc="timeoutBetweenLockAttempts">200</param>
</config>
</sharedSessionState>
</tracking>
<serviceProviderBuilder type="Sitecore.DependencyInjection.DefaultServiceProviderBuilder, Sitecore.Kernel"/>
<!--  Heartbeat  -->
<heartbeatConfiguration type="Sitecore.Services.HeartbeatConfiguration, Sitecore.Kernel" patch:source="Sitecore.EmailExperience.Heartbeat.config">
<!--
 EXCLUDE
           Excludes connection string from being checked by heartbeat
      
-->
<exclude hint="list:AddExcludedConnection" patch:source="Sitecore.EmailExperience.Heartbeat.config">
<connectionStringName desc="64 character key represented in hexadecimal format used for cryptography" patch:source="Sitecore.EmailExperience.Heartbeat.config">EXM.CryptographicKey</connectionStringName>
<connectionStringName desc="64 character key represented in hexadecimal format used for authentication" patch:source="Sitecore.EmailExperience.Heartbeat.config">EXM.AuthenticationKey</connectionStringName>
<connectionStringName desc="64 character key represented in hexadecimal format used for internal api communication" patch:source="Sitecore.EmailExperience.Heartbeat.config">EXM.InternalApiKey</connectionStringName>
<connectionStringName desc="URL to dedicated dispatch server" patch:source="Sitecore.EmailExperience.Heartbeat.config">EXM.DedicatedDispatchService</connectionStringName>
</exclude>
</heartbeatConfiguration>
<services patch:source="Sitecore.Reporting.Client.config">
<register serviceType="Sitecore.Reporting.Client.IReportingClient, Sitecore.Reporting.Client" implementationType="Sitecore.Reporting.Client.ReportingClient, Sitecore.Reporting.Client" lifetime="Scoped"/>
<register serviceType="Sitecore.Reporting.Client.IReadonlyReportingClient, Sitecore.Reporting.Client" implementationType="Sitecore.Reporting.Client.ReadonlyReportingClient, Sitecore.Reporting.Client" lifetime="Scoped"/>
<register serviceType="Sitecore.Reporting.Client.Validators.IFactQueryOptionsDescriptorValidator, Sitecore.Reporting.Client" implementationType="Sitecore.Reporting.Client.Validators.FactQueryOptionsDescriptorValidator, Sitecore.Reporting.Client" lifetime="Singleton"/>
<register serviceType="Sitecore.Reporting.Client.Validators.IFactDeleteOptionsDescriptorValidator, Sitecore.Reporting.Client" implementationType="Sitecore.Reporting.Client.Validators.FactDeleteOptionsDescriptorValidator, Sitecore.Reporting.Client" lifetime="Singleton"/>
<register serviceType="Sitecore.Reporting.Client.Builders.IFactOptionsBuilderFactory, Sitecore.Reporting.Client" implementationType="Sitecore.Reporting.Client.Builders.FactOptionsBuilderFactory, Sitecore.Reporting.Client" lifetime="Singleton"/>
<register serviceType="Sitecore.Reporting.Core.Services.Hashing.IKeyHasher, Sitecore.Reporting.Core" implementationType="Sitecore.Reporting.Core.Services.Hashing.KeyHasher, Sitecore.Reporting.Core" lifetime="Singleton" patch:source="Sitecore.Reporting.Core.config"/>
<register serviceType="Sitecore.Reporting.Core.Services.Caching.ICacheManager, Sitecore.Reporting.Core" implementationType="Sitecore.Reporting.Core.Services.Caching.CacheManager, Sitecore.Reporting.Core" lifetime="Singleton" patch:source="Sitecore.Reporting.Core.config"/>
<register serviceType="Sitecore.Reporting.Core.Services.IConnectionStringResolver, Sitecore.Reporting.Core" implementationType="Sitecore.Reporting.Core.Services.ConnectionStringResolver, Sitecore.Reporting.Core" lifetime="Singleton" patch:source="Sitecore.Reporting.Core.config"/>
<register serviceType="Sitecore.Reporting.Core.Services.IAppSettingResolver, Sitecore.Reporting.Core" implementationType="Sitecore.Reporting.Core.Services.AppSettingResolver, Sitecore.Reporting.Core" lifetime="Singleton" patch:source="Sitecore.Reporting.Core.config"/>
<register serviceType="Sitecore.Reporting.Service.Abstractions.IReadonlyReportingContext, Sitecore.Reporting.Service.Abstractions" implementationType="Sitecore.Reporting.Service.Http.Abstractions.ReportingHttpReader, Sitecore.Reporting.Service.Http.Abstractions" lifetime="Scoped" patch:source="Sitecore.Reporting.Service.Http.Abstractions.config"/>
<register serviceType="Sitecore.Reporting.Service.Abstractions.IReportingContext, Sitecore.Reporting.Service.Abstractions" implementationType="Sitecore.Reporting.Service.Http.Abstractions.ReportingHttpReaderWriter, Sitecore.Reporting.Service.Http.Abstractions" lifetime="Scoped" patch:source="Sitecore.Reporting.Service.Http.Abstractions.config"/>
<register serviceType="Sitecore.Reporting.Service.Http.Abstractions.IHttpRequestUriBuilder, Sitecore.Reporting.Service.Http.Abstractions" implementationType="Sitecore.Reporting.Service.Http.Abstractions.HttpRequestUriBuilder, Sitecore.Reporting.Service.Http.Abstractions" lifetime="Scoped" patch:source="Sitecore.Reporting.Service.Http.Abstractions.config"/>
<register serviceType="Sitecore.Reporting.Service.Http.Abstractions.IReportingHttpClient, Sitecore.Reporting.Service.Http.Abstractions" implementationType="Sitecore.Reporting.Service.Http.Abstractions.XdbReportingWebClient, Sitecore.Reporting.Service.Http.Abstractions" lifetime="Singleton" patch:source="Sitecore.Reporting.Service.Http.Abstractions.config"/>
<register serviceType="Sitecore.Reporting.Service.Http.Abstractions.IHttpClientFactory, Sitecore.Reporting.Service.Http.Abstractions" implementationType="Sitecore.Reporting.Service.Http.XConnectClient.HttpClientFactory, Sitecore.Reporting.Service.Http.XConnectClient" lifetime="Singleton" patch:source="Sitecore.Reporting.Service.Http.XConnectClient.config"/>
<!--  Sitecore Xdb Sql Common Configurator  -->
<configurator type="Sitecore.Xdb.Sql.Common.Xmgmt.SqlCommonConfigurator, Sitecore.Xdb.Sql.Common.Xmgmt" patch:source="Sitecore.Xdb.Sql.Common.config"/>
<configurator type="Sitecore.Buckets.Client.BucketsServicesConfigurator, Sitecore.Buckets.Client" patch:source="Sitecore.Buckets.config"/>
<configurator type="Sitecore.Owin.Infrastructure.ServicesConfigurator, Sitecore.Owin" patch:source="Sitecore.Owin.config"/>
<configurator type="Sitecore.Owin.Authentication.Infrastructure.ServicesConfigurator, Sitecore.Owin.Authentication" patch:source="Sitecore.Owin.Authentication.config"/>
<configurator type="Sitecore.Owin.Authentication.IdentityServer.ServicesConfigurator, Sitecore.Owin.Authentication.IdentityServer" patch:source="Sitecore.Owin.Authentication.IdentityServer.config"/>
<register serviceType="Sitecore.XConnect.Client.Configuration.IClientFactory, Sitecore.XConnect.Client.Configuration" implementationType="Sitecore.XConnect.Client.Configuration.SitecoreXConnectClientFactory, Sitecore.XConnect.Client.Configuration" lifetime="Transient" patch:source="Sitecore.XConnect.Client.config"/>
<!--  Automation operations client  -->
<configurator type="Sitecore.Xdb.MarketingAutomation.OperationsClient.Configuration.AutomationOperationsClientConfigurator, Sitecore.Xdb.MarketingAutomation.OperationsClient.Configuration" patch:source="Sitecore.Xdb.MarketingAutomation.OperationsClient.config"/>
<!--  Automation reporting client  -->
<configurator type="Sitecore.Xdb.MarketingAutomation.ReportingClient.Configuration.AutomationReportingClientConfigurator, Sitecore.Xdb.MarketingAutomation.ReportingClient.Configuration" patch:source="Sitecore.Xdb.MarketingAutomation.ReportingClient.config"/>
<!--
 Converter to convert between Guid and Definition Moniker 
-->
<!--  Common  -->
<register serviceType="Sitecore.Xdb.ReferenceData.Core.Converter.IMonikerConverter`1[[System.Guid, mscorlib]], Sitecore.Xdb.ReferenceData.Core" implementationType="Sitecore.Xdb.ReferenceData.Core.Converter.GuidMonikerConverter, Sitecore.Xdb.ReferenceData.Core" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<!--  Utility to aggregate operation results  -->
<register serviceType="Sitecore.Xdb.ReferenceData.Core.Results.IDefinitionOperationResultDiagnostics, Sitecore.Xdb.ReferenceData.Core" implementationType="Sitecore.Xdb.ReferenceData.Core.Results.DefinitionOperationResultDiagnostics, Sitecore.Xdb.ReferenceData.Core" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<!--
 Converter to convert between Definition and Definition Record 
-->
<register serviceType="Sitecore.Xdb.ReferenceData.Core.Converter.IDefinitionRecordConverter, Sitecore.Xdb.ReferenceData.Core" implementationType="Sitecore.Xdb.ReferenceData.Core.Converter.DefinitionRecordJsonConverter, Sitecore.Xdb.ReferenceData.Core" lifetime="Singleton" patch:source="Sitecore.Xdb.ReferenceData.Core.config"/>
<!--
 Converter that converts definition data to UTF8 encoded JSON 
-->
<register serviceType="Sitecore.Xdb.ReferenceData.Core.Converter.IDefinitionEnvelopeConverter, Sitecore.Xdb.ReferenceData.Core" implementationType="Sitecore.Xdb.ReferenceData.Core.Converter.DefinitionEnvelopeJsonConverter, Sitecore.Xdb.ReferenceData.Core" lifetime="Singleton" patch:source="Sitecore.Xdb.ReferenceData.Core.config"/>
<!--
 Converter that is used to envelop definition records. 
-->
<register serviceType="Sitecore.Xdb.ReferenceData.Core.Converter.IRecordEnvelopeConverter, Sitecore.Xdb.ReferenceData.Core" implementationType="Sitecore.Xdb.ReferenceData.Core.Converter.RecordEnvelopeCloneConverter, Sitecore.Xdb.ReferenceData.Core" lifetime="Singleton" patch:source="Sitecore.Xdb.ReferenceData.Core.config"/>
<!--  Reference data client  -->
<!--  Reference data client  -->
<configurator patch:source="Sitecore.Xdb.ReferenceData.ClientCache.config" type="Sitecore.Xdb.ReferenceData.Client.Xmgmt.ReferenceDataClientCachingDecoratorConfigurator, Sitecore.Xdb.ReferenceData.Client.Xmgmt"/>
<!--  Logging  -->
<configurator type="Sitecore.Xdb.ReferenceData.Client.Xmgmt.Logging.SitecoreLoggingServicesConfigurator, Sitecore.Xdb.ReferenceData.Client.Xmgmt" patch:source="Sitecore.Xdb.ReferenceData.Client.config"/>
<!--
 Reference data cache which stores entries in memory. 
-->
<configurator type="Sitecore.Xdb.ReferenceData.Client.Xmgmt.DefinitionCacheConfigurator, Sitecore.Xdb.ReferenceData.Client.Xmgmt" patch:source="Sitecore.Xdb.ReferenceData.ClientCache.config"/>
<!--  Logging configurator  -->
<configurator type="Sitecore.Marketing.xMgmt.Logging.SitecoreLoggingServicesConfigurator, Sitecore.Marketing.xMgmt" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.xMgmt.Pipelines.DeployDefinition.DeploymentManager, Sitecore.Marketing.xMgmt" implementationType="Sitecore.Marketing.xMgmt.Pipelines.DeployDefinition.DeploymentManager, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.IItemRepositoriesSettings, Sitecore.Marketing" implementationType="Sitecore.Marketing.DefaultItemRepositoriesSettings, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.IDefinitionManagerSettings, Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.DefaultDefinitionManagerSettings, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.IDefinitionFieldLabelResolver, Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.ItemBasedDefinitionFieldLabelResolver, Sitecore.Marketing.xMgmt" lifetime="Transient" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.xMgmt.Observers.IPublishTargetResolver, Sitecore.Marketing.xMgmt" implementationType="Sitecore.Marketing.xMgmt.Observers.PublishTargetResolver, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.DefinitionManagerFactory, Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.DefinitionManagerFactory, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Core.ObservableFeed.Execution.INotificationExecutionStrategy, Sitecore.Marketing.Core" implementationType="Sitecore.Marketing.Core.ObservableFeed.Execution.ThreadedExecutionStrategy, Sitecore.Marketing.Core" lifetime="Transient" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Core.ObservableFeed.Delay.IDelayStrategy, Sitecore.Marketing.Core" implementationType="Sitecore.Marketing.Core.ObservableFeed.Delay.DecayingDelayStrategy, Sitecore.Marketing.Core" lifetime="Transient" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Profiles.IDecayStrategy, Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Profiles.DefaultDecayStrategy, Sitecore.Marketing" lifetime="Transient" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Profiles.Patterns.IPatternDistance, Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Profiles.Patterns.SquaredEuclideanDistance, Sitecore.Marketing" lifetime="Transient" patch:source="Sitecore.Marketing.config"/>
<!--  Campaign  -->
<register serviceType="Sitecore.Marketing.Definitions.IDefinitionManager`1[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Campaigns.CampaignDefinitionManager, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Campaigns.Data.ICampaignDefinitionRepository, Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Campaigns.Data.ItemDb.CampaignDefinitionItemRepository, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.ITaxonomyClassificationResolver`1[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.DefaultClassificationResolver`1[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Config.FieldTaxonomyMap`1[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Campaigns.DefaultCampaignTaxonomyMap, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!--  Campaign  -->
<register serviceType="Sitecore.Marketing.Search.IDefinitionSearchProvider`1[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.CampaignDefinitionSearchProvider, Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationObservableFeed`1[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.Activation.ActivationRetryingObservableFeed`1[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.DeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Repository.IDefinitionRecordMapper`1[[Sitecore.Marketing.Definitions.Campaigns.Data.CampaignActivityDefinitionRecord, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" implementationType="Sitecore.Marketing.Definitions.Campaigns.Data.ItemDb.CampaignDefinitionItemRepository+CampaignMapper, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.Activation.PublishItemObserver`1[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.DeleteDefinition.UnPublishItem`1[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!--  Asset  -->
<register serviceType="Sitecore.Marketing.Definitions.IDefinitionManager`1[[Sitecore.Marketing.Definitions.MarketingAssets.IMarketingAssetDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.MarketingAssets.MarketingAssetDefinitionManager, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.MarketingAssets.Data.IMarketingAssetDefinitionRepository, Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.MarketingAssets.Data.ItemDb.MarketingAssetDefinitionItemRepository, Sitecore.Marketing.Definitions.MarketingAssets.Repositories" lifetime="Singleton" patch:source="Sitecore.Marketing.Definitions.MarketingAssets.Repositories.config"/>
<register serviceType="Sitecore.Marketing.Definitions.ITaxonomyClassificationResolver`1[[Sitecore.Marketing.Definitions.MarketingAssets.IMarketingAssetDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.DefaultClassificationResolver`1[[Sitecore.Marketing.Definitions.MarketingAssets.IMarketingAssetDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Config.FieldTaxonomyMap`1[[Sitecore.Marketing.Definitions.MarketingAssets.IMarketingAssetDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.MarketingAssets.DefaultMarketingAssetTaxonomyMap, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Search.IDefinitionSearchProvider`1[[Sitecore.Marketing.Definitions.MarketingAssets.IMarketingAssetDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.NotSupportedSearchProvider`1[[Sitecore.Marketing.Definitions.MarketingAssets.IMarketingAssetDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationObservableFeed`1[[Sitecore.Marketing.Definitions.MarketingAssets.IMarketingAssetDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.Activation.ActivationRetryingObservableFeed`1[[Sitecore.Marketing.Definitions.MarketingAssets.IMarketingAssetDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.MarketingAssets.IMarketingAssetDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.DeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.MarketingAssets.IMarketingAssetDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.MarketingAssets.IMarketingAssetDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.Activation.PublishItemObserver`1[[Sitecore.Marketing.Definitions.MarketingAssets.IMarketingAssetDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.MarketingAssets.IMarketingAssetDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.DeleteDefinition.UnPublishItem`1[[Sitecore.Marketing.Definitions.MarketingAssets.IMarketingAssetDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!--  Goal  -->
<register serviceType="Sitecore.Marketing.Definitions.IDefinitionManager`1[[Sitecore.Marketing.Definitions.Goals.IGoalDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Goals.GoalDefinitionManager, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Goals.Data.IGoalDefinitionRepository, Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Goals.Data.ItemDb.GoalDefinitionItemRepository, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.ITaxonomyClassificationResolver`1[[Sitecore.Marketing.Definitions.Goals.IGoalDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.DefaultClassificationResolver`1[[Sitecore.Marketing.Definitions.Goals.IGoalDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Config.FieldTaxonomyMap`1[[Sitecore.Marketing.Definitions.Goals.IGoalDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Goals.DefaultGoalTaxonomyMap, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Search.IDefinitionSearchProvider`1[[Sitecore.Marketing.Definitions.Goals.IGoalDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.NotSupportedSearchProvider`1[[Sitecore.Marketing.Definitions.Goals.IGoalDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationObservableFeed`1[[Sitecore.Marketing.Definitions.Goals.IGoalDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.Activation.ActivationRetryingObservableFeed`1[[Sitecore.Marketing.Definitions.Goals.IGoalDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.Goals.IGoalDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.DeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.Goals.IGoalDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Repository.IDefinitionRecordMapper`1[[Sitecore.Marketing.Definitions.Goals.Data.GoalDefinitionRecord, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" implementationType="Sitecore.Marketing.Definitions.Goals.Data.ItemDb.GoalDefinitionItemRepository+GoalMapper, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Goals.IGoalDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.Activation.PublishItemObserver`1[[Sitecore.Marketing.Definitions.Goals.IGoalDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.Goals.IGoalDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.DeleteDefinition.UnPublishItem`1[[Sitecore.Marketing.Definitions.Goals.IGoalDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!--  PageEvent  -->
<register serviceType="Sitecore.Marketing.Definitions.IDefinitionManager`1[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.PageEvents.PageEventDefinitionManager, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.PageEvents.Data.IPageEventDefinitionRepository, Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Definitions.PageEvents.Data.ItemDb.PageEventDefinitionItemRepository, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.ITaxonomyClassificationResolver`1[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.DefaultClassificationResolver`1[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Config.FieldTaxonomyMap`1[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.PageEvents.DefaultPageEventTaxonomyMap, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!-- Page Events -->
<register serviceType="Sitecore.Marketing.Search.IDefinitionSearchProvider`1[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.PageEventDefinitionSearchProvider, Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationObservableFeed`1[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.Activation.ActivationRetryingObservableFeed`1[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.DeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Repository.IDefinitionRecordMapper`1[[Sitecore.Marketing.Definitions.PageEvents.Data.PageEventDefinitionRecord, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" implementationType="Sitecore.Marketing.xMgmt.Definitions.PageEvents.Data.ItemDb.PageEventDefinitionItemRepository+PageEventMapper, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.Activation.PublishItemObserver`1[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.DeleteDefinition.UnPublishItem`1[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!--  Event  -->
<register serviceType="Sitecore.Marketing.Definitions.IDefinitionManager`1[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Events.EventDefinitionManager, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Events.Data.IEventDefinitionRepository, Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Definitions.Events.Data.ItemDb.EventDefinitionItemRepository, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.ITaxonomyClassificationResolver`1[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.DefaultClassificationResolver`1[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Config.FieldTaxonomyMap`1[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Events.DefaultEventTaxonomyMap, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!-- Events -->
<register serviceType="Sitecore.Marketing.Search.IDefinitionSearchProvider`1[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.EventDefinitionSearchProvider, Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationObservableFeed`1[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.Activation.ActivationRetryingObservableFeed`1[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.DeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Repository.IDefinitionRecordMapper`1[[Sitecore.Marketing.Definitions.Events.Data.EventDefinitionRecord, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" implementationType="Sitecore.Marketing.xMgmt.Definitions.Events.Data.ItemDb.EventDefinitionItemRepository+EventMapper, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.Activation.PublishItemObserver`1[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.DeleteDefinition.UnPublishItem`1[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!--  Outcome  -->
<register serviceType="Sitecore.Marketing.Definitions.IDefinitionManager`1[[Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Outcomes.OutcomeDefinitionManager, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Outcomes.Data.IOutcomeDefinitionRepository, Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Outcomes.Data.ItemDb.ItemOutcomeDefinitionRepository, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.ITaxonomyClassificationResolver`1[[Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.DefaultClassificationResolver`1[[Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Config.FieldTaxonomyMap`1[[Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Outcomes.DefaultOutcomeTaxonomyMap, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Search.IDefinitionSearchProvider`1[[Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.NotSupportedSearchProvider`1[[Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationObservableFeed`1[[Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.Activation.ActivationRetryingObservableFeed`1[[Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.DeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Repository.IDefinitionRecordMapper`1[[Sitecore.Marketing.Definitions.Outcomes.Data.OutcomeDefinitionRecord, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" implementationType="Sitecore.Marketing.Definitions.Outcomes.Data.ItemDb.ItemOutcomeDefinitionRepository+OutcomeMapper, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.Activation.PublishItemObserver`1[[Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.DeleteDefinition.UnPublishItem`1[[Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!--  Funnel  -->
<register serviceType="Sitecore.Marketing.Definitions.IDefinitionManager`1[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Funnels.FunnelDefinitionManager, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Funnels.Data.IFunnelDefinitionRepository, Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Funnels.Data.ItemDb.FunnelDefinitionItemRepository, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.ITaxonomyClassificationResolver`1[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.DefaultClassificationResolver`1[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Config.FieldTaxonomyMap`1[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Funnels.DefaultFunnelTaxonomyMap, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!--  Funnel  -->
<register serviceType="Sitecore.Marketing.Search.IDefinitionSearchProvider`1[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.FunnelDefinitionSearchProvider, Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationObservableFeed`1[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.Activation.ActivationRetryingObservableFeed`1[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.DeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Funnels.Data.IFunnelStepTypeResolver, Sitecore.Marketing.xMgmt" implementationType="Sitecore.Marketing.Definitions.Funnels.Data.FunnelStepTypeResolver, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Repository.IDefinitionRecordMapper`1[[Sitecore.Marketing.Definitions.Funnels.Data.FunnelDefinitionRecord, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" implementationType="Sitecore.Marketing.Definitions.Funnels.Data.ItemDb.FunnelDefinitionItemRepository+FunnelMapper, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.Activation.PublishItemObserver`1[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.DeleteDefinition.UnPublishItem`1[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!--  Automation plan  -->
<register serviceType="Sitecore.Marketing.Definitions.IDefinitionManager`1[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.AutomationPlans.AutomationPlanDefinitionManager, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.AutomationPlans.Data.IAutomationPlanDefinitionRepository, Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.AutomationPlans.Data.ItemDb.AutomationPlanDefinitionItemRepository, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.ITaxonomyClassificationResolver`1[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.DefaultClassificationResolver`1[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Config.FieldTaxonomyMap`1[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.AutomationPlans.DefaultAutomationPlanTaxonomyMap, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!--  Automation plan  -->
<register serviceType="Sitecore.Marketing.Search.IDefinitionSearchProvider`1[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.AutomationPlanDefinitionSearchProvider, Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationObservableFeed`1[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.Activation.ActivationRetryingObservableFeed`1[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.DeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Repository.IDefinitionRecordMapper`1[[Sitecore.Marketing.Definitions.AutomationPlans.Data.AutomationPlanDefinitionRecord, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" implementationType="Sitecore.Marketing.Definitions.AutomationPlans.Data.ItemDb.AutomationPlanMapper, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.Activation.PublishItemObserver`1[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.DeleteDefinition.UnPublishItem`1[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!--  Contact List  -->
<register serviceType="Sitecore.Marketing.Definitions.IDefinitionManager`1[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.ContactLists.ContactListDefinitionManager, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.ContactLists.Data.IContactListDefinitionRepository, Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Definitions.ContactLists.Data.ItemDb.ContactListDefinitionItemRepository, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Config.FieldTaxonomyMap`1[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Config.FieldTaxonomyMap`1[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.ITaxonomyClassificationResolver`1[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.DefaultClassificationResolver`1[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!-- Contact Lists -->
<register serviceType="Sitecore.Marketing.Search.IDefinitionSearchProvider`1[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.ContactListDefinitionSearchProvider, Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationObservableFeed`1[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.Activation.ActivationRetryingObservableFeed`1[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.DeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Repository.IDefinitionRecordMapper`1[[Sitecore.Marketing.Definitions.ContactLists.Data.ContactListDefinitionRecord, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" implementationType="Sitecore.Marketing.xMgmt.Definitions.ContactLists.Data.ItemDb.ContactListDefinitionItemRepository+ContactListMapper, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.Activation.PublishItemObserver`1[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.DeleteDefinition.UnPublishItem`1[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!--  Profile  -->
<register serviceType="Sitecore.Marketing.Definitions.Profiles.IProfileDefinitionManager, Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Profiles.ProfileDefinitionManager, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.IDefinitionManager`1[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Profiles.ProfileDefinitionManager, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Profiles.Data.IProfileDefinitionRepository, Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Definitions.Profiles.Data.ItemDb.ProfileDefinitionItemRepository, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.ITaxonomyClassificationResolver`1[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.DefaultClassificationResolver`1[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Config.FieldTaxonomyMap`1[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Profiles.DefaultProfileTaxonomyMap, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!--  Profiles  -->
<register serviceType="Sitecore.Marketing.Search.IDefinitionSearchProvider`1[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.ProfileDefinitionSearchProvider, Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationObservableFeed`1[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.Activation.ActivationRetryingObservableFeed`1[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.DeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Repository.IDefinitionRecordMapper`1[[Sitecore.Marketing.Definitions.Profiles.Data.ProfileDefinitionRecord, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" implementationType="Sitecore.Marketing.xMgmt.Definitions.Profiles.Data.ItemDb.ProfileMapper, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.Activation.PublishItemObserver`1[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.DeleteDefinition.UnPublishItem`1[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!--  Segment  -->
<register serviceType="Sitecore.Marketing.Definitions.IDefinitionManager`1[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Segments.SegmentDefinitionManager, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Segments.Data.ISegmentDefinitionRepository, Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Definitions.Segments.Data.ItemDb.SegmentDefinitionItemRepository, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Config.FieldTaxonomyMap`1[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Config.FieldTaxonomyMap`1[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.ITaxonomyClassificationResolver`1[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.DefaultClassificationResolver`1[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!--  Segments  -->
<register serviceType="Sitecore.Marketing.Search.IDefinitionSearchProvider`1[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.SegmentDefinitionSearchProvider, Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationObservableFeed`1[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.Activation.ActivationRetryingObservableFeed`1[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.DeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Repository.IDefinitionRecordMapper`1[[Sitecore.Marketing.Definitions.Segments.Data.SegmentDefinitionRecord, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" implementationType="Sitecore.Marketing.xMgmt.Definitions.Segments.Data.ItemDb.SegmentDefinitionItemRepository+SegmentMapper, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.Activation.PublishItemObserver`1[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.DeleteDefinition.UnPublishItem`1[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!--  Subscription  -->
<register serviceType="Sitecore.Marketing.Definitions.IDefinitionManager`1[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Subscriptions.SubscriptionDefinitionManager, Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Subscriptions.Data.ISubscriptionDefinitionRepository, Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Definitions.Subscription.Data.ItemDb.SubscriptionDefinitionItemRepository, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Config.FieldTaxonomyMap`1[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.Config.FieldTaxonomyMap`1[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.ITaxonomyClassificationResolver`1[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Definitions.DefaultClassificationResolver`1[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!--  Subscriptions  -->
<register serviceType="Sitecore.Marketing.Search.IDefinitionSearchProvider`1[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.SearchProviders.SubscriptionDefinitionSearchProvider, Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationObservableFeed`1[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.Activation.ActivationRetryingObservableFeed`1[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.DeleteDefinitionObservableFeed`1[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Repository.IDefinitionRecordMapper`1[[Sitecore.Marketing.Definitions.Subscriptions.Data.SubscriptionDefinitionRecord, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" implementationType="Sitecore.Marketing.xMgmt.Definitions.Subscription.Data.ItemDb.SubscriptionDefinitionItemRepository+SubscriptionMapper, Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.Activation.PublishItemObserver`1[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.Observers.DeleteDefinition.UnPublishItem`1[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.config"/>
<!--  Asset  -->
<register serviceType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.IDefinitionConverter`3[[Sitecore.Marketing.Definitions.MarketingAssets.IMarketingAssetDefinition, Sitecore.Marketing], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.Assets.AssetCommonData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.Assets.AssetCultureData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model]], Sitecore.Marketing.xMgmt.ReferenceData" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Assets.AssetDefinitionConverter, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.MarketingAssets.IMarketingAssetDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Assets.DeployAssetDefinitionReferenceDataObserver, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<!--  Automation plan  -->
<register serviceType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.IDefinitionConverter`3[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.AutomationPlans.PlanCommonData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.AutomationPlans.PlanCultureData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model]], Sitecore.Marketing.xMgmt.ReferenceData" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.AutomationPlans.AutomationPlanDefinitionConverter, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.AutomationPlans.DeployAutomationPlanDefinitionReferenceDataObserver, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<!--  Campaign  -->
<register serviceType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.IDefinitionConverter`3[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.Campaigns.CampaignCommonData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.Campaigns.CampaignCultureData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model]], Sitecore.Marketing.xMgmt.ReferenceData" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Campaigns.CampaignDefinitionConverter, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Campaigns.DeployCampaignDefinitionReferenceDataObserver, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<!--  Contact list  -->
<register serviceType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.IDefinitionConverter`3[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.ContactLists.ContactListCommonData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.ContactLists.ContactListCultureData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model]], Sitecore.Marketing.xMgmt.ReferenceData" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.ContactLists.ContactListDefinitionConverter, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.ContactLists.DeployContactListDefinitionReferenceDataObserver, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<!--  Event  -->
<register serviceType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.IDefinitionConverter`3[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.Events.EventCommonData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.Events.EventCultureData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model]], Sitecore.Marketing.xMgmt.ReferenceData" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Events.EventDefinitionConverter, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Events.DeployEventDefinitionReferenceDataObserver, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<!--  Funnel  -->
<register serviceType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.IDefinitionConverter`3[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.Funnels.FunnelCommonData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.Funnels.FunnelCultureData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model]], Sitecore.Marketing.xMgmt.ReferenceData" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Funnels.FunnelDefinitionConverter, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Funnels.DeployFunnelDefinitionReferenceDataObserver, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<!--  Goal  -->
<register serviceType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.IDefinitionConverter`3[[Sitecore.Marketing.Definitions.Goals.IGoalDefinition, Sitecore.Marketing], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.Goals.GoalCommonData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.Goals.GoalCultureData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model]], Sitecore.Marketing.xMgmt.ReferenceData" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Goals.GoalDefinitionConverter, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Goals.IGoalDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Goals.DeployGoalDefinitionReferenceDataObserver, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<!--  Outcome  -->
<register serviceType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.IDefinitionConverter`3[[Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinition, Sitecore.Marketing], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.Outcomes.OutcomeCommonData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.Outcomes.OutcomeCultureData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model]], Sitecore.Marketing.xMgmt.ReferenceData" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Outcomes.OutcomeDefinitionConverter, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Outcomes.DeployOutcomeDefinitionReferenceDataObserver, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<!--  Page Event  -->
<register serviceType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.IDefinitionConverter`3[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.PageEvents.PageEventCommonData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.PageEvents.PageEventCultureData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model]], Sitecore.Marketing.xMgmt.ReferenceData" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.PageEvents.PageEventDefinitionConverter, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.PageEvents.DeployPageEventDefinitionReferenceDataObserver, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<!--  Profile -->
<register serviceType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.IDefinitionConverter`3[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.Profiles.ProfileCommonData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.Profiles.ProfileCultureData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model]], Sitecore.Marketing.xMgmt.ReferenceData" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Profiles.ProfileDefinitionConverter, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Profiles.DeployProfileDefinitionReferenceDataObserver, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<!--  Segment  -->
<register serviceType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.IDefinitionConverter`3[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.Segments.SegmentCommonData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.Segments.SegmentCultureData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model]], Sitecore.Marketing.xMgmt.ReferenceData" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Segments.SegmentDefinitionConverter, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Segments.DeploySegmentDefinitionReferenceDataObserver, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<!--  Subscription  -->
<register serviceType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.IDefinitionConverter`3[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.Subscriptions.SubscriptionCommonData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model], [Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Definitions.Subscriptions.SubscriptionCultureData, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model]], Sitecore.Marketing.xMgmt.ReferenceData" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Subscriptions.SubscriptionDefinitionConverter, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Subscriptions.DeploySubscriptionDefinitionReferenceDataObserver, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<!--  Taxonomy  -->
<register serviceType="Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Taxonomy.ITaxonDataConverter, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model" implementationType="Sitecore.Marketing.Operations.Xdb.ReferenceData.Model.Taxonomy.TaxonDataConverter, Sitecore.Marketing.Operations.Xdb.ReferenceData.Model" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<register serviceType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Taxonomy.Deployment.IDeployManager, Sitecore.Marketing.xMgmt.ReferenceData" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Taxonomy.Deployment.DeployManager, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Taxonomy.Data.Entities.TaxonEntity, Sitecore.Marketing.Taxonomy]], Sitecore.Marketing" implementationType="Sitecore.Marketing.xMgmt.ReferenceData.Observers.Activation.Taxonomy.Observers.DeployTaxonReferenceDataObserver, Sitecore.Marketing.xMgmt.ReferenceData" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationObservableFeed`1[[Sitecore.Marketing.Taxonomy.Data.Entities.TaxonEntity, Sitecore.Marketing.Taxonomy]], Sitecore.Marketing" implementationType="Sitecore.Marketing.ObservableFeed.Activation.ActivationRetryingObservableFeed`1[[Sitecore.Marketing.Taxonomy.Data.Entities.TaxonEntity, Sitecore.Marketing.Taxonomy]], Sitecore.Marketing" lifetime="Singleton" patch:source="Sitecore.Marketing.ReferenceData.config"/>
<register serviceType="Sitecore.Marketing.Search.IDefinitionManagerSearchSettings, Sitecore.Marketing.Search" implementationType="Sitecore.Marketing.Search.DefaultDefinitionManagerSearchSettings, Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.Search.TypeConverters.IStepStringConverter, Sitecore.Marketing.Search" implementationType="Sitecore.Marketing.Search.TypeConverters.StepStringConverter, Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.Observers.Activation.UpdateSearchIndexObserver`1[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.Observers.DeleteDefinition.DeleteFromSearchIndexObserver`2[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing], [Sitecore.Marketing.Search.IndexedCampaign, Sitecore.Marketing.Search]], Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.Observers.Activation.UpdateSearchIndexObserver`1[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing]], Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.Observers.DeleteDefinition.DeleteFromSearchIndexObserver`2[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing], [Sitecore.Marketing.Search.IndexedFunnel, Sitecore.Marketing.Search]], Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.Observers.Activation.UpdateSearchIndexObserver`1[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing]], Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.Observers.DeleteDefinition.DeleteFromSearchIndexObserver`2[[Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing], [Sitecore.Marketing.Search.IndexedAutomationPlan, Sitecore.Marketing.Search]], Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.Observers.Activation.UpdateSearchIndexObserver`1[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing]], Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.Observers.DeleteDefinition.DeleteFromSearchIndexObserver`2[[Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing], [Sitecore.Marketing.Search.IndexedEvent, Sitecore.Marketing.Search]], Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.Observers.Activation.UpdateSearchIndexObserver`1[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing]], Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.Observers.DeleteDefinition.DeleteFromSearchIndexObserver`2[[Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing], [Sitecore.Marketing.Search.IndexedPageEvent, Sitecore.Marketing.Search]], Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.Observers.Activation.UpdateSearchIndexObserver`1[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing]], Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.Observers.DeleteDefinition.DeleteFromSearchIndexObserver`2[[Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing], [Sitecore.Marketing.Search.IndexedContactList, Sitecore.Marketing.Search]], Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.Observers.Activation.UpdateSearchIndexObserver`1[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing]], Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.Observers.DeleteDefinition.DeleteFromSearchIndexObserver`2[[Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing], [Sitecore.Marketing.Search.IndexedProfile, Sitecore.Marketing.Search]], Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.Observers.Activation.UpdateSearchIndexObserver`1[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing]], Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.Observers.DeleteDefinition.DeleteFromSearchIndexObserver`2[[Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing], [Sitecore.Marketing.Search.IndexedSegment, Sitecore.Marketing.Search]], Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.Activation.IActivationAsyncObserver`1[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.Observers.Activation.UpdateSearchIndexObserver`1[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing]], Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<register serviceType="Sitecore.Marketing.ObservableFeed.DeleteDefinition.IDeleteDefinitionObserver`1[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing]], Sitecore.Marketing" implementationType="Sitecore.Marketing.Search.Observers.DeleteDefinition.DeleteFromSearchIndexObserver`2[[Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing], [Sitecore.Marketing.Search.IndexedDefinitions.IndexedSubscription, Sitecore.Marketing.Search]], Sitecore.Marketing.Search" lifetime="Singleton" patch:source="Sitecore.Marketing.Search.config"/>
<!--  Pipelines  -->
<register serviceType="Sitecore.Abstractions.ICorePipeline, Sitecore.Abstractions" implementationType="Sitecore.Abstractions.CorePipelineWrapper, Sitecore.Abstractions" lifetime="Transient" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<!--  Provider  -->
<register serviceType="Sitecore.Marketing.Taxonomy.ITaxonomyManagerProvider, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.TaxonomyManagerProvider, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<!--  Known Managers  -->
<register serviceType="Sitecore.Marketing.Taxonomy.ITaxonomyManager, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.CampaignGroupTaxonomyManager, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.ITaxonomyManager, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.ChannelTaxonomyManager, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.ITaxonomyManager, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.VenueTaxonomyManager, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.ITaxonomyManager, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.AssetTaxonomyManager, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.ITaxonomyManager, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.OutcomeGroupTaxonomyManager, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<!--  Repository settings  -->
<register serviceType="Sitecore.Marketing.Taxonomy.xMgmt.Data.ItemDb.IItemTaxonomyRepositorySettings, Sitecore.Marketing.Taxonomy.xMgmt" implementationType="Sitecore.Marketing.Taxonomy.xMgmt.Data.ItemDb.DefaultItemTaxonomyRepositorySettings, Sitecore.Marketing.Taxonomy.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<!--  Repository  -->
<register serviceType="Sitecore.Marketing.Taxonomy.Data.ITaxonomyRepository, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Data.ItemDb.ItemTaxonomyRepository, Sitecore.Marketing.Taxonomy.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<!--  Mapper  -->
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.ITaxonomyTypeMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.TaxonomyTypeMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<!--  Campaign mappers  -->
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.IMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.CampaignGroup.CampaignGroupTaxonomyMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.IMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.CampaignGroup.CampaignGroupMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<!--  Channel mappers  -->
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.IMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.Channel.ChannelTaxonomyMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.IMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.Channel.ChannelTypeMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.IMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.Channel.ChannelGroupMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.IMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.Channel.ChannelMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<!--  Venue mappers  -->
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.IMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.Venue.VenueTaxonomyMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.IMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.Venue.VenueTypeMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.IMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.Venue.VenueGroupMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.IMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.Venue.VenueMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<!--  Asset mappers  -->
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.IMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.Asset.AssetTaxonomyMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.IMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.Asset.AssetGroupMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.IMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.Asset.AssetMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<!--  Outcome Group mappers  -->
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.IMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.OutcomeGroup.OutcomeGroupTaxonomyMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.IMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.OutcomeGroup.OutcomeGroupMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<!--  Custom mappers  -->
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.IMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.Custom.CustomTaxonomyMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.IMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.Custom.CustomTaxonGroupMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Mapping.IMapper, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Mapping.Custom.CustomTaxonMapper, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<!--  Caching  -->
<register serviceType="Sitecore.Marketing.Taxonomy.Caching.ICacheStorageFactory, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Caching.NullCacheStorageFactory, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Caching.ITaxonomyCacheSettings, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Caching.DefaultTaxonomyCacheSettings, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Caching.AssetsTaxonomyCache, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Caching.AssetsTaxonomyCache, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Caching.CampaignGroupsTaxonomyCache, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Caching.CampaignGroupsTaxonomyCache, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Caching.ChannelsTaxonomyCache, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Caching.ChannelsTaxonomyCache, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Caching.OutcomeGroupsTaxonomyCache, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Caching.OutcomeGroupsTaxonomyCache, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Caching.VenuesTaxonomyCache, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Caching.VenuesTaxonomyCache, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<!--  Custom taxonomy manager factory  -->
<register serviceType="Sitecore.Marketing.Taxonomy.ICustomTaxonomyManagerFactory, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.CustomTaxonomyManagerFactory, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<!--  Resolvers  -->
<register serviceType="Sitecore.Marketing.Taxonomy.Resolvers.ResolveUnknownTaxon.IUnknownTaxonResolver, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Resolvers.ResolveUnknownTaxon.DefaultUnknownTaxonomyResolver, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<register serviceType="Sitecore.Marketing.Taxonomy.Resolvers.ResolveUnknownTaxon.IUnknownTaxonResolver, Sitecore.Marketing.Taxonomy" implementationType="Sitecore.Marketing.Taxonomy.Resolvers.ResolveUnknownTaxon.DefaultUnknownTaxonResolver, Sitecore.Marketing.Taxonomy" lifetime="Singleton" patch:source="Sitecore.Marketing.Taxonomy.config"/>
<!--  ISegmentationEngine  -->
<register serviceType="Sitecore.XConnect.Segmentation.ISegmentationEngine, Sitecore.XConnect.Segmentation.Engine" implementationType="Sitecore.XConnect.Segmentation.SegmentationEngine, Sitecore.XConnect.Segmentation.Engine" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ISegmentationClientFactory, Sitecore.XConnect.Segmentation.Engine" implementationType="Sitecore.Marketing.Segmentation.SitecoreXConnectClientConfigurationFactory, Sitecore.Marketing.Segmentation.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionModifier.ISegmentationExpressionModifier, Sitecore.XConnect.Segmentation.Engine" implementationType="Sitecore.XConnect.Segmentation.ExpressionModifier.DefaultSegmentationExpressionModifier, Sitecore.XConnect.Segmentation.Engine" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionModifier.ISegmentationExpressionReplacer, Sitecore.XConnect.Segmentation.Engine" implementationType="Sitecore.XConnect.Segmentation.ExpressionModifier.NumericOperationReplacer, Sitecore.XConnect.Segmentation.Engine" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionModifier.ISegmentationExpressionReplacer, Sitecore.XConnect.Segmentation.Engine" implementationType="Sitecore.XConnect.Segmentation.ExpressionModifier.StringOperationReplacer, Sitecore.XConnect.Segmentation.Engine" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<!--  IContactSearchExpressionBuilder  -->
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionBuilder.IContactSearchExpressionBuilder, Sitecore.XConnect.Segmentation.Engine" implementationType="Sitecore.XConnect.Segmentation.ExpressionBuilder.ContactSearchExpressionBuilder, Sitecore.XConnect.Segmentation.Engine" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionBuilder.TreeConverter.INodeConverter`2[[Sitecore.Marketing.Rules.IRuleConditionNode, Sitecore.Marketing], [Sitecore.XConnect.Segmentation.Predicates.IContactSearchQueryFactory, Sitecore.XConnect.Segmentation.Predicates.Model]], Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" implementationType="Sitecore.XConnect.Segmentation.ExpressionBuilder.AndNodeConverter, Sitecore.XConnect.Segmentation.Engine" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionBuilder.TreeConverter.INodeConverter`2[[Sitecore.Marketing.Rules.IRuleConditionNode, Sitecore.Marketing], [Sitecore.XConnect.Segmentation.Predicates.IContactSearchQueryFactory, Sitecore.XConnect.Segmentation.Predicates.Model]], Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" implementationType="Sitecore.XConnect.Segmentation.ExpressionBuilder.OrNodeConverter, Sitecore.XConnect.Segmentation.Engine" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionBuilder.TreeConverter.INodeConverter`2[[Sitecore.Marketing.Rules.IRuleConditionNode, Sitecore.Marketing], [Sitecore.XConnect.Segmentation.Predicates.IContactSearchQueryFactory, Sitecore.XConnect.Segmentation.Predicates.Model]], Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" implementationType="Sitecore.XConnect.Segmentation.ExpressionBuilder.NotNodeConverter, Sitecore.XConnect.Segmentation.Engine" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionBuilder.TreeConverter.INodeConverter`2[[Sitecore.Marketing.Rules.IRuleConditionNode, Sitecore.Marketing], [Sitecore.XConnect.Segmentation.Predicates.IContactSearchQueryFactory, Sitecore.XConnect.Segmentation.Predicates.Model]], Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" implementationType="Sitecore.XConnect.Segmentation.ExpressionBuilder.NullNodeConverter, Sitecore.XConnect.Segmentation.Engine" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionBuilder.TreeConverter.INodeConverter`2[[Sitecore.Marketing.Rules.IRuleConditionNode, Sitecore.Marketing], [Sitecore.XConnect.Segmentation.Predicates.IContactSearchQueryFactory, Sitecore.XConnect.Segmentation.Predicates.Model]], Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" implementationType="Sitecore.XConnect.Segmentation.ExpressionBuilder.ConditionNodeConverter, Sitecore.XConnect.Segmentation.Engine" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<!--  IConditionExpressionBuilder  -->
<register serviceType="Sitecore.XConnect.Segmentation.Conditions.ExpressionBuilder.IConditionExpressionBuilder, Sitecore.XConnect.Segmentation.Conditions" implementationType="Sitecore.XConnect.Segmentation.Conditions.ExpressionBuilder.ConditionExpressionBuilder, Sitecore.XConnect.Segmentation.Conditions" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionBuilder.TreeConverter.INodeConverter`2[[Sitecore.Marketing.Rules.IRuleConditionNode, Sitecore.Marketing], [Sitecore.Framework.Rules.ICondition, Sitecore.Framework.Rules.Abstractions]], Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" implementationType="Sitecore.XConnect.Segmentation.Conditions.ExpressionBuilder.AndNodeConverter, Sitecore.XConnect.Segmentation.Conditions" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionBuilder.TreeConverter.INodeConverter`2[[Sitecore.Marketing.Rules.IRuleConditionNode, Sitecore.Marketing], [Sitecore.Framework.Rules.ICondition, Sitecore.Framework.Rules.Abstractions]], Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" implementationType="Sitecore.XConnect.Segmentation.Conditions.ExpressionBuilder.OrNodeConverter, Sitecore.XConnect.Segmentation.Conditions" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionBuilder.TreeConverter.INodeConverter`2[[Sitecore.Marketing.Rules.IRuleConditionNode, Sitecore.Marketing], [Sitecore.Framework.Rules.ICondition, Sitecore.Framework.Rules.Abstractions]], Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" implementationType="Sitecore.XConnect.Segmentation.Conditions.ExpressionBuilder.NotNodeConverter, Sitecore.XConnect.Segmentation.Conditions" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionBuilder.TreeConverter.INodeConverter`2[[Sitecore.Marketing.Rules.IRuleConditionNode, Sitecore.Marketing], [Sitecore.Framework.Rules.ICondition, Sitecore.Framework.Rules.Abstractions]], Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" implementationType="Sitecore.XConnect.Segmentation.Conditions.ExpressionBuilder.NullNodeConverter, Sitecore.XConnect.Segmentation.Conditions" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionBuilder.TreeConverter.INodeConverter`2[[Sitecore.Marketing.Rules.IRuleConditionNode, Sitecore.Marketing], [Sitecore.Framework.Rules.ICondition, Sitecore.Framework.Rules.Abstractions]], Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" implementationType="Sitecore.XConnect.Segmentation.Conditions.ExpressionBuilder.ConditionNodeConverter, Sitecore.XConnect.Segmentation.Conditions" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<!--  IPredicateFactory  -->
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionBuilder.PredicateFactory.IPredicateFactory, Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" implementationType="Sitecore.XConnect.Segmentation.ExpressionBuilder.PredicateFactory.DefaultPredicateFactory, Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionBuilder.PredicateFactory.IPropertyBinder, Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" implementationType="Sitecore.XConnect.Segmentation.ExpressionBuilder.PredicateFactory.PropertyBinder, Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionBuilder.PredicateFactory.IPropertyTypeConverter, Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" implementationType="Sitecore.XConnect.Segmentation.ExpressionBuilder.PredicateFactory.TypeConverters.EnumConverter, Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionBuilder.PredicateFactory.IPropertyTypeConverter, Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" implementationType="Sitecore.XConnect.Segmentation.ExpressionBuilder.PredicateFactory.TypeConverters.DateTimeConverter, Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionBuilder.PredicateFactory.IPropertyTypeConverter, Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" implementationType="Sitecore.XConnect.Segmentation.ExpressionBuilder.PredicateFactory.TypeConverters.GuidConverter, Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionBuilder.PredicateFactory.IPropertyTypeConverter, Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" implementationType="Sitecore.XConnect.Segmentation.ExpressionBuilder.PredicateFactory.TypeConverters.DecimalConverter, Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.XConnect.Segmentation.ExpressionBuilder.IPredicateDescriptorLocator, Sitecore.XConnect.Segmentation.ExpressionBuilder.Model" implementationType="Sitecore.Marketing.Segmentation.ExpressionBuilder.ContentTreePredicateDescriptorLocator, Sitecore.Marketing.Segmentation.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<!--  Rule XML conversion  -->
<register serviceType="Sitecore.Marketing.Segmentation.RuleXmlConverter.IRuleXmlConverter, Sitecore.Marketing.Segmentation.xMgmt" implementationType="Sitecore.Marketing.Segmentation.RuleXmlConverter.RuleXmlConverter, Sitecore.Marketing.Segmentation.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<!--
 Rule Node Converters - Matched in reverse order by the Rule Xml Converter
-->
<register serviceType="Sitecore.Marketing.Segmentation.RuleXmlConverter.IRuleNodeXmlConverter, Sitecore.Marketing.Segmentation.xMgmt" implementationType="Sitecore.Marketing.Segmentation.RuleXmlConverter.AndXmlNodeConverter, Sitecore.Marketing.Segmentation.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.Marketing.Segmentation.RuleXmlConverter.IRuleNodeXmlConverter, Sitecore.Marketing.Segmentation.xMgmt" implementationType="Sitecore.Marketing.Segmentation.RuleXmlConverter.OrXmlNodeConverter, Sitecore.Marketing.Segmentation.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.Marketing.Segmentation.RuleXmlConverter.IRuleNodeXmlConverter, Sitecore.Marketing.Segmentation.xMgmt" implementationType="Sitecore.Marketing.Segmentation.RuleXmlConverter.NotXmlNodeConverter, Sitecore.Marketing.Segmentation.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.Marketing.Segmentation.RuleXmlConverter.IRuleNodeXmlConverter, Sitecore.Marketing.Segmentation.xMgmt" implementationType="Sitecore.Marketing.Segmentation.RuleXmlConverter.NullXmlNodeConverter, Sitecore.Marketing.Segmentation.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<register serviceType="Sitecore.Marketing.Segmentation.RuleXmlConverter.IRuleNodeXmlConverter, Sitecore.Marketing.Segmentation.xMgmt" implementationType="Sitecore.Marketing.Segmentation.RuleXmlConverter.ConditionXmlNodeConverter, Sitecore.Marketing.Segmentation.xMgmt" lifetime="Singleton" patch:source="Sitecore.Marketing.Segmentation.config"/>
<configurator type="Sitecore.Xdb.MarketingAutomation.Locators.Xmgmt.AutomationPlans.Configuration.ItemActivityDescriptorLocatorConfigurator, Sitecore.Xdb.MarketingAutomation.Locators.Xmgmt" patch:source="Sitecore.Xdb.MarketingAutomation.Locators.config"/>
<register serviceType="Sitecore.Xdb.ReferenceData.Core.Repository.IReferenceDataRepository, Sitecore.Xdb.ReferenceData.Core" implementationType="Sitecore.Xdb.ReferenceData.Service.Repository.ReferenceDataRepository, Sitecore.Xdb.ReferenceData.Service" lifetime="Singleton" patch:source="Sitecore.Xdb.ReferenceData.Service.config"/>
<register serviceType="Sitecore.Xdb.ReferenceData.Core.IReadOnlyReferenceDataClient, Sitecore.Xdb.ReferenceData.Core" implementationType="Sitecore.Xdb.ReferenceData.Service.ReadOnlyReferenceDataService, Sitecore.Xdb.ReferenceData.Service" lifetime="Singleton" patch:source="Sitecore.Xdb.ReferenceData.Service.config"/>
<register serviceType="Sitecore.Xdb.ReferenceData.Core.IReferenceDataClient, Sitecore.Xdb.ReferenceData.Core" implementationType="Sitecore.Xdb.ReferenceData.Service.ReferenceDataService, Sitecore.Xdb.ReferenceData.Service" lifetime="Singleton" patch:source="Sitecore.Xdb.ReferenceData.Service.config"/>
<configurator type="Sitecore.Xdb.ReferenceData.Service.Xmgmt.DependencyInjection.DefinitionCacheConfigurator, Sitecore.Xdb.ReferenceData.Service.Xmgmt" patch:source="Sitecore.Xdb.ReferenceData.Service.config"/>
<configurator type="Sitecore.Xdb.ReferenceData.Service.Xmgmt.DependencyInjection.LoggingConfigurator, Sitecore.Xdb.ReferenceData.Service.Xmgmt" patch:source="Sitecore.Xdb.ReferenceData.Service.config"/>
<configurator type="Sitecore.Xdb.ReferenceData.SqlServer.Xmgmt.Configuration.SqlServerReferenceDataProviderConfigurator, Sitecore.Xdb.ReferenceData.SqlServer.Xmgmt" patch:source="Sitecore.Xdb.ReferenceData.SqlServer.config"/>
<configurator type="Sitecore.Analytics.TrackingServicesConfigurator, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.config"/>
<register serviceType="Sitecore.Marketing.Definitions.MarketingAssets.Data.ItemDb.IIndexSettings, Sitecore.Marketing.Definitions.MarketingAssets.Repositories" implementationType="Sitecore.Marketing.Definitions.MarketingAssets.Data.ItemDb.DefaultIndexSettings, Sitecore.Marketing.Definitions.MarketingAssets.Repositories" lifetime="Singleton" patch:source="Sitecore.Marketing.Definitions.MarketingAssets.Repositories.config"/>
<register serviceType="Sitecore.Marketing.Definitions.Repository.IDefinitionRecordMapper`1[[Sitecore.Marketing.Definitions.MarketingAssets.Data.MarketingAssetDefinitionRecord, Sitecore.Marketing]], Sitecore.Marketing.xMgmt" implementationType="Sitecore.Marketing.Definitions.MarketingAssets.Data.ItemDb.MarketingAssetDefinitionItemRepository+AssetMapper, Sitecore.Marketing.Definitions.MarketingAssets.Repositories" patch:source="Sitecore.Marketing.Definitions.MarketingAssets.Repositories.config"/>
<!--  Automation campaigns/activities management  -->
<register serviceType="Sitecore.Xdb.MarketingAutomation.Tracking.Providers.IAutomationActivityModelProvider, Sitecore.Xdb.MarketingAutomation.Tracking" implementationType="Sitecore.Xdb.MarketingAutomation.Tracking.Providers.AutomationActivityModelProvider, Sitecore.Xdb.MarketingAutomation.Tracking" lifetime="Singleton" patch:source="Sitecore.Xdb.MarketingAutomation.Tracking.config"/>
<configurator type="Sitecore.Content.Services.Configurator, Sitecore.Content.Services" patch:source="Sitecore.Content.Services.config"/>
<configurator type="Sitecore.Services.Infrastructure.Sitecore.DependencyInjection.ComponentServicesConfigurator, Sitecore.Services.Infrastructure.Sitecore" patch:source="Sitecore.Services.Client.config"/>
<configurator type="Sitecore.Speak.Integration.Spa.Configurator, Sitecore.Speak.Integration.Spa" patch:source="Sitecore.Speak.Integration.Spa.config"/>
<configurator type="Sitecore.Speak.Integration.Services.Configurator, Sitecore.Speak.Integration.Services" patch:source="Sitecore.Speak.Integration.Spa.config"/>
<configurator type="Sitecore.Messaging.Azure.RebusConfigurator, Sitecore.Messaging.Azure" patch:source="Sitecore.Messaging.Azure.config"/>
<configurator type="Sitecore.Messaging.RebusConfigurator, Sitecore.Messaging" patch:source="Sitecore.Messaging.config"/>
<register serviceType="Sitecore.Messaging.IMessageBusStarter, Sitecore.Messaging" implementationType="Sitecore.Messaging.MessageBusStarter, Sitecore.Messaging" lifetime="Singleton" patch:source="Sitecore.Messaging.config"/>
<register serviceType="Sitecore.Framework.Messaging.Rebus.Gateway.Config.IRawBatchSink, Sitecore.Framework.Messaging.Rebus" implementationType="Sitecore.Messaging.GatewayClient.DefaultGatewaySink, Sitecore.Messaging.GatewayClient.Rest" lifetime="Singleton" patch:source="Sitecore.Messaging.GatewayClient.config"/>
<register serviceType="Sitecore.Messaging.GatewayClient.IGatewayQueueClientRegistry, Sitecore.Messaging.GatewayClient.Rest" implementationType="Sitecore.Messaging.GatewayClient.GatewayQueueClientRegistry, Sitecore.Messaging.GatewayClient.Rest" lifetime="Singleton" patch:source="Sitecore.Messaging.GatewayClient.config"/>
<register serviceType="Sitecore.Messaging.GatewayClient.WebClients.IWebClientRegistry, Sitecore.Messaging.GatewayClient.Rest" implementationType="Sitecore.Messaging.GatewayClient.WebClients.WebClientRegistry, Sitecore.Messaging.GatewayClient.Rest" lifetime="Singleton" patch:source="Sitecore.Messaging.GatewayClient.config"/>
<register serviceType="Sitecore.Messaging.GatewayClient.GatewayConnectionValidator, Sitecore.Messaging.GatewayClient.Rest" implementationType="Sitecore.Messaging.GatewayClient.GatewayConnectionValidator, Sitecore.Messaging.GatewayClient.Rest" lifetime="Singleton" patch:source="Sitecore.Messaging.GatewayClient.config"/>
<configurator type="Sitecore.Messaging.GatewayClient.GatewayClientConfigurator, Sitecore.Messaging.GatewayClient" patch:source="Sitecore.Messaging.GatewayClient.config"/>
<register serviceType="Sitecore.Messaging.GatewayService.IGatewayBusServerRegistry, Sitecore.Messaging.GatewayService" implementationType="Sitecore.Messaging.GatewayService.GatewayBusServerRegistry, Sitecore.Messaging.GatewayService" lifetime="Singleton" patch:source="Sitecore.Messaging.GatewayService.config"/>
<register serviceType="System.Web.Http.ApiController, System.Web.Http" implementationType="Sitecore.Messaging.GatewayService.Controllers.GatewayController, Sitecore.Messaging.GatewayService" lifetime="Singleton" patch:source="Sitecore.Messaging.GatewayService.config"/>
<configurator type="Sitecore.Messaging.GatewayService.GatewayServiceConfigurator, Sitecore.Messaging.GatewayService" patch:source="Sitecore.Messaging.GatewayService.config"/>
<configurator type="Sitecore.Messaging.SqlServer.RebusConfigurator, Sitecore.Messaging.SqlServer" patch:source="Sitecore.Messaging.SqlServer.config"/>
<configurator type="Sitecore.Messaging.TransientFaultHandlingConfigurator, Sitecore.Messaging" patch:source="Sitecore.TransientFaultHandling.config"/>
<!--
 Context of the message bus to synchronize task registration requests and task registration statuses. 
-->
<register serviceType="Sitecore.Processing.Tasks.Messaging.ISynchronizedMessageBusContext`1[[Sitecore.Framework.Messaging.IMessageBus`1[[Sitecore.Processing.Tasks.Messaging.Buses.TaskRegistrationProducer, Sitecore.Processing.Tasks.Messaging]], Sitecore.Framework.Messaging.Abstractions]], Sitecore.Processing.Tasks.Messaging" implementationType="Sitecore.Processing.Tasks.Messaging.SynchronizedMessageBusContext`1[[Sitecore.Framework.Messaging.IMessageBus`1[[Sitecore.Processing.Tasks.Messaging.Buses.TaskRegistrationProducer, Sitecore.Processing.Tasks.Messaging]], Sitecore.Framework.Messaging.Abstractions]], Sitecore.Processing.Tasks.Messaging" lifetime="Singleton" patch:source="Sitecore.Processing.Tasks.Messaging.config"/>
<!--
 Context of the message bus to synchronize task progress requests and responses. 
-->
<register serviceType="Sitecore.Processing.Tasks.Messaging.ISynchronizedMessageBusContext`1[[Sitecore.Framework.Messaging.IMessageBus`1[[Sitecore.Processing.Tasks.Messaging.Buses.TaskProgressProducer, Sitecore.Processing.Tasks.Messaging]], Sitecore.Framework.Messaging.Abstractions]], Sitecore.Processing.Tasks.Messaging" implementationType="Sitecore.Processing.Tasks.Messaging.SynchronizedMessageBusContext`1[[Sitecore.Framework.Messaging.IMessageBus`1[[Sitecore.Processing.Tasks.Messaging.Buses.TaskProgressProducer, Sitecore.Processing.Tasks.Messaging]], Sitecore.Framework.Messaging.Abstractions]], Sitecore.Processing.Tasks.Messaging" lifetime="Singleton" patch:source="Sitecore.Processing.Tasks.Messaging.config"/>
<!--  Handler for task registration status messages.  -->
<register serviceType="Sitecore.Framework.Messaging.IMessageHandler`1[[Sitecore.Processing.Engine.Abstractions.Messages.TaskRegistrationStatus, Sitecore.Processing.Engine.Abstractions]], Sitecore.Framework.Messaging.Abstractions" implementationType="Sitecore.Processing.Tasks.Messaging.Handlers.TaskRegistrationStatusHandler, Sitecore.Processing.Tasks.Messaging" lifetime="Transient" patch:source="Sitecore.Processing.Tasks.Messaging.config"/>
<!--
 Handler for task progress request response messages. 
-->
<register serviceType="Sitecore.Framework.Messaging.IMessageHandler`1[[Sitecore.Processing.Engine.Abstractions.Messages.TaskProgressResponse, Sitecore.Processing.Engine.Abstractions]], Sitecore.Framework.Messaging.Abstractions" implementationType="Sitecore.Processing.Tasks.Messaging.Handlers.TaskProgressResponseHandler, Sitecore.Processing.Tasks.Messaging" lifetime="Transient" patch:source="Sitecore.Processing.Tasks.Messaging.config"/>
<!--
 Configurator for task manager, defined in "processing.tasks.messaging/taskManager" section. 
-->
<configurator type="Sitecore.Processing.Tasks.Messaging.Xmgmt.TaskManagerConfigurator, Sitecore.Processing.Tasks.Messaging.Xmgmt" patch:source="Sitecore.Processing.Tasks.Messaging.config"/>
<!--
 Configurator for Rebus, defined in "processing.tasks.messaging/Rebus" section. 
-->
<configurator type="Sitecore.Processing.Tasks.Messaging.Xmgmt.RebusConfigurator, Sitecore.Processing.Tasks.Messaging.Xmgmt" patch:source="Sitecore.Processing.Tasks.Messaging.config"/>
<configurator type="Sitecore.ExperienceEditor.DependencyInjection.EditorServiceConfigurator, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<register serviceType="Sitecore.ContentTagging.Configuration.IItemContentTaggingConfigurationService, Sitecore.ContentTagging" implementationType="Sitecore.ContentTagging.Configuration.ItemContentTaggingConfigurationService, Sitecore.ContentTagging" lifetime="Singleton" patch:source="Sitecore.ContentTagging.config"/>
<register serviceType="Sitecore.ContentTagging.Configuration.IItemContentTaggingProviderSetBuilder, Sitecore.ContentTagging" implementationType="Sitecore.ContentTagging.Configuration.ItemContentTaggingProviderSetBuilder, Sitecore.ContentTagging" lifetime="Singleton" patch:source="Sitecore.ContentTagging.config"/>
<register serviceType="Sitecore.ContentTagging.IContentTaggingRunner, Sitecore.ContentTagging" implementationType="Sitecore.ContentTagging.ContentTaggingRunner, Sitecore.ContentTagging" lifetime="Singleton" patch:source="Sitecore.ContentTagging.config"/>
<register serviceType="Sitecore.ContentTagging.IButtonStateProvider, Sitecore.ContentTagging" implementationType="Sitecore.ContentTagging.ButtonStateProvider, Sitecore.ContentTagging" lifetime="Singleton" patch:source="Sitecore.ContentTagging.config"/>
<register serviceType="Sitecore.ContentTagging.Services.IItemLanguageService, Sitecore.ContentTagging" implementationType="Sitecore.ContentTagging.Services.ItemLanguageService, Sitecore.ContentTagging" lifetime="Singleton" patch:source="Sitecore.ContentTagging.config"/>
<register serviceType="Sitecore.ContentTagging.Core.Configuration.IContentTaggingProvidersConfigurationService, Sitecore.ContentTagging.Core" implementationType="Sitecore.ContentTagging.Core.Configuration.ContentTaggingProvidersConfigurationService, Sitecore.ContentTagging.Core" lifetime="Singleton" patch:source="Sitecore.ContentTagging.Core.config"/>
<register serviceType="Sitecore.ContentTagging.Core.Messaging.IMessageBusFactory, Sitecore.ContentTagging.Core" implementationType="Sitecore.ContentTagging.Core.Messaging.MessageBusFactory, Sitecore.ContentTagging.Core" lifetime="Singleton" patch:source="Sitecore.ContentTagging.Core.config"/>
<register serviceType="Sitecore.ContentTagging.Core.Factories.IHttpClientFactory, Sitecore.ContentTagging.Core" implementationType="Sitecore.ContentTagging.Core.Factories.HttpClientFactory, Sitecore.ContentTagging.Core" lifetime="Singleton" patch:source="Sitecore.ContentTagging.Core.config"/>
<register serviceType="Sitecore.ContentTagging.Core.Factories.IContentTaggingProviderFactory, Sitecore.ContentTagging.Core" implementationType="Sitecore.ContentTagging.Core.Factories.ContentTaggingProviderFactory, Sitecore.ContentTagging.Core" lifetime="Singleton" patch:source="Sitecore.ContentTagging.Core.config"/>
<register serviceType="Sitecore.Buckets.Interfaces.ITagRepository, Sitecore.Buckets" implementationType="Sitecore.Buckets.Search.Tags.SitecoreHostedTagRepository, Sitecore.Buckets" lifetime="Singleton" patch:source="Sitecore.ContentTagging.Core.config"/>
<configurator type="Sitecore.ListManagement.DependencyInjection.CustomServiceConfigurator, Sitecore.ListManagement" patch:source="Sitecore.ListManagement.Services.config"/>
<configurator type="Sitecore.ListManagement.XConnect.Web.DependencyInjection.CustomServiceConfigurator, Sitecore.ListManagement.XConnect.Web" patch:source="Sitecore.ListManagement.Services.config"/>
<configurator type="Sitecore.ListManagement.Services.DependencyInjection.CustomServiceConfigurator, Sitecore.ListManagement.Services" patch:source="Sitecore.ListManagement.Services.config"/>
<register serviceType="Sitecore.Framework.Messaging.IMessageHandler`1[[Sitecore.Processing.Engine.Abstractions.Messages.TaskStatus, Sitecore.Processing.Engine.Abstractions]], Sitecore.Framework.Messaging.Abstractions" implementationType="Sitecore.ContentTesting.Messaging.ModelTrainingTaskStatusMessageHandler, Sitecore.ContentTesting" lifetime="Transient" patch:source="Sitecore.ContentTesting.Messaging.config"/>
<configurator type="Sitecore.Mvc.ExperienceEditor.DependencyInjection.MvcEditorServiceConfigurator, Sitecore.Mvc.ExperienceEditor" patch:source="Sitecore.MVC.ExperienceEditor.config"/>
<configurator type="Sitecore.ExperienceExplorer.DependencyInjection.ExplorerServiceConfigurator, Sitecore.ExperienceExplorer" patch:source="Sitecore.ExperienceExplorer.config"/>
<configurator type="Sitecore.ExperienceExplorer.Web.DependencyInjection.ExplorerServiceConfigurator, Sitecore.ExperienceExplorer.Web" patch:source="Sitecore.ExperienceExplorer.config"/>
<register serviceType="Sitecore.ExperienceForms.Configuration.IFormsConfigurationSettings, Sitecore.ExperienceForms" implementationType="Sitecore.ExperienceForms.Configuration.FormsConfigurationSettings, Sitecore.ExperienceForms" lifetime="Singleton" patch:source="Sitecore.ExperienceForms.config"/>
<register serviceType="Sitecore.ExperienceForms.Data.SqlServer.IConnectionSettings, Sitecore.ExperienceForms.Data.SqlServer" implementationType="Sitecore.ExperienceForms.Data.SqlServer.SqlConnectionSettings, Sitecore.ExperienceForms.Data.SqlServer" lifetime="Singleton" patch:source="Sitecore.ExperienceForms.config"/>
<register serviceType="Sitecore.ExperienceForms.IQueryStringProvider, Sitecore.ExperienceForms" implementationType="Sitecore.ExperienceForms.QueryStringProvider, Sitecore.ExperienceForms" lifetime="Singleton" patch:source="Sitecore.ExperienceForms.config"/>
<register serviceType="Sitecore.ExperienceForms.IFormStateProvider, Sitecore.ExperienceForms" implementationType="Sitecore.ExperienceForms.FormStateProvider, Sitecore.ExperienceForms" lifetime="Singleton" patch:source="Sitecore.ExperienceForms.config"/>
<register serviceType="Sitecore.ExperienceForms.IFormStoredDataProvider, Sitecore.ExperienceForms" implementationType="Sitecore.ExperienceForms.FormStoredDataProvider, Sitecore.ExperienceForms" lifetime="Singleton" patch:source="Sitecore.ExperienceForms.config"/>
<register serviceType="Sitecore.ExperienceForms.SubmitActions.IAnalyticsTracker, Sitecore.ExperienceForms.SubmitActions" implementationType="Sitecore.ExperienceForms.SubmitActions.AnalyticsTracker, Sitecore.ExperienceForms.SubmitActions" lifetime="Transient" patch:source="Sitecore.ExperienceForms.Tracker.config"/>
<register serviceType="Sitecore.ExperienceForms.Data.IFormDataProvider, Sitecore.ExperienceForms" implementationType="Sitecore.ExperienceForms.Data.SqlServer.SqlFormDataProvider, Sitecore.ExperienceForms.Data.SqlServer" lifetime="Transient" patch:source="Sitecore.ExperienceForms.config"/>
<register serviceType="Sitecore.ExperienceForms.Data.SqlServer.ISqlDataApiFactory, Sitecore.ExperienceForms.Data.SqlServer" implementationType="Sitecore.ExperienceForms.Data.SqlServer.SqlServerApiFactory, Sitecore.ExperienceForms.Data.SqlServer" lifetime="Transient" patch:source="Sitecore.ExperienceForms.config"/>
<register serviceType="Sitecore.ExperienceForms.Diagnostics.ILogger, Sitecore.ExperienceForms" implementationType="Sitecore.ExperienceForms.Diagnostics.Logger, Sitecore.ExperienceForms" lifetime="Singleton" patch:source="Sitecore.ExperienceForms.config"/>
<register serviceType="Sitecore.ExperienceForms.ValueProviders.IFieldValueProviderFactory, Sitecore.ExperienceForms" implementationType="Sitecore.ExperienceForms.ValueProviders.FieldValueProviderFactory, Sitecore.ExperienceForms" lifetime="Transient" patch:source="Sitecore.ExperienceForms.config"/>
<register serviceType="Sitecore.ExperienceForms.Mvc.Controllers.FormBuilderController, Sitecore.ExperienceForms.Mvc" implementationType="Sitecore.ExperienceForms.Mvc.Controllers.FormBuilderController, Sitecore.ExperienceForms.Mvc" patch:source="Sitecore.ExperienceForms.Mvc.config"/>
<register serviceType="Sitecore.ExperienceForms.Mvc.Controllers.FieldTrackingController, Sitecore.ExperienceForms.Mvc" implementationType="Sitecore.ExperienceForms.Mvc.Controllers.FieldTrackingController, Sitecore.ExperienceForms.Mvc" patch:source="Sitecore.ExperienceForms.Mvc.config"/>
<register serviceType="Sitecore.ExperienceForms.IFieldNamingProvider, Sitecore.ExperienceForms" implementationType="Sitecore.ExperienceForms.Mvc.FieldNamingProvider, Sitecore.ExperienceForms.Mvc" lifetime="Transient" patch:source="Sitecore.ExperienceForms.Mvc.config"/>
<register serviceType="Sitecore.ExperienceForms.Mvc.IFormRenderingContext, Sitecore.ExperienceForms.Mvc" implementationType="Sitecore.ExperienceForms.Mvc.FormRenderingContext, Sitecore.ExperienceForms.Mvc" lifetime="Transient" patch:source="Sitecore.ExperienceForms.Mvc.config"/>
<register serviceType="Sitecore.ExperienceForms.Processing.IFormSubmitHandler, Sitecore.ExperienceForms" implementationType="Sitecore.ExperienceForms.Mvc.Processing.FormSubmitHandler, Sitecore.ExperienceForms.Mvc" lifetime="Transient" patch:source="Sitecore.ExperienceForms.Mvc.config"/>
<register serviceType="Sitecore.ExperienceForms.Mvc.Pipelines.IFormBuilderContext, Sitecore.ExperienceForms.Mvc" implementationType="Sitecore.ExperienceForms.Mvc.Pipelines.FormBuilderContext, Sitecore.ExperienceForms.Mvc" lifetime="Singleton" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config"/>
<register serviceType="Sitecore.ExperienceForms.Mvc.DataSource.IListItemParser, Sitecore.ExperienceForms.Mvc" implementationType="Sitecore.ExperienceForms.Mvc.DataSource.ListItemParser, Sitecore.ExperienceForms.Mvc" lifetime="Transient" patch:source="Sitecore.ExperienceForms.Mvc.config"/>
<register serviceType="Sitecore.ExperienceForms.Mvc.DataSource.IListDataSourceProvider, Sitecore.ExperienceForms.Mvc" implementationType="Sitecore.ExperienceForms.Mvc.DataSource.ListDataSourceProvider, Sitecore.ExperienceForms.Mvc" lifetime="Transient" patch:source="Sitecore.ExperienceForms.Mvc.config"/>
<register serviceType="Sitecore.ExperienceForms.FieldSettings.IFieldSettingsManager`1[[Sitecore.ExperienceForms.Mvc.Models.ListFieldItemCollection, Sitecore.ExperienceForms.Mvc]], Sitecore.ExperienceForms" implementationType="Sitecore.ExperienceForms.Mvc.DataSource.DataSourceSettingsManager, Sitecore.ExperienceForms.Mvc" lifetime="Transient" patch:source="Sitecore.ExperienceForms.Mvc.config"/>
<register serviceType="Sitecore.ExperienceForms.Client.Controllers.FormFieldController, Sitecore.ExperienceForms.Client" implementationType="Sitecore.ExperienceForms.Client.Controllers.FormFieldController, Sitecore.ExperienceForms.Client" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config"/>
<register serviceType="Sitecore.ExperienceForms.Client.Controllers.SubmitActionsController, Sitecore.ExperienceForms.Client" implementationType="Sitecore.ExperienceForms.Client.Controllers.SubmitActionsController, Sitecore.ExperienceForms.Client" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config"/>
<register serviceType="Sitecore.ExperienceForms.Client.Controllers.ReportsController, Sitecore.ExperienceForms.Client" implementationType="Sitecore.ExperienceForms.Client.Controllers.ReportsController, Sitecore.ExperienceForms.Client" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config"/>
<register serviceType="Sitecore.ExperienceForms.Client.Controllers.ExportDataController, Sitecore.ExperienceForms.Client" implementationType="Sitecore.ExperienceForms.Client.Controllers.ExportDataController, Sitecore.ExperienceForms.Client" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config"/>
<register serviceType="Sitecore.ExperienceForms.Client.DataSource.IListDataSourceDefinitionProvider, Sitecore.ExperienceForms.Client" implementationType="Sitecore.ExperienceForms.Client.DataSource.ListDataSourceDefinitionProvider, Sitecore.ExperienceForms.Client" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config"/>
<register serviceType="Sitecore.ExperienceForms.Data.IExportDataProvider, Sitecore.ExperienceForms" implementationType="Sitecore.ExperienceForms.Client.Data.CsvExportProvider, Sitecore.ExperienceForms.Client" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config"/>
<register serviceType="Sitecore.ExperienceForms.Reporting.IFormStatisticsProvider, Sitecore.ExperienceForms" implementationType="Sitecore.ExperienceForms.Analytics.Reporting.FormStatisticsProvider, Sitecore.ExperienceForms.Analytics" patch:source="Sitecore.ExperienceForms.Pipelines.Client.Reporting.config"/>
<register serviceType="Sitecore.ExperienceForms.Analytics.Reporting.IReportDataProviderFactory, Sitecore.ExperienceForms.Analytics" implementationType="Sitecore.ExperienceForms.Analytics.Reporting.ReportDataProviderFactory, Sitecore.ExperienceForms.Analytics" patch:source="Sitecore.ExperienceForms.Pipelines.Client.Reporting.config"/>
<register serviceType="Sitecore.ExperienceForms.Analytics.Reporting.IReportingQueryFactory, Sitecore.ExperienceForms.Analytics" implementationType="Sitecore.ExperienceForms.Analytics.Reporting.ReportingQueryFactory, Sitecore.ExperienceForms.Analytics" patch:source="Sitecore.ExperienceForms.Pipelines.Client.Reporting.config"/>
<register serviceType="Sitecore.ExperienceForms.Analytics.Tracking.IAnalyticsTrackerResolver, Sitecore.ExperienceForms.Analytics" implementationType="Sitecore.ExperienceForms.Analytics.Tracking.AnalyticsTrackerResolver, Sitecore.ExperienceForms.Analytics" lifetime="Transient" patch:source="Sitecore.ExperienceForms.Tracker.config"/>
<register serviceType="Sitecore.ExperienceForms.Tracking.IFormEventsTracker, Sitecore.ExperienceForms" implementationType="Sitecore.ExperienceForms.Analytics.Tracking.FormEventsTracker, Sitecore.ExperienceForms.Analytics" lifetime="Transient" patch:source="Sitecore.ExperienceForms.Tracker.config"/>
<configurator type="Sitecore.FXM.DependencyInjection.FxmServiceConfigurator, Sitecore.FXM" patch:source="Sitecore.FXM.config"/>
<configurator type="Sitecore.FXM.Service.DependencyInjection.FxmServiceConfigurator, Sitecore.FXM.Service" patch:source="Sitecore.FXM.config"/>
<configurator type="Sitecore.UpdateCenter.DependencyInjection.CustomServiceConfigurator, Sitecore.UpdateCenter" patch:source="Sitecore.UpdateCenter.config"/>
<configurator type="Sitecore.Marketing.Campaigns.Services.DependencyInjection.CustomServiceConfigurator, Sitecore.Marketing.Campaigns.Services" patch:source="Sitecore.Marketing.Campaigns.Services.config"/>
<!--
 Configurator used by Marketing Automation to register required services 
-->
<configurator type="Sitecore.Marketing.Automation.Client.MarketingAutomationClientServiceConfigurator, Sitecore.Marketing.Automation.Client" patch:source="Sitecore.Marketing.Automation.Client.config"/>
<!--
 Configurator used by Marketing Automation to register required services 
-->
<configurator type="Sitecore.Marketing.Automation.ActivityDescriptors.Client.MarketingAutomationActivityDescriptorsClientServiceConfigurator, Sitecore.Marketing.Automation.ActivityDescriptors.Client" patch:source="Sitecore.Marketing.Automation.ActivityDescriptors.Client.config"/>
<!--
 Configurator used by EXM to register required services 
-->
<configurator type="Sitecore.EDS.Core.DependencyInjection.CustomServiceConfigurator, Sitecore.EDS.Core" patch:source="Sitecore.EDS.Core.config"/>
<!--
 Configurator used by EXM to register required services 
-->
<configurator type="Sitecore.EmailCampaign.Cd.DependencyInjection.CustomServiceConfigurator, Sitecore.EmailCampaign.Cd" patch:source="Sitecore.EmailExperience.ContentDelivery.config"/>
<register serviceType="Sitecore.ExM.Framework.Formatters.IDateTimeFormatter, Sitecore.ExM.Framework" implementationType="Sitecore.ExM.Framework.Formatters.DateTimeFormatter, Sitecore.ExM.Framework" lifetime="Singleton" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<register serviceType="Sitecore.EmailCampaign.Server.Model.SortParameterFactory, Sitecore.EmailCampaign.Server" implementationType="Sitecore.EmailCampaign.Server.Model.SortParameterFactory, Sitecore.EmailCampaign.Server" lifetime="Singleton" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 Configurator used by EXM to register required services 
-->
<configurator type="Sitecore.EmailCampaign.Cm.DependencyInjection.CustomServiceConfigurator, Sitecore.EmailCampaign.Cm" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<!--
 Configurator used by EXM to register required services 
-->
<configurator type="Sitecore.EmailCampaign.Server.DependencyInjection.CustomServiceConfigurator, Sitecore.EmailCampaign.Server" patch:source="Sitecore.EmailExperience.ContentManagementPrimary.config"/>
<configurator type="Sitecore.EmailCampaign.Cm.Ui.DependencyInjection.CustomServiceConfigurator, Sitecore.EmailCampaign.Cm.UI" patch:source="Sitecore.EmailExperience.ContentManagementPrimary.config"/>
<!--
 Configurator used by EXM to register required services 
-->
<configurator type="Sitecore.Modules.EmailCampaign.DependencyInjection.CustomServiceConfigurator, Sitecore.EmailCampaign" patch:source="Sitecore.EmailExperience.Core.config"/>
<!--
 Configurator used by EXM to register required services 
-->
<configurator type="Sitecore.EmailCampaign.ExperienceAnalytics.DependencyInjection.CustomServiceConfigurator, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Aggregation.config"/>
<register serviceType="Sitecore.Framework.Messaging.IMessageHandler`1[[Sitecore.EmailCampaign.Model.Messaging.AutomatedMessage, Sitecore.EmailCampaign.Model]], Sitecore.Framework.Messaging.Abstractions" implementationType="Sitecore.EmailCampaign.Cm.UI.Handlers.AutomatedMessageHandler, Sitecore.EmailCampaign.Cm.UI" lifetime="Transient" patch:source="Sitecore.EmailExperience.Messaging.config"/>
<register serviceType="Sitecore.Framework.Messaging.IMessageHandler`1[[Sitecore.EmailCampaign.Model.Messaging.ConfirmSubscriptionMessage, Sitecore.EmailCampaign.Model]], Sitecore.Framework.Messaging.Abstractions" implementationType="Sitecore.EmailCampaign.Cm.UI.Handlers.ConfirmSubscriptionMessageHandler, Sitecore.EmailCampaign.Cm.UI" lifetime="Transient" patch:source="Sitecore.EmailExperience.Messaging.config"/>
<register serviceType="Sitecore.Framework.Messaging.IMessageHandler`1[[Sitecore.EmailCampaign.Model.Messaging.EmailOpenMessage, Sitecore.EmailCampaign.Model]], Sitecore.Framework.Messaging.Abstractions" implementationType="Sitecore.EmailCampaign.Cm.Handlers.EmailOpenedMessageHandler, Sitecore.EmailCampaign.Cm" lifetime="Transient" patch:source="Sitecore.EmailExperience.Messaging.config"/>
<register serviceType="Sitecore.Framework.Messaging.IMessageHandler`1[[Sitecore.EmailCampaign.Model.Messaging.EmailAddressHistoryMessage, Sitecore.EmailCampaign.Model]], Sitecore.Framework.Messaging.Abstractions" implementationType="Sitecore.EmailCampaign.Cm.Handlers.EmailAddressHistoryEntryHandler, Sitecore.EmailCampaign.Cm" lifetime="Transient" patch:source="Sitecore.EmailExperience.Messaging.config"/>
<register serviceType="Sitecore.Framework.Messaging.IMessageHandler`1[[Sitecore.EmailCampaign.Model.Messaging.SentMessage, Sitecore.EmailCampaign.Model]], Sitecore.Framework.Messaging.Abstractions" implementationType="Sitecore.EmailCampaign.Cm.Handlers.SentMessageHandler, Sitecore.EmailCampaign.Cm" lifetime="Transient" patch:source="Sitecore.EmailExperience.Messaging.config"/>
<register serviceType="Sitecore.Framework.Messaging.IMessageHandler`1[[Sitecore.EmailCampaign.Model.Messaging.ClearSuppressionList, Sitecore.EmailCampaign.Model]], Sitecore.Framework.Messaging.Abstractions" implementationType="Sitecore.EmailCampaign.Cm.UI.Handlers.ClearSuppressionListMessageHandler, Sitecore.EmailCampaign.Cm.UI" lifetime="Transient" patch:source="Sitecore.EmailExperience.Messaging.config"/>
</services>
<xdb.sql.common patch:source="Sitecore.Xdb.Sql.Common.config">
<!--

                RetryManager contains policy and retry settings to handle transient faults.
            
-->
<retryManagerSettings type="Sitecore.Xdb.Sql.Common.ExponentialBackoffRetryManagerSettings, Sitecore.Xdb.Sql.Common">
<param type="Sitecore.Xdb.Sql.Common.Xmgmt.ConfigurationHelper, Sitecore.Xdb.Sql.Common.Xmgmt" desc="retryCount" factoryMethod="ToInt" arg0="10"/>
<param type="Sitecore.Xdb.Sql.Common.Xmgmt.ConfigurationHelper, Sitecore.Xdb.Sql.Common.Xmgmt" desc="minBackoff" factoryMethod="ToTimeSpan" arg0="00:00:01"/>
<param type="Sitecore.Xdb.Sql.Common.Xmgmt.ConfigurationHelper, Sitecore.Xdb.Sql.Common.Xmgmt" desc="maxBackoff" factoryMethod="ToTimeSpan" arg0="00:00:30"/>
<param type="Sitecore.Xdb.Sql.Common.Xmgmt.ConfigurationHelper, Sitecore.Xdb.Sql.Common.Xmgmt" desc="deltaBackoff" factoryMethod="ToTimeSpan" arg0="00:00:10"/>
</retryManagerSettings>
</xdb.sql.common>
<!--  COMMANDS  -->
<!--
 ITEM BUCKET COMMANDS
         The commands that run the item bucket system.
    
-->
<!--
 EXPERIENCE EDITOR COMMANDS
         The commands that run in the Experience Editor.
    
-->
<!--
 EXPERIENCE EDITOR COMMANDS
         The commands that run in the Experience Editor.
    
-->
<!--  COMMANDS  -->
<commands patch:source="Sitecore.Commands.config">
<command name="accessviewer:selectcolumns" type="Sitecore.Shell.Framework.Commands.AccessViewer.SelectColumns,Sitecore.Kernel"/>
<command name="archive:delete" type="Sitecore.Shell.Framework.Commands.Archives.Delete,Sitecore.Kernel"/>
<command name="archive:empty" type="Sitecore.Shell.Framework.Commands.Archives.Empty,Sitecore.Kernel"/>
<command name="archive:refresh" type="Sitecore.Shell.Framework.Commands.Archives.Refresh,Sitecore.Kernel"/>
<command name="archive:restore" type="Sitecore.Shell.Framework.Commands.Archives.Restore,Sitecore.Kernel"/>
<command name="archive:showversions" type="Sitecore.Shell.Framework.Commands.Archives.ShowVersions,Sitecore.Kernel"/>
<command name="brokenlinks:showsystemitems" type="Sitecore.Shell.Framework.Commands.BrokenLinks.ShowSystemItems,Sitecore.Kernel"/>
<command name="carousel:home" type="Sitecore.Shell.Framework.Commands.Carousel.Home,Sitecore.Kernel"/>
<command name="carousel:refresh" type="Sitecore.Shell.Framework.Commands.Carousel.Refresh,Sitecore.Kernel"/>
<command name="clipboard:copyidtoclipboard" type="Sitecore.Shell.Framework.Commands.Clipboard.CopyIDToClipboard,Sitecore.Kernel"/>
<command name="clipboard:copypathtoclipboard" type="Sitecore.Shell.Framework.Commands.Clipboard.CopyPathToClipboard,Sitecore.Kernel"/>
<command name="contenteditor:archive" type="Sitecore.Shell.Framework.Commands.ContentEditor.Archive,Sitecore.Kernel"/>
<command name="contenteditor:back" type="Sitecore.Shell.Framework.Commands.ContentEditor.Back,Sitecore.Kernel"/>
<command name="contenteditor:close" type="Sitecore.Shell.Framework.Commands.ContentEditor.Close,Sitecore.Kernel"/>
<command name="contenteditor:closepreview" type="Sitecore.Shell.Framework.Commands.ContentEditor.ClosePreview,Sitecore.Kernel"/>
<command name="contenteditor:edit" type="Sitecore.Shell.Framework.Commands.ContentEditor.Edit,Sitecore.Kernel"/>
<command name="contenteditor:forward" type="Sitecore.Shell.Framework.Commands.ContentEditor.Forward,Sitecore.Kernel"/>
<command name="contenteditor:home" type="Sitecore.Shell.Framework.Commands.ContentEditor.Home,Sitecore.Kernel"/>
<command name="contenteditor:opensecurity" type="Sitecore.Shell.Framework.Commands.ContentEditor.OpenSecurity,Sitecore.Kernel"/>
<command name="contenteditor:incrementmark" type="Sitecore.Shell.Framework.Commands.ContentEditor.IncrementMark,Sitecore.Kernel"/>
<command name="contenteditor:navigate" type="Sitecore.Shell.Framework.Commands.ContentEditor.Navigate,Sitecore.Kernel"/>
<command name="contenteditor:pagedesigner" type="Sitecore.Shell.Framework.Commands.ContentEditor.PageDesigner,Sitecore.Kernel"/>
<command name="contenteditor:preview" type="Sitecore.Shell.Framework.Commands.ContentEditor.Preview,Sitecore.Kernel"/>
<command name="contenteditor:pagepreviews" type="Sitecore.Shell.Framework.Commands.ContentEditor.PagePreviews,Sitecore.Kernel"/>
<command name="contenteditor:properties" type="Sitecore.Shell.Framework.Commands.ContentEditor.Properties,Sitecore.Kernel"/>
<command name="contenteditor:reminder" type="Sitecore.Shell.Framework.Commands.ContentEditor.Reminder,Sitecore.Kernel"/>
<command name="contenteditor:save" type="Sitecore.Shell.Framework.Commands.ContentEditor.Save,Sitecore.Kernel"/>
<command name="contenteditor:saveandclose" type="Sitecore.Shell.Framework.Commands.ContentEditor.SaveAndClose,Sitecore.Kernel"/>
<command name="contenteditor:seticon" type="Sitecore.Shell.Framework.Commands.ContentEditor.SetIcon,Sitecore.Kernel"/>
<command name="contenteditor:setthumbnail" type="Sitecore.Shell.Framework.Commands.ContentEditor.SetThumbnail,Sitecore.Kernel"/>
<command name="contenteditor:showworkflowcommands" type="Sitecore.Shell.Framework.Commands.ContentEditor.ShowWorkflowCommands,Sitecore.Kernel"/>
<command name="contenteditor:spellcheck" type="Sitecore.Shell.Applications.ContentManager.Commands.Spellcheck,Sitecore.Client"/>
<command name="contenteditor:subitems" type="Sitecore.Shell.Framework.Commands.ContentEditor.Subitems,Sitecore.Kernel"/>
<command name="contenteditor:toggleentiretree" type="Sitecore.Shell.Framework.Commands.ContentEditor.ToggleEntireTree,Sitecore.Kernel"/>
<command name="contenteditor:togglefolders" type="Sitecore.Shell.Framework.Commands.ContentEditor.ToggleFolders,Sitecore.Kernel"/>
<command name="contenteditor:togglehiddenitems" type="Sitecore.Shell.Framework.Commands.ContentEditor.ToggleHiddenItems,Sitecore.Kernel"/>
<command name="contenteditor:togglestandardfields" type="Sitecore.Shell.Framework.Commands.ContentEditor.ToggleStandardFields,Sitecore.Kernel"/>
<command name="contenteditor:togglerawvalues" type="Sitecore.Shell.Framework.Commands.ContentEditor.ToggleRawValues,Sitecore.Kernel"/>
<command name="contenteditor:toggletranslate" type="Sitecore.Shell.Framework.Commands.ContentEditor.ToggleTranslate,Sitecore.Kernel"/>
<command name="contenteditor:up" type="Sitecore.Shell.Framework.Commands.ContentEditor.Up,Sitecore.Kernel"/>
<command name="contenteditor:validatemarkup" type="Sitecore.Shell.Applications.ContentManager.Commands.ValidateMarkup,Sitecore.Client"/>
<command name="contentimage:editimage" type="Sitecore.Shell.Framework.Commands.ContentEditor.ContentImage.EditImage,Sitecore.Kernel"/>
<command name="createuser:addroles" type="Sitecore.Shell.Applications.Security.CreateNewUser.AddRoles,Sitecore.Client"/>
<command name="databases:cleanup" type="Sitecore.Shell.Framework.Commands.Databases.CleanUp,Sitecore.Kernel"/>
<command name="domainmanager:delete" type="Sitecore.Shell.Framework.Commands.DomainManager.DeleteDomain,Sitecore.Kernel"/>
<command name="domainmanager:newdomain" type="Sitecore.Shell.Framework.Commands.DomainManager.NewDomain,Sitecore.Kernel"/>
<command name="domainmanager:editdomain" type="Sitecore.Shell.Framework.Commands.DomainManager.EditDomain,Sitecore.Kernel"/>
<command name="domainmanager:dumpusers" type="Sitecore.Shell.Framework.Commands.Serialization.DumpDomainUsersCommand,Sitecore.Kernel"/>
<command name="domainmanager:loadusers" type="Sitecore.Shell.Framework.Commands.Serialization.LoadDomainUsersCommand,Sitecore.Kernel"/>
<command name="domainmanager:dumproles" type="Sitecore.Shell.Framework.Commands.Serialization.DumpDomainRolesCommand,Sitecore.Kernel"/>
<command name="domainmanager:loadroles" type="Sitecore.Shell.Framework.Commands.Serialization.LoadDomainRolesCommand,Sitecore.Kernel"/>
<command name="domainmanager:dumpusersroles" type="Sitecore.Shell.Framework.Commands.Serialization.DumpDomainUsersRolesCommand,Sitecore.Kernel"/>
<command name="domainmanager:loadusersroles" type="Sitecore.Shell.Framework.Commands.Serialization.LoadDomainUsersRolesCommand,Sitecore.Kernel"/>
<command name="edithtml:fix" type="Sitecore.Shell.Applications.ContentEditor.Dialogs.EditHtml.Commands.Fix,Sitecore.Client"/>
<command name="edithtml:format" type="Sitecore.Shell.Applications.ContentEditor.Dialogs.EditHtml.Commands.Format,Sitecore.Client"/>
<command name="edithtml:validatexhtml" type="Sitecore.Shell.Applications.ContentEditor.Dialogs.EditHtml.Commands.ValidateXHtml,Sitecore.Client"/>
<command name="favorites:add" type="Sitecore.Shell.Framework.Commands.Favorites.Add,Sitecore.Kernel"/>
<command name="favorites:organize" type="Sitecore.Shell.Framework.Commands.Favorites.Organize,Sitecore.Kernel"/>
<command name="favorites:showmenu" type="Sitecore.Shell.Framework.Commands.Favorites.ShowMenu,Sitecore.Kernel"/>
<command name="globalization:exportlanguage" type="Sitecore.Shell.Framework.Commands.ExportLanguage,Sitecore.Kernel"/>
<command name="globalization:importlanguage" type="Sitecore.Shell.Framework.Commands.ImportLanguage,Sitecore.Kernel"/>
<command name="globalization:untranslatedfields" type="Sitecore.Shell.Framework.Commands.UntranslatedFields,Sitecore.Kernel"/>
<command name="griddesigner:alignbottomleft" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.AlignBottomLeft,Sitecore.Client"/>
<command name="griddesigner:alignbottom" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.AlignBottom,Sitecore.Client"/>
<command name="griddesigner:alignbottomright" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.AlignBottomRight,Sitecore.Client"/>
<command name="griddesigner:alignmiddleleft" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.AlignMiddleLeft,Sitecore.Client"/>
<command name="griddesigner:alignmiddle" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.AlignMiddle,Sitecore.Client"/>
<command name="griddesigner:alignmiddleright" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.AlignMiddleRight,Sitecore.Client"/>
<command name="griddesigner:aligntopleft" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.AlignTopLeft,Sitecore.Client"/>
<command name="griddesigner:aligntop" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.AlignTop,Sitecore.Client"/>
<command name="griddesigner:aligntopright" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.AlignTopRight,Sitecore.Client"/>
<command name="griddesigner:delete" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.Delete,Sitecore.Client"/>
<command name="griddesigner:insertabove" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.InsertAbove,Sitecore.Client"/>
<command name="griddesigner:insertbelow" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.InsertBelow,Sitecore.Client"/>
<command name="griddesigner:insertdiv" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.InsertDiv,Sitecore.Client"/>
<command name="griddesigner:insertleft" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.InsertLeft,Sitecore.Client"/>
<command name="griddesigner:insertplaceholder" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.InsertPlaceholder,Sitecore.Client"/>
<command name="griddesigner:insertcontrol" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.InsertControl,Sitecore.Client"/>
<command name="griddesigner:insertright" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.InsertRight,Sitecore.Client"/>
<command name="griddesigner:inserttable" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.InsertTable,Sitecore.Client"/>
<command name="griddesigner:load" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.LoadPredefined,Sitecore.Client"/>
<command name="griddesigner:properties" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.Properties,Sitecore.Client"/>
<command name="griddesigner:redo" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.Redo,Sitecore.Client"/>
<command name="griddesigner:setcolspan" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.SetColSpan,Sitecore.Client"/>
<command name="griddesigner:setfloating" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.SetFloating,Sitecore.Client"/>
<command name="griddesigner:setheight" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.SetHeight,Sitecore.Client"/>
<command name="griddesigner:setleft" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.SetLeft,Sitecore.Client"/>
<command name="griddesigner:setposition" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.SetPosition,Sitecore.Client"/>
<command name="griddesigner:setrowspan" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.SetRowSpan,Sitecore.Client"/>
<command name="griddesigner:settop" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.SetTop,Sitecore.Client"/>
<command name="griddesigner:setwidth" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.SetWidth,Sitecore.Client"/>
<command name="griddesigner:splithorizontal" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.SplitHorizontal,Sitecore.Client"/>
<command name="griddesigner:splitvertical" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.SplitVertical,Sitecore.Client"/>
<command name="griddesigner:undo" type="Sitecore.Shell.Applications.Layouts.GridDesigner.Commands.Undo,Sitecore.Client"/>
<command name="ide:createfile" type="Sitecore.Shell.Framework.Commands.IDE.CreateFile,Sitecore.Kernel"/>
<command name="imager:save" type="Sitecore.Shell.Framework.Commands.Imager.Save,Sitecore.Kernel"/>
<command name="imager:open" type="Sitecore.Shell.Framework.Commands.Imager.Open,Sitecore.Kernel"/>
<command name="imager:undo" type="Sitecore.Shell.Framework.Commands.Imager.Undo,Sitecore.Kernel"/>
<command name="imager:redo" type="Sitecore.Shell.Framework.Commands.Imager.Redo,Sitecore.Kernel"/>
<command name="imager:crop" type="Sitecore.Shell.Framework.Commands.Imager.Crop,Sitecore.Kernel"/>
<command name="imager:resize" type="Sitecore.Shell.Framework.Commands.Imager.Resize,Sitecore.Kernel"/>
<command name="imager:rotateleft" type="Sitecore.Shell.Framework.Commands.Imager.RotateLeft,Sitecore.Kernel"/>
<command name="imager:rotateright" type="Sitecore.Shell.Framework.Commands.Imager.RotateRight,Sitecore.Kernel"/>
<command name="imager:flipvertical" type="Sitecore.Shell.Framework.Commands.Imager.FlipVertical,Sitecore.Kernel"/>
<command name="imager:fliphorizontal" type="Sitecore.Shell.Framework.Commands.Imager.FlipHorizontal,Sitecore.Kernel"/>
<command name="item:addfromtemplate" type="Sitecore.Shell.Framework.Commands.AddFromTemplate,Sitecore.Kernel"/>
<command name="item:addmaster" type="Sitecore.Buckets.Pipelines.UI.AddMaster, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="item:addtemplatefield" type="Sitecore.Shell.Framework.Commands.AddTemplateField,Sitecore.Kernel"/>
<command name="item:addversion" type="Sitecore.Shell.Framework.Commands.AddVersion,Sitecore.Kernel"/>
<command name="item:archiveitem" type="Sitecore.Shell.Framework.Commands.Archive,Sitecore.Kernel"/>
<command name="item:archiveversion" type="Sitecore.Shell.Framework.Commands.ArchiveVersion,Sitecore.Kernel"/>
<command name="item:archivedateset" type="Sitecore.Shell.Framework.Commands.ArchiveDateSet,Sitecore.Kernel"/>
<command name="item:changetemplate" type="Sitecore.Shell.Framework.Commands.ChangeTemplate,Sitecore.Kernel"/>
<command name="item:checkin" type="Sitecore.Shell.Framework.Commands.CheckIn,Sitecore.Kernel"/>
<command name="item:checkout" type="Sitecore.Shell.Framework.Commands.CheckOut,Sitecore.Kernel"/>
<command name="item:compareversions" type="Sitecore.Shell.Framework.Commands.CompareVersions,Sitecore.Kernel"/>
<command name="item:copyto" type="Sitecore.Shell.Framework.Commands.CopyTo,Sitecore.Kernel"/>
<command name="item:copytoclipboard" type="Sitecore.Shell.Framework.Commands.CopyToClipboard,Sitecore.Kernel"/>
<command name="item:cuttoclipboard" type="Sitecore.Shell.Framework.Commands.CutToClipboard,Sitecore.Kernel"/>
<command name="item:create" type="Sitecore.Shell.Framework.Commands.Create,Sitecore.Kernel"/>
<command name="item:delete" type="Sitecore.Shell.Framework.Commands.Delete,Sitecore.Kernel"/>
<command name="item:deletechildren" type="Sitecore.Shell.Framework.Commands.DeleteChildren,Sitecore.Kernel"/>
<command name="item:deletetemplatefield" type="Sitecore.Shell.Framework.Commands.DeleteTemplateField,Sitecore.Kernel"/>
<command name="item:deleteversion" type="Sitecore.Shell.Framework.Commands.DeleteVersion,Sitecore.Kernel"/>
<command name="item:design" type="Sitecore.Shell.Framework.Commands.Edit,Sitecore.Kernel"/>
<command name="item:clone" type="Sitecore.Shell.Framework.Commands.Clone,Sitecore.Kernel"/>
<command name="item:cloneitemwithoutsubitems" type="Sitecore.Shell.Framework.Commands.CloneWithoutSubItems,Sitecore.Kernel"/>
<command name="item:unclone" type="Sitecore.Shell.Framework.Commands.Unclone,Sitecore.Kernel"/>
<command name="item:uncloneitem" type="Sitecore.Shell.Framework.Commands.UncloneSingleItem,Sitecore.Kernel"/>
<command name="item:duplicate" type="Sitecore.Shell.Framework.Commands.Duplicate,Sitecore.Kernel"/>
<command name="item:download" type="Sitecore.Shell.Framework.Commands.Download,Sitecore.Kernel"/>
<command name="item:edit" type="Sitecore.Shell.Framework.Commands.Edit,Sitecore.Kernel"/>
<command name="item:favorites" type="Sitecore.Shell.Framework.Commands.ContentEditor.ShowFavorites,Sitecore.Kernel"/>
<command name="item:gototemplate" type="Sitecore.Shell.Framework.Commands.GotoTemplate,Sitecore.Kernel"/>
<command name="item:gotomaster" type="Sitecore.Shell.Framework.Commands.GotoMaster,Sitecore.Kernel"/>
<command name="item:links" type="Sitecore.Shell.Framework.Commands.ContentEditor.ShowLinks,Sitecore.Kernel"/>
<command name="item:movedown" type="Sitecore.Shell.Framework.Commands.MoveDown,Sitecore.Kernel"/>
<command name="item:movefirst" type="Sitecore.Shell.Framework.Commands.MoveFirst,Sitecore.Kernel"/>
<command name="item:movelast" type="Sitecore.Shell.Framework.Commands.MoveLast,Sitecore.Kernel"/>
<command name="item:moveto" type="Sitecore.Shell.Framework.Commands.MoveTo,Sitecore.Kernel"/>
<command name="item:moveup" type="Sitecore.Shell.Framework.Commands.MoveUp,Sitecore.Kernel"/>
<command name="item:myitems" type="Sitecore.Shell.Framework.Commands.MyItems,Sitecore.Kernel"/>
<command name="item:new" type="Sitecore.Shell.Framework.Commands.ItemNew,Sitecore.Kernel"/>
<command name="item:newfolder" type="Sitecore.Shell.Framework.Commands.NewFolder,Sitecore.Kernel"/>
<command name="item:open" type="Sitecore.Shell.Framework.Commands.ContentEditor.OpenItem,Sitecore.Kernel"/>
<command name="item:openitemsecurityeditor" type="Sitecore.Shell.Framework.Commands.ContentEditor.OpenItemSecurityEditorContextAware,Sitecore.Kernel"/>
<command name="item:pastefromclipboard" type="Sitecore.Buckets.Commands.PasteFromClipboardBuckets, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="item:publish" type="Sitecore.Shell.Framework.Commands.PublishItem,Sitecore.Kernel"/>
<command name="item:publishnow" type="Sitecore.Shell.Framework.Commands.PublishNow,Sitecore.Kernel"/>
<command name="item:publishingviewer" type="Sitecore.Shell.Framework.Commands.PublishingViewer,Sitecore.Kernel"/>
<command name="item:preview" type="Sitecore.Shell.Framework.Commands.PreviewItem,Sitecore.Kernel"/>
<command name="item:rename" type="Sitecore.Shell.Framework.Commands.Rename,Sitecore.Kernel"/>
<command name="item:removelanguage" type="Sitecore.Shell.Framework.Commands.RemoveLanguage,Sitecore.Kernel"/>
<command name="item:reminderclear" type="Sitecore.Shell.Framework.Commands.ReminderClear,Sitecore.Kernel"/>
<command name="item:reminderset" type="Sitecore.Shell.Framework.Commands.ReminderSet,Sitecore.Kernel"/>
<command name="item:resetdefaultworkflow" type="Sitecore.Shell.Framework.Commands.ResetDefaultWorkflow,Sitecore.Kernel"/>
<command name="item:resetfields" type="Sitecore.Shell.Framework.Commands.ResetFields,Sitecore.Kernel"/>
<command name="item:resetsortorder" type="Sitecore.Shell.Framework.Commands.ResetSortorder,Sitecore.Kernel"/>
<command name="item:securitypreset" type="Sitecore.Shell.Framework.Commands.SecurityPreset,Sitecore.Kernel"/>
<command name="item:selecticon" type="Sitecore.Shell.Framework.Commands.SelectIcon,Sitecore.Kernel"/>
<command name="item:selectthumbnail" type="Sitecore.Shell.Framework.Commands.SelectThumbnail,Sitecore.Kernel"/>
<command name="item:selectlanguage" type="Sitecore.Shell.Framework.Commands.SelectLanguage,Sitecore.Kernel"/>
<command name="item:setlayoutdetails" type="Sitecore.Shell.Framework.Commands.SetLayoutDetails,Sitecore.Kernel"/>
<command name="item:setaliases" type="Sitecore.Shell.Framework.Commands.SetAliases,Sitecore.Kernel"/>
<command name="item:setcontextmenu" type="Sitecore.Shell.Framework.Commands.SetContextMenu,Sitecore.Kernel"/>
<command name="item:setcustomeditors" type="Sitecore.Shell.Framework.Commands.SetCustomEditors,Sitecore.Kernel"/>
<command name="item:setdefaultworkflow" type="Sitecore.Shell.Framework.Commands.SetDefaultWorkflow,Sitecore.Kernel"/>
<command name="item:setdisplayname" type="Sitecore.Shell.Framework.Commands.SetDisplayName,Sitecore.Kernel"/>
<command name="item:setfeedpresentation" type="Sitecore.Shell.Applications.Feeds.Commands.SetFeedPresentation, Sitecore.Client"/>
<command name="item:sethelp" type="Sitecore.Shell.Framework.Commands.SetHelp,Sitecore.Kernel"/>
<command name="item:seticon" type="Sitecore.Shell.Framework.Commands.SetIcon,Sitecore.Kernel"/>
<command name="item:setmasters" type="Sitecore.Shell.Framework.Commands.SetMasters,Sitecore.Kernel"/>
<command name="item:setowner" type="Sitecore.Shell.Framework.Commands.SetOwner,Sitecore.Kernel"/>
<command name="item:setpublishing" type="Sitecore.Shell.Framework.Commands.SetPublishing,Sitecore.Kernel"/>
<command name="item:setribbon" type="Sitecore.Shell.Framework.Commands.SetRibbon,Sitecore.Kernel"/>
<command name="item:setsubitemssorting" type="Sitecore.Shell.Framework.Commands.SetSubitemsSorting,Sitecore.Kernel"/>
<command name="item:settreenodestyle" type="Sitecore.Shell.Framework.Commands.SetTreeNodeStyle,Sitecore.Kernel"/>
<command name="item:showvalidationresult" type="Sitecore.Shell.Framework.Commands.ContentEditor.ShowValidationResult,Sitecore.Kernel"/>
<command name="item:showversions" type="Sitecore.Shell.Framework.Commands.ShowVersions,Sitecore.Kernel"/>
<command name="item:subscribetofeed" type="Sitecore.Shell.Framework.Commands.SubscribetoFeed,Sitecore.Kernel"/>
<command name="item:togglehidden" type="Sitecore.Shell.Framework.Commands.ToggleHidden,Sitecore.Kernel"/>
<command name="item:togglereadonly" type="Sitecore.Shell.Framework.Commands.ToggleReadOnly,Sitecore.Kernel"/>
<command name="item:transfertodatabase" type="Sitecore.Shell.Framework.Commands.TransferToDatabase,Sitecore.Kernel"/>
<command name="item:upload" type="Sitecore.Shell.Framework.Commands.Upload,Sitecore.Kernel"/>
<command name="item:workflow" type="Sitecore.Shell.Framework.Commands.Workflow,Sitecore.Kernel"/>
<command name="itemsync:dumpitem" type="Sitecore.Shell.Framework.Commands.Serialization.DumpItemCommand,Sitecore.Kernel"/>
<command name="itemsync:dumptree" type="Sitecore.Shell.Framework.Commands.Serialization.DumpTreeCommand,Sitecore.Kernel"/>
<command name="itemsync:loadalldatabases" type="Sitecore.Shell.Framework.Commands.Serialization.LoadAllDatabasesCommand,Sitecore.Kernel"/>
<command name="itemsync:loaddatabase" type="Sitecore.Shell.Framework.Commands.Serialization.LoadDatabaseCommand,Sitecore.Kernel"/>
<command name="itemsync:loaditem" type="Sitecore.Shell.Framework.Commands.Serialization.LoadItemCommand,Sitecore.Kernel"/>
<command name="itemsync:loadtree" type="Sitecore.Shell.Framework.Commands.Serialization.LoadTreeCommand,Sitecore.Kernel"/>
<command name="itemsecurityeditor:changedomain" type="Sitecore.Shell.Framework.Commands.ItemSecurityEditor.ChangeDomain,Sitecore.Kernel"/>
<command name="masters:new" type="Sitecore.Shell.Framework.Commands.Masters.New,Sitecore.Kernel"/>
<command name="masters:reset" type="Sitecore.Shell.Framework.Commands.Masters.Reset,Sitecore.Kernel"/>
<command name="media:batchupload" type="Sitecore.Shell.Framework.Commands.Media.BatchUpload,Sitecore.Kernel"/>
<command name="media:download" type="Sitecore.Shell.Framework.Commands.Media.Download,Sitecore.Kernel"/>
<command name="media:newfolder" type="Sitecore.Shell.Framework.Commands.Media.NewFolder,Sitecore.Kernel"/>
<command name="media:multiupload" type="Sitecore.Shell.Framework.Commands.Media.MultiUpload,Sitecore.Kernel"/>
<command name="media:play" type="Sitecore.Shell.Framework.Commands.Media.Play,Sitecore.Kernel"/>
<command name="media:upload" type="Sitecore.Shell.Framework.Commands.Media.Upload,Sitecore.Kernel"/>
<command name="media:view" type="Sitecore.Shell.Framework.Commands.Media.View,Sitecore.Kernel"/>
<command name="pagedesigner:add" type="Sitecore.Shell.Applications.Layouts.PageDesigner.Commands.Add,Sitecore.Client"/>
<command name="pagedesigner:assignlayout" type="Sitecore.Shell.Applications.Layouts.PageDesigner.Commands.AssignLayout,Sitecore.Client"/>
<command name="pagedesigner:changedevice" type="Sitecore.Shell.Applications.Layouts.PageDesigner.Commands.ChangeDevice,Sitecore.Client"/>
<command name="pagedesigner:changelayout" type="Sitecore.Shell.Applications.Layouts.PageDesigner.Commands.ChangeLayout,Sitecore.Client"/>
<command name="pagedesigner:edit" type="Sitecore.Shell.Applications.Layouts.PageDesigner.Commands.Edit,Sitecore.Client"/>
<command name="pagedesigner:editplaceholder" type="Sitecore.Shell.Applications.Layouts.PageDesigner.Commands.EditPlaceholder,Sitecore.Client"/>
<command name="pagedesigner:delete" type="Sitecore.Shell.Applications.Layouts.PageDesigner.Commands.Delete,Sitecore.Client"/>
<command name="pagedesigner:moveup" type="Sitecore.Shell.Applications.Layouts.PageDesigner.Commands.MoveUp,Sitecore.Client"/>
<command name="pagedesigner:movedown" type="Sitecore.Shell.Applications.Layouts.PageDesigner.Commands.MoveDown,Sitecore.Client"/>
<command name="pagedesigner:preset" type="Sitecore.Shell.Applications.Layouts.PageDesigner.Commands.Preset,Sitecore.Client"/>
<command name="pagedesigner:reset" type="Sitecore.Shell.Applications.Layouts.PageDesigner.Commands.Reset,Sitecore.Client"/>
<command name="preferences:changeregionalsettings" type="Sitecore.Shell.Framework.Commands.Preferences.ChangeRegionalSettings,Sitecore.Kernel"/>
<command name="preferences:changeuserinformation" type="Sitecore.Shell.Framework.Commands.Preferences.ChangeUserInformation,Sitecore.Kernel"/>
<command name="preferences:changewallpaper" type="Sitecore.Shell.Framework.Commands.Preferences.ChangeWallPaper,Sitecore.Kernel"/>
<command name="ribbon:new" type="Sitecore.Shell.Framework.Commands.Ribbon.New,Sitecore.Kernel"/>
<command name="ribbon:languages" type="Sitecore.Shell.Framework.Commands.Ribbon.Languages,Sitecore.Kernel"/>
<command name="ribbon:layout" type="Sitecore.Shell.Framework.Commands.Ribbon.Layout,Sitecore.Kernel"/>
<command name="ribbon:security" type="Sitecore.Shell.Framework.Commands.Ribbon.Security,Sitecore.Kernel"/>
<command name="ribbon:customize" type="Sitecore.Shell.Framework.Commands.Ribbon.Customize,Sitecore.Kernel"/>
<command name="rolemanager:addmember" type="Sitecore.Shell.Framework.Commands.RoleManager.AddMember,Sitecore.Kernel"/>
<command name="rolemanager:addmemberof" type="Sitecore.Shell.Framework.Commands.RoleManager.AddMemberOf,Sitecore.Kernel"/>
<command name="rolemanager:delete" type="Sitecore.Shell.Framework.Commands.RoleManager.Delete,Sitecore.Kernel"/>
<command name="rolemanager:newrole" type="Sitecore.Shell.Framework.Commands.RoleManager.NewRole,Sitecore.Kernel"/>
<command name="rolemanager:removemember" type="Sitecore.Shell.Framework.Commands.RoleManager.RemoveMember,Sitecore.Kernel"/>
<command name="rolemanager:removememberof" type="Sitecore.Shell.Framework.Commands.RoleManager.RemoveMemberOf,Sitecore.Kernel"/>
<command name="rolemanager:viewmembers" type="Sitecore.Shell.Framework.Commands.RoleManager.ViewMembers,Sitecore.Kernel"/>
<command name="rolemanager:viewparentroles" type="Sitecore.Shell.Framework.Commands.RoleManager.ViewParentRoles,Sitecore.Kernel"/>
<command name="rolemanager:dumprole" type="Sitecore.Shell.Framework.Commands.Serialization.DumpRoleCommand, Sitecore.Kernel"/>
<command name="rolemanager:loadrole" type="Sitecore.Shell.Framework.Commands.Serialization.LoadRoleCommand, Sitecore.Kernel"/>
<command name="rolemanager:dumproles" type="Sitecore.Shell.Framework.Commands.Serialization.DumpAllRolesCommand, Sitecore.Kernel"/>
<command name="rolemanager:loadroles" type="Sitecore.Shell.Framework.Commands.Serialization.LoadAllRolesCommand, Sitecore.Kernel"/>
<command name="security:changeaccount" type="Sitecore.Shell.Framework.Commands.UserManager.ChangeAccount,Sitecore.Kernel"/>
<command name="security:changedomain" type="Sitecore.Shell.Framework.Commands.UserManager.ChangeDomain,Sitecore.Kernel"/>
<command name="security:changepassword" type="Sitecore.Shell.Framework.Commands.ChangePassword,Sitecore.Kernel"/>
<command name="security:createnewrole" type="Sitecore.Shell.Framework.Commands.CreateNewRole,Sitecore.Kernel"/>
<command name="security:createnewuser" type="Sitecore.Shell.Framework.Commands.UserManager.NewUser,Sitecore.Kernel"/>
<command name="security:opensecuritymanager" type="Sitecore.Shell.Framework.Commands.OpenSecurityManager,Sitecore.Kernel"/>
<command name="security:openitemsecurityeditor" type="Sitecore.Shell.Framework.Commands.UserManager.OpenItemSecurityEditor,Sitecore.Kernel"/>
<command name="security:selectaccount" type="Sitecore.Shell.Framework.Commands.UserManager.SelectAccount,Sitecore.Kernel"/>
<command name="search:launchresult" type="Sitecore.Shell.Applications.Search.Instant.Commands.LaunchResult,Sitecore.Client"/>
<command name="securityeditor:changedomain" type="Sitecore.Shell.Framework.Commands.SecurityEditor.ChangeDomain,Sitecore.Kernel"/>
<command name="securityeditor:changeuser" type="Sitecore.Shell.Framework.Commands.SecurityEditor.ChangeUser,Sitecore.Kernel"/>
<command name="securityeditor:selectcolumns" type="Sitecore.Shell.Framework.Commands.SecurityEditor.SelectColumns,Sitecore.Kernel"/>
<command name="shell:accessviewer" type="Sitecore.Shell.Framework.Commands.Shell.AccessViewer,Sitecore.Kernel"/>
<command name="shell:audit" type="Sitecore.Shell.Framework.Commands.Shell.Audit,Sitecore.Kernel"/>
<command name="shell:autodoc" type="Sitecore.Shell.Framework.Commands.Shell.AutoDoc,Sitecore.Kernel"/>
<command name="shell:domainmanager" type="Sitecore.Shell.Framework.Commands.Shell.DomainManager,Sitecore.Kernel"/>
<command name="shell:editimage" type="Sitecore.Shell.Framework.Commands.Shell.EditImage,Sitecore.Kernel"/>
<command name="shell:edittemplate" type="Sitecore.Shell.Framework.Commands.Shell.EditTemplate,Sitecore.Kernel"/>
<command name="shell:logviewer" type="Sitecore.Shell.Framework.Commands.Shell.LogViewer,Sitecore.Kernel"/>
<command name="shell:rolemanager" type="Sitecore.Shell.Framework.Commands.Shell.RoleManager,Sitecore.Kernel"/>
<command name="shell:search" type="Sitecore.Shell.Framework.Commands.Shell.Search,Sitecore.Kernel"/>
<command name="shell:securityeditor" type="Sitecore.Shell.Framework.Commands.Shell.SecurityEditor,Sitecore.Kernel"/>
<command name="shell:useroptions" type="Sitecore.Shell.Framework.Commands.Shell.UserOptions,Sitecore.Kernel"/>
<command name="shell:usermanager" type="Sitecore.Shell.Framework.Commands.Shell.UserManager,Sitecore.Kernel"/>
<command name="system:addlanguage" type="Sitecore.Shell.Framework.Commands.System.AddLanguage,Sitecore.Kernel"/>
<command name="system:brokenlinks" type="Sitecore.Shell.Framework.Commands.System.BrokenLinks,Sitecore.Kernel"/>
<command name="system:databaseusage" type="Sitecore.Shell.Framework.Commands.System.DatabaseUsage,Sitecore.Kernel"/>
<command name="system:debug" type="Sitecore.Shell.Framework.Commands.System.Debug,Sitecore.Kernel"/>
<command name="system:deletelanguage" type="Sitecore.Shell.Framework.Commands.System.DeleteLanguage,Sitecore.Kernel"/>
<command name="system:installpackage" type="Sitecore.Shell.Framework.Commands.System.InstallPackage,Sitecore.Kernel"/>
<command name="system:logout" type="Sitecore.Shell.Framework.Commands.System.Logout,Sitecore.Kernel"/>
<command name="system:openwebsite" type="Sitecore.Shell.Framework.Commands.System.OpenWebSite,Sitecore.Kernel"/>
<command name="system:preview" type="Sitecore.Shell.Framework.Commands.System.Preview,Sitecore.Kernel"/>
<command name="system:publish" type="Sitecore.Shell.Framework.Commands.System.Publish,Sitecore.Kernel"/>
<command name="system:rebuilddatabase" type="Sitecore.Shell.Framework.Commands.System.RebuildDatabase,Sitecore.Kernel"/>
<command name="system:rebuildlinkdatabase" type="Sitecore.Shell.Framework.Commands.System.RebuildLinkDatabase,Sitecore.Kernel"/>
<command name="system:run" type="Sitecore.Shell.Framework.Commands.System.RunProgram,Sitecore.Kernel"/>
<command name="system:search" type="Sitecore.Shell.Framework.Commands.System.Search,Sitecore.Kernel"/>
<command name="system:showabout" type="Sitecore.Shell.Framework.Commands.System.ShowAbout,Sitecore.Kernel"/>
<command name="system:showlicenses" type="Sitecore.Shell.Framework.Commands.System.ShowLicenses,Sitecore.Kernel"/>
<command name="templatebuilder:build" type="Sitecore.Shell.Framework.Commands.TemplateBuilder.Build,Sitecore.Kernel"/>
<command name="templatebuilder:remove" type="Sitecore.Shell.Framework.Commands.TemplateBuilder.Remove,Sitecore.Kernel"/>
<command name="templatebuilder:moveup" type="Sitecore.Shell.Framework.Commands.TemplateBuilder.MoveUp,Sitecore.Kernel"/>
<command name="templatebuilder:movedown" type="Sitecore.Shell.Framework.Commands.TemplateBuilder.MoveDown,Sitecore.Kernel"/>
<command name="templatebuilder:movefirst" type="Sitecore.Shell.Framework.Commands.TemplateBuilder.MoveFirst,Sitecore.Kernel"/>
<command name="templatebuilder:movelast" type="Sitecore.Shell.Framework.Commands.TemplateBuilder.MoveLast,Sitecore.Kernel"/>
<command name="templatebuilder:newmaster" type="Sitecore.Shell.Framework.Commands.TemplateBuilder.NewMaster,Sitecore.Kernel"/>
<command name="templatebuilder:setbasetemplates" type="Sitecore.Shell.Framework.Commands.TemplateBuilder.SetBaseTemplates,Sitecore.Kernel"/>
<command name="templatebuilder:setstandardvalues" type="Sitecore.Shell.Framework.Commands.TemplateBuilder.SetStandardValues,Sitecore.Kernel"/>
<command name="templates:addfield" type="Sitecore.Shell.Framework.Commands.Templates.AddField,Sitecore.Kernel"/>
<command name="templates:addsection" type="Sitecore.Shell.Framework.Commands.Templates.AddSection,Sitecore.Kernel"/>
<command name="templates:addmaster" type="Sitecore.Shell.Framework.Commands.Templates.AddMaster,Sitecore.Kernel"/>
<command name="templates:createstandardvalues" type="Sitecore.Shell.Framework.Commands.Templates.CreateStandardValues,Sitecore.Kernel"/>
<command name="templates:new" type="Sitecore.Shell.Framework.Commands.Templates.New,Sitecore.Kernel"/>
<command name="templates:newfolder" type="Sitecore.Shell.Framework.Commands.Templates.NewFolder,Sitecore.Kernel"/>
<command name="user:opensecurityeditor" type="Sitecore.Shell.Framework.Commands.OpenSecurityEditor,Sitecore.Kernel"/>
<command name="usermanager:delete" type="Sitecore.Shell.Framework.Commands.UserManager.Delete,Sitecore.Kernel"/>
<command name="usermanager:disable" type="Sitecore.Shell.Framework.Commands.UserManager.Disable,Sitecore.Kernel"/>
<command name="usermanager:enable" type="Sitecore.Shell.Framework.Commands.UserManager.Enable,Sitecore.Kernel"/>
<command name="usermanager:edituser" type="Sitecore.Shell.Framework.Commands.UserManager.EditUser,Sitecore.Kernel"/>
<command name="usermanager:newuser" type="Sitecore.Shell.Framework.Commands.UserManager.NewUser,Sitecore.Kernel"/>
<command name="usermanager:resetsettings" type="Sitecore.Shell.Framework.Commands.UserManager.ResetSettings,Sitecore.Kernel"/>
<command name="usermanager:resetmysettings" type="Sitecore.Shell.Framework.Commands.UserManager.ResetMySettings,Sitecore.Kernel"/>
<command name="usermanager:setpassword" type="Sitecore.Shell.Framework.Commands.UserManager.SetPassword,Sitecore.Kernel"/>
<command name="usermanager:unlock" type="Sitecore.Shell.Framework.Commands.UserManager.Unlock,Sitecore.Kernel"/>
<command name="usermanager:dumpuser" type="Sitecore.Shell.Framework.Commands.Serialization.DumpUserCommand,Sitecore.Kernel"/>
<command name="usermanager:loaduser" type="Sitecore.Shell.Framework.Commands.Serialization.LoadUserCommand,Sitecore.Kernel"/>
<command name="usermanager:dumpusers" type="Sitecore.Shell.Framework.Commands.Serialization.DumpAllUsersCommand,Sitecore.Kernel"/>
<command name="usermanager:loadusers" type="Sitecore.Shell.Framework.Commands.Serialization.LoadAllUsersCommand,Sitecore.Kernel"/>
<command name="webdav:compositeedit" type="Sitecore.Shell.Framework.Commands.WebDAV.CompositeEdit,Sitecore.Kernel"/>
<command name="webdav:edit" type="Sitecore.Shell.Framework.Commands.WebDAV.Edit,Sitecore.Kernel"/>
<command name="webdav:editmedia" type="Sitecore.Shell.Framework.Commands.WebDAV.EditMedia,Sitecore.Kernel"/>
<command name="webdav:editplayablemedia" type="Sitecore.Shell.Framework.Commands.WebDAV.EditPlayableMedia,Sitecore.Kernel"/>
<command name="webdav:openview" type="Sitecore.Shell.Framework.Commands.WebDAV.Open,Sitecore.Kernel"/>
<command name="validator:trim" type="Sitecore.Shell.Framework.Commands.ContentEditor.Validators.Trim,Sitecore.Kernel"/>
<command name="validator:viewxhtml" type="Sitecore.Shell.Framework.Commands.ContentEditor.Validators.ViewXhtml,Sitecore.Kernel"/>
<command name="workbox:logout" type="Sitecore.Shell.Framework.Commands.Workbox.Logout,Sitecore.Kernel"/>
<command name="indexing:rebuild" type="Sitecore.ContentSearch.Client.Commands.Rebuild,Sitecore.ContentSearch.Client" patch:source="Sitecore.ContentSearch.config"/>
<command name="indexing:refreshtree" type="Sitecore.ContentSearch.Client.Commands.RefreshTree,Sitecore.ContentSearch.Client" patch:source="Sitecore.ContentSearch.config"/>
<command name="indexing:rebuildall" type="Sitecore.ContentSearch.Client.Commands.RebuildAll,Sitecore.ContentSearch.Client" patch:source="Sitecore.ContentSearch.config"/>
<command name="indexing:generatesolrschema" type="Sitecore.ContentSearch.Client.Commands.RunSolrSchemaBuilder, Sitecore.ContentSearch.Client" patch:source="Sitecore.ContentSearch.config"/>
<command name="indexing:populatesolrschema" type="Sitecore.ContentSearch.Client.Commands.RunSolrSchemaPopulate, Sitecore.ContentSearch.Client" patch:source="Sitecore.ContentSearch.config"/>
<command name="indexing:runmanager" type="Sitecore.ContentSearch.Client.Commands.RunIndexingManager, Sitecore.ContentSearch.Client" patch:source="Sitecore.ContentSearch.config"/>
<command name="bucket:addtag" type="Sitecore.Buckets.Search.SearchOperations.AddTag, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="bucket:applycampaignsgoalseventstoallitems" type="Sitecore.Buckets.Search.SearchOperations.ApplyCampaignsGoalsEventsToAllItems, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="bucket:applyfieldvaluechangetoallitems" type="Sitecore.Buckets.Search.SearchOperations.ApplyFieldValueChangeToAllItems, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="bucket:applypresentationtoallitems" type="Sitecore.Buckets.Search.SearchOperations.ApplyPresentationToItems, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="bucket:applyprofilescoretoallitems" type="Sitecore.Buckets.Search.SearchOperations.ApplyProfileCardsToAllItems, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="bucket:applysecurityrule" type="Sitecore.Buckets.Search.SearchOperations.ApplySecurityRule, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="bucket:cloneresultsto" type="Sitecore.Buckets.Search.SearchOperations.CloneToCommand, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="bucket:copyresultsto" type="Sitecore.Buckets.Search.SearchOperations.CopyToCommand, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="bucket:copytodatasourcequery" type="Sitecore.Buckets.Search.SearchOperations.CopyToDatasourceQuery, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="bucket:deleteresults" type="Sitecore.Buckets.Search.SearchOperations.DeleteCommand, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="bucket:moveresultsto" type="Sitecore.Buckets.Search.SearchOperations.MoveToCommand, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="bucket:publishitems" type="Sitecore.Buckets.Search.SearchOperations.PublishItems, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="bucket:runconditionalrule" type="Sitecore.Buckets.Search.SearchOperations.RunConditionalRule, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="bucket:searchandreplace" type="Sitecore.Buckets.Search.SearchOperations.Replace, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="bucket:serializeitems" type="Sitecore.Buckets.Search.SearchOperations.SerializeItems, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="contenteditor:launchblanktab" type="Sitecore.Buckets.Commands.AddBlankSearch, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="contenteditor:launchsilenttab" type="Sitecore.Buckets.Commands.AddSilentTab, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="contenteditor:launchtab" type="Sitecore.Buckets.Commands.AddTab, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="contenteditor:togglebucketitems" type="Sitecore.Buckets.Commands.ToggleBucket, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="field:setastag" type="Sitecore.Buckets.Commands.SetFieldAsTag, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="field:setsearchimagefield" type="Sitecore.Buckets.Commands.MarkImageFieldAsSearchResultsImage, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="item:bucket" type="Sitecore.Buckets.Commands.MakeBucket, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="item:bucketable" type="Sitecore.Buckets.Commands.MakeItemBucketable, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="item:bucketsearch" type="Sitecore.Buckets.Commands.Search, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="item:gobacktoclosestparentbucket" type="Sitecore.Buckets.Commands.GoToClosestBucketParent, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="item:resetbucketable" type="Sitecore.Buckets.Commands.ResetBucketable, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="item:syncbucket" type="Sitecore.Buckets.Commands.SyncBucket, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="item:unbucket" type="Sitecore.Buckets.Commands.UnMakeBucket, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="security:setsecurityrule" type="Sitecore.Buckets.Commands.SetSecurityRule, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="template:bucketable" type="Sitecore.Buckets.Commands.MakeTemplateBucketable, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="template:launchstandardvalues" type="Sitecore.Buckets.Commands.LaunchStandardValues, Sitecore.Buckets" patch:source="Sitecore.Buckets.config"/>
<command name="update:showupdatewizard" type="Sitecore.Update.Shell.Framework.Commands.ShowUpdateInstallationWizard,Sitecore.Update" patch:source="Sitecore.Update.config"/>
<command name="analytics:authoringfeedback" type="Sitecore.Shell.Applications.Analytics.AuthoringFeedback.AuthoringFeedback,Sitecore.Xdb.Client" patch:source="Sitecore.Analytics.config"/>
<command name="analytics:opengoals" type="Sitecore.Shell.Applications.Analytics.TrackingField.OpenGoals,Sitecore.Xdb.Tracking.Client" patch:source="Sitecore.Analytics.Tracking.config"/>
<command name="analytics:opentrackingfield" type="Sitecore.Shell.Applications.Analytics.TrackingField.OpenTrackingField,Sitecore.Xdb.Tracking.Client" patch:source="Sitecore.Analytics.Tracking.config"/>
<command name="analytics:viewtrackingdetails" type="Sitecore.Shell.Applications.Analytics.TrackingField.ViewTrackingDetails,Sitecore.Xdb.Tracking.Client" patch:source="Sitecore.Analytics.Tracking.config"/>
<command name="device:settestdetails" type="Sitecore.Analytics.Shell.Applications.Layouts.DeviceSetTestDetails, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.config"/>
<command name="item:personalizeprofile" type="Sitecore.Shell.Applications.Analytics.TrackingField.SetProfileValue,Sitecore.Xdb.Tracking.Client" patch:source="Sitecore.Analytics.Tracking.config"/>
<command name="admin:showadminpage" type="Sitecore.ExperienceContentManagement.Administration.Commands.ShowAdminPage,Sitecore.ExperienceContentManagement.Administration" patch:source="Sitecore.ExperienceContentManagement.Administration.config"/>
<command name="webedit:addrendering" type="Sitecore.Shell.Applications.WebEdit.Commands.AddRendering, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
 OBSOLETE START: These commands are obsolete and will be removed in the next version 
-->
<command name="webedit:add" type="Sitecore.Shell.Applications.WebEdit.Commands.Add, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:changelayout" type="Sitecore.Shell.Applications.WebEdit.Commands.ChangeLayout, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--  OBSOLETE END  -->
<command name="webedit:chooseimage" type="Sitecore.Shell.Applications.WebEdit.Commands.ChooseImage, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:clearimage" type="Sitecore.Shell.Applications.WebEdit.Commands.ClearImage, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
 OBSOLETE START: These commands are obsolete and will be removed in the next version 
-->
<command name="webedit:closepagedesigner" type="Sitecore.Shell.Applications.WebEdit.Commands.ClosePageDesigner, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--  OBSOLETE END  -->
<command name="webedit:componentoptions" type="Sitecore.Shell.Applications.WebEdit.Commands.ComponentOptions, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:delete" type="Sitecore.Shell.Applications.WebEdit.Commands.Delete, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:edit" type="Sitecore.Shell.Applications.WebEdit.Commands.Edit, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:edithtml" type="Sitecore.Shell.Applications.WebEdit.Commands.EditHtml, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:editdate" type="Sitecore.Shell.Applications.WebEdit.Commands.EditDate, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:editimage" type="Sitecore.Shell.Applications.WebEdit.Commands.EditImage, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:editlink" type="Sitecore.Shell.Applications.WebEdit.Commands.EditLink, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:clearlink" type="Sitecore.Shell.Applications.WebEdit.Commands.ClearLink, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:insertlink" type="Sitecore.Shell.Applications.WebEdit.Commands.InsertLink, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:insertexternallink" type="Sitecore.Shell.Applications.WebEdit.Commands.InsertExternalLink, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
 OBSOLETE START: These commands are obsolete and will be removed in the next version 
-->
<command name="webedit:editplaceholdersettings" type="Sitecore.Shell.Applications.WebEdit.Commands.EditPlaceholderSettings, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--  OBSOLETE END  -->
<command name="webedit:editrenderingproperties" type="Sitecore.Shell.Applications.WebEdit.Commands.EditRenderingProperties, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
 OBSOLETE START: These commands are obsolete and will be removed in the next version 
-->
<command name="webedit:editword" type="Sitecore.Shell.Applications.WebEdit.Commands.EditWord, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:end" type="Sitecore.Shell.Applications.WebEdit.Commands.End, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--  OBSOLETE END  -->
<command name="webedit:fieldeditor" type="Sitecore.Shell.Applications.WebEdit.Commands.FieldEditor, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
 OBSOLETE START: These commands are obsolete and will be removed in the next version 
-->
<command name="webedit:insertimage" type="Sitecore.Shell.Applications.WebEdit.Commands.InsertImage, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:layoutsaved" type="Sitecore.Shell.Applications.WebEdit.Commands.LayoutSaved, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--  OBSOLETE END  -->
<command name="webedit:new" type="Sitecore.Shell.Applications.WebEdit.Commands.New, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
 OBSOLETE START: These commands are obsolete and will be removed in the next version 
-->
<command name="webedit:nextday" type="Sitecore.Shell.Applications.WebEdit.Commands.NextDay, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--  OBSOLETE END  -->
<command name="webedit:open" type="Sitecore.Shell.Applications.WebEdit.Commands.Open, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
 OBSOLETE START: These commands are obsolete and will be removed in the next version 
-->
<command name="webedit:openpagedesigner" type="Sitecore.Shell.Applications.WebEdit.Commands.OpenPageDesigner, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:previousday" type="Sitecore.Shell.Applications.WebEdit.Commands.PreviousDay, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:rename" type="Sitecore.Shell.Applications.WebEdit.Commands.Rename, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--  OBSOLETE END  -->
<command name="webedit:sortcontent" type="Sitecore.Shell.Applications.WebEdit.Commands.SortContent, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
 OBSOLETE START: These commands are obsolete and will be removed in the next version 
-->
<command name="webedit:save" type="Sitecore.Shell.Applications.WebEdit.Commands.Save, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--  OBSOLETE END  -->
<command name="webedit:search" type="Sitecore.Shell.Applications.WebEdit.Commands.Search, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:setdatasource" type="Sitecore.Shell.Applications.WebEdit.Commands.SetDatasource, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
 OBSOLETE START: These commands are obsolete and will be removed in the next version 
-->
<command name="webedit:setdevice" type="Sitecore.Shell.Applications.WebEdit.Commands.SetDevice, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:setlanguage" type="Sitecore.Shell.Applications.WebEdit.Commands.SetLanguage, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:simulatedevice" type="Sitecore.Shell.Applications.WebEdit.Commands.SimulateDevice, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:stopdebug" type="Sitecore.Shell.Applications.WebEdit.Commands.StopDebug, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:unlock" type="Sitecore.Shell.Applications.WebEdit.Commands.Unlock, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:unlockall" type="Sitecore.Shell.Applications.WebEdit.Commands.UnlockAll, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--  OBSOLETE END  -->
<command name="webedit:webedit" type="Sitecore.Shell.Applications.WebEdit.Commands.WebEdit, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--
 OBSOLETE START: These commands are obsolete and will be removed in the next version 
-->
<command name="webedit:wordinsertlink" type="Sitecore.Shell.Applications.WebEdit.Commands.EditWordInsertLink, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:wordinsertmedia" type="Sitecore.Shell.Applications.WebEdit.Commands.EditWordInsertMedia, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<!--  OBSOLETE END  -->
<command name="webedit:openexperienceeditor" type="Sitecore.Shell.Applications.WebEdit.Commands.OpenExperienceEditor, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="webedit:workflowwithdatasourceitems" type="Sitecore.ExperienceEditor.WebEdit.Commands.WorkflowWithDatasourceItems, Sitecore.ExperienceEditor" patch:source="Sitecore.ExperienceEditor.config"/>
<command name="item:tagcontent" type="Sitecore.ContentTagging.Commands.TagContentCommand, Sitecore.ContentTagging" patch:source="Sitecore.ContentTagging.config"/>
<command name="marketing:asset:deploy" type="Sitecore.Marketing.Client.Shell.Framework.Commands.Marketing.Assets.DeployAsset, Sitecore.Marketing.Client" patch:source="Sitecore.Marketing.Client.config"/>
<command name="marketing:opendeploydefinitionsdialog" type="Sitecore.Marketing.Client.Shell.Framework.Commands.Marketing.OpenDeployDefinitionsDialog, Sitecore.Marketing.Client" patch:source="Sitecore.Marketing.Client.config"/>
<command name="marketingtaxonomy:deploy" type="Sitecore.Marketing.Client.Shell.Framework.Commands.Marketing.Taxonomies.Deploy, Sitecore.Marketing.Client" patch:source="Sitecore.Marketing.Client.config"/>
<command name="item:personalize" type="Sitecore.Shell.Applications.WebEdit.Commands.PersonalizeItem, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.ExperienceEditor.config"/>
<command name="optimization:componentperformance" type="Sitecore.ContentTesting.Commands.ComponentPerformance, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<command name="test:createTest" type="Sitecore.ContentTesting.Commands.CreateTest, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<command name="webedit:editvariations" type="Sitecore.Shell.Applications.WebEdit.Commands.EditVariations, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.ExperienceEditor.config"/>
<command name="webedit:setpagevariation" type="Sitecore.Shell.Applications.WebEdit.Commands.Testing.SetPageVariation, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.ExperienceEditor.config"/>
<command name="webedit:personalize" type="Sitecore.Shell.Applications.WebEdit.Commands.Personalize, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.ExperienceEditor.config"/>
<command name="emailcampaign:addmessagemaster" type="Sitecore.Modules.EmailCampaign.Commands.AddMessageMaster,Sitecore.EmailCampaign" patch:source="Sitecore.EmailExperience.UI.config"/>
<command name="emailcampaign:addwebpagemessage" type="Sitecore.Modules.EmailCampaign.Commands.AddWebPageMessage,Sitecore.EmailCampaign" patch:source="Sitecore.EmailExperience.UI.config"/>
<command name="emailcampaign:openmanager" type="Sitecore.Modules.EmailCampaign.Commands.OpenManager,Sitecore.EmailCampaign" patch:source="Sitecore.EmailExperience.UI.config"/>
<command name="emailcampaign:testsend" type="Sitecore.Modules.EmailCampaign.Commands.TestSend,Sitecore.EmailCampaign" patch:source="Sitecore.EmailExperience.UI.config"/>
<command name="emailcampaign:showtargetlayout" type="Sitecore.Modules.EmailCampaign.Commands.ShowTargetLayoutDetails,Sitecore.EmailCampaign" patch:source="Sitecore.EmailExperience.UI.config"/>
<command name="emailcampaign:testsmtpconnection" type="Sitecore.Modules.EmailCampaign.Commands.TestSMTPConnection,Sitecore.EmailCampaign" patch:source="Sitecore.EmailExperience.UI.config"/>
<command name="pathanalyzer:open-page-analyzer" type="Sitecore.PathAnalyzer.Client.Commands.OpenPageAnalyzer, Sitecore.PathAnalyzer.Client" patch:source="Sitecore.PathAnalyzer.Client.config"/>
<command name="pathanalyzer:create-site-specific-map-group" type="Sitecore.PathAnalyzer.Client.Commands.CreateSiteSpecificMapGroup, Sitecore.PathAnalyzer.Client" patch:source="Sitecore.PathAnalyzer.Client.config"/>
</commands>
<interning patch:source="Sitecore.Interning.config">
<internProviders>
<internProvider type="Sitecore.Data.Interning.InternProviders.IdInternProvider,Sitecore.Kernel" internedType="Sitecore.Data.ID,Sitecore.Kernel">
<param desc="concurrencyLevel">100</param>
<param desc="initialCapacity">36</param>
</internProvider>
<internProvider type="Sitecore.Data.Interning.InternProviders.StringInternProvider,Sitecore.Kernel" internedType="System.String"/>
</internProviders>
<!--
 Fields that are known to have a lot of duplicated values.
           Since field values are stored and cached as strings, same string instance could be re-used instead of creating new ones.
       
-->
<fieldIdsToIntern>
<workflowState>{3E431DE1-525E-47A3-B6B0-1CCBEC3A8C98}</workflowState>
<workflow>{A4F985D9-98B3-4B52-AAAF-4344F6E747C6}</workflow>
<updatedBy>{BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}</updatedBy>
<createdBy>{5DD74568-4D4B-44C1-B513-0AF5F4CDA34F}</createdBy>
<neverPublish>{9135200A-5626-4DD8-AB9D-D665B8C11748}</neverPublish>
<mimeType>6F47A0A5-9C94-4B48-ABEB-42D38DEF6054</mimeType>
<owner>{52807595-0F8F-4B20-8D2A-CB71D28C6103}</owner>
<type>{AB162CC0-DC80-4ABF-8871-998EE5D7BA32}</type>
<isShared>{BE351A73-FCB0-4213-93FA-C302D8AB4F51}</isShared>
<isUnversioned>{39847666-389D-409B-95BD-F2016F11EED5}</isUnversioned>
<sortOrder>{BA3F86A2-4A1C-4D78-B63D-91C2779C1B5E}</sortOrder>
</fieldIdsToIntern>
</interning>
<!--
 JSNLOG
          The root element for all JSNLog configuration elements (see http://jsnlog.com/Documentation/WebConfig/JSNLog).
          
          Supported attributes:
          
            enabled:                   If false, all loggers are disabled. Default: true.
            maxMessages:               Limits total number of messages sent to the server. Default: no maximum.
            
            defaultAjaxUrl:            Provides the default url if no url is set on the <ajaxAppender> Element. Also sets the url for the default appender.
                                       If defaultAjaxUrl is not set, the url /jsnlog.logger is used.
                                       However, if your site sits in an application below the root application, then it will have a url like http://domain.com/site rather than http://domain.com.
                                       JSNLog caters for this situation by adding the application path to the default url, resulting in a default url like /site/jsnlog.logger.
            
            serverSideLogger:          By default, all log messages from your JavaScript code are passed on to your server side logging package with the name of the JavaScript logger.
                                       However, if you want to use a specific logger name for all your JavaScript log messages, you can specify that with this attribute.                                      
            
            serverSideLevel:           By default, all log messages from your JavaScript code are passed on to your server side logging package with the same level as the original JavaScript log message.
                                       However, if you want to use a specific level, you can specify that with this attribute.
                                       Default: %message.
            
            serverSideMessageFormat:  
                                       Placeholder        Is replaced by
                                       %message           Original message given to the JavaScript logger.
                                       %jsonmessage       Original message given to the JavaScript logger, as a valid JSON value.
                                       %utcDate           Date and time in UTC when the message was generated, according to the client's clock.
                                       %utcDateServer     Date and time in UTC when the message was received by the server, according to the server's clock.
                                       %date              Date and time when the message was generated, according to the client's clock. This equals %utcDate converted to the server's local time.
                                       %dateServer        Date and time in the server's local time when the message was received by the server, according to the server's clock.
                                       %level             Level of the message, as provided by the JavaScript code.
                                       %userAgent         Identifies the make of the browser.
                                       %url               Url of the page on which the message was generated.
                                       %logger            JavaScript logger that generated the message.
                                       %requestId         Identifies the request for which the log message was created.
                                       %newline           Newline character.
            
            productionLibraryPath:     Path to the jsnlog.js file. JSNLog generates a <script> tag with this url.
            
            sendBatchInterval:         Allows to send messages that are stored in a batch after the specified period of time defined in milliseconds.
                                       If set to 0, messages in the batch are sent to the server once the amount of messages is equal to batchSize which is specified in the corresponding appender.
                                       Default: 0.
                                       
                                       Note: It is not a standard JSNLog attribute. 
                                       
            maxMessageLength:          Allows to limit the length of a logging message. If set to 0, there is no limit.
                                       Default: 0.
                                       
                                       Note: It is not a standard JSNLog attribute.
    
-->
<jsnlog enabled="true" productionLibraryPath="~/sitecore/shell/controls/lib/jsnlog/jsnlog.min.js" serverSideMessageFormat="%message | SessionId-RequestId: %requestId | PageUrl: %url | UserAgent: %userAgent" sendBatchInterval="1000" maxMessageLength="5000" maxMessages="20" patch:source="Sitecore.JSNLog.config">
<!--
 AJAXAPPENDER
           An AjaxAppender sends log messages to the server (see http://jsnlog.com/Documentation/WebConfig/JSNLog/AjaxAppender).
           Loggers do not process log messages themselves. Instead, they pass them on to an appender.
           JSNLog creates a default appender, so there is no need to create one yourself in order to start logging.
  
           Supported attributes:
           
           name:                       Name of the AjaxAppender you want to configure.
           level:                      Only log messages with a severity equal or higher than this can be sent to the server. Default: DEBUG.
           userAgentRegex:             If not empty, log messages only get processed if this regular expression matches the user agent string of the browser.
           ipRegex:                    If not empty, log messages only get processed if this regular expression matches the IP address of the browser.
           disallow:                   If not empty, log messages are suppressed if they match this regular expression. If an object is being logged, it is converted to a JSON string, which is then matched.
           
           storeInBufferLevel:         If the severity of the log message is equal or greater than this, but smaller than level, the log message will not be sent to the server, but stored in an internal buffer.
                                       If bufferSize is 0 or less, the log message is simply ignored. Default: ALL.
                                       
           sendWithBufferLevel:        If the severity of a log message is equal or greater than this, not only the log message but also all log messages stored in the internal buffer will be sent to the server.
                                       This allows you to store low priority trace messages in the internal buffer, and only send them when a high priority fatal message is sent. Default: OFF.
           
           bufferSize:                 Sets the size of the buffer used with sendWithBufferLevel and storeInBufferLevel. Default: 0.
           batchSize:                  Allows you to improve performance by sending multiple log messages in one go, rather than one by one. Default: 1.
           url:                        All log messages will be sent to this URL. The default url is as expected by the server side code of JSNLog.
      
-->
<ajaxAppender name="ajaxAppender" level="ERROR" storeInBufferLevel="DEBUG" sendWithBufferLevel="ERROR" bufferSize="20" batchSize="10"/>
<!--
 CONSOLEAPPENDER
           The ConsoleAppender sends log messages to console.log (see http://jsnlog.com/Documentation/WebConfig/JSNLog/ConsoleAppender)
           ConsoleAppender could be configured the same way as the ajaxAppender node, however, there is no URL attribute to configure. 
      
-->
<consoleAppender name="consoleAppender"/>
<!--
 LOGGER
           Configures a logger (see http://jsnlog.com/Documentation/WebConfig/JSNLog/Logger).
           
           Supported attributes:
           
           name:                   Name of the logger you want to configure. To configure the root logger, simply omit the name attribute.
                                   In server side logs, the root logger is called ClientRoot.
                                   
           level:                  Only log messages with a severity equal or higher than this can be sent to the server.
           userAgentRegex:         If not empty, log messages only get processed if this regular expression matches the user agent string of the browser.
           ipRegex:                If not empty, log messages only get processed if this regular expression matches the IP address of the browser.
           disallow:               If not empty, log messages are suppressed if they match this regular expression. If an object is being logged, it is converted to a JSON string, which is then matched.
           appenders:              One or more appenders for the logger to send its log messages to.
           onceOnly:               One or more regular expressions. When a message matches a regular expression, then any subsequent messages matching that same regular expression will be suppressed.
           
      
-->
<logger appenders="ajaxAppender;consoleAppender"/>
</jsnlog>
<!--
  The webDAVPrefix variable defines the relative path to the WebDAV folder.
          The specified WebDAV folder MUST be configured for processing WebDAV requests.
    
-->
<sc.variable name="webDAVPrefix" value="/sitecore_files" patch:source="Sitecore.WebDAV.config"/>
<!--  WebDAV configuration  -->
<webdav patch:source="Sitecore.WebDAV.config">
<authentication type="Sitecore.Configuration.WebDAVConfiguration+Authentication, Sitecore.Kernel" singleInstance="true">
<preferredAuthentication>Digest</preferredAuthentication>
<authentications hint="raw:AddAuthenticationMapping"/>
</authentication>
<views defaultProvider="Simple" singleInstance="true">
<providers>
<clear/>
<add name="Detailed" description="Show versioned files in folders" type="Sitecore.Data.Views.DetailedWebDAVView, Sitecore.Kernel"/>
<add name="Simple" description="Show only latest version of files" type="Sitecore.Data.Views.SimpleWebDAVView, Sitecore.Kernel"/>
</providers>
</views>
<locking defaultProvider="IDTableLockProvider" singleInstance="true">
<providers>
<clear/>
<add name="IDTableLockProvider" type="Sitecore.Data.Locking.IDTableWebDAVLockingProvider, Sitecore.Kernel"/>
</providers>
</locking>
<lockNull defaultProvider="CacheLockNullProvider" singleInstance="true">
<providers>
<clear/>
<add name="CacheLockNullProvider" type="Sitecore.Data.Locking.WebDAVCacheLockNullProvider, Sitecore.Kernel"/>
</providers>
</lockNull>
<optionStore type="Sitecore.Configuration.IDTableWebDAVOptionStore, Sitecore.Kernel" singleInstance="true"/>
</webdav>
<AntiCsrf cookieName="__CSRFCOOKIE" formFieldName="__CSRFTOKEN" detectionResult="RaiseException" errorPage="" enabled="true" patch:source="Sitecore.AntiCsrf.config">
<rules>
<rule name="WFFM">
<urlPrefix>/sitecore/shell</urlPrefix>
<ignore contains="/sitecore/shell/Applications/Modules/Web Forms for Marketers/Form Reports"/>
<ignore contains="/sitecore/shell/~/xaml/Sitecore.Forms.Shell.UI.Dialogs.LookupRecords.aspx"/>
<ignore contains="/sitecore/shell/~/xaml/Sitecore.Forms.Shell.UI.Dialogs.ListItemsEditor.aspx"/>
<ignore contains="/sitecore/shell/-/xaml/Sitecore.Forms.Shell.UI.Dialogs.LookupRecords.aspx"/>
<ignore contains="/sitecore/shell/-/xaml/Sitecore.Forms.Shell.UI.Dialogs.ListItemsEditor.aspx"/>
</rule>
<rule name="shell" patch:source="Sitecore.Speak.Components.AntiCsrf.config">
<urlPrefix>/sitecore/shell</urlPrefix>
<ignore contains="Content Manager/Execute"/>
<ignore contains="FlashUpload/Advanced/UploadTarget"/>
<ignore contains="FlashUpload/Attach/AttachTarget"/>
<ignore contains="WebEdit/Palette"/>
<ignore contains="WebEdit/WebEditRibbon"/>
<ignore contains="InstantSearch"/>
<ignore contains="WordOCX/Load"/>
<ignore contains="Applications/Archives/Archive"/>
<ignore contains="Applications/Archives/Recycle Bin"/>
<ignore contains="Applications/Security/User Manager"/>
<ignore contains="Applications/Security/Role Manager"/>
<ignore contains="Applications/Security/Domain Manager"/>
<ignore contains="Applications/Analytics/ReportRunner/Report"/>
<ignore contains="/Business Component Library/Layouts/Renderings/Common/SheerUI" patch:source="Sitecore.Speak.AntiCsrf.SheerUI.config"/>
<ignore contains="/Business Component Library/version 2/Layouts/Renderings/Common/SheerUI" patch:source="Sitecore.Speak.Components.AntiCsrf.config"/>
</rule>
<rule name="shell-desktop">
<urlPrefix>/sitecore/shell/default</urlPrefix>
<ignore contains="xmlcontrol=Gallery.Components"/>
<ignore contains="xmlcontrol=CopyVisitorToAnotherPlan"/>
<ignore contains="xmlcontrol=MoveVisitorToAnotherState"/>
</rule>
<rule name="xaml-controls" patch:source="Sitecore.Xdb.MarketingAutomation.Tracking.config">
<urlPrefix>/sitecore/shell/~/xaml/</urlPrefix>
<ignore contains="/sitecore/shell/~/xaml/Installer.AddSecuritySourceDialog"/>
<ignore contains="/sitecore/shell/~/xaml/Sitecore.Shell.Applications.Security.SelectAccount"/>
<ignore contains="/sitecore/shell/~/xaml/Sitecore.Shell.Applications.Security.SelectAccount"/>
<ignore contains="/sitecore/shell/~/xaml/Sitecore.Shell.Applications.Security.SelectRoles"/>
<ignore contains="/sitecore/shell/~/xaml/Sitecore.Shell.Applications.Security.EditManagedDomains"/>
<ignore contains="/sitecore/shell/~/xaml/Sitecore.Shell.Applications.Security.RoleManager.ViewMembers"/>
<ignore contains="/sitecore/shell/~/xaml/Sitecore.Shell.Applications.Security.RoleManager.ViewParentRoles"/>
<ignore contains="/sitecore/shell/~/xaml/Sitecore.Shell.Applications.WebEdit.Dialogs.LockedItems"/>
<ignore contains="/sitecore/shell/~/xaml/Sitecore.Shell.Applications.MarketingAutomation.Dialogs.SelectStateVisitor.aspx"/>
<ignore contains="/sitecore/shell/~/xaml/Sitecore.Shell.Applications.MarketingAutomation.Dialogs.ActionEditors.AddToVisitProfile.aspx"/>
<ignore contains="/sitecore/shell/~/xaml/Sitecore.Shell.Applications.MarketingAutomation.Dialogs.ActionEditors.SubtractFromVisitProfile.aspx"/>
<ignore contains="/sitecore/shell/-/xaml/Sitecore.Shell.Applications.Rules.MarketingAutomation.SelectPlanActivity" patch:source="Sitecore.Xdb.MarketingAutomation.Tracking.config"/>
</rule>
<rule name="xaml-controls">
<urlPrefix>/sitecore/shell/-/xaml/</urlPrefix>
<ignore contains="/sitecore/shell/-/xaml/Installer.AddSecuritySourceDialog"/>
<ignore contains="/sitecore/shell/-/xaml/Sitecore.Shell.Applications.Security.SelectAccount"/>
<ignore contains="/sitecore/shell/-/xaml/Sitecore.Shell.Applications.Security.SelectAccount"/>
<ignore contains="/sitecore/shell/-/xaml/Sitecore.Shell.Applications.Security.SelectRoles"/>
<ignore contains="/sitecore/shell/-/xaml/Sitecore.Shell.Applications.Security.EditManagedDomains"/>
<ignore contains="/sitecore/shell/-/xaml/Sitecore.Shell.Applications.Security.RoleManager.ViewMembers"/>
<ignore contains="/sitecore/shell/-/xaml/Sitecore.Shell.Applications.Security.RoleManager.ViewParentRoles"/>
<ignore contains="/sitecore/shell/-/xaml/Sitecore.Shell.Applications.WebEdit.Dialogs.LockedItems"/>
<ignore contains="/sitecore/shell/-/xaml/Sitecore.Shell.Applications.MarketingAutomation.Dialogs.SelectStateVisitor.aspx"/>
<ignore contains="/sitecore/shell/-/xaml/Sitecore.Shell.Applications.MarketingAutomation.Dialogs.ActionEditors.AddToVisitProfile.aspx"/>
<ignore contains="/sitecore/shell/-/xaml/Sitecore.Shell.Applications.MarketingAutomation.Dialogs.ActionEditors.SubtractFromVisitProfile.aspx"/>
</rule>
</rules>
</AntiCsrf>
<!--
 BOOSTING MANAGER
         The manager class controlling the boosting resolution logic
    
-->
<boostingManager defaultProvider="default" enabled="true" patch:source="Sitecore.ContentSearch.config">
<providers>
<clear/>
<add name="default" type="Sitecore.ContentSearch.Boosting.PipelineBasedBoostingProvider, Sitecore.ContentSearch"/>
</providers>
</boostingManager>
<!--
 SEARCH MANAGER
         The search manager and provider classes 
    
-->
<searchManager defaultProvider="default" enabled="true" patch:source="Sitecore.ContentSearch.config">
<providers>
<clear/>
<add name="default" type="Sitecore.ContentSearch.PipelineBasedSearchProvider, Sitecore.ContentSearch"/>
</providers>
</searchManager>
<contentSearch patch:source="Sitecore.ContentSearch.DefaultConfigurations.config">
<configuration type="Sitecore.ContentSearch.ContentSearchConfiguration, Sitecore.ContentSearch" patch:source="Sitecore.FXM.Solr.DomainsSearch.Index.Web.config">
<indexes hint="list:AddIndex" patch:source="Sitecore.FXM.Solr.DomainsSearch.Index.Web.config">
<index id="sitecore_core_index" type="Sitecore.ContentSearch.SolrProvider.SolrSearchIndex, Sitecore.ContentSearch.SolrProvider">
<param desc="name">$(id)</param>
<param desc="core">sc_core_index</param>
<param ref="contentSearch/indexConfigurations/databasePropertyStore" desc="propertyStore" param1="$(id)"/>
<configuration ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration"/>
<strategies hint="list:AddStrategy">
<strategy ref="contentSearch/indexConfigurations/indexUpdateStrategies/intervalAsyncCore"/>
</strategies>
<locations hint="list:AddCrawler">
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>core</Database>
<Root>/sitecore</Root>
</crawler>
</locations>
</index>
<index id="sitecore_master_index" type="Sitecore.ContentSearch.SolrProvider.SolrSearchIndex, Sitecore.ContentSearch.SolrProvider" patch:source="Sitecore.ContentSearch.Solr.Index.Master.config">
<param desc="name">$(id)</param>
<param desc="core">sc_master_index</param>
<param ref="contentSearch/indexConfigurations/databasePropertyStore" desc="propertyStore" param1="$(id)"/>
<configuration ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration"/>
<strategies hint="list:AddStrategy">
<strategy ref="contentSearch/indexConfigurations/indexUpdateStrategies/syncMaster"/>
</strategies>
<locations hint="list:AddCrawler">
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>master</Database>
<Root>/sitecore</Root>
</crawler>
</locations>
<enableItemLanguageFallback>false</enableItemLanguageFallback>
<enableFieldLanguageFallback>false</enableFieldLanguageFallback>
</index>
<index id="sitecore_web_index" type="Sitecore.ContentSearch.SolrProvider.SolrSearchIndex, Sitecore.ContentSearch.SolrProvider" patch:source="Sitecore.ContentSearch.Solr.Index.Web.config">
<param desc="name">$(id)</param>
<param desc="core">sc_web_index</param>
<param ref="contentSearch/indexConfigurations/databasePropertyStore" desc="propertyStore" param1="$(id)"/>
<configuration ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration"/>
<strategies hint="list:AddStrategy">
<strategy ref="contentSearch/indexConfigurations/indexUpdateStrategies/onPublishEndAsyncSingleInstance"/>
</strategies>
<locations hint="list:AddCrawler">
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>web</Database>
<Root>/sitecore</Root>
</crawler>
</locations>
<enableItemLanguageFallback>false</enableItemLanguageFallback>
<enableFieldLanguageFallback>false</enableFieldLanguageFallback>
</index>
<index id="sitecore_marketingdefinitions_master" type="Sitecore.ContentSearch.SolrProvider.SolrSearchIndex, Sitecore.ContentSearch.SolrProvider" patch:source="Sitecore.Marketing.Solr.Index.Master.config">
<param desc="name">$(id)</param>
<param desc="core">sc_marketingdefinitions_master</param>
<!--
 This initializes index property store. Id has to be set to the index id 
-->
<param ref="contentSearch/indexConfigurations/databasePropertyStore" desc="propertyStore" param1="$(id)"/>
<configuration ref="marketingDefinitionSearch/indexConfigurations/marketingDefinitionSolrIndexConfiguration"/>
<strategies hint="list:AddStrategy">
<!--
 NOTE: order of these is controls the execution order 
-->
<strategy ref="contentSearch/indexConfigurations/indexUpdateStrategies/manual"/>
</strategies>
<commitPolicyExecutor type="Sitecore.ContentSearch.CommitPolicyExecutor, Sitecore.ContentSearch">
<policies hint="list:AddCommitPolicy">
<policy type="Sitecore.ContentSearch.TimeIntervalCommitPolicy, Sitecore.ContentSearch"/>
</policies>
</commitPolicyExecutor>
<locations hint="list:AddCrawler">
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>master</Database>
<Root>{EC095310-746F-4C1B-A73F-941863564DC2}</Root>
</crawler>
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>master</Database>
<Root>{09CF9489-8F71-4A16-B707-4F013D8CDEFB}</Root>
</crawler>
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>master</Database>
<Root>{7BF9F710-6CAD-4114-8DC7-88B4C4181562}</Root>
</crawler>
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>master</Database>
<Root>{A65E2D0F-27E1-49AD-B332-076745A74ED6}</Root>
</crawler>
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>master</Database>
<Root>{633273C1-02A5-4EBC-9B82-BD1A7C684FEA}</Root>
</crawler>
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>master</Database>
<Root>{3C94F086-453B-48FC-9F1B-2B00BC0A55C7}</Root>
</crawler>
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>master</Database>
<Root>{12BD7E35-437B-449C-B931-23CFA12C03D8}</Root>
</crawler>
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>master</Database>
<Root>{CD304D58-D53B-420C-9D1A-C83255AF1554}</Root>
</crawler>
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>master</Database>
<Root>{841FABB3-F929-4284-AAE6-CD20AAFD1255}</Root>
</crawler>
</locations>
</index>
<index id="sitecore_marketingdefinitions_web" type="Sitecore.ContentSearch.SolrProvider.SolrSearchIndex, Sitecore.ContentSearch.SolrProvider" patch:source="Sitecore.Marketing.Solr.Index.Web.config">
<param desc="name">$(id)</param>
<param desc="core">sc_marketingdefinitions_web</param>
<!--
 This initializes index property store. Id has to be set to the index id 
-->
<param ref="contentSearch/indexConfigurations/databasePropertyStore" desc="propertyStore" param1="$(id)"/>
<configuration ref="marketingDefinitionSearch/indexConfigurations/marketingDefinitionSolrIndexConfiguration"/>
<strategies hint="list:AddStrategy">
<!--
 NOTE: order of these is controls the execution order 
-->
<strategy ref="contentSearch/indexConfigurations/indexUpdateStrategies/onPublishEndAsyncSingleInstance"/>
</strategies>
<commitPolicyExecutor type="Sitecore.ContentSearch.CommitPolicyExecutor, Sitecore.ContentSearch">
<policies hint="list:AddCommitPolicy">
<policy type="Sitecore.ContentSearch.TimeIntervalCommitPolicy, Sitecore.ContentSearch"/>
</policies>
</commitPolicyExecutor>
<locations hint="list:AddCrawler">
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>web</Database>
<Root>{EC095310-746F-4C1B-A73F-941863564DC2}</Root>
</crawler>
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>web</Database>
<Root>{09CF9489-8F71-4A16-B707-4F013D8CDEFB}</Root>
</crawler>
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>web</Database>
<Root>{7BF9F710-6CAD-4114-8DC7-88B4C4181562}</Root>
</crawler>
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>web</Database>
<Root>{A65E2D0F-27E1-49AD-B332-076745A74ED6}</Root>
</crawler>
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>web</Database>
<Root>{633273C1-02A5-4EBC-9B82-BD1A7C684FEA}</Root>
</crawler>
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>web</Database>
<Root>{3C94F086-453B-48FC-9F1B-2B00BC0A55C7}</Root>
</crawler>
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>web</Database>
<Root>{12BD7E35-437B-449C-B931-23CFA12C03D8}</Root>
</crawler>
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>web</Database>
<Root>{CD304D58-D53B-420C-9D1A-C83255AF1554}</Root>
</crawler>
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>web</Database>
<Root>{841FABB3-F929-4284-AAE6-CD20AAFD1255}</Root>
</crawler>
</locations>
</index>
<index id="sitecore_marketing_asset_index_master" type="Sitecore.ContentSearch.SolrProvider.SolrSearchIndex, Sitecore.ContentSearch.SolrProvider" patch:source="Sitecore.Marketing.Definitions.MarketingAssets.Repositories.Solr.Index.Master.config">
<param desc="name">$(id)</param>
<param desc="core">sc_marketing_asset_index_master</param>
<param ref="contentSearch/indexConfigurations/databasePropertyStore" desc="propertyStore" param1="$(id)"/>
<strategies hint="list:AddStrategy">
<strategy ref="contentSearch/indexConfigurations/indexUpdateStrategies/syncMaster"/>
</strategies>
<configuration ref="marketingDefinitions/indexConfigurations/solrIndexConfiguration"/>
<locations hint="list:AddCrawler">
<crawler type="Sitecore.Marketing.Definitions.MarketingAssets.Data.ItemDb.MediaCrawler, Sitecore.Marketing.Definitions.MarketingAssets.Repositories">
<Database>master</Database>
<Root>/sitecore/media library</Root>
</crawler>
</locations>
</index>
<index id="sitecore_marketing_asset_index_web" type="Sitecore.ContentSearch.SolrProvider.SolrSearchIndex, Sitecore.ContentSearch.SolrProvider" patch:source="Sitecore.Marketing.Definitions.MarketingAssets.Repositories.Solr.Index.Web.config">
<param desc="name">$(id)</param>
<param desc="core">sc_marketing_asset_index_web</param>
<param ref="contentSearch/indexConfigurations/databasePropertyStore" desc="propertyStore" param1="$(id)"/>
<strategies hint="list:AddStrategy">
<strategy ref="contentSearch/indexConfigurations/indexUpdateStrategies/onPublishEndAsyncSingleInstance"/>
</strategies>
<configuration ref="marketingDefinitions/indexConfigurations/solrIndexConfiguration"/>
<locations hint="list:AddCrawler">
<crawler type="Sitecore.Marketing.Definitions.MarketingAssets.Data.ItemDb.MediaCrawler, Sitecore.Marketing.Definitions.MarketingAssets.Repositories">
<Database>web</Database>
<Root>/sitecore/media library</Root>
</crawler>
</locations>
</index>
<!--  Index used to store test definition data.  -->
<index id="sitecore_testing_index" type="Sitecore.ContentSearch.SolrProvider.SolrSearchIndex, Sitecore.ContentSearch.SolrProvider" patch:source="Sitecore.ContentTesting.Solr.IndexConfiguration.config">
<param desc="name">$(id)</param>
<param desc="core">sc_testing_index</param>
<param ref="contentSearch/indexConfigurations/databasePropertyStore" desc="propertyStore" param1="$(id)"/>
<configuration ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration">
<fieldMap ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration/fieldMap">
<fieldNames hint="raw:AddFieldByFieldName">
<field fieldName="__is_running" returnType="bool"/>
<field fieldName="_itemuri" returnType="string"/>
<field fieldName="device" returnType="id"/>
<field fieldName="modeltrainingtaskid" returnType="string"/>
</fieldNames>
</fieldMap>
<documentOptions type="Sitecore.ContentSearch.SolrProvider.SolrDocumentBuilderOptions, Sitecore.ContentSearch.SolrProvider">
<indexAllFields>false</indexAllFields>
<include hint="list:AddIncludedTemplate">
<TestDefinitionItem>{45FB02E9-70B3-4CFE-8050-06EAD4B5DB3E}</TestDefinitionItem>
</include>
<include hint="list:AddIncludedField">
<ContentItem>{8D275B38-730D-4AB1-9280-761A3FBEFAD9}</ContentItem>
<Device>{30F291C9-CF14-41BF-8173-1EE796E423D1}</Device>
<WinnerCombination>{2225DFD3-4205-4A2D-B162-54BCBC9F2E3B}</WinnerCombination>
<IsRunning>{C25E3617-CA6F-4DFC-A02E-B4EA0E083D70}</IsRunning>
<WorkflowState>{3E431DE1-525E-47A3-B6B0-1CCBEC3A8C98}</WorkflowState>
<ModelTrainingTaskId>{2686956B-9608-4E1A-9537-47F9F5F120FE}</ModelTrainingTaskId>
</include>
<fields hint="raw:AddExcludedSpecialField">
<field type="both">AllTemplates</field>
<field type="both">Created</field>
<field type="both">Editor</field>
<field type="both">Hidden</field>
<field type="both">Icon</field>
<field type="both">Links</field>
<field type="both">Updated</field>
<remove type="both">_content</remove>
</fields>
<fields hint="raw:AddComputedIndexField">
<field fieldName="__smallcreateddate" returnType="string">
Sitecore.ContentSearch.ComputedFields.CreatedDate, Sitecore.ContentSearch
</field>
<field fieldName="__smallupdateddate" returnType="string">
Sitecore.ContentSearch.ComputedFields.UpdatedDate, Sitecore.ContentSearch
</field>
<field type="Sitecore.ContentTesting.ContentSearch.ComputedIndexFields.ParsedOwner, Sitecore.ContentTesting" fieldName="parsedowner" returnType="string"/>
<field type="Sitecore.ContentTesting.ContentSearch.ComputedIndexFields.FriendlyOwner, Sitecore.ContentTesting" fieldName="friendlyowner" returnType="string"/>
<field type="Sitecore.ContentTesting.ContentSearch.ComputedIndexFields.HostItemPartial, Sitecore.ContentTesting" fieldName="host" returnType="string"/>
<field type="Sitecore.ContentTesting.ContentSearch.ComputedIndexFields.HostItem, Sitecore.ContentTesting" fieldName="hosturi" returnType="string"/>
<field type="Sitecore.ContentTesting.ContentSearch.ComputedIndexFields.TestSearchContent, Sitecore.ContentTesting" fieldName="_searchtext" returnType="string"/>
<field type="Sitecore.ContentTesting.ContentSearch.ComputedIndexFields.TestDataSources, Sitecore.ContentTesting" fieldName="datasourceitems" returnType="string"/>
<field type="Sitecore.ContentTesting.ContentSearch.ComputedIndexFields.ItemUri, Sitecore.ContentTesting" fieldName="_itemuri"/>
</fields>
</documentOptions>
</configuration>
<strategies hint="list:AddStrategy">
<strategy ref="contentSearch/indexConfigurations/indexUpdateStrategies/syncMaster"/>
</strategies>
<locations hint="list:AddCrawler">
<crawler type="Sitecore.ContentTesting.ContentSearch.SpecificSitecoreItemCrawler, Sitecore.ContentTesting">
<Database>master</Database>
<Root>/sitecore/system/Marketing Control Panel/Test Lab</Root>
</crawler>
</locations>
</index>
<!--
 Index used to store the data thatt is used for suggesting tests for an item. 
-->
<index id="sitecore_suggested_test_index" type="Sitecore.ContentSearch.SolrProvider.SolrSearchIndex, Sitecore.ContentSearch.SolrProvider" patch:source="Sitecore.EmailExperience.ContentManagement.config">
<param desc="name">$(id)</param>
<param desc="core">sc_suggested_test_index</param>
<param ref="contentSearch/indexConfigurations/databasePropertyStore" desc="propertyStore" param1="$(id)"/>
<configuration ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration">
<fieldMap ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration/fieldMap">
<fieldNames hint="raw:AddFieldByFieldName">
<field fieldName="impact" returnType="double"/>
<field fieldName="potential" returnType="double"/>
<field fieldName="recommendation" returnType="double"/>
</fieldNames>
</fieldMap>
<documentOptions ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration/documentOptions">
<indexAllFields>false</indexAllFields>
<exclude hint="list:AddExcludedTemplate" patch:source="Sitecore.EmailExperience.ContentManagement.config">
<folder>{A87A00B1-E6DB-45AB-8B54-636FEC3B5523}</folder>
<mainSection>{E3E2D58C-DF95-4230-ADC9-279924CECE84}</mainSection>
<!--
 Excludes EXM AB test templates from the Content Testing Suggested Tests list 
-->
<emailTestDefinition patch:source="Sitecore.EmailExperience.ContentManagement.config">{EEF917FF-1FCD-498F-96C5-A2ED3F31A375}</emailTestDefinition>
<abTestMessage patch:source="Sitecore.EmailExperience.ContentManagement.config">{078D8A76-F971-4891-B422-76C0BCF9FA03}</abTestMessage>
<htmlMessage patch:source="Sitecore.EmailExperience.ContentManagement.config">{3F2D20A6-5554-459A-8377-0DB96FF90BC3}</htmlMessage>
<mailMessage patch:source="Sitecore.EmailExperience.ContentManagement.config">{A0EA9681-5C86-43AB-80F7-C522DADF6F12}</mailMessage>
<plainTextMessage patch:source="Sitecore.EmailExperience.ContentManagement.config">{1AFE38A7-9461-4278-ADAF-D807F27F36E4}</plainTextMessage>
<baseHtmlMessage patch:source="Sitecore.EmailExperience.ContentManagement.config">{B5598E34-0BC7-438F-9F34-4135E2069792}</baseHtmlMessage>
<simpleHtmlMessage patch:source="Sitecore.EmailExperience.ContentManagement.config">{ECF0A9C8-FE56-45D8-B750-6BDE3A34A532}</simpleHtmlMessage>
<existingPageMessage patch:source="Sitecore.EmailExperience.ContentManagement.config">{A89CF30C-EDFA-442E-8048-9234980E2176}</existingPageMessage>
<newsletterRoot patch:source="Sitecore.EmailExperience.ContentManagement.config">{3F12D78C-B7B7-4157-98FC-DA3322EE1A5B}</newsletterRoot>
</exclude>
<fields hint="raw:AddComputedIndexField">
<field type="Sitecore.ContentTesting.ContentSearch.ComputedIndexFields.ParsedOwner, Sitecore.ContentTesting" fieldName="parsedowner" returnType="string"/>
<field type="Sitecore.ContentTesting.ContentSearch.ComputedIndexFields.FriendlyOwner, Sitecore.ContentTesting" fieldName="friendlyowner" returnType="string"/>
<field type="Sitecore.ContentTesting.ContentSearch.ComputedIndexFields.HostItemPartial, Sitecore.ContentTesting" fieldName="host" returnType="string"/>
<field type="Sitecore.ContentTesting.ContentSearch.ComputedIndexFields.HostItem, Sitecore.ContentTesting" fieldName="hosturi" returnType="string"/>
<field type="Sitecore.ContentTesting.ContentSearch.ComputedIndexFields.TestSearchContent, Sitecore.ContentTesting" fieldName="_searchtext" returnType="string"/>
<field type="Sitecore.ContentTesting.ContentSearch.ComputedIndexFields.SuggestedTests, Sitecore.ContentTesting" fieldName="suggestion" returnType="string"/>
<field type="Sitecore.ContentTesting.ContentSearch.ComputedIndexFields.TestImpactMetric, Sitecore.ContentTesting" fieldName="impact" returnType="double"/>
<field type="Sitecore.ContentTesting.ContentSearch.ComputedIndexFields.TestPotentialMetric, Sitecore.ContentTesting" fieldName="potential" returnType="double"/>
<field type="Sitecore.ContentTesting.ContentSearch.ComputedIndexFields.TestRecommendationMetric, Sitecore.ContentTesting" fieldName="recommendation" returnType="double"/>
</fields>
</documentOptions>
</configuration>
<locations hint="list:AddCrawler">
<crawler type="Sitecore.ContentTesting.ContentSearch.SpecificSitecoreItemCrawler, Sitecore.ContentTesting">
<Database>master</Database>
<!--
 Limit this parameter to the root of the content of the site. 
-->
<Root>/sitecore/content</Root>
</crawler>
</locations>
</index>
<index id="sitecore_fxm_master_index" type="Sitecore.ContentSearch.SolrProvider.SolrSearchIndex, Sitecore.ContentSearch.SolrProvider" patch:source="Sitecore.FXM.Solr.DomainsSearch.Index.Master.config">
<param desc="name">$(id)</param>
<param desc="core">sc_fxm_master_index</param>
<param ref="contentSearch/indexConfigurations/databasePropertyStore" desc="propertyStore" param1="$(id)"/>
<configuration ref="contentSearch/indexConfigurations/defaultFxmSolrIndexConfiguration"/>
<strategies hint="list:AddStrategy">
<strategy ref="contentSearch/indexConfigurations/indexUpdateStrategies/syncMaster"/>
</strategies>
<locations hint="list:AddCrawler">
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>master</Database>
<Root>/sitecore/system/Marketing Control Panel/fxm/</Root>
</crawler>
</locations>
</index>
<index id="sitecore_fxm_web_index" type="Sitecore.ContentSearch.SolrProvider.SolrSearchIndex, Sitecore.ContentSearch.SolrProvider" patch:source="Sitecore.FXM.Solr.DomainsSearch.Index.Web.config">
<param desc="name">$(id)</param>
<param desc="core">sc_fxm_web_index</param>
<param ref="contentSearch/indexConfigurations/databasePropertyStore" desc="propertyStore" param1="$(id)"/>
<configuration ref="contentSearch/indexConfigurations/defaultFxmSolrIndexConfiguration"/>
<strategies hint="list:AddStrategy">
<strategy ref="contentSearch/indexConfigurations/indexUpdateStrategies/onPublishEndAsyncSingleInstance"/>
</strategies>
<locations hint="list:AddCrawler">
<crawler type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
<Database>web</Database>
<Root>/sitecore/system/Marketing Control Panel/fxm/</Root>
</crawler>
</locations>
</index>
</indexes>
</configuration>
<!--  Configuration sections for indexes  -->
<indexConfigurations>
<!--
 INDEXING STRATEGIES 
           Here is a list of the different indexing strategies that you can use. You can also combine these strategies to achieve what you want.
        
-->
<indexUpdateStrategies>
<!--
 INTERVAL BASED INDEX REBUILD STRATEGY FOR CORE DATABASE
             This strategy uses an interval based trigger and the EventQueue from the predefined 'core' database to incrementally rebuild the index. 
          
-->
<intervalAsyncCore type="Sitecore.ContentSearch.Maintenance.Strategies.IntervalAsynchronousStrategy, Sitecore.ContentSearch">
<param desc="database">core</param>
<param desc="interval">00:01:00</param>
<!--
 Whether or not a full index rebuild should be triggered when the number of items in the EventQueue exceeds the number specified 
               in ContentSearch.FullRebuildItemCountThreshold. 
-->
<CheckForThreshold>true</CheckForThreshold>
</intervalAsyncCore>
<!--
 INTERVAL BASED INDEX REBUILD STRATEGY FOR MASTER DATABASE
             This strategy uses an interval based trigger and the EventQueue from the predefined 'master' database to incrementally rebuild the index. 
          
-->
<intervalAsyncMaster type="Sitecore.ContentSearch.Maintenance.Strategies.IntervalAsynchronousStrategy, Sitecore.ContentSearch">
<param desc="database">master</param>
<param desc="interval">00:00:05</param>
<!--
 Whether or not a full index rebuild should be triggered when the number of items in the EventQueue exceeds the number specified 
               in ContentSearch.FullRebuildItemCountThreshold. 
-->
<CheckForThreshold>true</CheckForThreshold>
</intervalAsyncMaster>
<!--
 AUTOMATIC INDEXING DISABLED STRATEGY 
             Every index that uses this strategy must be manually rebuilt. 
          
-->
<manual type="Sitecore.ContentSearch.Maintenance.Strategies.ManualStrategy, Sitecore.ContentSearch"/>
<!--
 REINDEX ON PUBLISH END
             This strategy is triggered on publish:end and uses the EventQueue to incrementally rebuild the index.  
          
-->
<onPublishEndAsync type="Sitecore.ContentSearch.Maintenance.Strategies.OnPublishEndAsynchronousStrategy, Sitecore.ContentSearch">
<param desc="database">web</param>
<!--
 Whether or not a full index rebuild should be triggered when the number of items in the EventQueue exceeds the number specified 
               in ContentSearch.FullRebuildItemCountThreshold. 
-->
<CheckForThreshold>true</CheckForThreshold>
</onPublishEndAsync>
<!--
 REINDEX ON PUBLISH END SINGLE INSTANCE
             This strategy is triggered on publish:end and uses the EventQueue to incrementally rebuild the index. The strategy contains all indexes which belong to it. 
          
-->
<onPublishEndAsyncSingleInstance type="Sitecore.ContentSearch.Maintenance.Strategies.OnPublishEndAsynchronousSingleInstanceStrategy, Sitecore.ContentSearch" singleInstance="true">
<param desc="database">web</param>
<!--
 Whether or not a full index rebuild should be triggered when the number of items in the EventQueue exceeds the number specified 
               in ContentSearch.FullRebuildItemCountThreshold. 
-->
<CheckForThreshold>true</CheckForThreshold>
</onPublishEndAsyncSingleInstance>
<!--
 REINDEX ON FULL PUBLISH
             Every index that uses this strategy is fully rebuilt after a full publish. 
          
-->
<rebuildAfterFullPublish type="Sitecore.ContentSearch.Maintenance.Strategies.RebuildAfterFullPublishStrategy, Sitecore.ContentSearch"/>
<!--
 REMOTE INDEX REBUILD TRIGGER
             This strategy allows remote indexes to react to a full index rebuild operation that is run from another instance. This strategy requires 
             that the EventQueue be enabled.
          
-->
<remoteRebuild type="Sitecore.ContentSearch.Maintenance.Strategies.RemoteRebuildStrategy, Sitecore.ContentSearch"/>
<!--
 SYNCHRONOUS INDEX REBUILDS
             This strategy subscribes to data engine events directly and is CPU and IO intensive. Not recommended for Content Delivery servers.
          
-->
<syncMaster type="Sitecore.ContentSearch.Maintenance.Strategies.SynchronousStrategy, Sitecore.ContentSearch">
<param desc="database">master</param>
</syncMaster>
</indexUpdateStrategies>
<databasePropertyStore type="Sitecore.ContentSearch.Maintenance.IndexDatabasePropertyStore, Sitecore.ContentSearch">
<Key>$(1)</Key>
<Database>core</Database>
</databasePropertyStore>
<filesystemPropertyStore type="Sitecore.ContentSearch.Maintenance.IndexFileSystemPropertyStore, Sitecore.ContentSearch">
<Key>$(1)</Key>
</filesystemPropertyStore>
<!--
 DEFAULT SEARCH SECURITY OPTION
             This setting is the default search security option that will be used if the search security option is not specified during the creation
             of search context. The accepted values are DisableSecurityCheck and EnableSecurityCheck.
        
-->
<defaultSearchSecurityOption>DisableSecurityCheck</defaultSearchSecurityOption>
<!--
 If an index has no configuration specified, it will use the configuration below. The configuration is not merged if the index also has
             configuration, it is either this configuration or the index configuration. 
-->
<defaultSolrIndexConfiguration type="Sitecore.ContentSearch.SolrProvider.SolrIndexConfiguration, Sitecore.ContentSearch.SolrProvider" patch:source="Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config">
<!--
 For Solr Initialize() needs to be called after the IOC container has fired up 
-->
<initializeOnAdd>false</initializeOnAdd>
<!--
 DEFAULT FIELD MAPPING 
               This field map allows you to take full control over how your data is stored in the index. This can affect the way data is queried, performance of searching and how data is retrieved and casted to a proper type in the API. 
            
-->
<fieldMap type="Sitecore.ContentSearch.SolrProvider.SolrFieldMap, Sitecore.ContentSearch.SolrProvider">
<!--  This element must be first  -->
<typeMatches hint="raw:AddTypeMatch">
<typeMatch type="System.Collections.Generic.List`1[System.Guid]" typeName="guidCollection" fieldNameFormat="{0}_sm" multiValued="true" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="System.Collections.Generic.List`1[System.String]" typeName="textCollection" fieldNameFormat="{0}_txm" multiValued="true" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="System.Collections.Generic.List`1[System.String]" typeName="stringCollection" fieldNameFormat="{0}_sm" multiValued="true" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="System.Collections.Generic.List`1[System.Int32]" typeName="intCollection" fieldNameFormat="{0}_im" multiValued="true" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="System.Guid" typeName="guid" fieldNameFormat="{0}_s" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="Sitecore.Data.ID, Sitecore.Kernel" typeName="id" fieldNameFormat="{0}_s" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="Sitecore.Data.ShortID, Sitecore.Kernel" typeName="shortid" fieldNameFormat="{0}_s" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="System.String" typeName="string" fieldNameFormat="{0}_s" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="System.String" typeName="text" fieldNameFormat="{0}_t" cultureFormat="_{1}" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="System.Int32" typeName="int" fieldNameFormat="{0}_tl" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="System.Boolean" typeName="bool" fieldNameFormat="{0}_b" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="System.DateTime" typeName="datetime" fieldNameFormat="{0}_tdt" format="yyyy-MM-dd'T'HH:mm:ss.FFF'Z'" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="System.Int64" typeName="long" fieldNameFormat="{0}_tl" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="System.Single" typeName="float" fieldNameFormat="{0}_tf" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="System.Double" typeName="double" fieldNameFormat="{0}_td" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="System.String[]" typeName="stringArray" fieldNameFormat="{0}_sm" multiValued="true" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="System.Int32[]" typeName="intArray" fieldNameFormat="{0}_im" multiValued="true" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="System.DateTime[]" typeName="datetimeArray" fieldNameFormat="{0}_dtm" multiValued="true" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="System.Collections.Generic.List`1[System.DateTime]" typeName="datetimeCollection" fieldNameFormat="{0}_dtm" multiValued="true" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<typeMatch type="Sitecore.ContentSearch.Data.Coordinate, Sitecore.ContentSearch.Data" typeName="coordinate" fieldNameFormat="{0}_rpt" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
</typeMatches>
<!--
 Add schema fields here to enable multi-language processing 
-->
<fieldNames hint="raw:AddFieldByFieldName">
<field fieldName="__created_by" returnType="string"/>
<field fieldName="__smallcreateddate" returnType="datetime" format="yyyy-MM-dd'T'HH\:mm\:ss'Z'"/>
<field fieldName="__smallupdateddate" returnType="datetime" format="yyyy-MM-dd'T'HH\:mm\:ss'Z'"/>
<field fieldName="__workflow_state" returnType="string"/>
<field fieldName="extension" returnType="text"/>
<field fieldName="title" returnType="text"/>
<field fieldName="type" returnType="text"/>
<field fieldName="message_type" returnType="string" patch:source="Sitecore.EmailExperience.ContentSearch.Solr.config"/>
<field fieldName="state" returnType="text" patch:source="Sitecore.EmailExperience.ContentSearch.Solr.config"/>
</fieldNames>
<!--
 FIELD TYPE MAPPING
                 This allows you to map a field type in Sitecore to a type in the index.
                 USAGE: When you add new field types to Sitecore, add the mappings here so they work through the Linq Layer 
              
-->
<fieldTypes hint="raw:AddFieldByFieldTypeName">
<fieldType fieldTypeName="checkbox" returnType="bool"/>
<fieldType fieldTypeName="date|datetime" returnType="datetime"/>
<fieldType fieldTypeName="html|rich text|single-line text|multi-line text|text|memo|image|reference" returnType="text"/>
<fieldType fieldTypeName="word document" returnType="text"/>
<fieldType fieldTypeName="integer" returnType="long"/>
<fieldType fieldTypeName="number" returnType="float"/>
<fieldType fieldTypeName="icon|droplist|grouped droplist" returnType="string"/>
<fieldType fieldTypeName="checklist|multilist|treelist|tree list|treelistex|tree list|multilist with search|treelist with search" returnType="stringCollection"/>
<fieldType fieldTypeName="name lookup value list|name value list" returnType="stringCollection"/>
<fieldType fieldTypeName="droplink|droptree|grouped droplink|tree" returnType="stringCollection"/>
</fieldTypes>
</fieldMap>
<documentOptions type="Sitecore.ContentSearch.SolrProvider.SolrDocumentBuilderOptions, Sitecore.ContentSearch.SolrProvider">
<!--
 This flag will index all fields by default. This allows new fields in your templates to automatically be included into the index.
               You have two choices : 
               
               1) Set this to true and place all the fields you would like to remove in the 'ExcludeField' list below.
               2) Set to false and place all fields you would like to be indexed in the 'IncludeField' list below.
            
-->
<indexAllFields>true</indexAllFields>
<!--
 GLOBALLY EXCLUDE TEMPLATES FROM BEING INDEXED
                 This setting allows you to exclude items that are based on specific templates from the index.
                 Template inheritance will be checked if checkTemplateInheritance is enabled.
            
-->
<exclude hint="list:AddExcludedTemplate">
<BucketFolderTemplateId>{ADB6CA4F-03EF-4F47-B9AC-9CE2BA53FF97}</BucketFolderTemplateId>
</exclude>
<!--
 This flag will enable checking template inheritance / base templates when specifying templates to include
                 or exclude from the index. This eliminates the need to explicitly specify all templates to include or
                 exclude, but may affect performance.
            
-->
<checkTemplateInheritance>true</checkTemplateInheritance>
<!--
 GLOBALLY EXCLUDE FIELDS FROM BEING INDEXED
               This setting allows you to exclude fields from the index when the indexAllFields setting is set to true.
            
-->
<exclude hint="list:AddExcludedField">
<__Created>{25BED78C-4957-4165-998A-CA1B52F67497}</__Created>
<__DefaultWorkflow>{CA9B9F52-4FB0-4F87-A79F-24DEA62CDA65}</__DefaultWorkflow>
<__Lock>{001DD393-96C5-490B-924A-B0F25CD9EFD8}</__Lock>
<__LongDescription>{577F1689-7DE4-4AD2-A15F-7FDC1759285F}</__LongDescription>
<__Originator>{F6D8A61C-2F84-4401-BD24-52D2068172BC}</__Originator>
<__Owner>{52807595-0F8F-4B20-8D2A-CB71D28C6103}</__Owner>
<__ReadOnly>{9C6106EA-7A5A-48E2-8CAD-F0F693B1E2D4}</__ReadOnly>
<__Renderings>{F1A1FE9E-A60C-4DDB-A3A0-BB5B29FE732E}</__Renderings>
<__Revision>{8CDC337E-A112-42FB-BBB4-4143751E123F}</__Revision>
<__Security>{DEC8D2D5-E3CF-48B6-A653-8E69E2716641}</__Security>
<__ShortDescription>{9541E67D-CE8C-4225-803D-33F7F29F09EF}</__ShortDescription>
<__SortOrder>{BA3F86A2-4A1C-4D78-B63D-91C2779C1B5E}</__SortOrder>
<__Source>{1B86697D-60CA-4D80-83FB-7555A2E6CE1C}</__Source>
<__SourceItem>{19B597D3-2EDD-4AE2-AEFE-4A94C7F10E31}</__SourceItem>
<__Updated>{D9CF14B1-FA16-4BA6-9288-E8A174D4D522}</__Updated>
<__UpdatedBy>{BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}</__UpdatedBy>
<__ValidFrom>{C8F93AFE-BFD4-4E8F-9C61-152559854661}</__ValidFrom>
<__Workflow>{A4F985D9-98B3-4B52-AAAF-4344F6E747C6}</__Workflow>
<ArchiveDate>{56C15C6D-FD5A-40CA-BB37-64CEEC6A9BD5}</ArchiveDate>
<ArchiveVersionDate>{1D99005E-65CA-45CA-9D9A-FD7016E23F1E}</ArchiveVersionDate>
<Boost>{93D1B217-B8F4-462E-BABF-68298C9CE667}</Boost>
<BucketParentReference>{9DAFCA1D-D618-4616-86B8-A8ACD6B28A63}</BucketParentReference>
<Cacheable>{3D08DB46-2267-41B0-BC52-BE69FD618633}</Cacheable>
<ContextMenu>{D3AE7222-425D-4B77-95D8-EE33AC2B6730}</ContextMenu>
<Controller>{4C9312A5-2E4E-42F8-AB6F-B8DB8B82BF22}</Controller>
<ControllerAction>{9FB734CC-8952-4072-A2D4-40F890E16F56}</ControllerAction>
<DefaultBucketQuery>{AC51462C-8A8D-493B-9492-34D1F26F20F1}</DefaultBucketQuery>
<DefaultView>{3607F9C7-DDA3-43C3-9720-39A7A5B3A4C3}</DefaultView>
<Editor>{D85DB4EC-FF89-4F9C-9E7C-A9E0654797FC}</Editor>
<Editors>{A0CB3965-8884-4C7A-8815-B6B2E5CED162}</Editors>
<EnabledViews>{F2DB8BA1-E477-41F5-8EF5-22EEFA8D2F6E}</EnabledViews>
<Facets>{21F74F6E-42D4-42A2-A4B4-4CEFBCFBD2BB}</Facets>
<HelpLink>{56776EDF-261C-4ABC-9FE7-70C618795239}</HelpLink>
<HideVersion>{B8F42732-9CB8-478D-AE95-07E25345FB0F}</HideVersion>
<Icon>{06D5295C-ED2F-4A54-9BF2-26228D113318}</Icon>
<Masters>{1172F251-DAD4-4EFB-A329-0C63500E4F1E}</Masters>
<NeverPublish>{9135200A-5626-4DD8-AB9D-D665B8C11748}</NeverPublish>
<PersistentFilter>{C7815F60-96E1-40CB-BB06-B5F833F73B61}</PersistentFilter>
<Preview>{41C6CC0E-389F-4D51-9990-FE35417B6666}</Preview>
<Publish>{86FE4F77-4D9A-4EC3-9ED9-263D03BD1965}</Publish>
<ReminderDate>{ABE5D54C-59D7-41E6-8D3F-C1A3E4EC9B9E}</ReminderDate>
<ReminderText>{BB6C8540-118E-4C49-9157-830576D7345A}</ReminderText>
<Renderers>{B03569B1-1534-43F2-8C83-BD064B7D782C}</Renderers>
<Ribbon>{0C894AAB-962B-4A84-B923-CB24B05E60D2}</Ribbon>
<Skin>{079AFCFE-8ACA-4863-BDA7-07893541E2F5}</Skin>
<Style>{A791F095-2521-4B4D-BEF9-21DDA221F608}</Style>
<SubItemSorting>{6FD695E7-7F6D-4CA5-8B49-A829E5950AE9}</SubItemSorting>
<SuppressedValidationRules>{F47C0D78-61F9-479C-96DF-1159727D32C6}</SuppressedValidationRules>
<UnPublish>{7EAD6FD6-6CF1-4ACA-AC6B-B200E7BAFE88}</UnPublish>
<UserAgent>{4E678FC0-8D35-4AB7-BB49-156F33C8B955}</UserAgent>
<ValidTo>{4C346442-E859-4EFD-89B2-44AEDF467D21}</ValidTo>
<VaryByData>{8B6D532B-6128-4486-A044-CA06D90948BA}</VaryByData>
<VaryByDevice>{C98CF969-BA71-42DA-833D-B3FC1368BA27}</VaryByDevice>
<VaryByLogin>{8D9232B0-613F-440B-A2FA-DCDD80FBD33E}</VaryByLogin>
<VaryByParam>{3AD2506A-DC39-4B1E-959F-9D524ADDBF50}</VaryByParam>
<VaryByQueryString>{1084D3D2-0457-456A-ABBC-EB4CC0966072}</VaryByQueryString>
<VaryByUser>{0E54A8DC-72AD-4372-A7C7-BB4773FAD44D}</VaryByUser>
<VaryByIndex>{F3E7E552-D7C8-469B-A150-69E4E14AB35C}</VaryByIndex>
</exclude>
<!--
 REMOVE INBUILT SITECORE FIELDS
               This allows you to store a field in different ways in the index. You may want to store a field as Analyzed and Not Analyze
            
-->
<fields hint="raw:AddExcludedSpecialField">
<remove type="both">AllTemplates</remove>
<remove type="both">Created</remove>
<remove type="both">Editor</remove>
<remove type="both">Hidden</remove>
<remove type="both">Icon</remove>
<remove type="both">Links</remove>
<remove type="both">Updated</remove>
</fields>
<!--
 COMPUTED INDEX FIELDS 
               This setting allows you to add fields to the index that contain values that are computed for the item that is being indexed.
               You can specify the storageType and indextype for each computed index field in the <fieldMap><fieldNames> section.
            
-->
<fields hint="raw:AddComputedIndexField">
<field fieldName="__smallcreateddate" returnType="string">
Sitecore.ContentSearch.ComputedFields.CreatedDate,Sitecore.ContentSearch
</field>
<field fieldName="__smallupdateddate" returnType="string">
Sitecore.ContentSearch.ComputedFields.UpdatedDate,Sitecore.ContentSearch
</field>
<field type="Sitecore.ContentSearch.ComputedFields.MediaItemContentExtractor,Sitecore.ContentSearch" fieldName="_content" returnType="string">
<mediaIndexing ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration/mediaIndexing"/>
</field>
<field fieldName="calculateddimension" returnType="stringCollection">
Sitecore.ContentSearch.ComputedFields.CalculatedDimension,Sitecore.ContentSearch
</field>
<field fieldName="culture" returnType="string">
Sitecore.ContentSearch.ComputedFields.Culture,Sitecore.ContentSearch
</field>
<field fieldName="haschildren" returnType="bool">
Sitecore.ContentSearch.ComputedFields.HasChildren,Sitecore.ContentSearch
</field>
<field fieldName="istemplate" returnType="bool">
Sitecore.ContentSearch.ComputedFields.IsTemplate,Sitecore.ContentSearch
</field>
<field fieldName="lock" returnType="bool">
Sitecore.ContentSearch.ComputedFields.IsLocked,Sitecore.ContentSearch
</field>
<field fieldName="parsedcreatedby" returnType="string">
Sitecore.ContentSearch.ComputedFields.ParsedCreatedBy,Sitecore.ContentSearch
</field>
<field fieldName="parsedupdatedby" returnType="string">
Sitecore.ContentSearch.ComputedFields.ParsedUpdatedBy,Sitecore.ContentSearch
</field>
<field fieldName="parsedlanguage" returnType="string">
Sitecore.ContentSearch.ComputedFields.ParsedLanguage,Sitecore.ContentSearch
</field>
<field fieldName="site" returnType="stringCollection">
Sitecore.ContentSearch.ComputedFields.Site,Sitecore.ContentSearch
</field>
<field fieldName="sizerange" returnType="string">
Sitecore.ContentSearch.ComputedFields.FileSizeGrouping,Sitecore.ContentSearch
</field>
<field fieldName="version" returnType="intCollection">
Sitecore.ContentSearch.ComputedFields.StoreVersionTermVector,Sitecore.ContentSearch
</field>
<field fieldName="isbucket_text" returnType="string">
Sitecore.ContentSearch.ComputedFields.IsBucket,Sitecore.ContentSearch
</field>
<field fieldName="__lock" returnType="string">
Sitecore.ContentSearch.ComputedFields.ParsedLockOwner,Sitecore.ContentSearch
</field>
<field fieldName="ispointofinterest" returnType="bool">
Sitecore.ContentSearch.ComputedFields.IsPointOfInterest, Sitecore.ContentSearch
</field>
<field fieldName="coordinate" returnType="coordinate">
Sitecore.ContentSearch.SolrProvider.ComputedFields.Coordinate, Sitecore.ContentSearch.SolrProvider
</field>
<!--
 The following computed fields must always be enabled for the Solr provider. 
-->
<field fieldName="__solr_norm_field_name" returnType="string">
Sitecore.ContentSearch.SolrProvider.FieldNames.TypeResolving.Index.ComputedFields.NormalizedTemplateFieldName,Sitecore.ContentSearch.SolrProvider
</field>
<field fieldName="__solr_field_type" returnType="string">
Sitecore.ContentSearch.SolrProvider.FieldNames.TypeResolving.Index.ComputedFields.TemplateFieldType,Sitecore.ContentSearch.SolrProvider
</field>
</fields>
</documentOptions>
<!--
 MEDIA ITEM CONTENT EXTRACTOR FILE MAPPING 
               This map allows you to specify the extensions and mimetypes that we will pass through to the IFilters on your machine so they can be indexed.
               We also allow you to include all files or exclude all files and leave it to the IFilters to control what is and is not indexed.
          
-->
<mediaIndexing hint="skip">
<mimeTypes>
<excludes>
<mimeType>*</mimeType>
</excludes>
<includes>
<mimeType>application/pdf</mimeType>
<mimeType type="Sitecore.ContentSearch.ComputedFields.MediaItemHtmlTextExtractor, Sitecore.ContentSearch">text/html</mimeType>
<mimeType>text/plain</mimeType>
</includes>
</mimeTypes>
<extensions>
<excludes>
<extension>*</extension>
</excludes>
<includes>
<extension>rtf</extension>
<extension>odt</extension>
<extension>doc</extension>
<extension>dot</extension>
<extension>docx</extension>
<extension>dotx</extension>
<extension>docm</extension>
<extension>dotm</extension>
<extension>xls</extension>
<extension>xlt</extension>
<extension>xla</extension>
<extension>xlsx</extension>
<extension>xlsm</extension>
<extension>xltm</extension>
<extension>xlam</extension>
<extension>xlsb</extension>
<extension>ppt</extension>
<extension>pot</extension>
<extension>pps</extension>
<extension>ppa</extension>
<extension>pptx</extension>
<extension>potx</extension>
<extension>ppsx</extension>
<extension>ppam</extension>
<extension>pptm</extension>
<extension>potm</extension>
<extension>ppsm</extension>
</includes>
</extensions>
</mediaIndexing>
<!--
 VIRTUAL FIELDS
               Virtual fields can be used to translate a field query into a different query.
            
-->
<virtualFields type="Sitecore.ContentSearch.VirtualFieldProcessorMap, Sitecore.ContentSearch">
<processors hint="raw:AddFromConfiguration">
<add type="Sitecore.ContentSearch.VirtualFields.DateRangeFieldProcessor, Sitecore.ContentSearch" fieldName="daterange"/>
<add type="Sitecore.ContentSearch.VirtualFields.LatestVersionFieldProcessor, Sitecore.ContentSearch" fieldName="_lastestversion"/>
<add type="Sitecore.ContentSearch.VirtualFields.UpdatedDateRangeFieldProcessor, Sitecore.ContentSearch" fieldName="updateddaterange"/>
<add type="Sitecore.ContentSearch.VirtualFields.UniqueIdFieldProcessor, Sitecore.ContentSearch" fieldName="_url"/>
<add type="Sitecore.ContentSearch.SolrProvider.VirtualFields.FullPathFieldProcessor, Sitecore.ContentSearch.SolrProvider" fieldName="_fullpath"/>
<add type="Sitecore.ContentSearch.VirtualFields.CreatedByFieldProcessor, Sitecore.ContentSearch" fieldName="parsedcreatedby_s"/>
<add type="Sitecore.ItemWebApi.VirtualFields.UpdatedIntervalFieldProcessor, Sitecore.Speak.ItemWebApi" fieldName="updatedinterval" patch:source="Sitecore.Speak.ContentSearch.Solr.config"/>
</processors>
</virtualFields>
<!--
 SITECORE FIELDTYPE MAP
               This maps a field type by name to a Strongly Typed Implementation of the field type e.g. html maps to HTMLField
            
-->
<fieldReaders type="Sitecore.ContentSearch.FieldReaders.FieldReaderMap, Sitecore.ContentSearch">
<param desc="id">defaultFieldReaderMap</param>
<mapFieldByTypeName hint="raw:AddFieldReaderByFieldTypeName">
<fieldReader fieldTypeName="checkbox" fieldReaderType="Sitecore.ContentSearch.FieldReaders.CheckboxFieldReader, Sitecore.ContentSearch"/>
<fieldReader fieldTypeName="date|datetime" fieldReaderType="Sitecore.Marketing.Search.FieldReaders.NullableDateFieldReader, Sitecore.Marketing.Search" patch:source="Sitecore.Marketing.Solr.IndexConfiguration.config"/>
<fieldReader fieldTypeName="image" fieldReaderType="Sitecore.ContentSearch.FieldReaders.ImageFieldReader, Sitecore.ContentSearch"/>
<fieldReader fieldTypeName="single-line text|multi-line text|text|memo" fieldReaderType="Sitecore.ContentSearch.FieldReaders.DefaultFieldReader, Sitecore.ContentSearch"/>
<fieldReader fieldTypeName="integer" fieldReaderType="Sitecore.ContentSearch.FieldReaders.NumericFieldReader, Sitecore.ContentSearch"/>
<fieldReader fieldTypeName="number" fieldReaderType="Sitecore.ContentSearch.FieldReaders.PrecisionNumericFieldReader, Sitecore.ContentSearch"/>
<fieldReader fieldTypeName="html|rich text" fieldReaderType="Sitecore.ContentSearch.FieldReaders.RichTextFieldReader, Sitecore.ContentSearch"/>
<fieldReader fieldTypeName="multilist with search|treelist with search" fieldReaderType="Sitecore.ContentSearch.FieldReaders.DelimitedListFieldReader, Sitecore.ContentSearch"/>
<fieldReader fieldTypeName="checklist|multilist|treelist|treelistex|tree list" fieldReaderType="Sitecore.ContentSearch.FieldReaders.MultiListFieldReader, Sitecore.ContentSearch"/>
<fieldReader fieldTypeName="icon|droplist|grouped droplist" fieldReaderType="Sitecore.ContentSearch.FieldReaders.DefaultFieldReader, Sitecore.ContentSearch"/>
<fieldReader fieldTypeName="name lookup value list|name value list" fieldReaderType="Sitecore.ContentSearch.FieldReaders.NameValueListFieldReader, Sitecore.ContentSearch"/>
<fieldReader fieldTypeName="droplink|droptree|grouped droplink|tree|reference" fieldReaderType="Sitecore.ContentSearch.FieldReaders.LookupFieldReader, Sitecore.ContentSearch"/>
<fieldReader fieldTypeName="attachment|frame|rules|tracking|thumbnail" fieldReaderType="Sitecore.ContentSearch.FieldReaders.NullFieldReader, Sitecore.ContentSearch"/>
<fieldReader fieldTypeName="file|security|server file|template field source|link" fieldReaderType="Sitecore.ContentSearch.FieldReaders.NullFieldReader, Sitecore.ContentSearch"/>
</mapFieldByTypeName>
</fieldReaders>
<!--
 INDEX FIELD STORAGE MAPPER 
               Maintains a collection of all the possible Convertors for the provider.
            
-->
<indexFieldStorageValueFormatter type="Sitecore.ContentSearch.SolrProvider.Converters.SolrIndexFieldStorageValueFormatter, Sitecore.ContentSearch.SolrProvider">
<converters hint="raw:AddConverter">
<converter typeConverter="Sitecore.ContentSearch.Converters.IndexFieldGuidValueConverter, Sitecore.ContentSearch" handlesType="System.Guid"/>
<converter typeConverter="Sitecore.ContentSearch.Converters.IndexFieldIDValueConverter, Sitecore.ContentSearch" handlesType="Sitecore.Data.ID, Sitecore.Kernel"/>
<converter typeConverter="Sitecore.ContentSearch.Converters.IndexFieldShortIDValueConverter, Sitecore.ContentSearch" handlesType="Sitecore.Data.ShortID, Sitecore.Kernel"/>
<converter typeConverter="Sitecore.ContentSearch.Converters.IndexFieldUTCDateTimeValueConverter, Sitecore.ContentSearch" handlesType="System.DateTime"/>
<converter typeConverter="Sitecore.ContentSearch.Converters.IndexFieldDateTimeOffsetValueConverter, Sitecore.ContentSearch" handlesType="System.DateTimeOffset"/>
<converter typeConverter="Sitecore.ContentSearch.Converters.IndexFieldTimeSpanValueConverter, Sitecore.ContentSearch" handlesType="System.TimeSpan"/>
<converter typeConverter="Sitecore.ContentSearch.Converters.IndexFieldSitecoreItemIDValueConvertor, Sitecore.ContentSearch" handlesType="Sitecore.ContentSearch.SitecoreItemId, Sitecore.ContentSearch">
<param type="Sitecore.ContentSearch.Converters.IndexFieldIDValueConverter, Sitecore.ContentSearch"/>
</converter>
<converter typeConverter="Sitecore.ContentSearch.SolrProvider.Converters.SolrIndexFieldSitecoreItemUniqueIDValueConverter, Sitecore.ContentSearch.SolrProvider" handlesType="Sitecore.ContentSearch.SitecoreItemUniqueId, Sitecore.ContentSearch">
<param type="Sitecore.ContentSearch.Converters.IndexFieldItemUriValueConverter, Sitecore.ContentSearch"/>
</converter>
<converter typeConverter="Sitecore.ContentSearch.Converters.IndexFieldItemUriValueConverter, Sitecore.ContentSearch" handlesType="Sitecore.Data.ItemUri, Sitecore.Kernel"/>
<converter typeConverter="Sitecore.ContentSearch.Converters.IndexFieldLanguageValueConverter, Sitecore.ContentSearch" handlesType="Sitecore.Globalization.Language, Sitecore.Kernel"/>
<converter typeConverter="Sitecore.ContentSearch.Converters.IndexFieldCultureInfoValueConverter, Sitecore.ContentSearch" handlesType="System.Globalization.CultureInfo"/>
<converter typeConverter="Sitecore.ContentSearch.Converters.IndexFieldVersionValueConverter, Sitecore.ContentSearch" handlesType="Sitecore.Data.Version, Sitecore.Kernel"/>
<converter typeConverter="Sitecore.ContentSearch.Converters.IndexFieldDatabaseValueConverter, Sitecore.ContentSearch" handlesType="Sitecore.Data.Database, Sitecore.Kernel"/>
<converter typeConverter="Sitecore.ContentSearch.Converters.IndexableIdConverter, Sitecore.ContentSearch" handlesType="Sitecore.ContentSearch.IIndexableId, Sitecore.ContentSearch"/>
<converter typeConverter="Sitecore.ContentSearch.Converters.IndexableUniqueIdConverter, Sitecore.ContentSearch" handlesType="Sitecore.ContentSearch.IIndexableUniqueId, Sitecore.ContentSearch"/>
<converter typeConverter="Sitecore.ContentSearch.Converters.IndexFieldCoordinateValueConverter, Sitecore.ContentSearch" handlesType="Sitecore.ContentSearch.Data.Coordinate, Sitecore.ContentSearch.Data"/>
</converters>
</indexFieldStorageValueFormatter>
<!--
 INDEX PROPERTY TO DOCUMENT MAPPER
               Maintains a collection of all the possible Convertors for the provider.
            
-->
<indexDocumentPropertyMapper type="Sitecore.ContentSearch.SolrProvider.Mapping.SolrDocumentPropertyMapper, Sitecore.ContentSearch.SolrProvider">
<!--
 OBJECT FACTORY
                 Constructs search result objects based on the type that is passed in .GetQueryable<T>() and the rules defined in this section.
            
-->
<objectFactory type="Sitecore.ContentSearch.DefaultDocumentMapperObjectFactory, Sitecore.ContentSearch"/>
</indexDocumentPropertyMapper>
<!--
 DOCUMENT BUILDER
               Allows you to override the document builder. The document builder class processes all the fields in the Sitecore items and prepares
               the data for storage in the index.
               You can override the document builder to modify how the data is prepared, and to apply any additional logic that you may require.
          
-->
<documentBuilderType>
Sitecore.ContentSearch.SolrProvider.SolrDocumentBuilder, Sitecore.ContentSearch.SolrProvider
</documentBuilderType>
<defaultSearchSecurityOption ref="contentSearch/indexConfigurations/defaultSearchSecurityOption"/>
<documentOptions ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration/documentOptions" patch:source="Sitecore.ExperienceForms.Solr.IndexConfiguration.config">
<include hint="list:AddIncludedField">
<fieldId>{558F9307-EBAF-480D-88B5-DFE9E63A66DE}</fieldId>
</include>
</documentOptions>
</defaultSolrIndexConfiguration>
<solrHttpWebRequestFactory type="HttpWebAdapters.HttpWebRequestFactory, SolrNet" patch:source="Sitecore.ContentSearch.Solr.DefaultIndexConfiguration.config"/>
<defaultFxmSolrIndexConfiguration type="Sitecore.ContentSearch.SolrProvider.SolrIndexConfiguration, Sitecore.ContentSearch.SolrProvider" patch:source="Sitecore.FXM.Solr.DomainsSearch.DefaultIndexConfiguration.config">
<documentOptions type="Sitecore.ContentSearch.SolrProvider.SolrDocumentBuilderOptions, Sitecore.ContentSearch.SolrProvider">
<indexAllFields>false</indexAllFields>
<include hint="list:AddIncludedTemplate">
<domainMatcherTemplateId>{036DB470-1850-4848-A48A-0931F825B867}</domainMatcherTemplateId>
</include>
<include hint="list:AddIncludedField">
<!--  display name  -->
<fieldId>{B5E02AD9-D56F-4C41-A065-A133DB87BDEB}</fieldId>
</include>
<fields hint="raw:AddComputedIndexField">
<field fieldName="createdby" returnType="string">
Sitecore.FXM.Service.Data.DomainMatchers.ContentSearch.ComputedFields.CreatedBy, Sitecore.FXM.Service
</field>
<field fieldName="updatedby" returnType="string">
Sitecore.FXM.Service.Data.DomainMatchers.ContentSearch.ComputedFields.UpdatedBy, Sitecore.FXM.Service
</field>
<field fieldName="revision" returnType="string">
Sitecore.FXM.Service.Data.DomainMatchers.ContentSearch.ComputedFields.Revision, Sitecore.FXM.Service
</field>
<field fieldName="domainmatchrule" returnType="string">
Sitecore.FXM.Service.Data.DomainMatchers.ContentSearch.ComputedFields.DomainMatcherRule, Sitecore.FXM.Service
</field>
</fields>
</documentOptions>
<fieldMap ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration/fieldMap">
<fieldNames hint="raw:AddFieldByFieldName">
<fieldType fieldName="createdby" returnType="string"/>
<fieldType fieldName="updatedby" returnType="string"/>
<fieldType fieldName="revision" returnType="string"/>
<fieldType fieldName="domainmatchrule" returnType="string"/>
</fieldNames>
</fieldMap>
<fieldReaders ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration/fieldReaders"/>
<indexFieldStorageValueFormatter ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration/indexFieldStorageValueFormatter"/>
<indexDocumentPropertyMapper ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration/indexDocumentPropertyMapper"/>
<documentBuilderType ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration/documentBuilderType"/>
</defaultFxmSolrIndexConfiguration>
</indexConfigurations>
</contentSearch>
<!--
 ITEM BUCKET MANAGER
         The item bucket manager and provider classes 
    
-->
<bucketManager defaultProvider="default" enabled="true" patch:source="Sitecore.Buckets.config">
<providers>
<clear/>
<add name="default" type="Sitecore.Buckets.Managers.PipelineBasedBucketProvider, Sitecore.Buckets"/>
</providers>
</bucketManager>
<!--
  DEVICE DETECTION MANAGER
          Provide device detection information.
    
-->
<deviceDetectionManager defaultProvider="51degrees" patch:source="Sitecore.CES.DeviceDetection.config">
<providers>
<clear/>
<add name="51degrees" type="Sitecore.CES.DeviceDetection.Providers.FiftyOneDegrees.DeviceInformationProvider51Degree, Sitecore.CES.DeviceDetection"/>
</providers>
</deviceDetectionManager>
<!--
  GEO IP WEB REQUEST FACTORY
          Creates a web request to acquire the CES IP Geolocation service.
    
-->
<GeoIpWebRequestFactory type="Sitecore.CES.Client.WebRequestFactory, Sitecore.CES" singleInstance="true" patch:source="Sitecore.CES.GeoIp.config"/>
<!--
  GEO IP WEB CLIENT
          Requests the CES IP Geolocation service and reads the response body.
          MaxAttemps specifies the maximum number of attempts that the web client will make to acquire the CES IP Geolocation service.
    
-->
<GeoIpWebClient type="Sitecore.CES.Client.WebClient, Sitecore.CES" singleInstance="true" patch:source="Sitecore.CES.GeoIp.config">
<param ref="GeoIpWebRequestFactory"/>
</GeoIpWebClient>
<!--
  GEO IP RESPONSE PARSER
          Parses the CES IP Geolocation service response.
    
-->
<GeoIpResponseParser type="Sitecore.CES.GeoIp.GeoIpResponseParser, Sitecore.CES.GeoIp" singleInstance="true" patch:source="Sitecore.CES.GeoIp.config"/>
<!--
  GEO IP CONNECTOR
          Requests the IP Geolocation service and parses its response.
          ResourcePath specifies the path to geo IP resource.                    
    
-->
<GeoIpConnector type="Sitecore.CES.Client.ResourceConnector`1[[Sitecore.CES.GeoIp.Core.Model.WhoIsInformation, Sitecore.CES.GeoIp.Core]], Sitecore.CES" singleInstance="true" patch:source="Sitecore.CES.GeoIp.config">
<param ref="GeoIpWebClient"/>
<param ref="GeoIpResponseParser"/>
<param name="ResourcePath">/lookup/geoip/{0}</param>
</GeoIpConnector>
<!--
  IP RANGES CONNECTOR
          Requests the IP Geolocation service to get the filtered IP ranges file.
          ResourcePath specifies the path to geo IP resource.
    
-->
<IpRangesConnector type="Sitecore.CES.Client.ResourceConnector`1[[System.String, mscorlib]], Sitecore.CES" singleInstance="true" patch:source="Sitecore.CES.GeoIp.config">
<param ref="GeoIpWebClient"/>
<param ref="IpRangesFilterResponseParser"/>
<param name="ResourcePath">lookup/privateiprange</param>
</IpRangesConnector>
<!--
  IP RANGES FILTER RESPONSE PARSER
          Parses the filtered IP ranges response.
    
-->
<IpRangesFilterResponseParser type="Sitecore.CES.GeoIp.IpRangesFilterResponseParser, Sitecore.CES.GeoIp" singleInstance="true" patch:source="Sitecore.CES.GeoIp.config"/>
<!--
  LOCAL FILE BASED IP RANGES LOADER FACTORY
          Creates an instance of the IP ranges loader that works with local stored IP ranges file.
    
-->
<LocalFileBasedIpRangesLoaderFactory type="Sitecore.CES.GeoIp.CsvFileBasedIpRangesLoaderFactory, Sitecore.CES.GeoIp" singleInstance="true" patch:source="Sitecore.CES.GeoIp.config"/>
<!--
  IP RANGES LOADER
          Loads an IP ranges of IP addresses that should be filtered to prevent unnecessary requests to the Geo IP services.
    
-->
<IpRangesLoader type="Sitecore.CES.GeoIp.IpRangesLoader, Sitecore.CES.GeoIp" singleInstance="true" patch:source="Sitecore.CES.GeoIp.config">
<param name="ipRangesConnector" ref="IpRangesConnector"/>
<param name="localIpRangesLoaderFactory" ref="LocalFileBasedIpRangesLoaderFactory"/>
</IpRangesLoader>
<!--
 IP FILTER
         Filters IP addresses to prevent unnecessary requests to the Geo IP services.
    
-->
<IpFilter type="Sitecore.CES.GeoIp.IpFiltering.IpFilter, Sitecore.Ces.GeoIp.IpFiltering" singleInstance="true" patch:source="Sitecore.CES.GeoIp.config">
<param ref="IpRangesLoader" neme="ipRangesLoader"/>
</IpFilter>
<!--

          Configures the lookup manager to utilize this implementation of a lookup provider.
          This implementation gets the geo information for the specified IP from Sitecore IP Geolocation service.
    
-->
<lookupManager defaultProvider="sitecoreCloudServiceProvider" patch:source="Sitecore.CES.GeoIp.config">
<providers>
<add name="sitecoreCloudServiceProvider" type="Sitecore.CES.GeoIp.SitecoreProvider, Sitecore.CES.GeoIp">
<param name="geoIpConnector" ref="GeoIpConnector"/>
<param name="ipFilter" ref="IpFilter"/>
</add>
</providers>
</lookupManager>
<cryptographyManager defaultProvider="rsa" patch:source="Sitecore.ItemWebApi.config">
<providers>
<clear/>
<add name="rsa" type="Sitecore.ItemWebApi.Security.Cryptography.RSAProvider, Sitecore.ItemWebApi"/>
</providers>
</cryptographyManager>
<itemWebApi type="Sitecore.ItemWebApi.Configuration.ItemWebApiConfiguration, Sitecore.ItemWebApi" singleInstance="true" patch:source="Sitecore.ItemWebApi.config">
<actions hint="list:AddAction">
<action id="authenticate" type="Sitecore.ItemWebApi.Actions.AuthenticateAction, Sitecore.ItemWebApi">
<param desc="name">$(id)</param>
</action>
<action id="getpublickey" type="Sitecore.ItemWebApi.Actions.GetPublicKeyAction, Sitecore.ItemWebApi">
<param desc="name">$(id)</param>
</action>
<action id="getrenderinghtml" type="Sitecore.ItemWebApi.Actions.GetRenderingHtmlAction, Sitecore.ItemWebApi">
<param desc="name">$(id)</param>
</action>
<action id="getsignedmediaurl" type="Sitecore.ItemWebApi.Actions.GetSignedMediaUrlAction, Sitecore.ItemWebApi">
<param desc="name">$(id)</param>
</action>
</actions>
</itemWebApi>
<!--
 IDENTITY PROCESSING PATH PREFIX variable
         Specifies the path prefix that should only be processed by OWIN middlewares.
         Paths that start with this prefix will not be handled by "httpRequestBegin" pipeline.
    
-->
<sc.variable name="identityProcessingPathPrefix" value="/identity/" patch:source="Sitecore.Owin.Authentication.config"/>
<!--
 LOGIN PATH variable
         Specifies the login path prefix for federated authentication. It should be used in the "site" nodes in the "loginPage" attribute.
         The full login path must have this structure:
         $(loginPath)site_name/identity_provider
         or
         $(loginPath)site_name/identity_provider/inner_identity_provider,
         The site_name must have the "name" attribute value of the "site" node where the login path is set.
         The "identity_provider" must have the "id" attribute value of the configured identity provider that you want to use.
         The "inner_identity_provider" must be equal to the name or AuthenticationScheme of the underlying identity provider in the "identity_provider".
         
         Note: The "inner_identity_provider" value is sent to the "identity_provider" as an acr_value - idp:inner_identity_provider. Thus, identity_provider have to support acr_value.
         
         Examples:
             <sites>
                 <site name="shell" set:loginPage="$(loginPath)shell/IdentityServer"/>
                 <site name="admin" set:loginPage="$(loginPath)admin/IdentityServer/IdS4-AzureAd"/>
             </sites> 
-->
<sc.variable name="loginPath" value="/identity/login/" patch:source="Sitecore.Owin.Authentication.config"/>
<federatedAuthentication type="Sitecore.Owin.Authentication.Configuration.FederatedAuthenticationConfiguration, Sitecore.Owin.Authentication" patch:source="Sitecore.Owin.Authentication.config">
<identityProvidersPerSites hint="list:AddIdentityProvidersPerSites">
<!--  Defines a list of providers assigned to all sites.  -->
<mapEntry name="all sites" type="Sitecore.Owin.Authentication.Collections.IdentityProvidersPerSitesMapEntry, Sitecore.Owin.Authentication">
<!--
 The list of site names for which the specified identity providers will work.
               Note: the fedauth.siteNameExpander pipeline processes each site name, which gives the ability to use expressions like
               "regexp:modules_.*" or "database:web" or "domain:extranet" 
-->
<sites hint="list">
<site>regexp:.*</site>
</sites>
<identityProviders hint="list:AddIdentityProvider"/>
<externalUserBuilder type="Sitecore.Owin.Authentication.Services.DefaultExternalUserBuilder, Sitecore.Owin.Authentication">
<IsPersistentUser>true</IsPersistentUser>
</externalUserBuilder>
</mapEntry>
<mapEntry name="sites with the web database" type="Sitecore.Owin.Authentication.Collections.IdentityProvidersPerSitesMapEntry, Sitecore.Owin.Authentication">
<sites hint="list">
<site>database:web</site>
</sites>
<identityProviders hint="list:AddIdentityProvider"/>
</mapEntry>
<mapEntry name="sites with the core and unspecified database" type="Sitecore.Owin.Authentication.Collections.IdentityProvidersPerSitesMapEntry, Sitecore.Owin.Authentication" patch:source="Sitecore.Owin.Authentication.IdentityServer.config">
<sites hint="list">
<site>database:core</site>
<site>database:</site>
</sites>
<identityProviders hint="list:AddIdentityProvider" patch:source="Sitecore.Owin.Authentication.IdentityServer.config">
<identityProvider id="SitecoreIdentityServer" ref="federatedAuthentication/identityProviders/identityProvider[@id='SitecoreIdentityServer']" patch:source="Sitecore.Owin.Authentication.IdentityServer.config"/>
</identityProviders>
</mapEntry>
<mapEntry name="sites with extranet domain" type="Sitecore.Owin.Authentication.Collections.IdentityProvidersPerSitesMapEntry, Sitecore.Owin.Authentication">
<sites hint="list">
<site>domain:extranet</site>
</sites>
<identityProviders hint="list:AddIdentityProvider"/>
</mapEntry>
<mapEntry name="admin site" type="Sitecore.Owin.Authentication.Collections.IdentityProvidersPerSitesMapEntry, Sitecore.Owin.Authentication">
<sites hint="list">
<site>admin</site>
</sites>
<identityProviders hint="list:AddIdentityProvider"/>
</mapEntry>
</identityProvidersPerSites>
<identityProviders hint="list:AddIdentityProvider">
<identityProvider id="SitecoreIdentityServer" type="Sitecore.Owin.Authentication.IdentityServer.IdentityServerProvider, Sitecore.Owin.Authentication.IdentityServer" resolve="true" patch:source="Sitecore.Owin.Authentication.IdentityServer.Disabler.config">
<caption>Go to login</caption>
<domain>sitecore</domain>
<enabled>false</enabled>
<triggerExternalSignOut>true</triggerExternalSignOut>
<transformations hint="list:AddTransformation">
<transformation name="apply additional claims" type="Sitecore.Owin.Authentication.IdentityServer.Transformations.ApplyAdditionalClaims, Sitecore.Owin.Authentication.IdentityServer" resolve="true"/>
<transformation name="name to long name" type="Sitecore.Owin.Authentication.Services.DefaultTransformation, Sitecore.Owin.Authentication">
<sources hint="raw:AddSource">
<claim name="name"/>
</sources>
<targets hint="raw:AddTarget">
<claim name="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"/>
</targets>
<keepSource>true</keepSource>
</transformation>
<transformation name="role to long role" type="Sitecore.Owin.Authentication.Services.DefaultTransformation, Sitecore.Owin.Authentication">
<sources hint="raw:AddSource">
<claim name="role"/>
</sources>
<targets hint="raw:AddTarget">
<claim name="http://schemas.microsoft.com/ws/2008/06/identity/claims/role"/>
</targets>
<keepSource>false</keepSource>
</transformation>
<transformation name="set ShadowUser" type="Sitecore.Owin.Authentication.Services.DefaultTransformation, Sitecore.Owin.Authentication">
<sources hint="raw:AddSource">
<claim name="http://schemas.microsoft.com/identity/claims/identityprovider" value="local"/>
</sources>
<targets hint="raw:AddTarget">
<claim name="http://www.sitecore.net/identity/claims/shadowuser" value="true"/>
</targets>
<keepSource>true</keepSource>
</transformation>
<!--
 owin.cookieAuthentication.signIn pipeline uses http://www.sitecore.net/identity/claims/cookieExp claim to override authentication cookie expiration.
                 'exp' claim value can be configured on Sitecore Identity server on the client configuration by IdentityTokenLifetimeInSeconds setting.
                 Note: Claim value is Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z 
-->
<transformation name="use exp claim for authentication cookie expiration" type="Sitecore.Owin.Authentication.Services.DefaultTransformation, Sitecore.Owin.Authentication">
<sources hint="raw:AddSource">
<claim name="exp"/>
</sources>
<targets hint="raw:AddTarget">
<claim name="http://www.sitecore.net/identity/claims/cookieExp"/>
</targets>
<keepSource>true</keepSource>
</transformation>
<transformation name="remove local role claims" type="Sitecore.Owin.Authentication.IdentityServer.Transformations.RemoveLocalRoles, Sitecore.Owin.Authentication.IdentityServer"/>
<transformation name="adjust NameIdentifier claim" type="Sitecore.Owin.Authentication.IdentityServer.Transformations.AdjustNameIdentifierClaim, Sitecore.Owin.Authentication.IdentityServer" resolve="true"/>
</transformations>
</identityProvider>
</identityProviders>
<!--   List of all the shared transformations -->
<sharedTransformations hint="list:AddSharedClaimsTransformation">
<!--  Adds an 'idp claim' type to the identity.  -->
<transformation name="set idp claim" type="Sitecore.Owin.Authentication.Services.SetIdpClaimTransform, Sitecore.Owin.Authentication"/>
<!--
 Removes the specified claims from the identity to minimize cookie size. 
-->
<transformation name="sanitize claims" type="Sitecore.Owin.Authentication.Services.RemoveClaims, Sitecore.Owin.Authentication">
<claimTypes hint="list"/>
</transformation>
<!--
 If external authentication is configured with "TokenValidationParameters = {SaveSigninToken = true}", this saves the value from "claimsIdentity.BootstrapContext" to the "id_token" claim. 
-->
<transformation name="set id_token claim" type="Sitecore.Owin.Authentication.Services.SaveIdTokenInClaim, Sitecore.Owin.Authentication"/>
</sharedTransformations>
<propertyInitializer type="Sitecore.Owin.Authentication.Services.PropertyInitializer, Sitecore.Owin.Authentication">
<maps hint="list">
<map name="set IsAdministrator" type="Sitecore.Owin.Authentication.Services.DefaultClaimToPropertyMapper, Sitecore.Owin.Authentication" patch:source="Sitecore.Owin.Authentication.IdentityServer.config">
<data hint="raw:AddData">
<source name="http://www.sitecore.net/identity/claims/isAdmin" value="true"/>
<target name="IsAdministrator" value="true"/>
</data>
</map>
</maps>
</propertyInitializer>
</federatedAuthentication>
<sc.variable name="identityServerAuthority" value="https://127.0.0.1" patch:source="Sitecore.Owin.Authentication.IdentityServer.config"/>
<xconnect patch:source="Sitecore.XConnect.Client.config">
<runtime type="Sitecore.XConnect.Client.Configuration.RuntimeModelConfiguration,Sitecore.XConnect.Client.Configuration" patch:source="Sitecore.EmailExperience.XConnect.config">
<schemas hint="list:AddModelConfiguration" patch:source="Sitecore.EmailExperience.XConnect.config">
<schema name="collectionmodel" type="Sitecore.XConnect.Client.Configuration.StaticModelConfiguration,Sitecore.XConnect.Client.Configuration">
<param desc="modeltype">
Sitecore.XConnect.Collection.Model.CollectionModel, Sitecore.XConnect.Collection.Model
</param>
</schema>
<schema name="customDataModel" type="Sitecore.XConnect.Client.Configuration.StaticModelConfiguration,Sitecore.XConnect.Client.Configuration" patch:source="Sitecore.ContentTesting.XConnect.Client.config">
<param desc="modeltype">
Sitecore.ContentTesting.Model.xConnect.Models.CustomDataModel, Sitecore.ContentTesting.Model.xConnect
</param>
</schema>
<schema name="exmmodel" type="Sitecore.XConnect.Client.Configuration.StaticModelConfiguration,Sitecore.XConnect.Client.Configuration" patch:source="Sitecore.EmailExperience.XConnect.config">
<param desc="modeltype">
Sitecore.EmailCampaign.Model.XConnect.EmailCollectionModel, Sitecore.EmailCampaign.Model
</param>
</schema>
</schemas>
</runtime>
<!--
 Collection and Search XConnect Client configuration for Standalone or ContentManagement role 
-->
<clientconfig type="Sitecore.XConnect.Client.Configuration.SitecoreXConnectClientConfiguration,Sitecore.XConnect.Client.Configuration" singleInstance="true">
<param ref="xconnect/runtime" desc="clientModel"/>
<param desc="collectionConnectionStringName">xconnect.collection</param>
<param desc="searchConnectionStringName">xconnect.collection</param>
<param desc="configurationConnectionStringName">xconnect.collection</param>
</clientconfig>
</xconnect>
<xdb.marketingAutomation.client patch:source="Sitecore.Xdb.MarketingAutomation.OperationsClient.config">
<automationOperationsClient type="Sitecore.Xdb.MarketingAutomation.OperationsClient.AutomationOperationsClient, Sitecore.Xdb.MarketingAutomation.OperationsClient">
<param name="clientModifiers" type="Sitecore.Xdb.MarketingAutomation.OperationsClient.Configuration.ConfigurableCollection`1[[Sitecore.Xdb.Common.Web.IHttpClientModifier, Sitecore.Xdb.Common.Web]], Sitecore.Xdb.MarketingAutomation.OperationsClient.Configuration">
<httpClientModifiers hint="raw:AddConfigurableItem">
<!--
 Sets timeout for all requests performed by the automation operations client 
-->
<httpClientModifier type="Sitecore.Xdb.Common.Web.TimeoutHttpClientModifier, Sitecore.Xdb.Common.Web">
<!--
 The timespan to wait before the request times out. Default value: 100 seconds. 
-->
<param name="timeout">00:01:40</param>
</httpClientModifier>
</httpClientModifiers>
</param>
<param name="httpClientHandlerModifiers" type="Sitecore.Xdb.MarketingAutomation.OperationsClient.Configuration.ConfigurableCollection`1[[Sitecore.Xdb.Common.Web.IHttpClientHandlerModifier, Sitecore.Xdb.Common.Web]], Sitecore.Xdb.MarketingAutomation.OperationsClient.Configuration">
<httpClientHandlerModifiers hint="raw:AddConfigurableItem">
<!--
 Sets the client certificate required to authenticate to the xConnect server 
-->
<clientCertificate type="Sitecore.Xdb.Common.Web.CertificateHttpClientHandlerModifier, Sitecore.Xdb.Common.Web">
<!--
<param name="certificateConnectionStringName">xdb.marketingautomation.operations.client.certificate</param>
-->
<param name="certificateConnectionString" connectionStringName="xdb.referencedata.client.certificate"/>
<!--
<param name="allowInvalidClientCertificatesAppSettingKey">AllowInvalidClientCertificates</param>
-->
<param name="allowInvalidClientCertificates">true</param>
</clientCertificate>
</httpClientHandlerModifiers>
</param>
<param name="logger" type="Microsoft.Extensions.Logging.ILogger`1[[Sitecore.Xdb.MarketingAutomation.OperationsClient.AutomationOperationsClient, Sitecore.Xdb.MarketingAutomation.OperationsClient]], Microsoft.Extensions.Logging.Abstractions" resolve="true"/>
<param ref="xconnect/runtime" desc="clientModel"/>
</automationOperationsClient>
<automationReportingClient type="Sitecore.Xdb.MarketingAutomation.ReportingClient.AutomationReportingClient, Sitecore.Xdb.MarketingAutomation.ReportingClient" patch:source="Sitecore.Xdb.MarketingAutomation.ReportingClient.config">
<param name="clientModifiers" type="Sitecore.Xdb.MarketingAutomation.ReportingClient.Configuration.ConfigurableCollection`1[[Sitecore.Xdb.Common.Web.IHttpClientModifier, Sitecore.Xdb.Common.Web]], Sitecore.Xdb.MarketingAutomation.ReportingClient.Configuration">
<httpClientModifiers hint="raw:AddConfigurableItem">
<!--
 Sets timeout for all requests performed by the automation reporting client 
-->
<httpClientModifier type="Sitecore.Xdb.Common.Web.TimeoutHttpClientModifier, Sitecore.Xdb.Common.Web">
<!--
 The timespan to wait before the request times out. Default value: 100 seconds. 
-->
<param name="timeout">00:01:40</param>
</httpClientModifier>
</httpClientModifiers>
</param>
<param name="httpClientHandlerModifiers" type="Sitecore.Xdb.MarketingAutomation.ReportingClient.Configuration.ConfigurableCollection`1[[Sitecore.Xdb.Common.Web.IHttpClientHandlerModifier, Sitecore.Xdb.Common.Web]], Sitecore.Xdb.MarketingAutomation.ReportingClient.Configuration">
<httpClientHandlerModifiers hint="raw:AddConfigurableItem">
<!--
 Sets the client certificate required to authenticate to the xConnect server 
-->
<clientCertificate type="Sitecore.Xdb.Common.Web.CertificateHttpClientHandlerModifier, Sitecore.Xdb.Common.Web">
<!--
<param name="certificateConnectionStringName">xdb.marketingautomation.reporting.client.certificate</param>
-->
<param name="certificateConnectionString" connectionStringName="xdb.marketingautomation.reporting.client.certificate"/>
<!--
<param name="allowInvalidClientCertificatesAppSettingKey">AllowInvalidClientCertificates</param>
-->
<param name="allowInvalidClientCertificates">true</param>
</clientCertificate>
</httpClientHandlerModifiers>
</param>
<param name="logger" type="Microsoft.Extensions.Logging.ILogger`1[[Sitecore.Xdb.MarketingAutomation.ReportingClient.AutomationReportingClient, Sitecore.Xdb.MarketingAutomation.ReportingClient]], Microsoft.Extensions.Logging.Abstractions" resolve="true"/>
</automationReportingClient>
</xdb.marketingAutomation.client>
<xdb.referenceData.client patch:source="Sitecore.Xdb.ReferenceData.Client.config">
<!--
 A modifier which sets timeout for all requests performed by the reference data client 
-->
<timeoutHttpClientModifier type="Sitecore.Xdb.Common.Web.TimeoutHttpClientModifier, Sitecore.Xdb.Common.Web">
<!--
 The timespan to wait before the request times out. Default value: 100 seconds. 
-->
<param name="timeout">00:01:40</param>
</timeoutHttpClientModifier>
<!--
 A modifier which sets the client certificate required to authenticate to the xConnect server 
-->
<clientCertificateModifier type="Sitecore.Xdb.Common.Web.CertificateHttpClientHandlerModifier, Sitecore.Xdb.Common.Web">
<param name="certificateConnectionString" connectionStringName="xdb.referencedata.client.certificate"/>
<param name="allowInvalidClientCertificates" type="Sitecore.Xdb.ReferenceData.Client.Xmgmt.AppSettingsResolver, Sitecore.Xdb.ReferenceData.Client.Xmgmt" factoryMethod="Resolve" arg0="AllowInvalidClientCertificates"/>
</clientCertificateModifier>
<!--  Read/Write Reference Data Client  -->
<referenceDataClient type="Sitecore.Xdb.ReferenceData.Client.ReferenceDataHttpClient, Sitecore.Xdb.ReferenceData.Client">
<param name="definitionConverter" type="Sitecore.Xdb.ReferenceData.Core.Converter.DefinitionEnvelopeJsonConverter, Sitecore.Xdb.ReferenceData.Core"/>
<param name="serviceAddress" connectionStringName="xdb.referencedata.client"/>
<param name="clientModifiers" type="Sitecore.Xdb.ReferenceData.Client.Xmgmt.ConfigurableCollection`1[[Sitecore.Xdb.Common.Web.IHttpClientModifier, Sitecore.Xdb.Common.Web]], Sitecore.Xdb.ReferenceData.Client.Xmgmt">
<httpClientModifiers hint="raw:AddConfigurableItem">
<!--
 Sets timeout for all requests performed by the reference data client 
-->
<httpClientModifier ref="xdb.referenceData.client/timeoutHttpClientModifier"/>
</httpClientModifiers>
</param>
<param name="httpClientHandlerModifiers" type="Sitecore.Xdb.ReferenceData.Client.Xmgmt.ConfigurableCollection`1[[Sitecore.Xdb.Common.Web.IHttpClientHandlerModifier, Sitecore.Xdb.Common.Web]], Sitecore.Xdb.ReferenceData.Client.Xmgmt">
<httpClientHandlerModifiers hint="raw:AddConfigurableItem">
<!--
 Sets the client certificate required to authenticate to the xConnect server 
-->
<clientCertificate ref="xdb.referenceData.client/clientCertificateModifier"/>
</httpClientHandlerModifiers>
</param>
<param name="logger" type="Microsoft.Extensions.Logging.ILogger`1[[Sitecore.Xdb.ReferenceData.Client.ReferenceDataHttpClient, Sitecore.Xdb.ReferenceData.Client]], Microsoft.Extensions.Logging.Abstractions" resolve="true"/>
</referenceDataClient>
<!--  Read only Reference Data Client  -->
<readOnlyReferenceDataClient type="Sitecore.Xdb.ReferenceData.Client.ReadOnlyReferenceDataHttpClient, Sitecore.Xdb.ReferenceData.Client">
<param name="definitionConverter" type="Sitecore.Xdb.ReferenceData.Core.Converter.DefinitionEnvelopeJsonConverter, Sitecore.Xdb.ReferenceData.Core"/>
<param name="serviceAddress" connectionStringName="xdb.referencedata.client"/>
<param name="clientModifiers" type="Sitecore.Xdb.ReferenceData.Client.Xmgmt.ConfigurableCollection`1[[Sitecore.Xdb.Common.Web.IHttpClientModifier, Sitecore.Xdb.Common.Web]], Sitecore.Xdb.ReferenceData.Client.Xmgmt">
<httpClientModifiers hint="raw:AddConfigurableItem">
<!--
 Sets timeout for all requests performed by the reference data client 
-->
<httpClientModifier ref="xdb.referenceData.client/timeoutHttpClientModifier"/>
</httpClientModifiers>
</param>
<param name="httpClientHandlerModifiers" type="Sitecore.Xdb.ReferenceData.Client.Xmgmt.ConfigurableCollection`1[[Sitecore.Xdb.Common.Web.IHttpClientHandlerModifier, Sitecore.Xdb.Common.Web]], Sitecore.Xdb.ReferenceData.Client.Xmgmt">
<httpClientHandlerModifiers hint="raw:AddConfigurableItem">
<!--
 Sets the client certificate required to authenticate to the xConnect server 
-->
<clientCertificate ref="xdb.referenceData.client/clientCertificateModifier"/>
</httpClientHandlerModifiers>
</param>
<param name="logger" type="Microsoft.Extensions.Logging.ILogger`1[[Sitecore.Xdb.ReferenceData.Client.ReadOnlyReferenceDataHttpClient, Sitecore.Xdb.ReferenceData.Client]], Microsoft.Extensions.Logging.Abstractions" resolve="true"/>
</readOnlyReferenceDataClient>
<!--
 Cache implementation which stores entries in memory. 
-->
<definitionCache type="Sitecore.Xdb.ReferenceData.Client.Cache.MemoryDefinitionCache, Sitecore.Xdb.ReferenceData.Client" patch:source="Sitecore.Xdb.ReferenceData.ClientCache.config">
<!--
 entryLifetime: The lifetime of entries in the cache, given as a TimeSpan 
-->
<param name="entryLifetime">00:00:20</param>
</definitionCache>
<!--
 A decorator which caches results of calls to Read/Write Reference Data Client 
-->
<referenceDataClientCachingDecorator type="Sitecore.Xdb.ReferenceData.Client.ReferenceDataHttpClientCachingDecorator, Sitecore.Xdb.ReferenceData.Client" patch:source="Sitecore.Xdb.ReferenceData.ClientCache.config">
<param name="innerReferenceDataClient" ref="xdb.referenceData.client/referenceDataClient"/>
<param name="definitionCache" type="Sitecore.Xdb.ReferenceData.Client.Cache.IDefinitionCache, Sitecore.Xdb.ReferenceData.Client" resolve="true"/>
</referenceDataClientCachingDecorator>
<!--
 A decorator which caches results of calls to Read only Reference Data Client 
-->
<readOnlyReferenceDataClientCachingDecorator type="Sitecore.Xdb.ReferenceData.Client.ReadOnlyReferenceDataHttpClientCachingDecorator, Sitecore.Xdb.ReferenceData.Client" patch:source="Sitecore.Xdb.ReferenceData.ClientCache.config">
<param name="innerReadOnlyReferenceDataClient" ref="xdb.referenceData.client/readOnlyReferenceDataClient"/>
<param name="definitionCache" type="Sitecore.Xdb.ReferenceData.Client.Cache.IDefinitionCache, Sitecore.Xdb.ReferenceData.Client" resolve="true"/>
</readOnlyReferenceDataClientCachingDecorator>
</xdb.referenceData.client>
<!--  INDEXES  -->
<marketingDefinitionSearch patch:source="Sitecore.Marketing.Solr.IndexConfiguration.config">
<indexConfigurations>
<marketingDefinitionSolrIndexConfiguration ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration">
<fieldMap ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration/fieldMap">
<fieldNames hint="raw:AddFieldByFieldName">
<field fieldName="automationstateenrollmentlist" returnType="stringArray" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<field fieldName="culture" returnType="text" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<field fieldName="classifications" returnType="string" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<field fieldName="startdate" nullValue="0001-01-01T00:00:00Z" emptyString="0001-01-01T00:00:00Z" returnType="string" format="yyyy-MM-dd'T'HH:mm:ss'Z'"/>
<field fieldName="enddate" nullValue="9999-12-31T23:59:59Z" emptyString="9999-12-31T23:59:59Z" returnType="string" format="yyyy-MM-dd'T'HH:mm:ss'Z'"/>
<field fieldName="owner" returnType="string" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<field fieldName="type" returnType="string" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<field fieldName="includedlists" returnType="stringCollection" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<field fieldName="excludedlists" returnType="stringCollection" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<field fieldName="rules" returnType="stringCollection" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<field fieldName="segmentdefinitionids" returnType="stringCollection" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
<field fieldName="profiletype" returnType="string" settingType="Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"/>
</fieldNames>
</fieldMap>
<documentOptions ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration/documentOptions">
<fields hint="raw:AddComputedIndexField">
<field fieldName="createddate" returnType="datetime">
Sitecore.ContentSearch.ComputedFields.CreatedDate,Sitecore.ContentSearch
</field>
<field fieldName="lastmodifieddate" returnType="datetime">
Sitecore.ContentSearch.ComputedFields.UpdatedDate,Sitecore.ContentSearch
</field>
<field fieldName="id" returnType="id">
Sitecore.Marketing.Search.ComputedFields.IdIndexField, Sitecore.Marketing.Search
</field>
<field fieldName="createdby" fieldId="{5DD74568-4D4B-44C1-B513-0AF5F4CDA34F}" returnType="string">
Sitecore.Marketing.Search.ComputedFields.MappedIndexField, Sitecore.Marketing.Search
</field>
<field fieldName="lastmodifiedby" fieldId="{BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}" returnType="string">
Sitecore.Marketing.Search.ComputedFields.MappedIndexField, Sitecore.Marketing.Search
</field>
<field fieldName="campaigngroupuri" fieldId="{FFAEA943-DF50-4F11-94ED-4690418A7D96}" returnType="string">
Sitecore.Marketing.Search.ComputedFields.TaxonUriIndexField, Sitecore.Marketing.Search
</field>
<field fieldName="channeluri" fieldId="{4C1BF83B-06E2-4B07-AD16-0E65D95E356E}" returnType="string">
Sitecore.Marketing.Search.ComputedFields.TaxonUriIndexField, Sitecore.Marketing.Search
</field>
<field fieldName="marketingasseturi" fieldId="{3C0EEC17-C74D-4921-9577-D41AEA11B6DB}" returnType="string">
Sitecore.Marketing.Search.ComputedFields.TaxonUriIndexField, Sitecore.Marketing.Search
</field>
<field fieldName="classifications" returnType="string">
Sitecore.Marketing.Search.ComputedFields.TaxonomicClassificationIndexField, Sitecore.Marketing.Search
</field>
<field fieldName="sequence" fieldId="{01E123EC-6642-4AAE-AEE8-985D49ED1647}" returnType="stringCollection" stepStringConverterType="marketingDefinitions/funnel/stepStringConverter" stepTypeResolverType="marketingDefinitions/funnel/funnelStepTypeResolver">
Sitecore.Marketing.Search.ComputedFields.SequenceMappedIndexField, Sitecore.Marketing.Search
</field>
<field fieldName="isactive" returnType="bool">
Sitecore.Marketing.Search.ComputedFields.DefinitionStatusIndexField, Sitecore.Marketing.Search
</field>
<field fieldName="version">
Sitecore.ContentSearch.ComputedFields.StoreVersionTermVector,Sitecore.ContentSearch
</field>
<field fieldName="urllink">
Sitecore.ContentSearch.ComputedFields.UrlLink,Sitecore.ContentSearch
</field>
<field fieldName="isbucket_text">
Sitecore.ContentSearch.ComputedFields.IsBucket,Sitecore.ContentSearch
</field>
<field fieldName="alias">
Sitecore.Marketing.Search.ComputedFields.AliasIndexField, Sitecore.Marketing.Search
</field>
<field description="profile type" fieldName="profiletype" fieldId="{9FB30799-29EF-46AF-910D-188BD16314B1}" allowStandardValue="true">
Sitecore.Marketing.Search.ComputedFields.MappedIndexField, Sitecore.Marketing.Search
</field>
<field description="profile name" fieldName="name" fieldId="{5D9FE5D7-4C45-4A98-A1F5-4796A6DA428B}">
Sitecore.Marketing.Search.ComputedFields.MappedIndexField, Sitecore.Marketing.Search
</field>
<field description="campaign name" fieldName="name" fieldId="{0F47D1B4-BCB4-4F7F-9065-6ECB46AAB9A1}">
Sitecore.Marketing.Search.ComputedFields.MappedIndexField, Sitecore.Marketing.Search
</field>
<field description="funnel name" fieldName="name" fieldId="{27E43ED9-5E4E-4E8D-9F35-4FB443F8FB92}">
Sitecore.Marketing.Search.ComputedFields.MappedIndexField, Sitecore.Marketing.Search
</field>
<field description="event name" fieldName="name" fieldId="{AC6BA888-4213-43BD-B787-D8DA2B6B881F}">
Sitecore.Marketing.Search.ComputedFields.MappedIndexField, Sitecore.Marketing.Search
</field>
<field description="automation plan name" fieldName="name" fieldId="{365F1971-B028-4065-BC11-CE1F471452AF}">
Sitecore.Marketing.Search.ComputedFields.MappedIndexField, Sitecore.Marketing.Search
</field>
<field description="profile description" fieldName="description" fieldId="{E703C891-B96F-449C-A486-A5D3BABFD123}">
Sitecore.Marketing.Search.ComputedFields.MappedIndexField, Sitecore.Marketing.Search
</field>
<field description="event description" fieldName="description" fieldId="{797466F5-763B-4299-B6AD-E4192BF21222}">
Sitecore.Marketing.Search.ComputedFields.MappedIndexField, Sitecore.Marketing.Search
</field>
<field description="funnel description" fieldName="description" fieldId="{B282AC2D-C50A-44A6-8D78-F98BF5CF9BD6}">
Sitecore.Marketing.Search.ComputedFields.MappedIndexField, Sitecore.Marketing.Search
</field>
<field description="marketing definition description" fieldName="description" fieldId="{E259E500-B38E-41FE-82DB-8B604BCF9E75}">
Sitecore.Marketing.Search.ComputedFields.MappedIndexField, Sitecore.Marketing.Search
</field>
</fields>
<exclude hint="list:AddExcludedTemplate">
<FolderTemplateId>{A87A00B1-E6DB-45AB-8B54-636FEC3B5523}</FolderTemplateId>
<CampaignCategoryTemplateId>{56682FE6-9679-4B69-9589-60C99AA08BEC}</CampaignCategoryTemplateId>
</exclude>
<exclude hint="list:AddExcludedField">
<Sequence>{01E123EC-6642-4AAE-AEE8-985D49ED1647}</Sequence>
</exclude>
</documentOptions>
<indexDocumentPropertyMapper type="Sitecore.ContentSearch.SolrProvider.Mapping.SolrDocumentPropertyMapper, Sitecore.ContentSearch.SolrProvider">
<objectFactory type="Sitecore.ContentSearch.DefaultDocumentMapperObjectFactory, Sitecore.ContentSearch">
<rules hint="list:AddRule">
<rule type="Sitecore.ContentSearch.DefaultDocumentMapperFactoryRule, Sitecore.ContentSearch" creationType="Sitecore.Marketing.Search.IndexedCampaign, Sitecore.Marketing.Search" baseType="Sitecore.Marketing.Definitions.ICampaignActivityDefinition, Sitecore.Marketing">
<param desc="creationType">$(creationType)</param>
<param desc="baseType">$(baseType)</param>
</rule>
<rule type="Sitecore.ContentSearch.DefaultDocumentMapperFactoryRule, Sitecore.ContentSearch" creationType="Sitecore.Marketing.Search.IndexedFunnel, Sitecore.Marketing.Search" baseType="Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing">
<param desc="creationType">$(creationType)</param>
<param desc="baseType">$(baseType)</param>
</rule>
<rule type="Sitecore.ContentSearch.DefaultDocumentMapperFactoryRule, Sitecore.ContentSearch" creationType="Sitecore.Marketing.Search.IndexedAutomationPlan, Sitecore.Marketing.Search" baseType="Sitecore.Marketing.Definitions.AutomationPlans.Model.IAutomationPlanDefinition, Sitecore.Marketing">
<param desc="creationType">$(creationType)</param>
<param desc="baseType">$(baseType)</param>
</rule>
<rule type="Sitecore.ContentSearch.DefaultDocumentMapperFactoryRule, Sitecore.ContentSearch" creationType="Sitecore.Marketing.Search.IndexedEvent, Sitecore.Marketing.Search" baseType="Sitecore.Marketing.Definitions.Events.IEventDefinition, Sitecore.Marketing">
<param desc="creationType">$(creationType)</param>
<param desc="baseType">$(baseType)</param>
</rule>
<rule type="Sitecore.ContentSearch.DefaultDocumentMapperFactoryRule, Sitecore.ContentSearch" creationType="Sitecore.Marketing.Search.IndexedPageEvent, Sitecore.Marketing.Search" baseType="Sitecore.Marketing.Definitions.PageEvents.IPageEventDefinition, Sitecore.Marketing">
<param desc="creationType">$(creationType)</param>
<param desc="baseType">$(baseType)</param>
</rule>
<rule type="Sitecore.ContentSearch.DefaultDocumentMapperFactoryRule, Sitecore.ContentSearch" creationType="Sitecore.Marketing.Search.IndexedContactList, Sitecore.Marketing.Search" baseType="Sitecore.Marketing.Definitions.ContactLists.IContactListDefinition, Sitecore.Marketing">
<param desc="creationType">$(creationType)</param>
<param desc="baseType">$(baseType)</param>
</rule>
<rule type="Sitecore.ContentSearch.DefaultDocumentMapperFactoryRule, Sitecore.ContentSearch" creationType="Sitecore.Marketing.Search.IndexedProfile, Sitecore.Marketing.Search" baseType="Sitecore.Marketing.Definitions.Profiles.IProfileDefinition, Sitecore.Marketing">
<param desc="creationType">$(creationType)</param>
<param desc="baseType">$(baseType)</param>
</rule>
<rule type="Sitecore.ContentSearch.DefaultDocumentMapperFactoryRule, Sitecore.ContentSearch" creationType="Sitecore.Marketing.Search.IndexedSegment, Sitecore.Marketing.Search" baseType="Sitecore.Marketing.Definitions.Segments.ISegmentDefinition, Sitecore.Marketing">
<param desc="creationType">$(creationType)</param>
<param desc="baseType">$(baseType)</param>
</rule>
<rule type="Sitecore.ContentSearch.DefaultDocumentMapperFactoryRule, Sitecore.ContentSearch" creationType="Sitecore.Marketing.Search.IndexedDefinitions.IndexedSubscription, Sitecore.Marketing.Search" baseType="Sitecore.Marketing.Definitions.Subscriptions.Model.ISubscriptionDefinition, Sitecore.Marketing">
<param desc="creationType">$(creationType)</param>
<param desc="baseType">$(baseType)</param>
</rule>
</rules>
</objectFactory>
</indexDocumentPropertyMapper>
<indexFieldStorageValueFormatter ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration/indexFieldStorageValueFormatter">
<converters hint="raw:AddConverter">
<converter typeConverter="Sitecore.ContentSearch.Converters.IndexFieldUTCDateTimeValueConverter, Sitecore.ContentSearch" handlesType="System.Nullable`1[[System.DateTime]]"/>
<converter typeConverter="Sitecore.Marketing.Search.TypeConverters.IndexFieldTaxonUriConverter, Sitecore.Marketing.Search" handlesType="Sitecore.Marketing.Taxonomy.Model.TaxonUri, Sitecore.Marketing.Taxonomy"/>
<converter typeConverter="Sitecore.Marketing.Search.TypeConverters.IndexFieldTaxonomicClassificationTypeConverter, Sitecore.Marketing.Search" handlesType="Sitecore.Marketing.Definitions.TaxonomicClassification, Sitecore.Marketing"/>
<converter typeConverter="Sitecore.Marketing.Search.TypeConverters.IndexFieldSequenceStepConverter, Sitecore.Marketing.Search" handlesType="Sitecore.Marketing.Definitions.Funnels.Step, Sitecore.Marketing">
<param type="Sitecore.Marketing.Search.TypeConverters.StepStringConverter, Sitecore.Marketing.Search" desc="stepStringConverter"/>
</converter>
<converter typeConverter="Sitecore.Marketing.Search.TypeConverters.IndexFieldListTypeConverter, Sitecore.Marketing.Search" handlesType="Sitecore.Marketing.Definitions.ContactLists.ListType, Sitecore.Marketing"/>
<converter typeConverter="Sitecore.Marketing.Search.TypeConverters.IndexFieldSubscriptionTagConverter, Sitecore.Marketing.Search" handlesType="Sitecore.Marketing.Definitions.Subscriptions.SubscriptionTag, Sitecore.Marketing"/>
<converter typeConverter="Sitecore.Marketing.Search.TypeConverters.IndexFieldProfileTypesConverter, Sitecore.Marketing.Search" handlesType="Sitecore.Marketing.Definitions.Profiles.ProfileTypes, Sitecore.Marketing"/>
</converters>
</indexFieldStorageValueFormatter>
</marketingDefinitionSolrIndexConfiguration>
</indexConfigurations>
</marketingDefinitionSearch>
<xdb.locators patch:source="Sitecore.Xdb.MarketingAutomation.Locators.config">
<activityDescriptorLocator type="Sitecore.Xdb.MarketingAutomation.Locators.Xmgmt.AutomationPlans.ItemActivityDescriptorLocator, Sitecore.Xdb.MarketingAutomation.Locators.Xmgmt">
<!--
 Name of the database to locate activity descriptors. 
-->
<param name="databaseName">master</param>
<!--
 The ID of the folder to locate activity descriptors. 
-->
<param name="activityTypeFolderId" type="System.Guid">
<param>{2DF0885C-7154-470D-B5CF-275B84B24248}</param>
</param>
<param name="logger" type="Microsoft.Extensions.Logging.ILogger`1[[Sitecore.Xdb.MarketingAutomation.Locators.Xmgmt.AutomationPlans.ItemActivityDescriptorLocator, Sitecore.Xdb.MarketingAutomation.Locators.Xmgmt]], Microsoft.Extensions.Logging.Abstractions" resolve="true"/>
</activityDescriptorLocator>
</xdb.locators>
<xdb.referenceData.service patch:source="Sitecore.Xdb.ReferenceData.Service.config">
<definitionCache type="Sitecore.Xdb.ReferenceData.Service.Cache.MemoryDefinitionCache, Sitecore.Xdb.ReferenceData.Service">
<!--
 entryLifetime: The lifetime of entries in the cache, given as a TimeSpan 
-->
<param name="entryLifetime">00:00:30</param>
</definitionCache>
</xdb.referenceData.service>
<xdb.referenceData.sql patch:source="Sitecore.Xdb.ReferenceData.SqlServer.config">
<sqlDataProvider type="Sitecore.Xdb.ReferenceData.SqlServer.SqlServerReferenceDataProvider, Sitecore.Xdb.ReferenceData.SqlServer">
<!--
 connectionStringOrName: The connection string or a name of the connection string used to connect to the SQL server. (default: xdb.referencedata) 
-->
<param name="connectionStringOrName">xdb.referencedata</param>
<param name="logger" type="Microsoft.Extensions.Logging.ILogger`1[[Sitecore.Xdb.ReferenceData.SqlServer.SqlServerReferenceDataProvider, Sitecore.Xdb.ReferenceData.SqlServer]], Microsoft.Extensions.Logging.Abstractions" resolve="true"/>
<param name="retryManager" type="Sitecore.Xdb.Sql.Common.IRetryManager, Sitecore.Xdb.Sql.Common" resolve="true"/>
</sqlDataProvider>
</xdb.referenceData.sql>
<maintenanceService type="Sitecore.Analytics.Core.MaintenanceAgent, Sitecore.Analytics.Core" patch:source="Sitecore.Analytics.Processing.Aggregation.Services.config">
<Services hint="list:RegisterService">
<rdbCleanUpPrimary ref="aggregation/reportingStorageProviders/primary" patch:source="Sitecore.Analytics.Processing.Aggregation.Services.config"/>
</Services>
</maintenanceService>
<coreServices type="Sitecore.Analytics.Core.Subsystem" singleInstance="true" patch:source="Sitecore.Analytics.config">
<BackgroundServices hint="list:Add">
<maintenance type="Sitecore.Analytics.Core.AsyncBackgroundService">
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
<param desc="agentPath">maintenanceService</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="interval" factoryMethod="ToTimeSpan" arg0="0.00:01:00"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="maxAgents" factoryMethod="ToInt" arg0="1"/>
</maintenance>
</BackgroundServices>
</coreServices>
<model patch:source="Sitecore.Analytics.Model.config">
<elements>
<element interface="Sitecore.Analytics.Model.Entities.IContactAddresses, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.ContactAddresses, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.Model.Entities.IContactEmailAddresses, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.ContactEmailAddresses, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.Model.Entities.IContactIdentifiers, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.ContactIdentifiers, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.Model.Entities.IContactPersonalInfo, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.ContactPersonalInfo, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.Model.Entities.IContactPicture, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.ContactPicture, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.Model.Entities.IContactPhoneNumbers, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.ContactPhoneNumbers, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.Model.Entities.IContactBehaviorProfiles, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.ContactBehaviorProfiles, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.Model.Entities.IAddress, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.Address, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.Model.Entities.IEmailAddress, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.EmailAddress, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.Model.Entities.IExtensionAttribute, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.ExtensionAttribute, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.Model.Entities.IExtensionAttributeGroup, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.ExtensionAttributeGroup, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.Model.Entities.IGeographicCoordinate, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.GeographicCoordinate, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.Model.Entities.IPhoneNumber, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.PhoneNumber, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.Model.Entities.ITag, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.Tag, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.Model.Entities.ITagValue, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.TagValue, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.Model.Entities.IContactCommunicationProfile, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.ContactCommunicationProfile, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.Model.Entities.IContactPreferences, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.ContactPreferences, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.Model.Entities.IBehaviorProfile, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.BehaviorProfile, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.Model.Entities.IBehaviorProfileValue, Sitecore.Analytics.Model" implementation="Sitecore.Analytics.Model.Generated.BehaviorProfileValue, Sitecore.Analytics.Model"/>
<element interface="Sitecore.Analytics.XConnect.Facets.IXConnectFacets, Sitecore.Analytics.XConnect" implementation="Sitecore.Analytics.XConnect.Facets.XConnectFacets, Sitecore.Analytics.XConnect" patch:source="Sitecore.Analytics.Tracking.Model.config"/>
<element interface="Sitecore.ContentTesting.Model.Entities.ITestCombinationsData, Sitecore.ContentTesting.Model" implementation="Sitecore.ContentTesting.Model.Entities.TestCombinationsData, Sitecore.ContentTesting.Model" patch:source="Sitecore.ContentTesting.config"/>
</elements>
<entities>
<contact>
<factory type="Sitecore.Analytics.Model.ContactFactory, Sitecore.Analytics.Model" singleInstance="true"/>
<!--
 Note: In case you define custom facets and want GetFacet method to return an object of your custom facet type,
                         make sure that data adapter provider (see sitecore/dataAdapterManager) supports your custom facet type. Extend
                         the convertFromXConnectContact pipeline to make xConnect facet data available as <typeparamref name="TFacet"/>
                         within the tracker.
                      
-->
<facets>
<facet name="Personal" contract="Sitecore.Analytics.Model.Entities.IContactPersonalInfo, Sitecore.Analytics.Model"/>
<facet name="Addresses" contract="Sitecore.Analytics.Model.Entities.IContactAddresses, Sitecore.Analytics.Model"/>
<facet name="Emails" contract="Sitecore.Analytics.Model.Entities.IContactEmailAddresses, Sitecore.Analytics.Model"/>
<facet name="Phone Numbers" contract="Sitecore.Analytics.Model.Entities.IContactPhoneNumbers, Sitecore.Analytics.Model"/>
<facet name="Picture" contract="Sitecore.Analytics.Model.Entities.IContactPicture, Sitecore.Analytics.Model"/>
<facet name="Communication Profile" contract="Sitecore.Analytics.Model.Entities.IContactCommunicationProfile, Sitecore.Analytics.Model"/>
<facet name="Preferences" contract="Sitecore.Analytics.Model.Entities.IContactPreferences, Sitecore.Analytics.Model"/>
<facet name="XConnectFacets" contract="Sitecore.Analytics.XConnect.Facets.IXConnectFacets, Sitecore.Analytics.XConnect" patch:source="Sitecore.Analytics.Tracking.Model.config"/>
<facet name="TestCombinations" contract="Sitecore.ContentTesting.Model.Entities.ITestCombinationsData, Sitecore.ContentTesting.Model" patch:source="Sitecore.ContentTesting.config"/>
</facets>
</contact>
</entities>
</model>
<aggregation patch:source="Sitecore.Analytics.Processing.Aggregation.config">
<aggregatorContexts>
<interaction>
<live type="Sitecore.Analytics.Aggregation.Data.LiveInteractionAggregatorContext">
<param ref="aggregationProcessing/processingPools/live" desc="pool"/>
<ReportingTargets hint="list:AddReportingTarget">
<primary ref="aggregation/reportingStorageProviders/primary"/>
<secondary ref="aggregation/reportingStorageProviders/secondary.live"/>
</ReportingTargets>
</live>
<history type="Sitecore.Analytics.Aggregation.History.HistoryInteractionAggregatorContext">
<ReportingTargets hint="list:AddReportingTarget">
<secondary ref="aggregation/reportingStorageProviders/secondary.history"/>
</ReportingTargets>
</history>
</interaction>
<contact>
<live type="Sitecore.Analytics.Aggregation.Data.Contact.ContactProcessingContext, Sitecore.Analytics.Aggregation">
<Pool ref="aggregationProcessing/processingPools/contact"/>
</live>
</contact>
</aggregatorContexts>
<dateTimePrecisionStrategy type="Sitecore.Analytics.Aggregation.Data.DateTimeMinutePrecisionStrategy, Sitecore.Analytics.Aggregation"/>
<reportingStorageManager type="Sitecore.Analytics.Aggregation.History.ReportingStorageManager" singleInstance="true">
<param type="Sitecore.Analytics.Aggregation.History.SqlRebuildProcessStateDataProvider, Sitecore.Analytics.Sql" desc="rebuildTaskDataProvider" singleInstance="true">
<param desc="connectionStringName">xdb.processing.tasks</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="commandTimeout" factoryMethod="ToInt" arg0="60"/>
<param ref="aggregation/retryManager" desc="retryManager"/>
</param>
<TimeToClearStorage>0.00:01:00</TimeToClearStorage>
<ReportingTargetConfigPath>
aggregation/reportingStorageProviders/secondary.history
</ReportingTargetConfigPath>
<HistoryAggregatorManagers hint="list:AddAggregator">
<interaction type="Sitecore.Analytics.Aggregation.History.InteractionHistoryAggregatorManager" singleInstance="true">
<TaskManager ref="aggregation/historyTaskManager"/>
</interaction>
</HistoryAggregatorManagers>
</reportingStorageManager>
<historyTaskManager type="Sitecore.Analytics.Aggregation.History.HistoryTaskManager, Sitecore.Analytics.Aggregation" singleInstance="true">
<param ref="aggregationProcessing/processingPools/history" desc="processingPool"/>
<param type="Sitecore.Analytics.Aggregation.XConnect.DefaultXdbContextFactory, Sitecore.Analytics.Aggregation" desc="xdbContextFactory"/>
<param type="Sitecore.Analytics.Aggregation.History.SqlHistoryTaskDataProvider, Sitecore.Analytics.Sql" desc="taskDataProvider">
<param desc="connectionStringName">xdb.processing.tasks</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="commandTimeout" factoryMethod="ToInt" arg0="60"/>
<param ref="aggregation/retryManager" desc="retryManager"/>
</param>
<param type="Sitecore.Analytics.Aggregation.History.SqlHistoryCursorDataProviderFactory, Sitecore.Analytics.Sql" desc="cursorDataProviderFactory">
<param desc="connectionStringName">xdb.processing.tasks</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="commandTimeout" factoryMethod="ToInt" arg0="60"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="ownershipTimeoutMs" factoryMethod="ToInt" arg0="60000"/>
<param ref="aggregation/retryManager" desc="retryManager"/>
</param>
</historyTaskManager>
<!--  Reporting Storage Providers:  -->
<reportingStorageProviders>
<primary type="Sitecore.Analytics.Aggregation.SqlReportingStorageProvider, Sitecore.Analytics.Sql" singleInstance="true">
<param desc="connectionStringName">reporting</param>
<TrailLength>7.00:00:00</TrailLength>
</primary>
<secondary.live type="Sitecore.Analytics.Aggregation.SqlReportingStorageProvider, Sitecore.Analytics.Sql" singleInstance="true">
<param desc="connectionStringName">reporting.secondary</param>
<param desc="cutoffBehavior">StoreOnlyAfterCutOffInclusive</param>
</secondary.live>
<secondary.history type="Sitecore.Analytics.Aggregation.SqlReportingStorageProvider, Sitecore.Analytics.Sql" singleInstance="true">
<param desc="connectionStringName">reporting.secondary</param>
<param desc="cutoffBehavior">StoreOnlyBeforeCutOffExclusive</param>
</secondary.history>
</reportingStorageProviders>
<routines>
<ExecRoutineStatementBuilder type="Sitecore.Analytics.Aggregation.Scripting.Builders.ExecRoutineStatementBuilder, Sitecore.Analytics.Sql" singleInstance="true">
<mappings hint="list:AddMapping">
<!--  Dimensions  -->
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Assets</Table>
<Routine>Ensure_Assets_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>BusinessUnits</Table>
<Routine>Ensure_BusinessUnits_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>DeviceNames</Table>
<Routine>Ensure_DeviceNames_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>FailureDetails</Table>
<Routine>Ensure_FailureDetails_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Items</Table>
<Routine>Ensure_Items_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Keywords</Table>
<Routine>Ensure_Keywords_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>ReferringSites</Table>
<Routine>Ensure_ReferringSites_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>SiteNames</Table>
<Routine>Ensure_SiteNames_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Languages</Table>
<Routine>Ensure_Languages_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
</SqlMappingEntity>
<!--  Mutable Dimensions  -->
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Accounts</Table>
<Routine>Ensure_Accounts_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Contacts</Table>
<Routine>Ensure_Contacts_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>TrafficTypes</Table>
<Routine>Upsert_TrafficType</Routine>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>VisitorClassification</Table>
<Routine>Upsert_VisitorClassification</Routine>
</SqlMappingEntity>
<!--  Facts  -->
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Fact_Conversions</Table>
<Routine>Add_Conversions_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
<TableType>Conversions_Type</TableType>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Fact_Downloads</Table>
<Routine>Add_Downloads_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
<TableType>Downloads_Type</TableType>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Fact_Failures</Table>
<Routine>Add_Failures_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
<TableType>Failures_Type</TableType>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Fact_FollowHits</Table>
<Routine>Add_FollowHits_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
<TableType>FollowHits_Type</TableType>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Fact_MvTesting</Table>
<Routine>Add_MvTesting</Routine>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Fact_TestStatistics</Table>
<Routine>Add_TestStatistic</Routine>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Fact_PageViews</Table>
<Routine>Add_PageViews</Routine>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Fact_SiteSearches</Table>
<Routine>Add_SiteSearches_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
<TableType>SiteSearches_Type</TableType>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Fact_SlowPages</Table>
<Routine>Add_SlowPages_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
<TableType>SlowPages_Type</TableType>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Fact_Traffic</Table>
<Routine>Add_Traffic_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
<TableType>Traffic_Type</TableType>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Fact_ValueBySource</Table>
<Routine>Add_ValueBySource_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
<TableType>ValueBySource_Type</TableType>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Fact_Visits</Table>
<Routine>Add_Visits_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
<TableType>Visits_Type</TableType>
</SqlMappingEntity>
<SqlMappingEntity type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql">
<Table>Fact_VisitsByBusinessContactLocation</Table>
<Routine>Add_VisitsByBusinessContactLocation_Tvp</Routine>
<IsMultiRow>True</IsMultiRow>
<TableType>VisitsByBusinessContactLocation_Type</TableType>
</SqlMappingEntity>
<SqlMappingEntity uid="Fact_SegmentMetrics" type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql" patch:source="Sitecore.ExperienceAnalytics.Aggregation.config">
<Table>Fact_SegmentMetrics</Table>
<Routine>Add_SegmentMetrics_Tvp</Routine>
<TableType>SegmentMetrics_Type</TableType>
<IsMultiRow>True</IsMultiRow>
</SqlMappingEntity>
<SqlMappingEntity uid="SegmentRecords" type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql" patch:source="Sitecore.ExperienceAnalytics.Aggregation.config">
<Table>SegmentRecords</Table>
<Routine>Ensure_SegmentRecords_Tvp</Routine>
<TableType>SegmentRecords_Type</TableType>
<IsMultiRow>True</IsMultiRow>
</SqlMappingEntity>
<SqlMappingEntity uid="DimensionKeys" type="Sitecore.Analytics.Aggregation.SqlMappingEntity, Sitecore.Analytics.Sql" patch:source="Sitecore.ExperienceAnalytics.Aggregation.config">
<Table>DimensionKeys</Table>
<Routine>Ensure_DimensionKeys_Tvp</Routine>
<TableType>DimensionKeys_Type</TableType>
<IsMultiRow>True</IsMultiRow>
</SqlMappingEntity>
</mappings>
</ExecRoutineStatementBuilder>
<TypeBasedStatementBuilder type="Sitecore.Analytics.Aggregation.Scripting.Builders.TypeBasedStatementBuilder, Sitecore.Analytics.Sql" singleInstance="true">
<mappings hint="list:AddPrefix">
<SqlRoutineTypeMap type="Sitecore.Analytics.Aggregation.SqlRoutineTypeMap, Sitecore.Analytics.Sql">
<TableType>
Sitecore.Analytics.Aggregation.Data.Model.Fact, Sitecore.Analytics.Aggregation
</TableType>
<RoutinePrefix>Add_</RoutinePrefix>
</SqlRoutineTypeMap>
<SqlRoutineTypeMap type="Sitecore.Analytics.Aggregation.SqlRoutineTypeMap, Sitecore.Analytics.Sql">
<TableType>
Sitecore.Analytics.Aggregation.Data.Model.Dimension, Sitecore.Analytics.Aggregation
</TableType>
<RoutinePrefix>Ensure_</RoutinePrefix>
</SqlRoutineTypeMap>
</mappings>
</TypeBasedStatementBuilder>
</routines>
<retryManager type="Sitecore.Xdb.Sql.Common.IRetryManager, Sitecore.Xdb.Sql.Common" resolve="true"/>
<aggregator type="Sitecore.Analytics.Aggregation.InteractionAggregationAgent, Sitecore.Analytics.Aggregation" patch:source="Sitecore.Analytics.Processing.Aggregation.Services.config">
<param type="Sitecore.Analytics.Aggregation.XConnect.DefaultXdbContextFactory, Sitecore.Analytics.Aggregation" desc="xdbContextFactory"/>
<param ref="aggregation/aggregatorContexts/interaction/live" desc="context"/>
<param type="Sitecore.Analytics.Aggregation.InteractionBatchAggregator, Sitecore.Analytics.Aggregation" desc="aggregator" singleInstance="true">
<MultiplexingTimeout>0.00:00:01</MultiplexingTimeout>
</param>
<param ref="aggregation/dateTimePrecisionStrategy" desc="dateTimeStrategy"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="maximumBatchSize" factoryMethod="ToShort" arg0="64"/>
</aggregator>
<dispatchers patch:source="Sitecore.Analytics.Processing.Aggregation.Services.config">
<contactWorkDispatcher type="Sitecore.Analytics.Aggregation.Data.Contact.ContactWorkDispatcher, Sitecore.Analytics.Aggregation">
<param desc="maximumBatchSize">64</param>
<Context ref="aggregation/aggregatorContexts/contact/live"/>
</contactWorkDispatcher>
</dispatchers>
<historyCompletionCheck type="Sitecore.Analytics.Aggregation.Data.Processing.HistoryCompletionCheckAgent, Sitecore.Analytics.Aggregation" patch:source="Sitecore.Analytics.Processing.Aggregation.Services.config">
<HistoryTaskManager ref="aggregation/historyTaskManager"/>
</historyCompletionCheck>
<historyWorker type="Sitecore.Analytics.Aggregation.Data.Processing.InteractionHistoryWorker, Sitecore.Analytics.Aggregation" patch:source="Sitecore.Analytics.Processing.Aggregation.Services.config">
<param type="Sitecore.Analytics.Aggregation.InteractionBatchAggregator, Sitecore.Analytics.Aggregation" desc="aggregator" singleInstance="true">
<MultiplexingTimeout>0.00:00:01</MultiplexingTimeout>
</param>
<param ref="aggregation/historyTaskManager" desc="historyTaskManager"/>
<param ref="aggregation/aggregatorContexts/interaction/history" desc="aggregatorContext"/>
<param ref="aggregation/dateTimePrecisionStrategy" desc="dateTimePrecisionStrategy"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="maximumBatchSize" factoryMethod="ToShort" arg0="128"/>
</historyWorker>
<module type="Sitecore.Analytics.Aggregation.AggregationModule" singleInstance="true" patch:source="Sitecore.Analytics.Processing.Aggregation.Services.config">
<BackgroundServices hint="list:Add">
<aggregator type="Sitecore.Analytics.Core.AsyncBackgroundService">
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
<param desc="agentPath">aggregation/aggregator</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="interval" factoryMethod="ToTimeSpan" arg0="0.00:00:15"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="maxAgents" factoryMethod="ToInt" arg0="1"/>
</aggregator>
<contactProcessing type="Sitecore.Analytics.Core.AsyncBackgroundService">
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
<param desc="agentPath">aggregation/contactProcessing</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="interval" factoryMethod="ToTimeSpan" arg0="0.00:00:15"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="maxAgents" factoryMethod="ToInt" arg0="1"/>
</contactProcessing>
<rebuild type="Sitecore.Analytics.Core.AsyncBackgroundService">
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
<param desc="agentPath">aggregation/rebuildAgent</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="interval" factoryMethod="ToTimeSpan" arg0="0.00:00:15"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="maxAgents" factoryMethod="ToInt" arg0="1"/>
</rebuild>
<history type="Sitecore.Analytics.Core.AsyncBackgroundService">
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
<param desc="agentPath">aggregation/historyWorker</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="interval" factoryMethod="ToTimeSpan" arg0="0.00:00:15"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="maxAgents" factoryMethod="ToInt" arg0="1"/>
</history>
<historyCompletionCheck type="Sitecore.Analytics.Core.AsyncBackgroundService">
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
<param desc="agentPath">aggregation/historyCompletionCheck</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="interval" factoryMethod="ToTimeSpan" arg0="0.00:00:15"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="maxAgents" factoryMethod="ToInt" arg0="1"/>
</historyCompletionCheck>
</BackgroundServices>
</module>
<rebuildAgent type="Sitecore.Analytics.Aggregation.Data.Processing.RebuildAgent, Sitecore.Analytics.Aggregation" patch:source="Sitecore.Analytics.Processing.Aggregation.Services.config">
<ReportingStorageManager ref="aggregation/reportingStorageManager"/>
</rebuildAgent>
<contactProcessing type="Sitecore.Analytics.Aggregation.Data.Contact.ContactProcessingAgent, Sitecore.Analytics.Aggregation" patch:source="Sitecore.Analytics.Processing.Aggregation.Services.config">
<Dispatcher ref="aggregation/dispatchers/contactWorkDispatcher"/>
</contactProcessing>
<aggregationContexts patch:source="Sitecore.PathAnalyzer.Processing.config">
<pathAnalyzer>
<live type="Sitecore.PathAnalyzer.Processing.TreeAggregationContext, Sitecore.PathAnalyzer">
<Pool ref="aggregationProcessing/processingPools/pathAnalyzerLive"/>
<XdbContextFactory ref="processing/XdbContextFatory"/>
<TreeDefinitionStores hint="list:AddDefinitionStore">
<primary ref="pathAnalyzer/definitionStorage"/>
<secondary ref="pathAnalyzer/definitionStorageSecondary"/>
</TreeDefinitionStores>
<TreeStores hint="list:AddTreeStore">
<primary ref="pathAnalyzer/primaryStorage"/>
<secondary ref="pathAnalyzer/secondaryStorage"/>
</TreeStores>
</live>
<history type="Sitecore.PathAnalyzer.Processing.TreeAggregationContext, Sitecore.PathAnalyzer">
<Pool ref="aggregationProcessing/processingPools/pathAnalyzerHistory"/>
<XdbContextFactory ref="processing/XdbContextFatory"/>
<TreeDefinitionStores hint="list:AddDefinitionStore">
<primary ref="pathAnalyzer/definitionStorage"/>
<secondary ref="pathAnalyzer/definitionStorageSecondary"/>
</TreeDefinitionStores>
<TreeStores hint="list:AddTreeStore">
<secondary ref="pathAnalyzer/secondaryStorage"/>
</TreeStores>
</history>
</pathAnalyzer>
</aggregationContexts>
<pathAnalyzerLiveAgent type="Sitecore.PathAnalyzer.Processing.Agents.TreeAggregatorAgent, Sitecore.PathAnalyzer" patch:source="Sitecore.PathAnalyzer.Processing.config">
<Aggregator type="Sitecore.PathAnalyzer.Processing.TreeAggregator, Sitecore.PathAnalyzer" singleInstance="true">
<Mode>Live</Mode>
</Aggregator>
<Context ref="aggregation/aggregationContexts/pathAnalyzer/live"/>
<DateTimeStrategy ref="aggregation/dateTimePrecisionStrategy"/>
<MaximumBatchSize>128</MaximumBatchSize>
</pathAnalyzerLiveAgent>
<pathAnalyzerHistoryAgent type="Sitecore.PathAnalyzer.Processing.Agents.TreeAggregatorAgent, Sitecore.PathAnalyzer" patch:source="Sitecore.PathAnalyzer.Processing.config">
<Aggregator type="Sitecore.PathAnalyzer.Processing.TreeAggregator, Sitecore.PathAnalyzer" singleInstance="true">
<Mode>Historic</Mode>
</Aggregator>
<Context ref="aggregation/aggregationContexts/pathAnalyzer/history"/>
<DateTimeStrategy ref="aggregation/dateTimePrecisionStrategy"/>
<MaximumBatchSize>128</MaximumBatchSize>
</pathAnalyzerHistoryAgent>
</aggregation>
<aggregationProcessing patch:source="Sitecore.Analytics.Processing.Aggregation.ProcessingPools.config">
<processingPools>
<live type="Sitecore.Xdb.Processing.Queue.SqlServer.SqlServerInteractionLiveProcessingPool, Sitecore.Xdb.Processing.Queue.SqlServer" singleInstance="true">
<param type="Sitecore.Xdb.Processing.Queue.ProcessingPoolDefinition, Sitecore.Xdb.Processing.Queue" desc="poolDefinition">
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="retryAttempts" factoryMethod="ToShort" arg0="10"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="retryDelay" factoryMethod="ToShort" arg0="60"/>
<param desc="description">Interaction Live Processing Pool.</param>
</param>
<param type="Sitecore.Xdb.Processing.Queue.SqlServer.SqlServerProcessingPoolSettings, Sitecore.Xdb.Processing.Queue.SqlServer" desc="settings">
<param desc="connectionString">xdb.processing.pools</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="queueHead" factoryMethod="ToShort" arg0="16"/>
</param>
<param type="Sitecore.Xdb.Processing.Queue.SqlServer.ConfigurationConnectionStringResolver, Sitecore.Xdb.Processing.Queue.SqlServer" desc="resolver"/>
<param type="Sitecore.Analytics.Core.NullPerformanceCounters, Sitecore.Analytics.Core" desc="performanceCounters"/>
<param ref="aggregation/retryManager" desc="retryManager"/>
</live>
<history type="Sitecore.Xdb.Processing.Queue.SqlServer.SqlServerInteractionHistoryProcessingPool, Sitecore.Xdb.Processing.Queue.SqlServer" singleInstance="true">
<param type="Sitecore.Xdb.Processing.Queue.ProcessingPoolDefinition, Sitecore.Xdb.Processing.Queue" desc="poolDefinition">
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="retryAttempts" factoryMethod="ToShort" arg0="10"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="retryDelay" factoryMethod="ToShort" arg0="60"/>
<param desc="description">Interaction History Processing Pool.</param>
</param>
<param type="Sitecore.Xdb.Processing.Queue.SqlServer.SqlServerProcessingPoolSettings, Sitecore.Xdb.Processing.Queue.SqlServer" desc="settings">
<param desc="connectionString">xdb.processing.pools</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="queueHead" factoryMethod="ToShort" arg0="16"/>
</param>
<param type="Sitecore.Xdb.Processing.Queue.SqlServer.ConfigurationConnectionStringResolver, Sitecore.Xdb.Processing.Queue.SqlServer" desc="resolver"/>
<param type="Sitecore.Analytics.Core.NullPerformanceCounters, Sitecore.Analytics.Core" desc="performanceCounters"/>
<param ref="aggregation/retryManager" desc="retryManager"/>
</history>
<contact type="Sitecore.Xdb.Processing.Queue.SqlServer.SqlServerContactProcessingPool, Sitecore.Xdb.Processing.Queue.SqlServer" singleInstance="true">
<param type="Sitecore.Xdb.Processing.Queue.ProcessingPoolDefinition, Sitecore.Xdb.Processing.Queue" desc="poolDefinition">
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="retryAttempts" factoryMethod="ToShort" arg0="10"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="retryDelay" factoryMethod="ToShort" arg0="60"/>
<param desc="description">Contact Processing Pool.</param>
</param>
<param type="Sitecore.Xdb.Processing.Queue.SqlServer.SqlServerProcessingPoolSettings, Sitecore.Xdb.Processing.Queue.SqlServer" desc="settings">
<param desc="connectionString">xdb.processing.pools</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="queueHead" factoryMethod="ToShort" arg0="16"/>
</param>
<param type="Sitecore.Xdb.Processing.Queue.SqlServer.ConfigurationConnectionStringResolver, Sitecore.Xdb.Processing.Queue.SqlServer" desc="resolver"/>
<param type="Sitecore.Analytics.Core.NullPerformanceCounters, Sitecore.Analytics.Core" desc="performanceCounters"/>
<param ref="aggregation/retryManager" desc="retryManager"/>
</contact>
<pathAnalyzerLive type="Sitecore.PathAnalyzer.ApplicationContainer, Sitecore.PathAnalyzer" factoryMethod="GetPathAnalyzerLiveProcessingPool" singleInstance="true" patch:source="Sitecore.PathAnalyzer.Processing.config"/>
<pathAnalyzerHistory type="Sitecore.PathAnalyzer.ApplicationContainer, Sitecore.PathAnalyzer" factoryMethod="GetPathAnalyzerHistoryProcessingPool" singleInstance="true" patch:source="Sitecore.PathAnalyzer.Processing.config"/>
</processingPools>
</aggregationProcessing>
<processing patch:source="Sitecore.Analytics.Processing.config">
<retryManager type="Sitecore.Xdb.Sql.Common.IRetryManager, Sitecore.Xdb.Sql.Common" resolve="true"/>
<TaskDataProvider type="Sitecore.Analytics.Processing.SqlTaskDataProvider, Sitecore.Analytics.Sql">
<param desc="connectionStringName">xdb.processing.tasks</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="commandTimeout" factoryMethod="ToInt" arg0="60"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="ownershipTimeoutMs" factoryMethod="ToLong" arg0="3600000"/>
<!--
 The minimumRangeSize value should be the same as minimumRangeSize in taskAgent. 
-->
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="minimumRangeSize" factoryMethod="ToInt" arg0="100"/>
<param ref="processing/retryManager" desc="retryManager"/>
</TaskDataProvider>
<CursorDataProviderFactory type="Sitecore.Analytics.Processing.SqlProcessingCursorDataProviderFactory, Sitecore.Analytics.Sql">
<param desc="connectionStringName">xdb.processing.tasks</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="commandTimeout" factoryMethod="ToInt" arg0="60"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="ownershipTimeoutMs" factoryMethod="ToInt" arg0="60000"/>
<param ref="processing/retryManager" desc="retryManager"/>
</CursorDataProviderFactory>
<XdbContextFatory type="Sitecore.Analytics.Aggregation.XConnect.DefaultXdbContextFactory, Sitecore.Analytics.Aggregation"/>
<ProcessingPoolFactory type="Sitecore.Xdb.Processing.Queue.SqlServer.SqlServerProcessingPoolFactory, Sitecore.Xdb.Processing.Queue.SqlServer">
<param type="Sitecore.Xdb.Processing.Queue.SqlServer.SqlServerProcessingPoolFactorySettings, Sitecore.Xdb.Processing.Queue.SqlServer" desc="settings">
<param desc="connectionString">xdb.processing.pools</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="commandTimeout" factoryMethod="ToInt" arg0="60"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="queueHead" factoryMethod="ToShort" arg0="16"/>
</param>
<param type="Sitecore.Xdb.Processing.Queue.SqlServer.ConfigurationConnectionStringResolver, Sitecore.Xdb.Processing.Queue.SqlServer" desc="resolver"/>
<param type="Sitecore.Analytics.Core.NullPerformanceCounters, Sitecore.Analytics.Core" desc="performanceCounters"/>
<param ref="processing/retryManager" desc="retryManager"/>
</ProcessingPoolFactory>
<taskAgent type="Sitecore.Analytics.Processing.TaskAgent, Sitecore.Analytics.Processing">
<param ref="processing/TaskDataProvider" desc="taskDataProvider"/>
<param ref="processing/CursorDataProviderFactory" desc="cursorDataProviderFactory"/>
<param ref="processing/XdbContextFatory" desc="xdbContextFactory"/>
<param ref="processing/ProcessingPoolFactory" desc="poolFactory"/>
<param type="Sitecore.Analytics.Processing.TaskAgentOptions, Sitecore.Analytics.Processing" desc="taskAgentOptions">
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="maximumBatchSize" factoryMethod="ToShort" arg0="16"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="maintenanceInterval" factoryMethod="ToTimeSpan" arg0="01:00:00"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="taskAfterlife" factoryMethod="ToTimeSpan" arg0="01:00:00"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="minimumRangeSize" factoryMethod="ToInt" arg0="100"/>
<param type="Sitecore.Analytics.Core.RangeScheduler.LockLeaseStrategy, Sitecore.Analytics.Core" desc="strategy">
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="baseLeaseDuration" factoryMethod="ToTimeSpan" arg0="00:00:01"/>
</param>
</param>
</taskAgent>
<taskManager type="Sitecore.Analytics.Processing.TaskManager, Sitecore.Analytics.Processing" singleInstance="true">
<param ref="processing/TaskDataProvider" desc="taskDataProvider"/>
<param ref="processing/CursorDataProviderFactory" desc="cursorDataProviderFactory"/>
<param ref="processing/XdbContextFatory" desc="xdbContextFactory"/>
<param ref="processing/ProcessingPoolFactory" desc="poolFactory"/>
</taskManager>
<module type="Sitecore.Analytics.Processing.ProcessingModule" singleInstance="true" patch:source="Sitecore.Analytics.Processing.Services.config">
<BackgroundServices hint="list:Add">
<taskagent type="Sitecore.Analytics.Core.AsyncBackgroundService">
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
<param desc="agentPath">processing/taskAgent</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="interval" factoryMethod="ToTimeSpan" arg0="0.00:00:15"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="maxAgents" factoryMethod="ToInt" arg0="1"/>
</taskagent>
</BackgroundServices>
</module>
</processing>
<reporting patch:source="Sitecore.Analytics.Reporting.config">
<cacheProvider type="Sitecore.Xdb.Reporting.Caching.ReportDataCacheInMemory, Sitecore.Xdb.Reporting" singleInstance="true">
<param key="maxCacheSize">50MB</param>
<param key="defaultCacheExpiration">00:10:00</param>
</cacheProvider>
<dataProvider type="Sitecore.Xdb.Reporting.ReportDataProvider, Sitecore.Xdb.Reporting" singleInstance="true" cacheEnabled="false">
<datasources hint="list:RegisterDataSource">
<add type="Sitecore.Xdb.Reporting.Datasources.ItemReportDataSource" key="item"/>
<add type="Sitecore.Analytics.Reporting.SqlReportDataSource, Sitecore.Analytics.Sql" key="reporting">
<param desc="connectionStringName">reporting</param>
<FiltersFactory type="Sitecore.Xdb.Reporting.Filters.ItemBasedFiltersFactory, Sitecore.Xdb.Reporting">
<param desc="definitionDatabaseName">master</param>
<FiltersPath>
/sitecore/system/Settings/Analytics/Vendor Specific Filters/MSSQL
</FiltersPath>
</FiltersFactory>
</add>
</datasources>
<InitializationPipelineName>registerReportingDataSource</InitializationPipelineName>
</dataProvider>
</reporting>
<compatibility patch:source="Sitecore.Analytics.Compatibility.config">
<trafficTypeConverter type="Sitecore.Analytics.DataAccess.ConfigurationBasedTrafficTypeConverter, Sitecore.Analytics.DataAccess"/>
<trafficType default="{00000000-0000-0000-0000-000000000000}">
<add trafficType="15" channel="{FB8FA660-0A07-4EE9-A9F4-930FC5D10AEC}"/>
<add trafficType="10" channel="{B979A670-5AAF-4E63-94AC-C3C3E5BFBE84}"/>
<add trafficType="20" channel="{B418E4F2-1013-4B42-A053-B6D4DCA988BF}"/>
<add trafficType="30" channel="{44DD9FF5-44B2-4C59-8DF8-849E400F4B6B}"/>
<add trafficType="31" channel="{44DD9FF5-44B2-4C59-8DF8-849E400F4B6B}"/>
<add trafficType="32" channel="{44DD9FF5-44B2-4C59-8DF8-849E400F4B6B}"/>
<add trafficType="33" channel="{1DA15267-B0DB-4BE1-B44F-E57C2EEB8A6B}"/>
<add trafficType="34" channel="{1DA15267-B0DB-4BE1-B44F-E57C2EEB8A6B}"/>
<add trafficType="35" channel="{62D19735-E898-4FF5-B53A-13B02D3B8D6F}"/>
<add trafficType="36" channel="{44DD9FF5-44B2-4C59-8DF8-849E400F4B6B}"/>
<add trafficType="40" channel="{B2747066-06F8-4E0B-9EA7-64D8859A119A}"/>
<add trafficType="50" channel="{52B75873-4CE0-4E98-B63A-B535739E6180}"/>
<add trafficType="90" channel="{B5234879-DFFC-47AF-8267-59D4D3DF6226}"/>
</trafficType>
</compatibility>
<analyticsExcludeRobots patch:source="Sitecore.Analytics.ExcludeRobots.config">
<!--
List of user agent strings that are used by search engines. Requests with following user agent strings will be 
      ignored by Analytics.
      See http://iplists.com/ for updates
      Use # for comments
      
-->
<excludedUserAgents>
AdsBot-Google (+http://www.google.com/adsbot.html) Googlebot-Image/1.0 Googlebot/2.1 (+http://www.googlebot.com/bot.html) Mozilla/5.0+(compatible;+Googlebot/2.1;++http://www.google.com/bot.html) Googlebot/Test (+http://www.googlebot.com/bot.html) Googlebot/Test Mediapartners-Google/2.1 (+http://www.googlebot.com/bot.html) Mediapartners-Google/2.1 Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html) gsa-crawler (Enterprise; S4-E9LJ2B82FJJAA; me@mycompany.com) Fast Crawler v X Fast Crawler v X(compatible; Konqueror/3.2; FreeBSD) (KHTML, like Gecko) Mozilla/4.0 (compatible; MSIE 5.0; Windows NT) Mozilla/4.0 Mozilla/4.05 [en] Mozilla/5.0 (Slurp/cat; slurp@inktomi.com; http://www.inktomi.com/slurp.html) Mozilla/5.0 (compatible; Yahoo! DE Slurp; http://help.yahoo.com/help/us/ysearch/slurp) Mozilla/5.0 (compatible; Yahoo! Slurp China; http://misc.yahoo.com.cn/help.html) Mozilla/5.0 (compatible; Yahoo! Slurp/3.0; http://help.yahoo.com/help/us/ysearch/slurp) Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp) Scooter/3.3 Y!J-BSC/1.0 (http://help.yahoo.co.jp/help/jp/blog-search/) Yahoo! Mindset Yahoo-Blogs/v3.9 (compatible; Mozilla 4.0; MSIE 5.5; http://help.yahoo.com/help/us/ysearch/crawling/crawling-02.html ) Yahoo-MMAudVid/1.0 (mms dash mmaudvidcrawler dash support at yahoo dash inc dot com) Yahoo-MMCrawler/3.x (mms dash mmcrawler dash support at yahoo dash inc dot com) YahooFeedSeeker/1.0 (compatible; Mozilla 4.0; MSIE 5.5; my.yahoo.com/s/publishers.html) YahooSeeker-Testing/v3.9 (compatible; Mozilla 4.0; MSIE 5.5; http://search.yahoo.com/) YahooSeeker/1.1 (compatible; Mozilla 4.0; MSIE 5.5; http://help.yahoo.com/help/us/shop/merchant/) YahooSeeker/1.2 (compatible; Mozilla 4.0; MSIE 5.5; yahooseeker at yahoo-inc dot com ; http://help.yahoo.com/help/us/shop/merchant/) YahooSeeker/CafeKelsa-dev (compatible; Konqueror/3.2; FreeBSD ;cafekelsa-dev-webmaster@yahoo-inc.com ) (KHTML, like Gecko) YahooVideoSearch www.yahoo.com/ YahooYSMcm/2.0.0 slurp Lycos_Spider_(modspider) Infoseek SideWinder/2.0B (Linux 2.4 i686) Scooter/3.3Y!CrawlX 123metaspider-Bot (Version: 1.04, powered by www.123metaspider.com) Mozilla/4.0 (ActiveTouristBot;http://www.activetourist.com) Mozilla/4.0 (JemmaTheTourist;http://www.activtourist.com robot_txt_error@activtourist.com) Mozilla/4.0 (JemmaTheTourist;http://www.activtourist.com) Marvin v0.3 Mozilla/4.0 (agadine3.0) www.agada.de 123metaspider-Bot (Version: 1.04, powered by www.123metaspider.com) Mozilla/4.0 (ActiveTouristBot;http://www.activetourist.com) Mozilla/4.0 (JemmaTheTourist;http://www.activtourist.com robot_txt_error@activtourist.com) Mozilla/4.0 (JemmaTheTourist;http://www.activtourist.com) Marvin v0.3 Mozilla/4.0 (agadine3.0) www.agada.de Amfibibot/0.06 (Amfibi Web Search; http://www.amfibi.com; agent@amfibi.com) Amfibibot/0.07 (Amfibi Robot; http://www.amfibi.com; agent@amfibi.com) ano-kato.com v2.14 spider AnswerBus (http://www.answerbus.com/) Apexoo Spider 1.0 Apexoo Spider (http://www.apexoo.com/spider/) Mozilla/2.0 (compatible; Ask Jeeves/Teoma; +http://sp.ask.com/docs/about/tech_crawling.html) Mozilla/2.0 (compatible; AskJeeves/Teoma) Mozilla/5.0 (compatible; Ask Jeeves/Teoma; +http://about.ask.com/en/docs/about/webmasters.shtml) teoma_agent1 AtlocalBot/1.1 +(http://www.atlocal.com/local-web-site-owner.html) axadine/ (Axadine Crawler; http://www.axada.de/; ) Fred/0.01-dev (Fred; http://www.ay-up.com; fred@ay-up.com) Fred/0.05 (Fred; http://www.ay-up.com; fred@ay-up.com) BaiDuSpider Baiduspider+(+http://www.baidu.com/search/spider.htm) Baiduspider+(+http://www.baidu.com/search/spider_jp.html) Mozilla/5.0 (compatible; BecomeBot/2.0.3; +http://www.become.com/webmasters.html) Mozilla/5.0 (compatible; becomebot/2.0beta; +http://www.become.com/webmasters.html) Mozilla/5.0 (compatible; becomebot/1.23; +http://www.become.com/webmasters.html) Mozilla/4.7 [en](BecomeBot'at'exava.com) Mozilla/5.0 (compatible; BecomeBot/2.2.5; MSIE 6.0 compatible; +http://www.become.com/site_owners.html) BigCliqueBOT/1.03-dev (bigclicbot; http://www.bigclique.com; bot@bigclique.com) Bigsearch.ca/Nutch-0.9-dev (Bigsearch.ca Internet Spider; http://www.bigsearch.ca/; info@enhancededge.com) BilgiBot/1.0(beta) (http://www.bilgi.com/; bilgi at bilgi dot com) Bloglines Title Fetch/1.0 (http://www.bloglines.com) boitho.com-dc/0.4 ( http://www.boitho.com/dcbot.html ) boitho.com-dc/0.5 ( http://www.boitho.com/dcbot.html ) boitho.com-dc/0.52 ( http://www.boitho.com/dcbot.html ) boitho.com-dc/0.57 ( http://www.boitho.com/dcbot.html ) boitho.com-dc/0.58 ( http://www.boitho.com/dcbot.html ) boitho.com-dc/0.60 ( http://www.boitho.com/dcbot.html ) boitho.com-dc/0.66 ( http://www.boitho.com/dcbot.html ) boitho.com-dc/0.71 ( http://www.boitho.com/dcbot.html ) boitho.com-dc/0.72 ( http://www.boitho.com/dcbot.html ) boitho.com-dc/0.75 ( http://www.boitho.com/dcbot.html ) boitho.com-dc/0.81 ( http://www.boitho.com/dcbot.html ) boitho.com-dc/0.82 ( http://www.boitho.com/dcbot.html ) boitho.com-dc/0.83 ( http://www.boitho.com/dcbot.html ) boitho.com-robot/1.1 BTbot/0.3 (+http://www.btbot.com/btbot.html) btbot/0.4 ( http://www.btbot.com/btbot.html) Norbert the Spider(Burf.com) BurstFind Crawler 1.0/0.7.1 (Nutch; http://lucene.apache.org/nutch/bot.html; crawler@burstfind.com) BurstFindCrawler/1.1 (crawler.burstfind.com; http://crawler.burstfind.com; crawler@burstfind.com) RoboCrawl (www.canadiancontent.net) holmes/3.8 (morfeo.centrum.cz/bot) CipinetBot (http://www.cipinet.com/bot.html) Mozilla/5.0 (Clustered-Search-Bot/1.0; support@clush.com; http://www.clush.com/) Clushbot/2.1 (+http://www.clush.com/bot.html) Clushbot/3.62-Laomedon (+http://www.clush.com/bot.html) CrawlConvera0.1 CrawlConvera@yahoo.com ConveraCrawler/0.7 (+http://www.authoritativeweb.com/crawl) ConveraCrawler/0.9d (+http://www.authoritativeweb.com/crawl) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; MSIECrawler) Crawlzilla/1.0 (Crawlzilla; http://www.crawlzilla.com; crawler@crawlzilla.com) CydralSpider/1.8 (Cydral Web Image Search; http://www.cydral.com) Orbiter/T-2.0 (+http://www.dailyorbit.com/bot.htm) Orbiter (+http://www.dailyorbit.com/bot.htm) DeepIndex DeepIndex (www.deepindex.com) -DIE-KRAEHE- META-SEARCH-ENGINE/1.0 http://www.die-kraehe.com FlickBot 2.0 RPT-HTTPClient/0.3-3 Drecombot/1.0 (http://career.drecom.jp/bot.html) Dumbot(version 0.1 beta - dumbfind.com) fscrawler/3.0 (www.e-dintorni.it;Windows NT 5.0) EgotoBot/4.8 (+http://www.egoto.com/about.htm) NextGenSearchBot 1 (for information visit http://www.eliyon.com/NextGenSearchBot) EngineBot/3.0 arachna_enginebot/v3.0[http://www.theenginerooms.com] Speedy_Spider (http://www.entireweb.com) Speedy Spider (Beta/1.0; speedy@entireweb.com) Speedy Spider (Entireweb; Beta/1.0; http://www.entireweb.com/about/search_tech/speedyspider/) Speedy Spider (http://www.entireweb.com/about/search_tech/speedy_spider/) envolk[ITS]spider/1.6(+http://www.envolk.com/envolkspider.html) envolk/1.7 (+http://www.envolk.com/envolkspiderinfo.php) e-SocietyRobot(http://www.yama.info.waseda.ac.jp/~yamana/es/) Evaal/0.7.1 (Evaal; http://search.evaal.com/bot.html; bot@evaal.com) eseek-larbin_2.6.2 crawler@exactseek.com exactseek-pagereaper-2.63 crawler@exactseek.com ExactSeek_Spider Mozilla/4.0 exactseek.com Exalead NG/MimeLive Client (convert/http/0.120) NG/2.0 Exabot NG/MimeLive Client (convert/http/0.170) Mozilla/5.0 (compatible; Konqueror/3.4; Linux) KHTML/3.4.1 (like Gecko) Exabot/2.0 Exabot-Test/1.0 FastSearch Web Crawler for Verizon SuperPages (kevin.watters@fastsearch.com) FAST Data Search Document Retriever/4.0 04072100 2004-07-21 07:54:10 UTC FAST MetaWeb Crawler (helpdesk at fastsearch dot com) Faxobot/1.0 Filangy/1.01 (Filangy; http://www.filangy.com/filangyinfo.jsp?inc=robots.jsp; filangy-agent@filangy.com) Firefly/1.0 (compatible; Mozilla 4.0; MSIE 5.5) Foelock.co.uk Search MyGo R2-H6-3 Foelock.co.uk Search MyGo Uknow 7 Mozilla/4.0 (compatible; MSIE 4.01; Windows 95; http://www.freefind.com/spider.html ) FreeFind/1.0 (spider@freefind.com) FyberSpider (+http://www.fybersearch.com/fyberspider.php) Mozilla/4.0 (compatible; MSIE 5.0; www.galaxy.com; www.ads-work.com; +http://www.galaxy.com/info/crawler.html) Mozilla/5.0 wgao@genieknows.com genieBot (http://64.5.245.11/faq/faq.html) genieBot wgao@genieknows.com Geobot/0.1 http://www.geobot.co.uk GeoBot/version 1.0 GeonaBot 1.0; http://www.geona.com/ Gigabot/1.0 Gigabot/2.0 GigabotSiteSearch/2.0 (sitesearch.gigablast.com) Gigabot/2.0 (gigablast.com) Gigabot/2.0/gigablast.com/spider.html Gigabot/3.0 (http://www.gigablast.com/spider.html) Ocelli/1.1 (http://www.globalspec.com) Ocelli/1.3 (http://www.globalspec.com/Ocelli) GoForIt.com GOFORITBOT ( http://www.goforit.com/about/ ) GoldenCanBot (http://www.GoldenCan.com/botinfo.aspx) ichiro/1.0 (ichiro'at'nttr.co.jp) ichiro/2.0 (ichiro@nttr.co.jp) gazz/5.0 (gazz@nttr.co.jp) ichiro/2.0 (http://help.goo.ne.jp/door/crawler.html) Homerbot: www.homerweb.com Honda-Search/0.7.2 (Nutch; http://lucene.apache.org/nutch/bot.html; search@honda-search.com) i1searchbot/2.0 (i1search web crawler; http://www.i1search.com; crawler@i1search.com) IErachnid 3.0 http://uk.searchengineeurope.com Nutch/0.7 (igougocrawler; http://www.igougo.com/search/web.asp; nutch-agent@lucene.apache.org) Mozilla/3.0 (INGRID/3.0 MT; webcrawler@NOSPAMexperimental.net; http://aanmelden.ilse.nl/?aanmeld_mode=webhints) iltrovatore-setaccio/1.2-dev (spidering; http://www.iltrovatore.it/aiuto/motore_di_ricerca.html; info@iltrovatore.it) Iltrovatore-Setaccio/0.3-dev (Indexing; http://www.iltrovatore.it/bot.html; info@iltrovatore.it) IlTrovatore-Setaccio/1.2 (It-bot;compatible;MSIE 6.0;Mozilla/4.0; http://www.iltrovatore.it/bot.html; bot@iltrovatore.it) IlTrovatore-Setaccio/1.2 (Italy search engine; http://www.iltrovatore.it/bot.html; bot@iltrovatore.it) InetSeekBot2005 (Version: 1.01, Powered by InetSeek.de) Seekbot/1.0 (http://www.seekbot.net/bot.html) HTTPFetcher/0.3 Insitor.com, search and find world wide! Mozilla/5.0 (compatible; Najdi.si/3.1) Jetbot/1.0 Jyxobot/1 KazoomBot/0.06-dev (Kazoom; http://www.kazoom.ca/bot.html; kazoombot@kazoom.ca) EasyDL/3.04 http://keywen.com/Encyclopedia/Bot cfetch/1.0 voyager/1.0 kulokobot www.kuloko.com kuloko@backweave.com kuloko-bot/0.2 Linguee Bot (http://www.linguee.com/bot; bot@linguee.com) Linknzbot (+ http://www.linknz.co.nz/robot.php) LocalBot/1.0 (+http://www.localbot.co.uk/) LocalcomBot/1.2 (+http://www.local.com/bot.htm) LocalcomBot/1.2.2 (+http://www.local.com/bot.htm) NetResearchServer(http://www.look.com) LookBot Look.com Seeker.lookseek.com Mozilla/4.0 (compatible; grub-client-1.2.1; Crawl your own stuff with http://grub.org) NutchCVS/0.05 (Nutch; http://www.nutch.org/docs/en/bot.html; nutch-agent@lists.sourceforge.net)MARTINI Metager2 (http://metager2.de/site/webmaster.php) Metaspinner/0.01 (Metaspinner; http://www.meta-spinner.de/; support@meta-spinner.de/) HenryTheMiragoRobot HenryTheMiragoRobot (http://www.miragorobot.com/scripts/mrinfo.asp) Mirago-Test-Robot (http://www.miragorobot.com) citenikbot/0.4 (albert; http://www.citenik.co.uk/bot.html) MojeekBot/0.1 (galileo; http://www.mojeek.com/bot.html) MojeekBot/0.2 (archi; http://www.mojeek.com/bot.html) Mozilla/5.0 (compatible; MojeekBot/2.0; http://www.mojeek.com/bot.html) mozDex/0.04-dev (mozDex; http://www.mozdex.com/en/bot.html; spider@mozdex.com) mozDex/0.05-dev (mozDex; http://www.mozdex.com/bot.html; spider@mozdex.com) MSNBOT/0.1 (http://search.msn.com/msnbot.htm) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT; MS Search 4.0 Robot) lanshanbot/1.0 ( http://search.msn.com/msnbot.htm) msnbot-Products/1.0 (+http://search.msn.com/msnbot.htm) msnbot-media/1.0 (+http://search.msn.com/msnbot.htm) msnbot/0.11 (+http://search.msn.com/msnbot.htm) msnbot/0.3 (+http://search.msn.com/msnbot.htm) msnbot/0.9 (+http://search.msn.com/msnbot.htm) msnbot/1.0 (+http://search.msn.com/msnbot.htm) Cowbot-0.1 (NHN Corp. / 2-3011-1954 / nhnbot@naver.com) NaverBot-1.0 (NHN Corp. / +82-2-3011-1954 / nhnbot@naver.com) Mozilla/4.0 (compatible; NaverBot/1.0; nhnbot@naver.com) Mozilla/4.0 (compatible; NaverBot/1.0; http://help.naver.com/delete_main.asp) Yeti/0.01 (nhn/1noon, yetibot@naver.com, check robots.txt daily and follows it) Yeti/1.0 (+http://help.naver.com/robots/) Mozilla/4.0 (compatible; MSIE 5.0;NetNose-Crawler 2.0; A New Search Experience: http://www.netnose.com) NetWhatCrawler/0.06-dev (NetWhatCrawler from NetWhat.com; http://www.netwhat.com; support@netwhat.com) NG-Search/0.90 (NG-SearchBot; http://www.ng-search.com; ) NokodoBot/1.2 (+http://nokodo.com/bot.htm) Mozilla/5.0 (compatible; Page2RSS/0.5; +http://page2rss.com/) noxtrumbot/1.0 (crawler@noxtrum.com) Nr1-Onlinebot (Version: 1.02, powered by www.nr1-online.de) NuSearch Spider www.nusearch.com Nutch NutchCVS/0.03-dev (Nutch; http://www.nutch.org/docs/bot.html; nutch-agent@lists.sourceforge.net) NutchCVS/0.03-dev (Nutch; http://www.nutch.org/docs/en/bot.html; nutch-agent@lists.sourceforge.net) NutchOrg/0.03-dev (Nutch; www.nutch.org/docs/bot.html; nutch-agent@lists.sourceforge.net) NutchCVS/0.05-dev (Nutch; http://www.nutch.org/docs/en/bot.html; nutch-agent@lists.sourceforge.net) ObjectsSearch/0.01 (ObjectsSearch; http://www.ObjectsSearch.com/bot.html; support@thesoftwareobjects.com) ObjectsSearch/0.02 (ObjectsSearch; http://www.ObjectsSearch.com/bot.html; support@thesoftwareobjects.com) ObjectsSearch/0.06 (ObjectsSearch; http://www.ObjectsSearch.com/bot.html; support@thesoftwareobjects.com) OmniExplorer_Bot/1.07 (+http://www.omni-explorer.com) Internet Categorizer OmniExplorer_Bot/1.09 (+http://www.omni-explorer.com) Internet Categorizer OmniExplorer_Bot/1.09 (+http://www.omni-explorer.com) OmniExplorer_Bot/1.10 (+http://www.omni-explorer.com) Jobs Crawler OmniExplorer_Bot/1.18 (+http://www.omni-explorer.com) Torrent Crawler OmniExplorer_Bot/2.3 (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/2.57 (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/2.67 (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/2.69 (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/2.70 (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/2.71 (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/2.73 (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/2.78a (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/2.82 (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/2.83 (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/2.86b (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/2.91 (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/2.92 (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/2.93 (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/3.06c (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/3.06d (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/4.32 (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/5.24 (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/6.46 (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/6.47 (+http://www.omni-explorer.com) WorldIndexer OmniExplorer_Bot/6.57 (+http://www.omni-explorer.com) WorldIndexer Onet.pl SA, http://szukaj.onet.pl Mozilla/5.0 (compatible; OnetSzukaj/5.0; +http://szukaj.onet.pl) holmes/3.9 (OnetSzukaj/5.0; +http://szukaj.onet.pl) Gaisbot/3.0+(robot@gais.cs.ccu.edu.tw;+http://gais.cs.ccu.edu.tw/robot.php) Openbot/3.0+(robot-response@openfind.com.tw;+http://www.openfind.com.tw/robot.html) Openfind data gatherer,Openbot/3.0+(robot-response@openfind.com.tw;+http://www.openfind.com.tw/robot.html) PEERbot www.peerbot.com BravoBrian SpiderEngine MarcoPolo psbot/0.1 (+http://www.picsearch.com/bot.html) http://www.picsearch.com/bot.html pipeLiner/0.10 (PipeLine Spider; http://www.pipeline-search.com/webmaster.html) Pompos/1.3 http://dir.com/pompos.html Pop.gr/6.1 Arachne(compatible; MSIE 6.0; Windows 98; Corus) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; PrassoSunner 1.00; http://www.prasso.com;) ProloCrawler/1.0 (http://www.prolo.com) www.proodle.com MSIE (MSIE 5.23; Mac_PowerPC) QweeryBot v2.05 -- http://qweerybot.qweery.com QweeryBot/2.06 ( http://qweerybot.qweery.com) QuepasaCreep ( crawler@quepasacorp.com ) StackRambler/2.0 (MSIE incompatible) Blaiz-Bee/2.00.953 (+http://www.blaiz.net) RedCarpet/1.2 (http://www.redcarpet-inc.com/robots.html) RedKernel WWW-Spider 2/0 (+http://www-spider.redkernel-softwares.com/) Bumblebee@relevare.com DoCoMo/1.0/N505i/c20/TB/W20H10 (compatible; RFCrawler-Mobile/1.0; DoCoMo/1.0/N505i/c20/TB/W20H10+(compatible;+RFCrawler-Mobile/1.0; DoCoMo/2.0+SH901iC(c100;TB;W24H12) DoCoMo/1.0/N505i/c20/TB/W20H10 (compatible; RFCrawler-Mobile/1.0; RufusBot (Rufus Web Miner; http://64.124.122.252/feedback.html) MaSagool/1.0 (MaSagool; http://sagool.jp/; masagool@sagool.jp) Scrubby/2.2 (http://www.scrubtheweb.com/) Scrubby/2.1 (http://www.scrubtheweb.com/abs/meta-check.html) search.ch V1.4.2 (spiderman@search.ch; http://www.search.ch) search.ch V1.4.2 (http://www.search.ch) SearchIt.Bot 1.62 (http://www.searchit.com/) SearchIt-Bot/2.3.1 (Searchit.Com; http://www.searchit.com/; ) Mozilla/5.0 (compatible; Charlotte/1.1; http://www.searchme.com/support/) Searchmee! Spider v0.98a SearchSight/2.0 (http://SearchSight.com/) Searchspider/1.2 (SearchSpider; http://www.searchspider.com; webmaster@searchspider.com) searchuk.comBot 1.1 (http://searchuk.com/spider) searchuk.comBot 1.2 (http://searchuk.com/spider) WireBot/1.0 (SearchWire.co.uk) SeekOn Spider 1.9(+http://www.seekon.com/spider.html) Seekbot/1.0 (http://www.seekbot.net/bot.html) HTTPFetcher/2.2 Semager/1.0 (http://www.semager.de) Sensis Web Crawler (search_comments\at\sensis\dot\com\dot\au) Sensis.com.au Web Crawler (search_comments\at\sensis\dot\com\dot\au) SeznamBot/1.0 (+http://fulltext.seznam.cz/) ShopWiki/1.0 ( +http://www.shopwiki.com/wiki/Help:Bot) asterias/2.0 Mozilla/4.0 (compatible; MSIE 6.0 compatible; Asterias Crawler v4; +http://www.singingfish.com/help/spider.html; webmaster@singingfish.com); SpiderThread Revision: 1.9 Reaper [2.03.10-031204] (http://www.sitesearch.ca/reaper/) Helix/1.2 (+http://www.sitesearch.ca/helix/) SitiDi.net/SitiDiBot/1.0 (+Have Good Day) SMEALSearch-Bot snap.com beta crawler v0 Snapbot/1.0 semanticdiscovery/0.2(http://www.semanticdiscovery.com/sd/robot.html) semanticdiscovery/0.4(http://www.semanticdiscovery.com/sd/robot.html sogou spider Sogou web spider/4.0(+http://www.sogou.com/docs/help/webmasters.htm#07) sohu-search sohu agent libwww-perl/5.45 sproose/0.1-alpha (sproose crawler; http://www.sproose.com/bot.html; crawler@sproose.com) sproose/0.1 (sproose bot; http://www.sproose.com/bot.html; crawler@sproose.com) Spider_Monkey/7.06 (SpiderMonkey.ca info at http://SpiderMonkey.ca /sm.shtml) SquigglebotBot/1.0 http://squigglebot.com http://www.sygol.com Szukacz/1.5 (robot; www.szukacz.pl/jakdzialarobot.html; info@szukacz.pl) NMG Spider/0.3 (szukanko.com) TerrawizBot/1.0 (+http://www.terrawiz.com/bot.html) T-H-U-N-D-E-R-S-T-O-N-E Mozilla/4.0 (compatible; T-H-U-N-D-E-R-S-T-O-N-E) Mozilla/4.0 (GeorgeTheTouristBot;http://www.touristlinks.net) TygoBot TygoProwler (http://www.tygo.com/) uk-Searcher(HTTP://WWW.UK-SEARCHER.CO.UK) uksearchpages.co.uk Mackster( http://www.ukwizz.com ) UKWizz/Nutch-0.8.1 (UKWizz Nutch crawler; http://www.ukwizz.com/) search.updated.com/0.06 (search.updated.com; http://www.updated.com/docucmentation/bot.html; crawler@updated.com) updated/0.1beta (updated.com; http://www.updated.com; crawler@updated.com) updated/0.1-alpha (updated crawler; http://www.updated.com; crawler@updated.com) VMBot/0.7.2 (VMBot; http://www.VerticalMatch.com/; vmbot@tradedot.com) VisBot/2.0+(Visvo.com+Crawler) Mozilla/4.0 (compatible; MSIE 5.0; Windows 95) VoilaBot BETA 1.2 (http://www.voila.com/) appie 1.1 (www.walhello.com) webcrawl.net WebGather 3.0 WebIndexer/1-dev (Web Indexer; mailto://webindexerv1@yahoo.com; webindexerv1@yahoo.com) webrover/0.1 (+http://www.webrover.de) WebSearch.COM.AU/3.0.1 (The Australian Search Engine; http://WebSearch.COM.AU; Search@WebSearch.COM.AU) MSIE 6.0 ScollSpider/2.0 (+http://www.webwobot.com/ScollSpider.php) WhatchaBot10 (http://www.whatchaseek.com) Mozilla/5.0 (compatible; Vagabondo/2.1; webcrawler at wise-guys dot nl; http://webagent.wise-guys.nl/) Bilbo Mozilla/4.0 (compatible; Vagabondo/2.3; webcrawler at wise-guys dot nl; http://webagent.wise-guys.nl/) Mozilla/4.0 compatible ZyBorg/1.0 (wn.zyborg@looksmart.net; http://www.WISEnutbot.com) Mozilla/4.0 compatible ZyBorg/1.0 Dead Link Checker (wn.zyborg@looksmart.net; http://www.WISEnutbot.com) WorldLight WWWeasel Robot v1.00 (http://wwweasel.de) Wotbox/alpha0.5.1 (bot@wotbox.com; http://www.wotbox.com) Java/1.4.1_02 wwwster/1.4 (Beta, mailto:gue@cis.uni-muenchen.de) xirq/0.1-dev (xirq; http://www.xirq.com; xirq@xirq.com) YadowsCrawler (http://www.yadows.com) Yandex/1.01.001 (compatible; Win16; H) Yandex/1.01.001 (compatible; Win16; I) Yandex/1.01.001 (compatible; Win16; P) Yandex/1.03.000 (compatible; Win16; M) Yandex/1.03.003 (compatible; Win16; D) Yandex/1.03.003 (compatible; Win16; D) Yandex/2.01.000 (compatible; Win16; Dyatel; C) Yandex/2.01.000 (compatible; Win16; Dyatel; D) Yandex/2.01.000 (compatible; Win16; Dyatel; N) Yandex/2.01.000 (compatible; Win16; Dyatel; Z) Yanga WorldSearch Bot v1.1/beta (http://www.yanga.co.uk/) YodaoBot/1.0 (http://www.yodao.com/help/webmaster/spider/; ) Mozilla/5.0 (compatible; YoudaoBot/1.0; http://www.youdao.com/help/webmaster/spider/; ) Gulper Web Bot 0.2.4 (www.ecsl.cs.sunysb.edu/~maxim/cgi-bin/Link/GulperBot) Zao/0.1 (http://www.kototoi.org/zao/) Zao/0.2 (http://www.kototoi.org/zao/) Zao-Crawler zibber-v0.1(www.zibb.com/crawler/) ZIPPPCVS/0.24 (ZipppBot/.24; http://www.zippp.net; webmaster@zippp.net) ZipppBot/0.11 (ZipppBot; http://www.zippp.net; webmaster@zippp.net) NextGenSearchBot 1 (for information visit http://about.zoominfo.com/PublicSite/NextGenSearchBot.asp) ia_archiver http://www.almaden.ibm.com/cs/crawler Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0) curl/7.9.1 (win32) libcurl 7.9.1 dtSearchSpider Mozilla/4.7 (compatible; http://eidetica.com/spider) e-SocietyRobot(http://www.yama.info.waseda.ac.jp/~yamana/es/) Mozilla/4.0 (fantomBrowser) Mozilla/4.0 (stealthBrowser) Mozilla/4.0 (cloakBrowser) Mozilla/4.0 (fantomCrew Browser) multiBlocker browser - IP blocker for Spam, Fraud + Snoop Protection multiBlocker browser Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; Girafabot; girafabot at girafa dot com; http://www.girafa.com) Googlebot/2.1 (+http://www.googlebot.com/bot.html) Mozilla/4.0 (compatible; MSIE 6.0; Googlebot/2.1 (+http://www.googlebot.com/bot.html); .NET CLR 1.0.3705) IncyWincy data gatherer(webmaster@loopimprovements.com,http://www.loopimprovements.com/robot.html) Mozilla/3.0 (compatible; Indy Library) Sqworm/2.9.72-BETA (beta_release; 20010821-737; i686-pc-linux-gnu) larbin (or some variations on larbin) Mozilla/4.7 (compatible; Intelliseek; http://www.intelliseek.com) sitecheck.internetseer.com larbin LNSpiderguy LinkWalker Lite Bot 0916b MarkWatch/1.0 flunky Microsoft URL Control - 5.01.4319 NAMEPROTECT Mozilla/4.7 RPT-HTTPClient/0.3-3 NPBot-1/2.0 (http://www.nameprotect.com/botinfo.html) aipbot/1.0 (aipbot; http://www.aipbot.com; aipbot@aipbot.com) NetMechanic V2.0 WebFilter Robot 1.0 PicaLoader 1.0 Robozilla/1.0 RPT-HTTPClient/0.3-3 ScoutAbout TurnitinBot/1.4 http://www.turnitin.com/robot/crawlerinfo.html SlySearch WebZIP/4.0 (http://www.spidersoft.com) Teleport Pro/1.28 (Teradex Mapper; mapper@teradex.com; http://www.teradex.com) tivraSpider/1.0 (crawler@tivra.com) libwww-perl/5.47 UbiCrawler/v0.3beta (http://ubi.imc.pi.cnr.it/projects/ubicrawler/) Webclipping.com webrank websquash.com ( Add Url Robot ) lwp-trivial/1.34 AESOP_com_SpiderMan ozilla/4.7 (compatible; Whizbang) TECOMAC-Crawler/0.3 X-Crawler cosmos/0.8)_(robot@xyleme.com) Mozilla/4.05 Mozilla/4.0(compatible; Zealbot 1.0) Zeus 60359 Webster Pro V2.9 Win32 Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; GTMProbe 1.0) BUbiNG+(+http://law.di.unimi.it/BUbiNG.html)
</excludedUserAgents>
<!--
List of ip addresses of search engines. Requests from following addresses will be ignored by Analytics.
    Supported values and formates:
    IP address, e.g. 10.2.3.4
    IP range, e.g. 10.1.2.3 - 10.1.2.30
    Subnet, e.g. 10.2.3.*
    Use # for comments
    See http://iplists.com/ for updates
    
-->
<excludedIPAddresses/>
</analyticsExcludeRobots>
<behaviorProfileConverter type="Sitecore.Analytics.Data.BehaviorProfileConverter, Sitecore.Analytics" singleInstance="false" patch:source="Sitecore.Analytics.Tracking.config"/>
<contactRepository type="Sitecore.Analytics.Data.ContactRepository, Sitecore.Analytics" singleInstance="true" patch:source="Sitecore.Analytics.Tracking.config"/>
<dataAdapterManager defaultProvider="xconnect" patch:source="Sitecore.ContentTesting.config">
<providers>
<clear/>
<add name="xconnect" type="Sitecore.Analytics.XConnect.DataAccess.XConnectDataAdapterProvider, Sitecore.Analytics.XConnect" patch:source="Sitecore.ContentTesting.config">
<facets hint="raw:AddFacet" patch:source="Sitecore.ContentTesting.config">
<!--
 Removing some of the default facets (Classification, EngagementMeasures, etc.) can cause issues, because there is code depending on them. 
-->
<facet facetKey="Classification"/>
<facet facetKey="EngagementMeasures"/>
<facet facetKey="ContactBehaviorProfile"/>
<facet facetKey="Personal"/>
<facet facetKey="KeyBehaviorCache"/>
<facet facetKey="ListSubscriptions"/>
<facet facetKey="AutomationPlanEnrollmentCache" patch:source="Sitecore.Xdb.MarketingAutomation.Tracking.config"/>
<facet facetKey="AutomationPlanExit" patch:source="Sitecore.Xdb.MarketingAutomation.Tracking.config"/>
<facet desc="ContentTesting_TestCombinations" facetKey="TestCombinations" patch:source="Sitecore.ContentTesting.config"/>
</facets>
<GetOperationTimeout>0.00:00:05</GetOperationTimeout>
</add>
</providers>
</dataAdapterManager>
<geoIpManager defaultProvider="default" patch:source="Sitecore.Analytics.Tracking.config">
<providers>
<clear/>
<!--
  SALT 
              Salt attribute - a string that is added to the IP address when it is hashed.
              For security reasons, we recommended that the salt contains at least 6 characters.
        
-->
<add name="default" salt="f54RYb4RT4ylUn" type="Sitecore.Analytics.Lookups.IpHashProvider, Sitecore.Analytics"/>
</providers>
</geoIpManager>
<submitQueue patch:source="Sitecore.Analytics.Tracking.config">
<queue type="Sitecore.Analytics.Data.DataAccess.SubmitQueue.FileSubmitQueue, Sitecore.Analytics" singleInstance="true">
<param desc="folderPath">/App_Data/Submit Queue</param>
</queue>
<backgroundService type="Sitecore.Analytics.SubmitQueueService, Sitecore.Analytics" patch:source="Sitecore.Analytics.Tracking.Database.config">
<!--  Service wakeup interval in seconds.  -->
<Interval>60</Interval>
</backgroundService>
</submitQueue>
<marketingDefinitions patch:source="Sitecore.Marketing.Definitions.MarketingAssets.Repositories.Solr.IndexConfiguration.config">
<indexConfigurations>
<solrIndexConfiguration ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration">
<fieldMap ref="contentSearch/indexConfigurations/defaultSolrIndexConfiguration/fieldMap">
<fieldNames hint="raw:AddFieldByFieldName">
<field type="System.String" fieldName="_uniqueid" returnType="string" storageType="YES" indexType="TOKENIZED" vectorType="NO" boost="1f" settingType="Sitecore.ContentSearch.LuceneProvider.LuceneSearchFieldConfiguration, Sitecore.ContentSearch.LuceneProvider">
<analyzer type="Sitecore.ContentSearch.LuceneProvider.Analyzers.LowerCaseKeywordAnalyzer, Sitecore.ContentSearch.LuceneProvider"/>
</field>
<field type="System.String" fieldName="marketing asset" returnType="string" storageType="YES" indexType="TOKENIZED" vectorType="NO" boost="1f" settingType="Sitecore.ContentSearch.LuceneProvider.LuceneSearchFieldConfiguration, Sitecore.ContentSearch.LuceneProvider">
<analyzer type="Sitecore.ContentSearch.LuceneProvider.Analyzers.LowerCaseKeywordAnalyzer, Sitecore.ContentSearch.LuceneProvider"/>
</field>
<field type="System.String" fieldName="asset 1" returnType="string" storageType="YES" indexType="TOKENIZED" vectorType="NO" boost="1f" settingType="Sitecore.ContentSearch.LuceneProvider.LuceneSearchFieldConfiguration, Sitecore.ContentSearch.LuceneProvider">
<analyzer type="Sitecore.ContentSearch.LuceneProvider.Analyzers.LowerCaseKeywordAnalyzer, Sitecore.ContentSearch.LuceneProvider"/>
</field>
<field type="System.String" fieldName="asset 2" returnType="string" storageType="YES" indexType="TOKENIZED" vectorType="NO" boost="1f" settingType="Sitecore.ContentSearch.LuceneProvider.LuceneSearchFieldConfiguration, Sitecore.ContentSearch.LuceneProvider">
<analyzer type="Sitecore.ContentSearch.LuceneProvider.Analyzers.LowerCaseKeywordAnalyzer, Sitecore.ContentSearch.LuceneProvider"/>
</field>
<field type="System.String" fieldName="asset 3" returnType="string" storageType="YES" indexType="TOKENIZED" vectorType="NO" boost="1f" settingType="Sitecore.ContentSearch.LuceneProvider.LuceneSearchFieldConfiguration, Sitecore.ContentSearch.LuceneProvider">
<analyzer type="Sitecore.ContentSearch.LuceneProvider.Analyzers.LowerCaseKeywordAnalyzer, Sitecore.ContentSearch.LuceneProvider"/>
</field>
</fieldNames>
</fieldMap>
</solrIndexConfiguration>
</indexConfigurations>
</marketingDefinitions>
<mvc patch:source="Sitecore.Mvc.config">
<areas>
<!--
 MVC: Sitecore will by default register all areas in the initialize pipeline.
                  Use the below list to specify areas that should not be registered in the initialize pipeline.
        
-->
<excludedAreas>
<area type="Sitecore.Social.Client.Mvc.Areas.Social.SocialAreaRegistration, Sitecore.Social.Client.Mvc"/>
</excludedAreas>
</areas>
<configurationAssemblies type="Sitecore.Web.AssembliesScanner.ExcludedAssembliesConfiguration, Sitecore.Web">
<excludedAssemblies hint="list">
<!--
 
            The Blacklist
            
            This section defines a list of assembly name matches to filter out any assemblies
            that are not required by the IAssembliesResolver. Assembly names that start with a 
            name within the excludedAssemblies will not be returned in the results from
            IAssembleResolver.GetAssemblies()
            
            
-->
<excludedAssembly id="Antlr3.Runtime">Antlr3.Runtime</excludedAssembly>
<excludedAssembly id="CommonServiceLocator">CommonServiceLocator</excludedAssembly>
<excludedAssembly id="ComponentArt">ComponentArt</excludedAssembly>
<excludedAssembly id="CsQuery">CsQuery</excludedAssembly>
<excludedAssembly id="CustomFields">CustomFields</excludedAssembly>
<excludedAssembly id="DocumentFormat">DocumentFormat</excludedAssembly>
<excludedAssembly id="DotNetOpenAuth">DotNetOpenAuth</excludedAssembly>
<excludedAssembly id="EcmaScript.NET">EcmaScript.NET</excludedAssembly>
<excludedAssembly id="Facebook">Facebook</excludedAssembly>
<excludedAssembly id="Google.Apis">Google.Apis</excludedAssembly>
<excludedAssembly id="Hammock.ClientProfile">Hammock.ClientProfile</excludedAssembly>
<excludedAssembly id="HtmlAgilityPack">HtmlAgilityPack</excludedAssembly>
<excludedAssembly id="ICSharpCode.SharpZipLib">ICSharpCode.SharpZipLib</excludedAssembly>
<excludedAssembly id="Iesi.Collections">Iesi.Collections</excludedAssembly>
<excludedAssembly id="ITHit.WebDAV.">ITHit.WebDAV.</excludedAssembly>
<excludedAssembly id="LogService">LogService</excludedAssembly>
<excludedAssembly id="Lucene">Lucene</excludedAssembly>
<excludedAssembly id="MarkdownSharp">MarkdownSharp</excludedAssembly>
<excludedAssembly id="Microsoft.">Microsoft.</excludedAssembly>
<excludedAssembly id="MongoDB.">MongoDB.</excludedAssembly>
<excludedAssembly id="mscorlib">mscorlib</excludedAssembly>
<excludedAssembly id="Mvp.Xml">Mvp.Xml</excludedAssembly>
<excludedAssembly id="Netbiscuits">Netbiscuits</excludedAssembly>
<excludedAssembly id="Newtonsoft.Json">Newtonsoft.Json</excludedAssembly>
<excludedAssembly id="Ninject">Ninject</excludedAssembly>
<excludedAssembly id="OAuthLinkedIn">OAuthLinkedIn</excludedAssembly>
<excludedAssembly id="Owin">Owin</excludedAssembly>
<excludedAssembly id="PdfSharp">PdfSharp</excludedAssembly>
<excludedAssembly id="protobuf-net">protobuf-net</excludedAssembly>
<excludedAssembly id="RadEditor.Net2">RadEditor.Net2</excludedAssembly>
<excludedAssembly id="RazorGenerator.Mvc">RazorGenerator.Mvc</excludedAssembly>
<excludedAssembly id="Rebus">Rebus</excludedAssembly>
<excludedAssembly id="Remotion.Linq">Remotion.Linq</excludedAssembly>
<excludedAssembly id="Sitecore.Analytics">Sitecore.Analytics</excludedAssembly>
<excludedAssembly id="Sitecore.Apps">Sitecore.Apps</excludedAssembly>
<excludedAssembly id="Sitecore.CES">Sitecore.CES</excludedAssembly>
<excludedAssembly id="Sitecore.Cloud">Sitecore.Cloud</excludedAssembly>
<excludedAssembly id="Sitecore.ContentSearch">Sitecore.ContentSearch</excludedAssembly>
<excludedAssembly id="Sitecore.NVelocity">Sitecore.NVelocity</excludedAssembly>
<excludedAssembly id="Sitecore.Oracle">Sitecore.Oracle</excludedAssembly>
<excludedAssembly id="Sitecore.Owin">Sitecore.Owin</excludedAssembly>
<excludedAssembly id="Sitecore.SegmentBuilder">Sitecore.SegmentBuilder</excludedAssembly>
<excludedAssembly id="Sitecore.SessionProvider">Sitecore.SessionProvider</excludedAssembly>
<excludedAssembly id="Sitecore.Update">Sitecore.Update</excludedAssembly>
<excludedAssembly id="Sitecore.XConnect">Sitecore.XConnect</excludedAssembly>
<excludedAssembly id="Sitecore.Xdb">Sitecore.Xdb</excludedAssembly>
<excludedAssembly id="SMDiagnostics">SMDiagnostics</excludedAssembly>
<excludedAssembly id="SolrNet">SolrNet</excludedAssembly>
<excludedAssembly id="Stimulsoft">Stimulsoft</excludedAssembly>
<excludedAssembly id="System.">System.</excludedAssembly>
<excludedAssembly id="Telerik">Telerik</excludedAssembly>
<excludedAssembly id="TweetSharp">TweetSharp</excludedAssembly>
<excludedAssembly id="WebGrease">WebGrease</excludedAssembly>
<excludedAssembly id="WindowsBase">WindowsBase</excludedAssembly>
<excludedAssembly id="Yahoo.Yui.Compressor">Yahoo.Yui.Compressor</excludedAssembly>
</excludedAssemblies>
<!--  The Whitelist  -->
<includedAssemblies hint="list">
<includedAssembly id="Sitecore.Mvc">Sitecore.Mvc</includedAssembly>
<includedAssembly id="System.Web.Mvc">System.Web.Mvc</includedAssembly>
</includedAssemblies>
</configurationAssemblies>
<precompilation>
<!--
MVC: Sitecore will load an assemblyIdentity assemblies and use the precompiled 
                 razor views that they contain in MVC view resolution.
        
-->
<assemblies>
<assemblyIdentity name="Sitecore.Mvc"/>
<assemblyIdentity name="Sitecore.Speak.Web" patch:source="Sitecore.Speak.Mvc.config"/>
<assemblyIdentity name="Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<assemblyIdentity name="Sitecore.Speak.Components.Web" patch:source="Sitecore.Speak.Components.Mvc.config"/>
<assemblyIdentity name="Sitecore.EmailCampaign.Cm.UI" patch:source="Sitecore.EmailExperience.UI.config"/>
</assemblies>
</precompilation>
</mvc>
<!--
 SITECORE SERVICES WEB API CONFIGURATION 
             Specifies the list of Web API filters, allowed controllers and unhandled exception loggers to load for request handling
        
-->
<!--
 SITECORE SERVICES WEB API FILTERS 
         Specifies the list of Web API filters to load for request handling
    
-->
<!--  API  -->
<!--
 Allow the FXM tracking beacon to be called by non-local clients (i.e. the end user's we are tracking) 
-->
<!--  API  -->
<api patch:source="Sitecore.Services.Client.config">
<services>
<configuration type="Sitecore.Services.Infrastructure.Configuration.ServicesConfiguration, Sitecore.Services.Infrastructure" patch:source="Sitecore.PathAnalyzer.Services.config">
<!--
Configuration for assembly resolver. Possible options: 
                        Blacklist (default) - load all libraries except of list in excludedAssemblies node. Namespace: Sitecore.Web.AssembliesScanner.ExcludedAssembliesConfiguration
                        Whitelist - load only libraries from the includedAssemblies node. Namespace: Sitecore.Web.AssembliesScanner.IncludedAssembliesConfiguration
                        Mixed strategy (Blacklist & Whitelist) - load included assemblies if are not excluded. Namespace: Sitecore.Web.AssembliesScanner.MixedAssembliesConfiguration
                    
-->
<configurationAssemblies type="Sitecore.Web.AssembliesScanner.ExcludedAssembliesConfiguration, Sitecore.Web">
<!--
 The Blacklist
                            This section defines a list of assembly name matches to filter out any assemblies
                            that are not required by the IAssemmblyResolver. Assembly names that start with a 
                            name within the excludedAssemblies will not be returned in the results from
                            IAssembleResolver.GetAssemblies() 
-->
<excludedAssemblies hint="list"/>
<!--  The Whitelist  -->
<includedAssemblies hint="list"/>
</configurationAssemblies>
<excludedAssemblies hint="list:AddExcludedAssembly">
<!--
 
                            The section is deprecaited and will be deleted in future versions. Use configurationAssemblies/excludedAssemblies instead

                            This section defines a list of assembly name matches to filter out any assemblies
                            that are not required by the IAssemblyResolver. Assembly names that start with a 
                            name within the excludedAssemblies will not be returned in the results from
                            IAssembleResolver.GetAssemblies()   
                        
-->
<excludedAssembly id="Antlr3.Runtime">Antlr3.Runtime</excludedAssembly>
<excludedAssembly id="Castle">Castle</excludedAssembly>
<excludedAssembly id="ComponentArt">ComponentArt</excludedAssembly>
<excludedAssembly id="CsQuery">CsQuery</excludedAssembly>
<excludedAssembly id="CustomFields">CustomFields</excludedAssembly>
<excludedAssembly id="DotNetOpenAuth">DotNetOpenAuth</excludedAssembly>
<excludedAssembly id="EcmaScript.NET">EcmaScript.NET</excludedAssembly>
<excludedAssembly id="Facebook">Facebook</excludedAssembly>
<excludedAssembly id="Google.Apis">Google.Apis</excludedAssembly>
<excludedAssembly id="Hammock.ClientProfile">Hammock.ClientProfile</excludedAssembly>
<excludedAssembly id="HtmlAgilityPack">HtmlAgilityPack</excludedAssembly>
<excludedAssembly id="Iesi.Collections">Iesi.Collections</excludedAssembly>
<excludedAssembly id="ICSharpCode.SharpZipLib">ICSharpCode.SharpZipLib</excludedAssembly>
<excludedAssembly id="ITHit.WebDAV.">ITHit.WebDAV.</excludedAssembly>
<excludedAssembly id="LogService">LogService</excludedAssembly>
<excludedAssembly id="Lucene">Lucene</excludedAssembly>
<excludedAssembly id="MarkdownSharp">MarkdownSharp</excludedAssembly>
<excludedAssembly id="Microsoft.">Microsoft.</excludedAssembly>
<excludedAssembly id="mscorlib">mscorlib</excludedAssembly>
<excludedAssembly id="MongoDB.">MongoDB.</excludedAssembly>
<excludedAssembly id="Mvp.Xml">Mvp.Xml</excludedAssembly>
<excludedAssembly id="Netbiscuits">Netbiscuits</excludedAssembly>
<excludedAssembly id="Newtonsoft.Json">Newtonsoft.Json</excludedAssembly>
<excludedAssembly id="Ninject">Ninject</excludedAssembly>
<excludedAssembly id="OAuthLinkedIn">OAuthLinkedIn</excludedAssembly>
<excludedAssembly id="protobuf-net">protobuf-net</excludedAssembly>
<excludedAssembly id="RadEditor.Net2">RadEditor.Net2</excludedAssembly>
<excludedAssembly id="RazorGenerator.Mvc">RazorGenerator.Mvc</excludedAssembly>
<excludedAssembly id="Sitecore.Analytics">Sitecore.Analytics</excludedAssembly>
<excludedAssembly id="Sitecore.Apps">Sitecore.Apps</excludedAssembly>
<excludedAssembly id="Sitecore.CES">Sitecore.CES</excludedAssembly>
<excludedAssembly id="Sitecore.Cloud">Sitecore.Cloud</excludedAssembly>
<excludedAssembly id="Sitecore.Oracle">Sitecore.Oracle</excludedAssembly>
<excludedAssembly id="Sitecore.SegmentBuilder">Sitecore.SegmentBuilder</excludedAssembly>
<excludedAssembly id="Sitecore.SessionProvider">Sitecore.SessionProvider</excludedAssembly>
<excludedAssembly id="Sitecore.Xdb">Sitecore.Xdb</excludedAssembly>
<excludedAssembly id="SMDiagnostics">SMDiagnostics</excludedAssembly>
<excludedAssembly id="SolrNet">SolrNet</excludedAssembly>
<excludedAssembly id="Stimulsoft">Stimulsoft</excludedAssembly>
<excludedAssembly id="System.Data">System.Data</excludedAssembly>
<excludedAssembly id="System.Drawing">System.Drawing</excludedAssembly>
<excludedAssembly id="System.EnterpriseServices">System.EnterpriseServices</excludedAssembly>
<excludedAssembly id="System.IdentityModel">System.IdentityModel</excludedAssembly>
<excludedAssembly id="System.Net">System.Net</excludedAssembly>
<excludedAssembly id="System.Runtime.Serialization">System.Runtime.Serialization</excludedAssembly>
<excludedAssembly id="System.ServiceModel">System.ServiceModel</excludedAssembly>
<excludedAssembly id="System.Web.WebPages">System.Web.WebPages</excludedAssembly>
<excludedAssembly id="System.Xml">System.Xml</excludedAssembly>
<excludedAssembly id="System.Web.Optimization">System.Web.Optimization</excludedAssembly>
<excludedAssembly id="System.Web.Razor">System.Web.Razor</excludedAssembly>
<excludedAssembly id="System.Web.Routing">System.Web.Routing</excludedAssembly>
<excludedAssembly id="System.Web.Services">System.Web.Services</excludedAssembly>
<excludedAssembly id="System.WorkflowServices">System.WorkflowServices</excludedAssembly>
<excludedAssembly id="Telerik">Telerik</excludedAssembly>
<excludedAssembly id="TweetSharp">TweetSharp</excludedAssembly>
<excludedAssembly id="WebGrease">WebGrease</excludedAssembly>
<excludedAssembly id="WindowsBase">WindowsBase</excludedAssembly>
<excludedAssembly id="Yahoo.Yui.Compressor">Yahoo.Yui.Compressor</excludedAssembly>
</excludedAssemblies>
<filters hint="list:AddFilter">
<filter desc="AnonymousUserFilter">
Sitecore.Services.Infrastructure.Web.Http.Filters.AnonymousUserFilter, Sitecore.Services.Infrastructure
</filter>
<filter desc="SecurityPolicyAuthorizationFilter">
Sitecore.Services.Infrastructure.Web.Http.Filters.SecurityPolicyAuthorizationFilter, Sitecore.Services.Infrastructure
</filter>
<filter desc="ThrottleGlobalFilter">
Sitecore.Services.Infrastructure.Sitecore.Web.Http.Filters.ThrottleGlobalFilter, Sitecore.Services.Infrastructure.Sitecore
</filter>
</filters>
<delegatingHandlers hint="list:AddDelegatingHandler">
<delegatingHandler desc="TokenDelegatingHandler">
Sitecore.Services.Infrastructure.Sitecore.Security.TokenDelegatingHandler, Sitecore.Services.Infrastructure.Sitecore
</delegatingHandler>
</delegatingHandlers>
<allowedOrigins hint="list:AddOrigin"/>
<!--  Grant permissions to Campaign Creator controllers  -->
<!--
 ALLOWED CONTROLLERS
               A whitelist of all controllers which should not be denied access by the default Sitecore Services Client API security policy i.e. ServicesLocalOnlyPolicy
          
-->
<allowedControllers hint="list:AddController" patch:source="Sitecore.PathAnalyzer.Services.config">
<!--

                            Add allowedController elements here for any controllers that should be exempt 
                            from the Sitecore Services Security Policy
                            
                            <allowedController desc="description">...</allowedController>                            
                        
-->
<allowedController desc="ItemsController">
Sitecore.Content.Services.Controllers.ItemsController, Sitecore.Content.Services
</allowedController>
<allowedController desc="SupportPackageFileController" patch:source="Sitecore.ExperienceContentManagement.Administration.config">
Sitecore.ExperienceContentManagement.Administration.Controllers.SupportPackageFileController,Sitecore.ExperienceContentManagement.Administration
</allowedController>
<allowedController desc="SupportPackageRequestController" patch:source="Sitecore.ExperienceContentManagement.Administration.config">
Sitecore.ExperienceContentManagement.Administration.Controllers.SupportPackageRequestController,Sitecore.ExperienceContentManagement.Administration
</allowedController>
<allowedController desc="SitecoreSpeakIntegrationComponentAccessController" patch:source="Sitecore.Speak.Integration.Services.config">
Sitecore.Speak.Integration.Services.Controllers.ComponentAccessController, Sitecore.Speak.Integration.Services
</allowedController>
<allowedController desc="SitecoreSpeakIntegrationContextController" patch:source="Sitecore.Speak.Integration.Services.config">
Sitecore.Speak.Integration.Services.Controllers.ContextController, Sitecore.Speak.Integration.Services
</allowedController>
<allowedController desc="SitecoreSpeakIntegrationTranslateController" patch:source="Sitecore.Speak.Integration.Services.config">
Sitecore.Speak.Integration.Services.Controllers.TranslateController, Sitecore.Speak.Integration.Services
</allowedController>
<allowedController desc="SitecoreSpeakIntegrationUtilsController" patch:source="Sitecore.Speak.Integration.Services.config">
Sitecore.Speak.Integration.Services.Controllers.UtilsController, Sitecore.Speak.Integration.Services
</allowedController>
<allowedController desc="ActionsController" patch:source="Sitecore.ListManagement.Services.config">
Sitecore.ListManagement.Services.ActionsController, Sitecore.ListManagement.Services
</allowedController>
<allowedController desc="ContactListController" patch:source="Sitecore.ListManagement.Services.config">
Sitecore.ListManagement.Services.ContactListController, Sitecore.ListManagement.Services
</allowedController>
<allowedController desc="ContactsController" patch:source="Sitecore.ListManagement.Services.config">
Sitecore.ListManagement.Services.Controllers.ContactsController, Sitecore.ListManagement.Services
</allowedController>
<allowedController desc="ExportController" patch:source="Sitecore.ListManagement.Services.config">
Sitecore.ListManagement.Services.Controllers.ExportController, Sitecore.ListManagement.Services
</allowedController>
<allowedController desc="ImportController" patch:source="Sitecore.ListManagement.Services.config">
Sitecore.ListManagement.Services.ImportController, Sitecore.ListManagement.Services
</allowedController>
<allowedController desc="SecurityController" patch:source="Sitecore.ListManagement.Services.config">
Sitecore.ListManagement.Services.SecurityController, Sitecore.ListManagement.Services
</allowedController>
<allowedController desc="SegmentController" patch:source="Sitecore.ListManagement.Services.config">
Sitecore.ListManagement.Services.Controllers.SegmentController, Sitecore.ListManagement.Services
</allowedController>
<allowedController desc="ListController" patch:source="Sitecore.ListManagement.Services.config">
Sitecore.ListManagement.Services.Controllers.ListController, Sitecore.ListManagement.Services
</allowedController>
<allowedController desc="SegmentedListController" patch:source="Sitecore.ListManagement.Services.config">
Sitecore.ListManagement.Services.Controllers.SegmentedListController, Sitecore.ListManagement.Services
</allowedController>
<allowedController desc="CT_ActivityController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.Optimization.ActivityController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_DateController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.Optimization.DateController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_ItemInfoController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.Optimization.ItemInfoController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_TestOutcomesController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.Optimization.TestOutcomesController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_TestsController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.Optimization.TestsController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_PersonalizationController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.Personalization.PersonalizationController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_ActionController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.TestResults.ActionController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_ReachController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.TestResults.ReachController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_TestDefinitionController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.TestResults.TestDefinitionController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_TopClicksToPagesController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.TestResults.TopClicksToPagesController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_TopGoalsController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.TestResults.TopGoalsController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_TestSummaryController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.TestSummary.TestSummaryController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_ContentTestingController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.ContentTestingController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_CreateTestDialogController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.CreateTestDialogController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_OptionsMapperController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.OptionsMapperController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_QueryController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.QueryController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_TestObjectivesController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.TestObjectivesController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_TestResultsController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.TestResultsController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_TestThumbnailsController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.TestThumbnailsController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="CT_TestVariablesController" patch:source="Sitecore.ContentTesting.config">
Sitecore.ContentTesting.Requests.Controllers.TestVariablesController, Sitecore.ContentTesting
</allowedController>
<allowedController desc="ContentController" patch:source="Sitecore.ExperienceExplorer.Services.config">
Sitecore.ExperienceExplorer.Web.Controllers.ContentController, Sitecore.ExperienceExplorer.Web
</allowedController>
<allowedController desc="ModelController" patch:source="Sitecore.ExperienceExplorer.Services.config">
Sitecore.ExperienceExplorer.Web.Controllers.ModelController, Sitecore.ExperienceExplorer.Web
</allowedController>
<allowedController desc="SubmitActionsController" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config">
Sitecore.ExperienceForms.Client.Controllers.SubmitActionsController, Sitecore.ExperienceForms.Client
</allowedController>
<allowedController desc="ReportsController" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config">
Sitecore.ExperienceForms.Client.Controllers.ReportsController, Sitecore.ExperienceForms.Client
</allowedController>
<allowedController desc="FormDesignController" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config">
Sitecore.ExperienceForms.Client.Controllers.FormDesignController, Sitecore.ExperienceForms.Client
</allowedController>
<allowedController desc="ExportDataController" patch:source="Sitecore.ExperienceForms.Pipelines.Client.config">
Sitecore.ExperienceForms.Client.Controllers.ExportDataController, Sitecore.ExperienceForms.Client
</allowedController>
<allowedController desc="BeaconController" patch:source="Sitecore.FXM.config">
Sitecore.FXM.Service.Controllers.BeaconController, Sitecore.FXM.Service
</allowedController>
<!--  Deploy to CM server only  -->
<allowedController desc="DomainMatcherController" patch:source="Sitecore.FXM.config">
Sitecore.FXM.Service.Controllers.DomainMatcherController, Sitecore.FXM.Service
</allowedController>
<allowedController desc="ElementMatcherController" patch:source="Sitecore.FXM.config">
Sitecore.FXM.Service.Controllers.ElementMatcherController, Sitecore.FXM.Service
</allowedController>
<allowedController desc="ElementPlaceholderController" patch:source="Sitecore.FXM.config">
Sitecore.FXM.Service.Controllers.ElementPlaceholderController, Sitecore.FXM.Service
</allowedController>
<allowedController desc="ExperienceEditorComponentController" patch:source="Sitecore.FXM.config">
Sitecore.FXM.Service.Controllers.ExperienceEditorComponentController, Sitecore.FXM.Service
</allowedController>
<allowedController desc="ItemActionController" patch:source="Sitecore.FXM.config">
Sitecore.FXM.Service.Controllers.ItemActionController, Sitecore.FXM.Service
</allowedController>
<allowedController desc="PageMatcherController" patch:source="Sitecore.FXM.config">
Sitecore.FXM.Service.Controllers.PageMatcherController, Sitecore.FXM.Service
</allowedController>
<allowedController desc="SitecoreUpdateCenterAuthenticationController" patch:source="Sitecore.UpdateCenter.config">
Sitecore.UpdateCenter.Controllers.UpdateCenterAuthenticationController, Sitecore.UpdateCenter
</allowedController>
<allowedController desc="SitecoreUpdateCenterDownloadController" patch:source="Sitecore.UpdateCenter.config">
Sitecore.UpdateCenter.Controllers.DownloadController, Sitecore.UpdateCenter
</allowedController>
<allowedController desc="SitecoreUpdateCenterModuleManagementController" patch:source="Sitecore.UpdateCenter.config">
Sitecore.UpdateCenter.Controllers.ModuleManagementController, Sitecore.UpdateCenter
</allowedController>
<allowedController desc="SitecoreUpdateCenterPackageInstallationController" patch:source="Sitecore.UpdateCenter.config">
Sitecore.UpdateCenter.Controllers.PackageInstallationController, Sitecore.UpdateCenter
</allowedController>
<allowedController desc="SitecoreUpdateCenterPackageManagementController" patch:source="Sitecore.UpdateCenter.config">
Sitecore.UpdateCenter.Controllers.PackageManagementController, Sitecore.UpdateCenter
</allowedController>
<allowedController desc="SitecoreUpdateCenterUpdateModeController" patch:source="Sitecore.UpdateCenter.config">
Sitecore.UpdateCenter.Controllers.UpdateModeController, Sitecore.UpdateCenter
</allowedController>
<allowedController desc="SitecoreUpdateCenterUploadController" patch:source="Sitecore.UpdateCenter.config">
Sitecore.UpdateCenter.Controllers.UploadController, Sitecore.UpdateCenter
</allowedController>
<allowedController desc="CampaignController" patch:source="Sitecore.Marketing.Campaigns.Services.config">
Sitecore.Marketing.Campaigns.Services.Controllers.CampaignController, Sitecore.Marketing.Campaigns.Services
</allowedController>
<allowedController desc="ClassificationsController" patch:source="Sitecore.Marketing.Campaigns.Services.config">
Sitecore.Marketing.Campaigns.Services.Controllers.ClassificationsController, Sitecore.Marketing.Campaigns.Services
</allowedController>
<allowedController desc="ExportCampaignsController" patch:source="Sitecore.Marketing.Campaigns.Services.config">
Sitecore.Marketing.Campaigns.Services.Controllers.ExportCampaignsController, Sitecore.Marketing.Campaigns.Services
</allowedController>
<allowedController desc="MarketingAutomationMarketingThemesController" patch:source="Sitecore.Marketing.Automation.Client.config">
Sitecore.Marketing.Automation.Client.Controllers.MarketingThemesController, Sitecore.Marketing.Automation.Client
</allowedController>
<allowedController desc="MarketingAutomationCategoryInformationController" patch:source="Sitecore.Marketing.Automation.Client.config">
Sitecore.Marketing.Automation.Client.Controllers.CategoryInformationController, Sitecore.Marketing.Automation.Client
</allowedController>
<allowedController desc="MarketingAutomationAutomationPlansController" patch:source="Sitecore.Marketing.Automation.Client.config">
Sitecore.Marketing.Automation.Client.Controllers.AutomationPlansController, Sitecore.Marketing.Automation.Client
</allowedController>
<allowedController desc="MarketingAutomationAutomationPlansReportingController" patch:source="Sitecore.Marketing.Automation.Client.config">
Sitecore.Marketing.Automation.Client.Controllers.AutomationPlanReportingController, Sitecore.Marketing.Automation.Client
</allowedController>
<allowedController desc="MarketingAutomationActivityDescriptorsController" patch:source="Sitecore.Marketing.Automation.Client.config">
Sitecore.Marketing.Automation.Client.Controllers.ActivityDescriptorsController, Sitecore.Marketing.Automation.Client
</allowedController>
<allowedController desc="MarketingAutomationCurrentCultureController" patch:source="Sitecore.Marketing.Automation.Client.config">
Sitecore.Marketing.Automation.Client.Controllers.CurrentCultureController, Sitecore.Marketing.Automation.Client
</allowedController>
<allowedController desc="MarketingAutomationContactsReportController" patch:source="Sitecore.Marketing.Automation.Client.config">
Sitecore.Marketing.Automation.Client.Controllers.ContactsReportController, Sitecore.Marketing.Automation.Client
</allowedController>
<allowedController desc="MarketingAutomationContactsExportController" patch:source="Sitecore.Marketing.Automation.Client.config">
Sitecore.Marketing.Automation.Client.Controllers.ContactsExportController, Sitecore.Marketing.Automation.Client
</allowedController>
<allowedController desc="MarketingAutomationPluginDescriptorsController" patch:source="Sitecore.Marketing.Automation.Client.config">
Sitecore.Marketing.Automation.Client.Controllers.PluginDescriptorsController, Sitecore.Marketing.Automation.Client
</allowedController>
<allowedController desc="MarketingAutomationAutomationCampaignTemplatesController" patch:source="Sitecore.Marketing.Automation.Client.config">
Sitecore.Marketing.Automation.Client.Controllers.AutomationCampaignTemplatesController, Sitecore.Marketing.Automation.Client
</allowedController>
<allowedController desc="MarketingAutomationContactListsController" patch:source="Sitecore.Marketing.Automation.ActivityDescriptors.Client.config">
Sitecore.Marketing.Automation.ActivityDescriptors.Client.Controllers.ContactListsController, Sitecore.Marketing.Automation.ActivityDescriptors.Client
</allowedController>
<allowedController desc="MarketingAutomationProfilesController" patch:source="Sitecore.Marketing.Automation.ActivityDescriptors.Client.config">
Sitecore.Marketing.Automation.ActivityDescriptors.Client.Controllers.ProfilesController, Sitecore.Marketing.Automation.ActivityDescriptors.Client
</allowedController>
<allowedController desc="MarketingAutomationEventsController" patch:source="Sitecore.Marketing.Automation.ActivityDescriptors.Client.config">
Sitecore.Marketing.Automation.ActivityDescriptors.Client.Controllers.EventsController, Sitecore.Marketing.Automation.ActivityDescriptors.Client
</allowedController>
<allowedController desc="MarketingAutomationGoalsController" patch:source="Sitecore.Marketing.Automation.ActivityDescriptors.Client.config">
Sitecore.Marketing.Automation.ActivityDescriptors.Client.Controllers.GoalsController, Sitecore.Marketing.Automation.ActivityDescriptors.Client
</allowedController>
<allowedController desc="MarketingAutomationOutcomesController" patch:source="Sitecore.Marketing.Automation.ActivityDescriptors.Client.config">
Sitecore.Marketing.Automation.ActivityDescriptors.Client.Controllers.OutcomesController, Sitecore.Marketing.Automation.ActivityDescriptors.Client
</allowedController>
<allowedController desc="MarketingAutomationCampaignsController" patch:source="Sitecore.Marketing.Automation.ActivityDescriptors.Client.config">
Sitecore.Marketing.Automation.ActivityDescriptors.Client.Controllers.CampaignsController, Sitecore.Marketing.Automation.ActivityDescriptors.Client
</allowedController>
<allowedController desc="ExmMarketingPreferencesController" patch:source="Sitecore.EmailExperience.ContentDelivery.config">
Sitecore.EmailCampaign.Cd.Controllers.MarketingPreferencesController, Sitecore.EmailCampaign.Cd
</allowedController>
<allowedController desc="ExmUnsubscribeController" patch:source="Sitecore.EmailExperience.ContentDelivery.config">
Sitecore.EmailCampaign.Cd.Controllers.UnsubscribeController, Sitecore.EmailCampaign.Cd
</allowedController>
<allowedController desc="AddPreExistingPageController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.AddPreExistingPage.AddPreExistingPageController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ValidatePagePathController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.AddPreExistingPage.ValidatePagePathController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="AddAttachmentController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Attachment.AddAttachmentController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="CopyAttachmentFromLanguageController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Attachment.CopyAttachmentFromLanguageController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="CopyAttachmentToAllLanguagesController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Attachment.CopyAttachmentToAllLanguagesController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="RemoveAttachmentController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Attachment.RemoveAttachmentController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="CheckPermissionsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.CopyToDraft.CheckPermissionsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="CopyToDraftController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.CopyToDraft.CopyToDraftController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="CreateMessageOptionsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DataSource.CreateMessageOptionsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="MessagesStatisticsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DataSource.MessagesStatisticsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="RecipientListsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DataSource.RecipientListsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="TimeIntervalsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DataSource.TimeIntervalsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="TimeZonesController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DataSource.TimeZonesController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="OpensClicksController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DataSource.OpensClicksController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="BouncesController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DataSource.BouncesController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="UnsubscribesController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DataSource.UnsubscribesController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="SpamsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DataSource.SpamsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ValueEngagementController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DataSource.ValueEngagementController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="CanSaveDefaultSettingsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DefaultSettings.CanSaveDefaultSettingsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="FirstUsageController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DefaultSettings.FirstUsageController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="LoadDefaultSettingsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DefaultSettings.LoadDefaultSettingsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="SaveDefaultSettingsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DefaultSettings.SaveDefaultSettingsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ValidateDefaultSettingsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DefaultSettings.ValidateDefaultSettingsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ABVariantsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Dispatch.ABVariantsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ActivateController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Dispatch.ActivateController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="CancelSchedulingController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Dispatch.CancelSchedulingController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="DeactivateController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Dispatch.DeactivateController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="DispatchController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Dispatch.DispatchController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="LoadDispatchController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Dispatch.LoadDispatchController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="PauseController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Dispatch.PauseController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ResumeController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Dispatch.ResumeController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="SelectWinnerController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Dispatch.SelectWinnerController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="StartTestController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Dispatch.StartTestController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="CanImportHtmlController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.ImportHtml.CanImportHtmlController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ImportHtmlController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.ImportHtml.ImportHtmlController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="AddLanguageController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Language.AddLanguageController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="SwitchLanguageController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Language.SwitchLanguageController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="CanCreateNewMessageController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Message.CanCreateNewMessageController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="CanDeleteMessageController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Message.CanDeleteMessageController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="CreateNewMessageController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Message.CreateNewMessageController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="CurrentStateController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Message.CurrentStateController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="DeleteMessageController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Message.DeleteMessageController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="MessageController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Message.MessageController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="MessageUrlController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Message.MessageUrlController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="PersonalizationTokensRequestController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Message.PersonalizationTokensRequestController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="MessageInfoController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.MessageInfo.MessageInfoController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="MessagePreviewUrlController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.MessagePreview.MessagePreviewUrlController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="AddMessageVariantController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.MessageVariant.AddMessageVariantController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="DuplicateMessageVariantController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.MessageVariant.DuplicateMessageVariantController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="RemoveMessageVariantController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.MessageVariant.RemoveMessageVariantController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="AddRecipientListController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.RecipientList.AddRecipientListController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="RemoveRecipientListController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.RecipientList.RemoveRecipientListController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="EmailChannelPerformanceReportKeyController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.ReportKey.EmailChannelPerformanceReportKeyController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ReportKeyController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.ReportKey.ReportKeyController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="SaveMessageController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.SaveMessage.SaveMessageController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ExecuteSendQuickTestController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.SendQuickTest.ExecuteSendQuickTestController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ExperienceAnalyticsKeyController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.ReportKey.ExperienceAnalyticsKeyController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ValidateSenderController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Dispatch.ValidateSenderController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="CheckRecipientListsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.RecipientList.CheckRecipientListsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="PublishStatisticsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Message.PublishStatisticsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="LandingPageStatisticsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DataSource.LandingPageStatisticsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="TimeOfDayStatisticsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DataSource.TimeOfDayStatisticsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ValidateEmailAddressController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Message.ValidateEmailAddressController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="DispatchFailedController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DataSource.DispatchFailedController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ValidateFromReplyToEmailAddressController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Message.ValidateFromReplyToEmailAddressController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="DateTimeInfoController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Localization.DateTimeInfoController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ValidateBrokenLinksController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Message.ValidateBrokenLinksController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ExmEmailCampaignsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DataSource.EmailCampaignsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ListRecipientsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.DataSource.ListRecipientsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ExmCurrentCultureController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.ExmCurrentCultureController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="SendLimitsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.SendLimits.SendLimitsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ManagerRootsController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.ManagerRoots.ManagerRootsController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ExmSelectedProviderController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Provider.ExmSelectedProviderController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="ExmCanReadCampaignController" patch:source="Sitecore.EmailExperience.UI.config">
Sitecore.EmailCampaign.Server.Controllers.Message.CanReadCampaignController, Sitecore.EmailCampaign.Server
</allowedController>
<allowedController desc="PA_AuthenticationController" patch:source="Sitecore.PathAnalyzer.Services.config">
Sitecore.PathAnalyzer.Services.Controllers.AuthenticationController, Sitecore.PathAnalyzer.Services
</allowedController>
<allowedController desc="PA_ExplorerController" patch:source="Sitecore.PathAnalyzer.Services.config">
Sitecore.PathAnalyzer.Services.PathExplorer.Controllers.ExplorerController, Sitecore.PathAnalyzer.Services
</allowedController>
<allowedController desc="PA_PathsController" patch:source="Sitecore.PathAnalyzer.Services.config">
Sitecore.PathAnalyzer.Services.Controllers.PathsController, Sitecore.PathAnalyzer.Services
</allowedController>
<allowedController desc="PA_TreeController" patch:source="Sitecore.PathAnalyzer.Services.config">
Sitecore.PathAnalyzer.Services.Controllers.TreeController, Sitecore.PathAnalyzer.Services
</allowedController>
<allowedController desc="PA_ContactsByPathController" patch:source="Sitecore.PathAnalyzer.Services.config">
Sitecore.PathAnalyzer.Services.Controllers.ContactsByPathController, Sitecore.PathAnalyzer.Services
</allowedController>
<allowedController desc="PA_TreeDefinitionController" patch:source="Sitecore.PathAnalyzer.Services.config">
Sitecore.PathAnalyzer.Services.Controllers.TreeDefinitionController, Sitecore.PathAnalyzer.Services
</allowedController>
<allowedController desc="PA_ItemController" patch:source="Sitecore.PathAnalyzer.Services.config">
Sitecore.PathAnalyzer.Services.Controllers.ItemController, Sitecore.PathAnalyzer.Services
</allowedController>
</allowedControllers>
<exceptionLoggers hint="list:AddLogger">
<exceptionLogger desc="SitecoreExceptionLogger">
Sitecore.Services.Infrastructure.Web.Http.ExceptionHandling.SitecoreExceptionLogger, Sitecore.Services.Infrastructure
</exceptionLogger>
</exceptionLoggers>
</configuration>
</services>
</api>
<Messaging patch:source="Sitecore.Messaging.config">
<Rebus>
<Sitecore.Marketing.Automation.Messaging.Buses.PurgeFromCampaignMessagesBus patch:source="Sitecore.Marketing.Automation.Client.config">
<Transport>
<SqlServer>
<OneWay>false</OneWay>
<ConnectionStringOrName>messaging</ConnectionStringOrName>
<TableName>Sitecore_Transport</TableName>
<InputQueueName>PurgeFromCampaignMessagesQueue</InputQueueName>
</SqlServer>
</Transport>
<Routing>
<TypeBasedMappings>
<TypeMappings>
<PurgeFromCampaignMessageMapping>
<Type>
Sitecore.Marketing.Automation.Messaging.Messages.PurgeFromCampaignMessage, Sitecore.Marketing.Automation
</Type>
<DestinationQueue>PurgeFromCampaignMessagesQueue</DestinationQueue>
</PurgeFromCampaignMessageMapping>
</TypeMappings>
</TypeBasedMappings>
</Routing>
<Options>
<SetNumberOfWorkers>1</SetNumberOfWorkers>
<SetMaxParallelism>5</SetMaxParallelism>
<SimpleRetryStrategy>
<ErrorQueueAddress>Error</ErrorQueueAddress>
<MaxDeliveryAttempts>1</MaxDeliveryAttempts>
<SecondLevelRetriesEnabled>false</SecondLevelRetriesEnabled>
</SimpleRetryStrategy>
</Options>
<Logging Type="Sitecore.Messaging.SitecoreLoggerFactory, Sitecore.Messaging"/>
</Sitecore.Marketing.Automation.Messaging.Buses.PurgeFromCampaignMessagesBus>
<Sitecore.EmailCampaign.Model.Messaging.Buses.AutomatedMessagesBus patch:source="Sitecore.EmailExperience.Messaging.config">
<Transport>
<SqlServer>
<OneWay>false</OneWay>
<ConnectionStringOrName>messaging</ConnectionStringOrName>
<TableName>Sitecore_Transport</TableName>
<InputQueueName>AutomatedMessagesQueue</InputQueueName>
</SqlServer>
</Transport>
<Routing>
<TypeBasedMappings>
<TypeMappings>
<AutomatedMessageMapping>
<Type>
Sitecore.EmailCampaign.Model.Messaging.AutomatedMessage, Sitecore.EmailCampaign.Model
</Type>
<DestinationQueue>AutomatedMessagesQueue</DestinationQueue>
</AutomatedMessageMapping>
</TypeMappings>
</TypeBasedMappings>
</Routing>
<Options>
<SetNumberOfWorkers>1</SetNumberOfWorkers>
<SimpleRetryStrategy>
<ErrorQueueAddress>Error</ErrorQueueAddress>
<MaxDeliveryAttempts>1</MaxDeliveryAttempts>
<SecondLevelRetriesEnabled>false</SecondLevelRetriesEnabled>
</SimpleRetryStrategy>
</Options>
<Logging Type="Sitecore.Messaging.SitecoreLoggerFactory,Sitecore.Messaging"/>
</Sitecore.EmailCampaign.Model.Messaging.Buses.AutomatedMessagesBus>
<Sitecore.EmailCampaign.Model.Messaging.Buses.UpdateListSubscriptionMessagesBus patch:source="Sitecore.EmailExperience.Messaging.config">
<Transport>
<SqlServer>
<OneWay>false</OneWay>
<ConnectionStringOrName>messaging</ConnectionStringOrName>
<TableName>Sitecore_Transport</TableName>
<InputQueueName>UpdateListSubscriptionMessagesQueue</InputQueueName>
</SqlServer>
</Transport>
<Routing>
<TypeBasedMappings>
<TypeMappings>
<SubscribeMessageMapping>
<Type>
Sitecore.EmailCampaign.Model.Messaging.UpdateListSubscriptionMessage, Sitecore.EmailCampaign.Model
</Type>
<DestinationQueue>UpdateListSubscriptionMessagesQueue</DestinationQueue>
</SubscribeMessageMapping>
</TypeMappings>
</TypeBasedMappings>
</Routing>
<Options>
<SetNumberOfWorkers>1</SetNumberOfWorkers>
<SimpleRetryStrategy>
<ErrorQueueAddress>Error</ErrorQueueAddress>
<MaxDeliveryAttempts>1</MaxDeliveryAttempts>
<SecondLevelRetriesEnabled>false</SecondLevelRetriesEnabled>
</SimpleRetryStrategy>
</Options>
<Logging Type="Sitecore.Messaging.SitecoreLoggerFactory,Sitecore.Messaging"/>
</Sitecore.EmailCampaign.Model.Messaging.Buses.UpdateListSubscriptionMessagesBus>
<Sitecore.EmailCampaign.Model.Messaging.Buses.ConfirmSubscriptionMessagesBus patch:source="Sitecore.EmailExperience.Messaging.config">
<Transport>
<SqlServer>
<OneWay>false</OneWay>
<ConnectionStringOrName>messaging</ConnectionStringOrName>
<TableName>Sitecore_Transport</TableName>
<InputQueueName>ConfirmSubscriptionMessagesQueue</InputQueueName>
</SqlServer>
</Transport>
<Routing>
<TypeBasedMappings>
<TypeMappings>
<ConfirmSubscriptionMessageMapping>
<Type>
Sitecore.EmailCampaign.Model.Messaging.ConfirmSubscriptionMessage, Sitecore.EmailCampaign.Model
</Type>
<DestinationQueue>ConfirmSubscriptionMessagesQueue</DestinationQueue>
</ConfirmSubscriptionMessageMapping>
</TypeMappings>
</TypeBasedMappings>
</Routing>
<Options>
<SetNumberOfWorkers>1</SetNumberOfWorkers>
<SimpleRetryStrategy>
<ErrorQueueAddress>Error</ErrorQueueAddress>
<MaxDeliveryAttempts>1</MaxDeliveryAttempts>
<SecondLevelRetriesEnabled>false</SecondLevelRetriesEnabled>
</SimpleRetryStrategy>
</Options>
<Logging Type="Sitecore.Messaging.SitecoreLoggerFactory,Sitecore.Messaging"/>
</Sitecore.EmailCampaign.Model.Messaging.Buses.ConfirmSubscriptionMessagesBus>
<Sitecore.EmailCampaign.Model.Messaging.Buses.EmailOpenMessagesBus patch:source="Sitecore.EmailExperience.Messaging.config">
<Transport>
<SqlServer>
<OneWay>false</OneWay>
<ConnectionStringOrName>messaging</ConnectionStringOrName>
<TableName>Sitecore_Transport</TableName>
<InputQueueName>EmailOpenedMessagesQueue</InputQueueName>
</SqlServer>
</Transport>
<Routing>
<TypeBasedMappings>
<TypeMappings>
<EmailOpenDtoMapping>
<Type>
Sitecore.EmailCampaign.Model.Messaging.EmailOpenMessage, Sitecore.EmailCampaign.Model
</Type>
<DestinationQueue>EmailOpenedMessagesQueue</DestinationQueue>
</EmailOpenDtoMapping>
</TypeMappings>
</TypeBasedMappings>
</Routing>
<Options>
<SetNumberOfWorkers>1</SetNumberOfWorkers>
<SimpleRetryStrategy>
<ErrorQueueAddress>Error</ErrorQueueAddress>
<MaxDeliveryAttempts>1</MaxDeliveryAttempts>
<SecondLevelRetriesEnabled>false</SecondLevelRetriesEnabled>
</SimpleRetryStrategy>
</Options>
<Logging Type="Sitecore.Messaging.SitecoreLoggerFactory,Sitecore.Messaging"/>
</Sitecore.EmailCampaign.Model.Messaging.Buses.EmailOpenMessagesBus>
<Sitecore.EmailCampaign.Model.Messaging.Buses.ClearSuppressionListMessagesBus patch:source="Sitecore.EmailExperience.Messaging.config">
<Transport>
<SqlServer>
<OneWay>false</OneWay>
<ConnectionStringOrName>messaging</ConnectionStringOrName>
<TableName>Sitecore_Transport</TableName>
<InputQueueName>ClearSuppressionListQueue</InputQueueName>
</SqlServer>
</Transport>
<Routing>
<TypeBasedMappings>
<TypeMappings>
<EmailOpenDtoMapping>
<Type>
Sitecore.EmailCampaign.Model.Messaging.ClearSuppressionList, Sitecore.EmailCampaign.Model
</Type>
<DestinationQueue>ClearSuppressionListQueue</DestinationQueue>
</EmailOpenDtoMapping>
</TypeMappings>
</TypeBasedMappings>
</Routing>
<Options>
<SetNumberOfWorkers>1</SetNumberOfWorkers>
<SimpleRetryStrategy>
<ErrorQueueAddress>Error</ErrorQueueAddress>
<MaxDeliveryAttempts>1</MaxDeliveryAttempts>
<SecondLevelRetriesEnabled>false</SecondLevelRetriesEnabled>
</SimpleRetryStrategy>
</Options>
<Logging Type="Sitecore.Messaging.SitecoreLoggerFactory,Sitecore.Messaging"/>
</Sitecore.EmailCampaign.Model.Messaging.Buses.ClearSuppressionListMessagesBus>
<Sitecore.EmailCampaign.Model.Messaging.Buses.EmailAddressHistoryBus patch:source="Sitecore.EmailExperience.Messaging.config">
<Transport>
<SqlServer>
<OneWay>false</OneWay>
<ConnectionStringOrName>messaging</ConnectionStringOrName>
<TableName>Sitecore_Transport</TableName>
<InputQueueName>EmailAddressHistoryMessagesQueue</InputQueueName>
</SqlServer>
</Transport>
<Routing>
<TypeBasedMappings>
<TypeMappings>
<EmailAddressHistoryMessageMapping>
<Type>
Sitecore.EmailCampaign.Model.Messaging.EmailAddressHistoryMessage, Sitecore.EmailCampaign.Model
</Type>
<DestinationQueue>EmailAddressHistoryMessagesQueue</DestinationQueue>
</EmailAddressHistoryMessageMapping>
</TypeMappings>
</TypeBasedMappings>
</Routing>
<Options>
<SetNumberOfWorkers>1</SetNumberOfWorkers>
<SimpleRetryStrategy>
<ErrorQueueAddress>Error</ErrorQueueAddress>
<MaxDeliveryAttempts>1</MaxDeliveryAttempts>
<SecondLevelRetriesEnabled>false</SecondLevelRetriesEnabled>
</SimpleRetryStrategy>
</Options>
<Logging Type="Sitecore.Messaging.SitecoreLoggerFactory,Sitecore.Messaging"/>
</Sitecore.EmailCampaign.Model.Messaging.Buses.EmailAddressHistoryBus>
<Sitecore.EmailCampaign.Model.Messaging.Buses.SentMessagesBus patch:source="Sitecore.EmailExperience.Messaging.config">
<Transport>
<SqlServer>
<OneWay>false</OneWay>
<ConnectionStringOrName>messaging</ConnectionStringOrName>
<TableName>Sitecore_Transport</TableName>
<InputQueueName>SentMessagesQueue</InputQueueName>
</SqlServer>
</Transport>
<Routing>
<TypeBasedMappings>
<TypeMappings>
<SentMessageMapping>
<Type>
Sitecore.EmailCampaign.Model.Messaging.SentMessage, Sitecore.EmailCampaign.Model
</Type>
<DestinationQueue>SentMessagesQueue</DestinationQueue>
</SentMessageMapping>
</TypeMappings>
</TypeBasedMappings>
</Routing>
<Options>
<SetNumberOfWorkers>1</SetNumberOfWorkers>
<SimpleRetryStrategy>
<ErrorQueueAddress>Error</ErrorQueueAddress>
<MaxDeliveryAttempts>1</MaxDeliveryAttempts>
<SecondLevelRetriesEnabled>false</SecondLevelRetriesEnabled>
</SimpleRetryStrategy>
</Options>
<Logging Type="Sitecore.Messaging.SitecoreLoggerFactory,Sitecore.Messaging"/>
</Sitecore.EmailCampaign.Model.Messaging.Buses.SentMessagesBus>
</Rebus>
<GatewayClient patch:source="Sitecore.Messaging.GatewayClient.config">
<!--
 TRANSFER RETRIES
          
               The Gateway Client bus transfers messages to a Gateway Server bus over HTTP.  If the connection
               to the server is not available, messages will be added back in to the client queue for attempted
               transfer later.  This retrying is determined by an exponential function with the parameters
               you see below.
               
               If you require exponential transfer retries with different parameters, specify new
               settings. 
               
               Formula is (in MS Excel form):
                    retry_delay_period =FLOOR(MIN(h + FLOOR(((2^i) - 1) * RANDBETWEEN(FLOOR(j*0.8,1), FLOOR(j*1.2,1)),1), k), 1)
                    
                    where
                        h is minBackoff
                        i is the index of the current retry
                        j is deltaBackoff
                        k is maxBackoff
                
-->
<TransferRetrySettings>
<!--
 Default.HighTolerance yields the following retry intervals (in Secs):
                        88.76
                        232.29
                        605.56
                        1386.68
                        2390.47
                        3600.00
                        3600.00
                        3600.00
                        3600.00
                        3600.00
                        3600.00
                        3600.00
                        3600.00
                        3600.00
                        3600.00
                        3600.00
                    
-->
<Default.HighTolerance maxAttempts="16" minBackoff="00:00:00" maxBackoff="01:00:00" deltaBackoff="00:01:30"/>
<!--
 Default.LowTolerance yields the following retry intervals (in Secs):
                        62.50
                        204.51
                        449.55
                        1025.01
                        1921.35
                        3287.72
                        3600.00
                    
-->
<Default.LowTolerance maxAttempts="7" minBackoff="00:00:00" maxBackoff="01:00:00" deltaBackoff="00:01:00"/>
<!--  Default.NoRetry : No retries are permitted.  -->
<Default.NoRetry maxAttempts="1" minBackoff="00:00:00" maxBackoff="01:00:00" deltaBackoff="00:01:00"/>
</TransferRetrySettings>
<!--
 GATEWAY CLIENT MESSAGE BUSES 
          
                    Gateway Client buses require some additional properties:
                  
                       - gatewayServiceBaseAddress : 
                       - webClient : 
                       - deliveryRetry :
                       
                  
-->
<Rebus/>
<!--  WEB CLIENT REGISTRY 
                  -->
<WebClientRegistry>
<Clients>
<!--
 Define Web Clients here.  Currently unsecured and secured clients are supported.
          
                               To enable unsecured Gateway message transfered, the Gateway Service must also be configured
                               as unsecured. 
-->
<Default.Unsecure>
<Type>
Sitecore.Messaging.GatewayClient.WebClients.UnsecureWebClientFactory, Sitecore.Messaging.GatewayClient.Rest
</Type>
<Options>
<RequestTimeout>0:00:15</RequestTimeout>
</Options>
</Default.Unsecure>
</Clients>
</WebClientRegistry>
</GatewayClient>
<GatewayService certificateAuthenticationEnabled="true" patch:source="Sitecore.Messaging.GatewayService.config">
<!--
 Configure named Rebus Gateway Server Message Buses here 
-->
<Rebus/>
</GatewayService>
</Messaging>
<!--
 The GatewayService URL path, used to configure Sitecore to ignore requests bound for the service. 
-->
<sc.variable name="Messaging.GatewayServiceUrlPrefix" value="/api/messaging" patch:source="Sitecore.Messaging.GatewayService.config"/>
<TransientFaultHandling patch:source="Sitecore.TransientFaultHandling.config">
<Retryers>
<NoRetry>
<Type>
Sitecore.Framework.TransientFaultHandling.NoRetryerFactory, Sitecore.Framework.TransientFaultHandling.Abstractions
</Type>
</NoRetry>
</Retryers>
</TransientFaultHandling>
<processing.tasks.messaging patch:source="Sitecore.Processing.Tasks.Messaging.config">
<Messaging>
<Rebus>
<!--
 Message bus that is used to send messages about processing task registration. 
-->
<Sitecore.Processing.Tasks.Messaging.Buses.TaskRegistrationProducer>
<Transport>
<SqlServer>
<OneWay>false</OneWay>
<ConnectionStringOrName>messaging</ConnectionStringOrName>
<TableName>Sitecore_Transport</TableName>
<!--
 InputQueueName should be unique for CM/CD instance to handle response messages on the correct instance. 
-->
<InputQueueName>
SitecoreProcessingTaskRegistrationProducer_${MachineName}_${ProcessId}
</InputQueueName>
</SqlServer>
</Transport>
<Routing>
<TypeBasedMappings>
<TypeMappings>
<RegisterDistributedTaskMap>
<Type>
Sitecore.Processing.Engine.Abstractions.Messages.RegisterDistributedTask, Sitecore.Processing.Engine.Abstractions
</Type>
<DestinationQueue>SitecoreProcessingTaskRegistrationConsumer</DestinationQueue>
</RegisterDistributedTaskMap>
<RegisterDeferredTaskMap>
<Type>
Sitecore.Processing.Engine.Abstractions.Messages.RegisterDeferredTask, Sitecore.Processing.Engine.Abstractions
</Type>
<DestinationQueue>SitecoreProcessingTaskRegistrationConsumer</DestinationQueue>
</RegisterDeferredTaskMap>
</TypeMappings>
</TypeBasedMappings>
</Routing>
<Logging Type="Sitecore.Messaging.SitecoreLoggerFactory,Sitecore.Messaging"/>
</Sitecore.Processing.Tasks.Messaging.Buses.TaskRegistrationProducer>
<!--
 Message bus that is used to send messages for requesting the progress of a task. 
-->
<Sitecore.Processing.Tasks.Messaging.Buses.TaskProgressProducer>
<Transport>
<SqlServer>
<OneWay>false</OneWay>
<ConnectionStringOrName>messaging</ConnectionStringOrName>
<TableName>Sitecore_Transport</TableName>
<!--
 InputQueueName should be unique for CM/CD instance to handle response messages on the correct instance. 
-->
<InputQueueName>
SitecoreProcessingTaskProgressProducer_${MachineName}_${ProcessId}
</InputQueueName>
</SqlServer>
</Transport>
<Routing>
<TypeBasedMappings>
<TypeMappings>
<TaskProgressRequestMap>
<Type>
Sitecore.Processing.Engine.Abstractions.Messages.TaskProgressRequest, Sitecore.Processing.Engine.Abstractions
</Type>
<DestinationQueue>SitecoreProcessingTaskProgressConsumer</DestinationQueue>
</TaskProgressRequestMap>
</TypeMappings>
</TypeBasedMappings>
</Routing>
<Logging Type="Sitecore.Messaging.SitecoreLoggerFactory,Sitecore.Messaging"/>
</Sitecore.Processing.Tasks.Messaging.Buses.TaskProgressProducer>
<!--
 Message bus that is used to send messages for requesting the status of a task. 
-->
<Sitecore.ContentTesting.Messaging.ModelTrainingTaskStatusProducer patch:source="Sitecore.ContentTesting.Messaging.config">
<Transport>
<SqlServer>
<OneWay>false</OneWay>
<ConnectionStringOrName>messaging</ConnectionStringOrName>
<TableName>Sitecore_Transport</TableName>
<InputQueueName>
SitecoreContentTestingModelTrainingTaskStatusProducer_${MachineName}_${ProcessId}
</InputQueueName>
</SqlServer>
</Transport>
<Subscribers>
<TypeMappings>
<TaskStatusMapping>
<Type>
Sitecore.Processing.Engine.Abstractions.Messages.TaskStatus, Sitecore.Processing.Engine.Abstractions
</Type>
<PublisherQueue>TaskStatus</PublisherQueue>
</TaskStatusMapping>
</TypeMappings>
</Subscribers>
<Logging Type="Sitecore.Messaging.SitecoreLoggerFactory,Sitecore.Messaging"/>
</Sitecore.ContentTesting.Messaging.ModelTrainingTaskStatusProducer>
</Rebus>
</Messaging>
<!--
 Task manager that is used to register processing tasks for execution. 
-->
<taskManager type="Sitecore.Processing.Tasks.Messaging.TaskManager, Sitecore.Processing.Tasks.Messaging">
<param name="taskManagerOptions" type="Sitecore.Processing.Tasks.Messaging.TaskManagerOptions, Sitecore.Processing.Tasks.Messaging">
<!--
 Timeout for task registration requests, given as a TimeSpan. Default value: 30 seconds. 
-->
<param name="taskRegistrationTimeout" type="Sitecore.Processing.Common.ConfigurationHelper, Sitecore.Processing.Common" factoryMethod="ToTimeSpan" arg0="00:00:30"/>
<!--
 Timeout for task progress requests, given as a TimeSpan. Default value: 30 seconds. 
-->
<param name="taskProgressRequestTimeout" type="Sitecore.Processing.Common.ConfigurationHelper, Sitecore.Processing.Common" factoryMethod="ToTimeSpan" arg0="00:00:30"/>
</param>
<param name="synchronizedTaskRegistrationBusContext" type="Sitecore.Processing.Tasks.Messaging.ISynchronizedMessageBusContext`1[[Sitecore.Framework.Messaging.IMessageBus`1[[Sitecore.Processing.Tasks.Messaging.Buses.TaskRegistrationProducer, Sitecore.Processing.Tasks.Messaging]], Sitecore.Framework.Messaging.Abstractions]], Sitecore.Processing.Tasks.Messaging" resolve="true"/>
<param name="synchronizedTaskProgressBusContext" type="Sitecore.Processing.Tasks.Messaging.ISynchronizedMessageBusContext`1[[Sitecore.Framework.Messaging.IMessageBus`1[[Sitecore.Processing.Tasks.Messaging.Buses.TaskProgressProducer, Sitecore.Processing.Tasks.Messaging]], Sitecore.Framework.Messaging.Abstractions]], Sitecore.Processing.Tasks.Messaging" resolve="true"/>
</taskManager>
</processing.tasks.messaging>
<speak patch:source="Sitecore.Speak.config"/>
<overrideXmlControls patch:source="Sitecore.Speak.Applications.config">
<override with="/sitecore/client/applications/Dialogs/SelectMediaDialog" xmlControl="Sitecore.Shell.Applications.Media.MediaBrowser"/>
</overrideXmlControls>
<overrideDialogs patch:source="Sitecore.Speak.Applications.config">
<override with="/sitecore/client/applications/dialogs/InsertLinkViaTreeDialog" dialogUrl="/sitecore/shell/Applications/Dialogs/Internal%20link.aspx"/>
<override with="/sitecore/client/applications/dialogs/InsertEmailDialog" dialogUrl="/sitecore/shell/Applications/Dialogs/Mail%20link.aspx"/>
<override with="/sitecore/client/applications/dialogs/InsertAnchorDialog" dialogUrl="/sitecore/shell/Applications/Dialogs/Anchor%20link.aspx"/>
<override with="/sitecore/client/applications/dialogs/InsertSitecoreItemViaTreeDialog" dialogUrl="/sitecore/shell/Applications/Item%20browser.aspx"/>
<override with="/sitecore/client/Applications/ControlPanel" dialogUrl="/sitecore/shell/Applications/Control%20panel.aspx"/>
</overrideDialogs>
<!--
 Hides Experience Profile icon from the Dashboard if xDB is not enabled. 
-->
<!--  APP DEPENDENCIES  -->
<appDependencies patch:source="Sitecore.Speak.Applications.config">
<xdb patch:source="Sitecore.Marketing.Client.config" dependencyEvaluator="Sitecore.Marketing.Client.Dependencies.XdbDependencyEvaluator, Sitecore.Marketing.Client">
<app name="List Manager" id="{F7864BD2-ED99-48B7-9C68-C16D0D5624D6}"/>
<app name="Experience Optimization" id="{2D77A85B-40AD-4376-B44B-1D567B4FE438}" patch:source="Sitecore.ContentTesting.ApplicationDependencies.config"/>
<app name="Experience Profile" id="{CD316A31-03A3-4E22-9DCC-7A54F3675E4C}" patch:source="Sitecore.ExperienceProfile.config"/>
<app name="Experience Analytics" id="{BCDEDA7A-D6DC-4D2F-9570-7D7F89AAAA0B}" patch:source="Sitecore.ExperienceAnalytics.config"/>
<app name="Federated Experience Manager" id="{254DB1EB-129B-4DBD-9B8E-CC1B38FDD0E7}" patch:source="Sitecore.FXM.Speak.config"/>
<app name="PathAnalyzer" id="{C15CD34F-C772-4B34-84D7-D04E61D72FDB}" patch:source="Sitecore.PathAnalyzer.config"/>
</xdb>
<contentTesting dependencyEvaluator="Sitecore.ContentTesting.Applications.Dependencies.DependencyEvaluator, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.ApplicationDependencies.config">
<app name="Experience Optimization" id="{2D77A85B-40AD-4376-B44B-1D567B4FE438}"/>
</contentTesting>
<marketingAutomation dependencyEvaluator="Sitecore.Marketing.Automation.Client.DependencyEvaluator, Sitecore.Marketing.Automation.Client" patch:source="Sitecore.Marketing.Automation.Client.config">
<!--
Hides MA application button from Sitecore launchpad in case if XDB is disabled.
-->
<app name="Marketing Automation" id="{3A86E677-5AD1-4315-B7B5-EFA11988119A}"/>
</marketingAutomation>
<email dependencyEvaluator="Sitecore.EmailCampaign.Cm.Dependencies.DependencyEvaluator, Sitecore.EmailCampaign.Cm" patch:source="Sitecore.EmailExperience.DependencyEvaluator.config">
<!--
Hides EXM application button from Sitecore launchpad in case if XDB or EXM is disabled.
-->
<app name="Email Experience Manager" id="{781A770B-A3C1-41EB-B185-D80160044E03}"/>
</email>
</appDependencies>
<sitecore.experienceeditor.speak.requests patch:source="Sitecore.ExperienceEditor.Speak.Requests.config">
<!--  Delete Start  -->
<request name="ExperienceEditor.Delete.CanDelete" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Delete.CanDeleteRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Delete.CheckPermissions" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Delete.CheckPermissionsRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Delete.Confirm" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Delete.ConfirmDeleteRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Delete.CheckCloneLinks" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Delete.CheckCloneLinksRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Delete.CheckLinks" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Delete.CheckLinksRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Delete.UncloneItems" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Delete.UncloneItemsRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Delete.ExecuteRequest" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Delete.ExecuteRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Rename Start  -->
<request name="ExperienceEditor.Rename.CanRename" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Rename.CanRenameRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Rename.CheckPermissions" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Rename.CheckPermissionsRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Rename.GetCurrentName" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Rename.GetNameRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Rename.ValidateNewName" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Rename.ValidateNewNameRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Rename.CheckLinks" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Rename.CheckLinksRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Rename" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Rename.RenameRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Rename.RepairLinks" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Rename.RepairLinksRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Close Start  -->
<request name="ExperienceEditor.Close" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Close.CloseRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Display Name Start  -->
<request name="ExperienceEditor.CanChangeDisplayName" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.DisplayName.CanChangeDisplayNameRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.DisplayName.GetCurrentDisplayName" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.DisplayName.GetCurrentDisplayNameRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.ChangeDisplayName" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.DisplayName.ChangeDisplayNameRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Move Start  -->
<request name="ExperienceEditor.Move.CheckPermissions" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Move.CheckPermissionsRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Move.CanMove" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Move.CanMoveItemRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Move.IsSameDatabases" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Move.IsSameDatabasesRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Move.CheckLinks" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Move.CheckLinksRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Move" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Move.MoveRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Move.RepairLinks" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Move.RepairLinksRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Save Start  -->
<request name="ExperienceEditor.Save.CheckItemLock" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SaveItem.CheckItemLock, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Save.CheckRevision" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SaveItem.CheckRevision, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Save.Validators" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SaveItem.Validators, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Save.ValidateFields" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SaveItem.ValidateFields, Sitecore.ExperienceEditor.Speak.Ribbon" resolve="true"/>
<request name="ExperienceEditor.Save.CheckBaseTemplateFieldChange" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SaveItem.CheckBaseTemplateFieldChange, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Save.CheckTemplateFieldChange" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SaveItem.CheckTemplateFieldChange, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Save.CheckLinks" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SaveItem.CheckLinks, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Save.CallServerSavePipeline" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SaveItem.CallServerSavePipeline, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  LockItem Start  -->
<request name="ExperienceEditor.LockItem.CanToggleLock" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.LockItem.CanToggleLockRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.LockItem.IsReadOnly" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.LockItem.IsReadOnlyRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.LockItem.IsLockedByAnother" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.LockItem.IsLockedByAnotherRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.LockItem.IsLocked" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.LockItem.IsLocked, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.LockItem" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.LockItem.ToggleLockRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  MyItems Start  -->
<request name="ExperienceEditor.MyItems.Count" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.MyItems.MyItemsCountRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Publish Start  -->
<request name="ExperienceEditor.Publish.CanPublish" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Publish.CanPublishRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Publish.CheckWorkflow" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Publish.CheckWorkflowRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Publish Restrictions Start  -->
<request name="ExperienceEditor.PublishRestrictions.CanChange" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.PublishRestrictions.CanChangePublishRestrictions, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Screenshot Start  -->
<request name="ExperienceEditor.GetScreenShotUrl" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Screenshots.ScreenshotsRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Insert Start  -->
<request name="ExperienceEditor.Insert.CanInsert" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Insert.CanInsertRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Insert.GetInsertOptions" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Insert.GetInsertOptions, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Insert.ValidateNewName" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Insert.ValidateNewNameRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Insert" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Insert.InsertRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Langauge Start  -->
<!--  Change Language request  -->
<request name="ExperienceEditor.Language.ChangeLanguage" type="Sitecore.FXM.Speak.Ribbon.Requests.Override.FxmChangeLanguageRequest, Sitecore.FXM.Speak" patch:source="Sitecore.FXM.Speak.config"/>
<!--  "ExperienceEditor.Language.IconLabel" is obsolete.  -->
<request name="ExperienceEditor.Language.IconLabel" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.ChangeLanguage.LanguageIconLabelRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--
 "ExperienceEditor.Language.GetLanguageItems" is obsolete. 
-->
<request name="ExperienceEditor.Language.GetLanguageItems" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.ChangeLanguage.GetLanguages, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Device Start  -->
<request name="ExperienceEditor.Device.SelectSevice" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SelectDevice.SelectDeviceRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Device.IconLabel" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SelectDevice.DeviceIconLabelRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Device.HasDeviceLayout" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SelectDevice.HasDeviceLayout, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  ToggleRegistryKey Start  -->
<request name="ExperienceEditor.ToggleRegistryKey.Get" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.ToggleRegistryKey.GetRegistryKeyRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.ToggleRegistryKeys.Get" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.ToggleRegistryKey.GetRegistryKeysRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.ToggleRegistryKey.Toggle" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.ToggleRegistryKey.ToggleRegistryKeyRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Preview Date Start  -->
<request name="ExperienceEditor.PreviewDate.AddDays" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.PreviewDate.AddDaysRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.PreviewDate.GetPreviewDateUrl" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.PreviewDate.GetPreviewDateUrlRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.PreviewDate.SetDateValue" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.PreviewDate.SetDateValueRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Add component Start  -->
<request name="ExperienceEditor.CanAddComponent" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.AddRendering.CanAddRendering, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Select mode Start  -->
<request name="ExperienceEditor.Mode.SelectModeRequest" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SelectMode.SelectModeRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Mode.ModeIconLabel" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SelectMode.ModeIconLabelRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Mode.CanSelectMode" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SelectMode.CanSelectMode, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  "ExperienceEditor.EditMode.CanEdit" is obsolete.  -->
<request name="ExperienceEditor.EditMode.CanEdit" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.EditMode.CanEditRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.EditMode.SelectEdit" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.EditMode.SelectEditRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Layout Details Start  -->
<request name="ExperienceEditor.LayoutDetails.CanEdit" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.LayoutDetails.CanEditLayoutDetailsRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.LayoutDetails.SetValue" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.LayoutDetails.SetLayoutDetailsRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Reset Layout Start  -->
<request name="ExperienceEditor.ResetLayout.IsEnabled" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.ResetLayout.IsEnabled, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.ResetLayout.Execute" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.ResetLayout.Execute, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Enable Designing Start  -->
<request name="ExperienceEditor.EnableDesigning.CanDesign" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.EnableDesigning.CanDesign, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Enable Editing Start  -->
<request name="ExperienceEditor.EnableEditing.CanEdit" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.EnableEditing.CanEdit, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Breadcrumb Start  -->
<request name="ExperienceEditor.Breadcrumb.GetStructure" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Breadcrumb.GetBreadcrumbStructure, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Breadcrumb.GetChildItems" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Breadcrumb.GetChildItems, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Breadcrumb.EditItem" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Breadcrumb.EditItem, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Layout Presets Start  -->
<request name="ExperienceEditor.LayoutPresets.CanOpen" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.LayoutPresets.CanOpenRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.LayoutPresets.GetDialogUrl" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.LayoutPresets.GetDialogUrlRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.LayoutPresets.Execute" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.LayoutPresets.ExecuteRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Search Start  -->
<request name="ExperienceEditor.Search.GetItemUrlRequest" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Search.GetItemUrlRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  "ExperienceEditor.Item.Notifications" is obsolete.  -->
<request name="ExperienceEditor.Item.Notifications" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Common.GetItemNotifications, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Item.HasPresentation" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Common.CheckItemHasPresentation, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Item.CheckItemChildrenHasPresentations" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Common.CheckItemChildrenHasPresentations, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Item.GetUri" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Common.GetItemUri, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.ControlState.True" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Common.AlwaysTruePipelineProcessorControlStateRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.ControlState.Edit" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Common.IsEditModePipelineProcessorControlStateRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.TranslateText" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Common.TranslateText, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.IsEditAllVersionsTicked" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Common.IsEditAllVersionsTicked, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  LargeDropDownButton Start  -->
<request name="ExperienceEditor.LagreDropDownItem.GetChildItems" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.LargeDropDownButton.LargeDropDownButtonChildItems, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Set Aliases Start  -->
<request name="ExperienceEditor.SetAliases.CanSetAliases" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SetAliases.CanSetAliases, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Toggle Debug Requests Start  -->
<request name="ExperienceEditor.ToggleDebugRequests.CanToggleDebug" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.ToggleDebugRequests.CanToggleDebugRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.ToggleDebugRequests.ExecuteToggleProfile" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.ToggleDebugRequests.ExecuteToggleProfileRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.ToggleDebugRequests.ExecuteToggleTrace" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.ToggleDebugRequests.ExecuteToggleTraceRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.ToggleDebugRequests.ExecuteToggleBorders" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.ToggleDebugRequests.ExecuteToggleBordersRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.ToggleDebugRequests.ExecuteToggleInformation" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.ToggleDebugRequests.ExecuteToggleInformationRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Download Debug Requests Start  -->
<request name="ExperienceEditor.DownloadDebugRequests.ExecuteDownloadProfile" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.DownloadDebugRequests.ExecuteDownloadProfileRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.DownloadDebugRequests.ExecuteDownloadTrace" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.DownloadDebugRequests.ExecuteDownloadTraceRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Save Debug Requests Start  -->
<request name="ExperienceEditor.SaveDebugRequests.GetProfileName" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SaveDebugRequests.GetProfileNameRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.SaveDebugRequests.GetTraceName" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SaveDebugRequests.GetTraceNameRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.SaveDebugRequests.SaveProfile" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SaveDebugRequests.SaveProfileRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.SaveDebugRequests.SaveTrace" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SaveDebugRequests.SaveTraceRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  ASP.NET Trace Start  -->
<request name="ExperienceEditor.AspNetTrace.CanOpen" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.AspNetTrace.CanOpenRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Workbox Start  -->
<request name="ExperienceEditor.Workbox.GetDialogTitle" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.WorkBox.DialogTitle, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Reset Fields  -->
<request name="ExperienceEditor.ResetFields.CanResetFields" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.ResetFields.CanResetFieldsRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.ResetFields.GetDialogUrl" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.ResetFields.GetDialogUrlRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Compare Versions  -->
<request name="ExperienceEditor.CompareVersions.CanCompareVersions" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.CompareVersions.CanCompareVersionsRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.CompareVersions.GetDialogUrl" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.CompareVersions.GetDialogUrlRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Remove Versions  -->
<request name="ExperienceEditor.RemoveVersions.CanRemoveVersion" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.RemoveVersions.CanRemoveVersionRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.RemoveVersions.GetIconLabel" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.RemoveVersions.IconLabelRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.RemoveVersions.GetCommand" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.RemoveVersions.GetCommandRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.RemoveVersions.Confirm" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.RemoveVersions.ConfirmRemoveVersionsRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.RemoveVersions.CheckReferrers" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.RemoveVersions.CheckReferrersRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.RemoveVersions.UncloneItems" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.RemoveVersions.UncloneItemsRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.RemoveVersions.Execute" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.RemoveVersions.ExecuteRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Remove Language  -->
<request name="ExperienceEditor.RemoveLanguage.Confirm" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.RemoveLanguage.ConfirmRemoveLanguageRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.RemoveLanguage.Execute" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.RemoveLanguage.ExecuteRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Add Version  -->
<request name="ExperienceEditor.AddVersion.CanAddVersion" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.AddVersion.CanAddVersionRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.AddVersion.Execute" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.AddVersion.ExecuteRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--
 "ExperienceEditor.SelectVersion.CanSelectVersion" is obsolete. 
-->
<request name="ExperienceEditor.SelectVersion.CanSelectVersion" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SelectVersion.CanSelectVersionRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--
 "ExperienceEditor.SelectVersion.CheckLatestVersion" is obsolete. 
-->
<request name="ExperienceEditor.SelectVersion.CheckLatestVersion" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.SelectVersion.CheckLatestVersionRequest, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Proofing  -->
<request name="ExperienceEditor.Proofing.Validation" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Proofing.Validation, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Proofing.Markup" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Proofing.Markup, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Edit all versions  -->
<request name="ExperienceEditor.Versions.GetStatus" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.EditAllVersions.GetStatus, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Versions.NotificationMessage" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.EditAllVersions.NotificationMessage, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Versions.SelectLayout" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.EditAllVersions.SelectLayout, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Versions.IconLabel" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.EditAllVersions.IconLabel, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Fields validation  -->
<request name="ExperienceEditor.FieldsValidation.ValidateFields" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.FieldsValidation.ValidateFields, Sitecore.ExperienceEditor.Speak.Ribbon" resolve="true"/>
<!--  Workflow  -->
<request name="ExperienceEditor.Workflow.GetWorkFlowCommands" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Workflow.GetWorkFlowCommands, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<request name="ExperienceEditor.Workflow.AreItemsInFinalWorkflowState" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.Workflow.AreItemsInFinalWorkflowState, Sitecore.ExperienceEditor.Speak.Ribbon"/>
<!--  Datasource Usages  -->
<request name="ExperienceEditor.Datasources.GetDatasourceUsagesCount" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.DatasourceUsages.GetDatasourceUsagesCount, Sitecore.ExperienceEditor.Speak.Ribbon" resolve="true"/>
<request name="ExperienceEditor.Datasources.GetDatasourceUsagesDialog" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.DatasourceUsages.GetDatasourceUsagesDialog, Sitecore.ExperienceEditor.Speak.Ribbon" resolve="true"/>
<request name="ExperienceEditor.Datasources.GetDatasourceUsagesDropdown" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.DatasourceUsages.GetDatasourceUsagesDropdown, Sitecore.ExperienceEditor.Speak.Ribbon" resolve="true"/>
<request name="ExperienceEditor.Datasources.GetDatasourceUsagesWithVersions" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.DatasourceUsages.GetDatasourceUsagesWithVersions, Sitecore.ExperienceEditor.Speak.Ribbon" resolve="true"/>
<request name="ExperienceEditor.Datasources.GetDatasourceUsagesWithLockedStatus" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.DatasourceUsages.GetDatasourceUsagesWithLockedStatus, Sitecore.ExperienceEditor.Speak.Ribbon" resolve="true"/>
<request name="ExperienceEditor.Datasources.GetDatasourceUsagesWithFinalWorkflowStep" type="Sitecore.ExperienceEditor.Speak.Ribbon.Requests.DatasourceUsages.GetDatasourceUsagesWithFinalWorkflowStep, Sitecore.ExperienceEditor.Speak.Ribbon" resolve="true"/>
<request name="ExperienceEditor.ContentTagging.TagItem" type="Sitecore.ContentTagging.Requests.TagContentRequest, Sitecore.ContentTagging" patch:source="Sitecore.ContentTagging.config"/>
<request name="ExperienceEditor.ContentTagging.CanTagItem" type="Sitecore.ContentTagging.Requests.CanTagContentRequest, Sitecore.ContentTagging" patch:source="Sitecore.ContentTagging.config"/>
<request name="Optimization.ItemVersions.Count" type="Sitecore.ContentTesting.Requests.ExperienceEditor.ItemVersionsCountRequest, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<request name="Optimization.ActiveTests.Count" type="Sitecore.ContentTesting.Requests.ExperienceEditor.ActiveTestsCountRequest, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<request name="Optimization.ActiveItemTests.Count" type="Sitecore.ContentTesting.Requests.ExperienceEditor.ActiveItemTestsCountRequest, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<request name="Optimization.ActiveItemTest" type="Sitecore.ContentTesting.Requests.ExperienceEditor.ItemHasActiveTestRequest, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<request name="Optimization.HistoricalTests.Count" type="Sitecore.ContentTesting.Requests.ExperienceEditor.HistoricalTestsCountRequest, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<request name="Optimization.IsContentTestingEnabledRequest" type="Sitecore.ContentTesting.Requests.ExperienceEditor.IsContentTestingEnabledRequest, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<request name="Optimization.SuggestedTests.Count" type="Sitecore.ContentTesting.Requests.ExperienceEditor.SuggestedTestsCountRequest, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<request name="ContentTesting.PersonalizationGallery.CanExecute" type="Sitecore.ContentTesting.Requests.ExperienceEditor.PersonalizationGalleryState, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<request name="OptimizationView.Toogle.GetUrl" type="Sitecore.ContentTesting.Requests.ExperienceEditor.ToogleOptimizationViewRequest, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<request name="Optimization.GetTestSummaryTestId" type="Sitecore.ContentTesting.Requests.ExperienceEditor.TestSummaryRequest, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<request name="Optimization.GetTestSummaryDetails" type="Sitecore.ContentTesting.Requests.ExperienceEditor.GetTestSummaryDetailsRequest, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<request name="Optimization.ShowSuggestedPersonalization" type="Sitecore.ContentTesting.Requests.ExperienceEditor.ShowSuggestedPersonalizationDialogRequest, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<!--  Delete  -->
<request name="ExperienceEditor.Delete.CheckActiveTestsRequest" type="Sitecore.ContentTesting.Requests.ExperienceEditor.Delete.CheckActiveTestsRequest, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<request name="ExperienceEditor.Delete.DeleteActiveTestsRequest" type="Sitecore.ContentTesting.Requests.ExperienceEditor.Delete.DeleteActiveTestsRequest, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.config"/>
<!--  ProfileCards Start  -->
<request name="ExperienceEditor.ProfileCardsDialog.Url" type="Sitecore.ContentTesting.Speak.Ribbon.Requests.FormDialogUrl.ProfileCardsDialog, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Speak.Requests.config"/>
<request name="ExperienceEditor.SelectProfileCardDialog.Url" type="Sitecore.ContentTesting.Speak.Ribbon.Requests.FormDialogUrl.SelectProfileCardDialog, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Speak.Requests.config"/>
<request name="ExperienceEditor.ProfileCardsPanel.CanOpenProfileCard" type="Sitecore.ContentTesting.Speak.Ribbon.Requests.ProfileCards.CanOpenProfileCard, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Speak.Requests.config"/>
<!--  Tracking Field Start  -->
<request name="ExperienceEditor.OpenTrackingField.CanOpen" type="Sitecore.ContentTesting.Speak.Ribbon.Requests.OpenTrackingField.CanOpenRequest, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Speak.Requests.config"/>
<request name="ExperienceEditor.OpenTrackingField.GetDialogUrl" type="Sitecore.ContentTesting.Speak.Ribbon.Requests.OpenTrackingField.GetDialogUrlRequest, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Speak.Requests.config"/>
<request name="ExperienceEditor.OpenTrackingField.Execute" type="Sitecore.ContentTesting.Speak.Ribbon.Requests.OpenTrackingField.ExecuteRequest, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Speak.Requests.config"/>
<!--  Enable Control Bar Start  -->
<request name="ExperienceEditor.ControlBar.CanEnable" type="Sitecore.ContentTesting.Speak.Ribbon.Requests.ControlBar.CanEnable, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Speak.Requests.config"/>
<!--  Explorer mode Start  -->
<request name="ExperienceExplorer.ExplorerMode.CanExplore" type="Sitecore.ExperienceExplorer.Web.Requests.CanExplore, Sitecore.ExperienceExplorer.Web" resolve="true" patch:source="Sitecore.ExperienceExplorer.Speak.Requests.config"/>
<request name="ExperienceExplorer.ExplorerMode.Explore" type="Sitecore.ExperienceExplorer.Web.Requests.ExplorerMode, Sitecore.ExperienceExplorer.Web" patch:source="Sitecore.ExperienceExplorer.Speak.Requests.config"/>
<!--  FXM Rules  -->
<request name="ExperienceEditor.FXM.GetRulesEditorUrl" type="Sitecore.FXM.Speak.Ribbon.Requests.Rules.GetRulesEditorUrl, Sitecore.FXM.Speak" patch:source="Sitecore.FXM.Speak.config"/>
<!--  FXM Matchers  -->
<request name="ExperienceEditor.FXM.GetClientActionsData" type="Sitecore.FXM.Speak.Ribbon.Requests.Matchers.GetClientActionsData, Sitecore.FXM.Speak" patch:source="Sitecore.FXM.Speak.config"/>
<request name="ExperienceEditor.FXM.GetElementReplacersData" type="Sitecore.FXM.Speak.Ribbon.Requests.Matchers.GetElementReplacersData, Sitecore.FXM.Speak" resolve="true" patch:source="Sitecore.FXM.Speak.config"/>
<!--  FXM Common  -->
<request name="ExperienceEditor.FXM.ToggleRegistryKey.Toggle" type="Sitecore.FXM.Speak.Ribbon.Requests.FxmToggleRegistryKey, Sitecore.FXM.Speak" patch:source="Sitecore.FXM.Speak.config"/>
<request name="ExperienceEditor.FXM.GetComponentSettings" type="Sitecore.FXM.Speak.Ribbon.Requests.Common.GetComponentSettings, Sitecore.FXM.Speak" patch:source="Sitecore.FXM.Speak.config"/>
</sitecore.experienceeditor.speak.requests>
<contentTagging patch:source="Sitecore.ContentTagging.config">
<configurations>
<config name="Default" patch:source="Sitecore.ContentTagging.OpenCalais.config">
<content>
<provider name="DefaultContentProvider"/>
</content>
<tagger>
<provider name="DefaultTagger"/>
</tagger>
<taxonomy>
<provider name="DefaultTaxonomyProvider"/>
</taxonomy>
<discovery patch:source="Sitecore.ContentTagging.OpenCalais.config">
<provider name="OpenCalaisDiscoveryProvider"/>
</discovery>
</config>
</configurations>
<providers patch:source="Sitecore.ContentTagging.Core.config">
<content>
<add name="DefaultContentProvider" type="Sitecore.ContentTagging.Core.Providers.DefaultContentProvider, Sitecore.ContentTagging.Core"/>
</content>
<discovery>
<add name="DefaultDiscoveryProvider" type="Sitecore.ContentTagging.Core.Providers.DummyDiscoveryProvider, Sitecore.ContentTagging.Core"/>
<add name="OpenCalaisDiscoveryProvider" type="Sitecore.ContentTagging.OpenCalais.Providers.OpenCalaisDiscoveryProvider, Sitecore.ContentTagging.OpenCalais" patch:source="Sitecore.ContentTagging.OpenCalais.config"/>
</discovery>
<tagger>
<add name="DefaultTagger" type="Sitecore.ContentTagging.Core.Providers.DefaultTagger, Sitecore.ContentTagging.Core"/>
</tagger>
<taxonomy>
<add name="DefaultTaxonomyProvider" type="Sitecore.ContentTagging.Core.Providers.DefaultTaxonomyProvider, Sitecore.ContentTagging.Core"/>
</taxonomy>
</providers>
<openCalais patch:source="Sitecore.ContentTagging.OpenCalais.config">
<languages>
<language id="en"/>
</languages>
</openCalais>
</contentTagging>
<xdbClientFactory type="Sitecore.ListManagement.XConnect.Web.XdbClientFactory, Sitecore.ListManagement.XConnect" patch:source="Sitecore.ListManagement.config"/>
<listManager patch:source="Sitecore.ListManagement.config">
<export>
<field name="Identifier" type="Sitecore.ListManagement.XConnect.Web.Export.IdentifierContactDataReader, Sitecore.ListManagement.XConnect.Web"/>
<field name="Source" type="Sitecore.ListManagement.XConnect.Web.Export.SourceContactDataReader, Sitecore.ListManagement.XConnect.Web"/>
<field name="Email" type="Sitecore.ListManagement.XConnect.Web.Export.EmailContactDataReader, Sitecore.ListManagement.XConnect.Web"/>
<field name="FirstName" type="Sitecore.ListManagement.XConnect.Web.Export.FirstNameContactDataReader, Sitecore.ListManagement.XConnect.Web"/>
<field name="LastName" type="Sitecore.ListManagement.XConnect.Web.Export.LastNameContactDataReader, Sitecore.ListManagement.XConnect.Web"/>
</export>
</listManager>
<import patch:source="Sitecore.ListManagement.config">
<!--
  FACET MAPPER
            Maps an array of string data from a CSV line into a contact facet. Each of the mappers
            below is supposed to map a single contact facet at once. A mapper for specific facet
            is matched by the facet name (e.g. "ListSubscriptions", "Emails" or "Personal").
            Default facet names can be found in the 'Sitecore.XConnect.Collection.Model.CollectionModel.FacetKeys'
            class ('Sitecore.XConnect.Collection.Model' assembly).
            
            Note:
            Each mapper should either:
              - map the facet if successfully matched by the facet name and return an instance of 
                the `Sitecore.ListManagement.XConnect.Import.FacetMapped` class, or
            
              - return the 'NoMatch' result if not matched by the facet name. In this case another
                matcher in the chain will be queried for mapping.
                
            A first mapping result different from the 'NoMatch' is considered successful and breaks
            the chain.
      
-->
<facetMapper type="Sitecore.ListManagement.XConnect.Web.Import.CompositeFacetMapperCollection, Sitecore.ListManagement.XConnect.Web">
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
<facetMappers hint="list:Add">
<facetMapper type="Sitecore.ListManagement.XConnect.Web.Import.ListSubscriptionMapper, Sitecore.ListManagement.XConnect.Web"/>
<facetMapper type="Sitecore.ListManagement.XConnect.Web.Import.PreferredAddressFacetMapper, Sitecore.ListManagement.XConnect.Web"/>
<facetMapper type="Sitecore.ListManagement.XConnect.Web.Import.PreferredEmailFacetMapper, Sitecore.ListManagement.XConnect.Web"/>
<facetMapper type="Sitecore.ListManagement.XConnect.Web.Import.PersonalInformationFacetMapper, Sitecore.ListManagement.XConnect.Web"/>
</facetMappers>
</facetMapper>
<!--
  CONTACT FACTORY
            Creates new or resolves existing contacts to be fulfilled with data from 
            a CSV stream using StreamContactImporter.
      
-->
<contactFactory type="Sitecore.ListManagement.XConnect.Web.Import.ContactFactory, Sitecore.ListManagement.XConnect.Web"/>
<!--
  STREAM CONTACT IMPORTER
            Reads contacts from a CSV stream and imports them into xDB.
      
-->
<streamContactImporter type="Sitecore.ListManagement.Import.StreamContactImporter, Sitecore.ListManagement">
<param ref="/sitecore/import/contactSource"/>
<param ref="/sitecore/import/contactImporter"/>
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
</streamContactImporter>
<!--
  CONTACT SOURCE
            Reads contact data from a CSV stream before further importing.
            It can also be used for filtering out contacts that do not satisfy
            system requirements (e.g. have no email specified) or gather
            statistics.
      
-->
<contactSource type="Sitecore.ListManagement.Import.ValidIdentifierSourceFilter, Sitecore.ListManagement">
<param type="Sitecore.ListManagement.Import.UniqueIdentifierFilter, Sitecore.ListManagement">
<param type="Sitecore.ListManagement.Import.RequiredFieldsFilter, Sitecore.ListManagement">
<param type="Sitecore.ListManagement.Import.IdentifierIndexRangeFilter, Sitecore.ListManagement">
<param type="Sitecore.ListManagement.Import.CsvContactSource, Sitecore.ListManagement">
<param type="Sitecore.ListManagement.Import.CsvReader, Sitecore.ListManagement" resolve="true"/>
</param>
</param>
</param>
</param>
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
</contactSource>
<!--
  CONTACT IMPORTER
            Imports contact data in batches using import options and 
            gathering import statistics.
      
-->
<contactImporter type="Sitecore.ListManagement.Import.RequiredMappingFieldRangeValidator, Sitecore.ListManagement">
<param type="Sitecore.ListManagement.Import.ObservableContactImporter, Sitecore.ListManagement">
<param type="Sitecore.ListManagement.Import.BatchContactImporter, Sitecore.ListManagement">
<param type="Sitecore.ListManagement.XConnect.Web.Import.XConnectContactImporter, Sitecore.ListManagement.XConnect.Web">
<param type="Sitecore.ListManagement.XConnect.Web.XdbClientFactory, Sitecore.ListManagement.XConnect.Web"/>
<param ref="/sitecore/import/facetMapper"/>
<param type="Sitecore.ListManagement.Configuration.ListManagementSettings, Sitecore.ListManagement" resolve="true"/>
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
</param>
<param type="Sitecore.ListManagement.Configuration.ListManagementSettings, Sitecore.ListManagement" resolve="true"/>
</param>
<param type="Sitecore.ListManagement.Operations.IListOperationRepository, Sitecore.ListManagement" resolve="true"/>
</param>
</contactImporter>
</import>
<!--
 Content Testing Factory configuration
         The types listed here are used by the ContentTestingFactory. Override these settings to override the individual factories.
    
-->
<contentTesting patch:source="Sitecore.ContentTesting.config">
<!--  Concrete implementation types  -->
<contentTestingFactory type="Sitecore.ContentTesting.ContentTestingFactory, Sitecore.ContentTesting"/>
<!--
 Content Test Performance Factory implementation type
-->
<contentTestPerformanceFactory type="Sitecore.ContentTesting.Reports.ContentTestPerformanceFactory, Sitecore.ContentTesting"/>
<!--  Content Test Store implementation type  -->
<contentTestStore type="Sitecore.ContentTesting.Data.SitecoreContentTestStore, Sitecore.ContentTesting"/>
<dataSourceResolver type="Sitecore.ContentTesting.Data.DataSourceResolver, Sitecore.ContentTesting"/>
<editModeContext type="Sitecore.ContentTesting.Editing.EditModeContext, Sitecore.ContentTesting"/>
<experienceAssignor type="Sitecore.ContentTesting.ExperienceAssignor, Sitecore.ContentTesting"/>
<forceWinnerBehaviorFactory type="Sitecore.ContentTesting.Rules.ForceWinnerBehavior.ForcedWinnerBehaviorFactory, Sitecore.ContentTesting">
<forceWinnerBehaviors hint="raw:AddBehaviorRaw">
<new name="New" type="Sitecore.ContentTesting.Rules.ForceWinnerBehavior.ForceNewExperienceWinner, Sitecore.ContentTesting"/>
<original name="Original" type="Sitecore.ContentTesting.Rules.ForceWinnerBehavior.ForceOriginalExperienceWinner, Sitecore.ContentTesting"/>
</forceWinnerBehaviors>
</forceWinnerBehaviorFactory>
<personalizationTestStore type="Sitecore.ContentTesting.Data.SitecorePersonalizationTestStore, Sitecore.ContentTesting"/>
<personalizationTestStoreExtension type="Sitecore.ContentTesting.Data.SitecorePersonalizationTestStore, Sitecore.ContentTesting"/>
<personalizationTracker type="Sitecore.ContentTesting.Analytics.PersonalizationTracker, Sitecore.ContentTesting"/>
<personalizationService type="Sitecore.ContentTesting.Services.PersonalizationService, Sitecore.ContentTesting">
<param ref="contentTesting/contentTestStore" desc="contentTestStore"/>
<param ref="contentTesting/personalizationTestStore" desc="personalizationConfiguration"/>
<param ref="contentTesting/personalizationTestStoreExtension" desc="personalizationTestStoreExtension"/>
<param ref="contentTesting/contentTestPerformanceFactory" desc="performanceFactory"/>
<param type="Sitecore.ContentTesting.Inspectors.TestValueInspector, Sitecore.ContentTesting" desc="testValueInspector"/>
</personalizationService>
<screenshotContextFactory type="Sitecore.ContentTesting.Screenshot.ScreenshotContextFactory, Sitecore.ContentTesting"/>
<screenshotGenerator type="Sitecore.ContentTesting.Screenshot.ScreenshotGenerator, Sitecore.ContentTesting" singleInstance="true"/>
<testCombinationContext type="Sitecore.ContentTesting.Web.TestCombinationContext, Sitecore.ContentTesting">
<param desc="httpContext"/>
</testCombinationContext>
<testingTracker type="Sitecore.ContentTesting.Analytics.TestingTracker, Sitecore.ContentTesting"/>
<testRunEstimator type="Sitecore.ContentTesting.Data.TestRunEstimator, Sitecore.ContentTesting"/>
<ruleTextProviderFactory type="Sitecore.ContentTesting.PersonalizationRules.RuleProviderFactory, Sitecore.ContentTesting">
<rules hint="list:AddRule">
<rule type="Sitecore.ContentTesting.PersonalizationRules.Providers.InListRuleProvider, Sitecore.ContentTesting" key="Country">
<param desc="conditionId">{52E42C59-7210-43E5-94A6-3EA6B98835B8}</param>
<param desc="attributeName">value</param>
<root>
/sitecore/system/Settings/Analytics/Lookups/Countries
</root>
</rule>
<rule type="Sitecore.ContentTesting.PersonalizationRules.Providers.InListRuleProvider, Sitecore.ContentTesting" key="LandingPageId">
<param desc="conditionId">{9BD1F746-B5DF-4FE3-A1F8-AF6DFB660333}</param>
<param desc="attributeName">ItemIds</param>
</rule>
<rule type="Sitecore.ContentTesting.PersonalizationRules.Providers.InListRuleProvider, Sitecore.ContentTesting" key="DeviceType">
<param desc="conditionId">{F563E8D0-1D8A-4744-BD90-3C8D7E483884}</param>
<param desc="attributeName">Value</param>
<root>
/sitecore/system/Settings/Rules/Definitions/Elements/Device/Device Type/Device Types
</root>
</rule>
<rule type="Sitecore.ContentTesting.PersonalizationRules.Providers.CampaignRuleProvider, Sitecore.ContentTesting" key="CampaignId">
<param desc="conditionId">{0290AA90-B948-4C8C-B576-F3C17F9DE389}</param>
<param desc="attributeName">CampaignsList</param>
</rule>
<rule type="Sitecore.ContentTesting.PersonalizationRules.Providers.CompareNumericRuleProvider, Sitecore.ContentTesting" key="ContactVisitIndex">
<param desc="conditionId">{61370693-189D-44A0-ABC5-2592DBD579ED}</param>
<param desc="attributeName">no</param>
</rule>
<rule type="Sitecore.ContentTesting.PersonalizationRules.Providers.RegularExpressionRuleProvider, Sitecore.ContentTesting" key="Region">
<param desc="conditionId">{29FB46B8-32D3-49CC-877B-1512215EB39A}</param>
<param desc="attributeName">value</param>
</rule>
<rule type="Sitecore.ContentTesting.PersonalizationRules.Providers.RegularExpressionRuleProvider, Sitecore.ContentTesting" key="OperatingSystem">
<param desc="conditionId">{03E21995-D9B6-4AE6-8336-0C999CBE2838}</param>
<param desc="attributeName">value</param>
</rule>
<rule type="Sitecore.ContentTesting.PersonalizationRules.Providers.EventRuleProvider, Sitecore.ContentTesting" key="Goal">
<param desc="conditionId">{C1DA0D65-C9C7-4526-91BB-E0390A7D3833}</param>
<param desc="attributeName">GoalId</param>
</rule>
<rule type="Sitecore.ContentTesting.PersonalizationRules.Providers.EventRuleProvider, Sitecore.ContentTesting" key="Event">
<param desc="conditionId">{6F3DD3F4-52BF-410A-9DC8-60D83200DF3B}</param>
<param desc="attributeName">PageEventId</param>
</rule>
<rule type="Sitecore.ContentTesting.PersonalizationRules.Providers.EventRuleProvider, Sitecore.ContentTesting" key="Outcome">
<param desc="conditionId">{2C772C7C-E368-4553-893A-2A4CCFD32C36}</param>
<param desc="attributeName">OutcomeId</param>
</rule>
<rule type="Sitecore.ContentTesting.PersonalizationRules.Providers.ProfileRuleProvider, Sitecore.ContentTesting" key="Profile">
<param desc="conditionId">{08A70C4F-93B5-409E-9967-3892AAEB3BC2}</param>
<param desc="attributeName">PatternList</param>
</rule>
<rule type="Sitecore.ContentTesting.PersonalizationRules.Providers.DefaultRuleProvider, Sitecore.ContentTesting" key="Default">
<param desc="conditionId">{4888ABBB-F17D-4485-B14B-842413F88732}</param>
</rule>
</rules>
</ruleTextProviderFactory>
<testingSearch type="Sitecore.ContentTesting.ContentSearch.TestingSearch, Sitecore.ContentTesting" patch:source="Sitecore.ContentTesting.Search.config"/>
</contentTesting>
<!--  Email templates used for test notifications  -->
<emailTemplateCreators patch:source="Sitecore.ContentTesting.config">
<template name="WinnerFound" type="Sitecore.ContentTesting.Notifications.Creators.WinnerFoundTemplateCreator, Sitecore.ContentTesting">
<templateFile>
/sitecore/shell/Applications/Notification/EmailTemplates/WinnerFound.html
</templateFile>
</template>
<template name="NoWinner" type="Sitecore.ContentTesting.Notifications.Creators.NoWinnerTemplateCreator, Sitecore.ContentTesting">
<templateFile>
/sitecore/shell/Applications/Notification/EmailTemplates/NoWinner.html
</templateFile>
</template>
<template name="Rollback" type="Sitecore.ContentTesting.Notifications.Creators.RollbackTemplateCreator, Sitecore.ContentTesting">
<templateFile>
/sitecore/shell/Applications/Notification/EmailTemplates/RollbackPrevious.html
</templateFile>
</template>
</emailTemplateCreators>
<!--  Behaviours used when forcing a test winner  -->
<forceWinnerBehaviors patch:source="Sitecore.ContentTesting.config">
<behavior name="New" type="Sitecore.ContentTesting.Rules.ForceWinnerBehavior.ForceNewExperienceWinner, Sitecore.ContentTesting"/>
<behavior name="Original" type="Sitecore.ContentTesting.Rules.ForceWinnerBehavior.ForceOriginalExperienceWinner, Sitecore.ContentTesting"/>
</forceWinnerBehaviors>
<algorithms patch:source="Sitecore.ContentTesting.Intelligence.config">
<!--
 The algorithm used when performing clustering across multiple sessions. 
-->
<clustering type="Sitecore.ContentTesting.Intelligence.Algorithms.Kmeans, Sitecore.ContentTesting.Intelligence"/>
</algorithms>
<experienceProfile patch:source="Sitecore.ExperienceProfile.Client.config">
<!--
 Provides a hook to modify view results before they are displayed by Experience Profile appliction. 
-->
<resultTransformManager>
<!--
 If http request header "X-SC-CintelTransformerClientName" matches clientName element, then the result transformer provider is applied.
             Header value has to be:  X-SC-CintelTransformerClientName: speakClient 
-->
<resultTransformProvider type="Sitecore.Cintel.Endpoint.Transfomers.ResultTransformProvider" clientName="speakClient" singleInstance="true">
<!--
 If http request header "X-SC-CintelTransfomerKey" matches a viewName element, then the result transformer is applied.
               For example, header value could read as:  X-SC-CintelTransfomerKey: visits 
-->
<intelResultTransformers>
<add type="Sitecore.Cintel.Client.Transformers.Contact.VisitResultTransformer, Sitecore.Cintel.Client" viewName="visits"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.GoalResultTransformer, Sitecore.Cintel.Client" viewName="goals"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.CampaignResultTransformer, Sitecore.Cintel.Client" viewName="campaigns"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.EventResultTransformer, Sitecore.Cintel.Client" viewName="events"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.OverviewResultTransformer, Sitecore.Cintel.Client" viewName="latest-statistics"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.LatestEventResultTransformer, Sitecore.Cintel.Client" viewName="latest-events"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.RecentCampaignsResultTransformer, Sitecore.Cintel.Client" viewName="recent-campaigns"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.BestPatternMatchesResultTransformer, Sitecore.Cintel.Client" viewName="best-pattern-matches"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.VisitSummaryResultTransformer, Sitecore.Cintel.Client" viewName="visit-summary"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.VisitPagesResultTransformer, Sitecore.Cintel.Client" viewName="visit-pages"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.VisitInternalSearchesResultTransformer, Sitecore.Cintel.Client" viewName="visit-internal-searches"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.ProfilingProfilesResultTransformer, Sitecore.Cintel.Client" viewName="profile-info"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.KeywordResultTransformer, Sitecore.Cintel.Client" viewName="external-keyword-summary"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.InternalKeywordSummaryResultTransformer, Sitecore.Cintel.Client" viewName="internal-keyword-summary"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.KeywordResultTransformer, Sitecore.Cintel.Client" viewName="paid-keyword-summary"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.KeywordDetailResultTransformer, Sitecore.Cintel.Client" viewName="external-keyword-detail"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.KeywordDetailResultTransformer, Sitecore.Cintel.Client" viewName="internal-keyword-detail"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.KeywordDetailResultTransformer, Sitecore.Cintel.Client" viewName="paid-keyword-detail"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.LatestVisitorsResultTransformer, Sitecore.Cintel.Client" viewName="latest-visitors"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.JourneyResultTransformer, Sitecore.Cintel.Client" viewName="journey"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.JourneyOutcomeDetailResultTransformer, Sitecore.Cintel.Client" viewName="journey-detail-outcome"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.JourneyOnlineInteractionDetailResultTransformer, Sitecore.Cintel.Client" viewName="journey-detail-online-interaction"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.JourneyOfflineInteractionDetailResultTransformer, Sitecore.Cintel.Client" viewName="journey-detail-offline-interaction"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.ChannelInteractionDistributionResultTransformer, Sitecore.Cintel.Client" viewName="channel-interaction-distribution"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.ChannelGoalDistributionResultTransformer, Sitecore.Cintel.Client" viewName="channel-goal-distribution"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.ChannelSummaryResultTransformer, Sitecore.Cintel.Client" viewName="channel-summary"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.OutcomeDetailTransformer, Sitecore.Cintel.Client" viewName="outcome-detail"/>
<add type="Sitecore.Cintel.Client.Transformers.Contact.AutomationsTransformer, Sitecore.Cintel.Client" viewName="automations"/>
</intelResultTransformers>
<!--
 If http request header "X-SC-CintelTransfomerKey" matches key element, then the result transformer is applied.
                Header value has to be:  X-SC-CintelTransfomerKey: default 
-->
<contactSearchResultTransformer>
<add type="Sitecore.Cintel.Client.Transformers.Contact.ContactSearchResultTransformer, Sitecore.Cintel.Client" key="default"/>
</contactSearchResultTransformer>
<!--
 If http request header "X-SC-CintelTransfomerKey" matches key element, then the result transformer is applied.
                Header value has to be:  X-SC-CintelTransfomerKey: default 
-->
<contactDetailsTransformer>
<add type="Sitecore.Cintel.Client.Transformers.Contact.ContactDetailsTransformer, Sitecore.Cintel.Client" key="default"/>
</contactDetailsTransformer>
</resultTransformProvider>
</resultTransformManager>
<!--  IDs for default images stored in content tree.  -->
<defaultImages patch:source="Sitecore.ExperienceProfile.config">
<contactProfileImageId id="{76807981-28BA-49FF-BAA2-9DC1C40F2F73}"/>
<pageEventImageId id="{E535D1CA-B43D-40DF-AE02-11A609F19781}"/>
<patternCardImageId id="{8ABB6C19-F381-4469-88FB-567E7D141F44}"/>
<channelTypeImageId id="{FF2C71F4-7675-4619-8783-F65F1041D3A1}"/>
<channelImageId id="{FF2C71F4-7675-4619-8783-F65F1041D3A1}"/>
<outcomeImageId id="{9D8FB21E-6036-4BB9-935D-52D39ED9FB73}"/>
</defaultImages>
<providers patch:source="Sitecore.ExperienceProfile.config">
<!--
 Provides view pipelines. Pipelines are defined in Sitecore.ExperienceProfile.Reporting.config file. 
-->
<viewProvider type="Sitecore.Cintel.Reporting.PipelineViewProvider" singleInstance="true"/>
<!--
 Provides marketing definition items for profiles, channels, outcomes, etc. 
-->
<cmsMasterDataService type="Sitecore.Cintel.CmsDataService.CmsMasterDataService, Sitecore.Cintel" singleInstance="true"/>
<!--
 Provides a way to retrieve contact and contact facets. 
-->
<contactService type="Sitecore.Cintel.ContactService.XdbContactService, Sitecore.Cintel" singleInstance="true"/>
<!--  Provides contact search functionality.  -->
<contactSearchProvider type="Sitecore.Cintel.ContactSearchProvider, Sitecore.Cintel" singleInstance="true">
<param type="Sitecore.Cintel.Search.InteractionExpandOptionsGenerator, Sitecore.Cintel" singleInstance="true"/>
</contactSearchProvider>
</providers>
<!--
 Default contact facets used implementation of contactService. 
-->
<defaultFacets patch:source="Sitecore.ExperienceProfile.config">
<PersonalInfo name="Personal"/>
<AddressList name="Addresses"/>
<EmailList name="Emails"/>
<PhoneNumberList name="Phone Numbers"/>
<Picture name="Picture"/>
</defaultFacets>
<viewConfiguration patch:source="Sitecore.ExperienceProfile.config">
<!--
 Indicates if channel names should include channel code, e.g. Online/Website/Brand website (41/70/01).
             The setting is used by views having channel name field. 
-->
<channelDisplayNameIncludesCode value="true"/>
<!--
 Specifies separator for in taxon uris, e.g. Online/Website/Brand website 
-->
<taxonUriSeparator value="/"/>
</viewConfiguration>
<!--
 Name of Sitecore search index that is used for contact search. 
-->
<searchIndex name="sitecore_analytics_index" patch:source="Sitecore.ExperienceProfile.config"/>
</experienceProfile>
<experienceAnalytics patch:source="Sitecore.ExperienceAnalytics.Aggregation.config">
<aggregation>
<logger type="Sitecore.ExperienceAnalytics.Core.Diagnostics.Logger, Sitecore.ExperienceAnalytics.Core" singleInstance="true"/>
<!--
 This section hosts the definitions of the Experience Analytics dimensions
                'id' attribute is the unique identifier and should match the ID of the corresponding dimension definition item in Marketing Control Panel
                'type' attribute references the fully qualified class name and assembly name with the dimension implementation.
                
-->
<dimensions>
<dimension id="{EF129780-FFCF-4EAF-B429-80D25315248E}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<dimension id="{A1BCAB9A-1A98-4A3D-A58F-34ACF7931C49}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<dimension id="{214E8E8C-519A-4803-8579-3CA466F9F29F}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--  Obsolete channel type dimension  -->
<dimension id="{6237CC24-4FF5-4869-B898-FC6A534F3C3E}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--  Obsolete channel dimension  -->
<dimension id="{86CA3214-A950-4EEF-BEE6-A2C5CF6FAC24}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--  Obsolete channel group dimension  -->
<dimension id="{595A12E2-CEF6-4B1C-9990-83FDD7173533}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--  Obsolete geo dimensions  -->
<dimension id="{988A1D00-9D00-4F05-97EC-DF3391F8CCE7}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<dimension id="{1879168B-AF5E-4E9C-9DAE-8B71125F2AD2}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<dimension id="{33ACD611-FE19-4769-99F9-1EF1D997BDC5}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--  Obsolete Asset dimension  -->
<dimension id="{42C02019-CCB4-4C49-BD4E-B736C6698089}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--  Obsolete download dimension  -->
<dimension id="{DACF0445-EDB1-4A90-851E-380DC6A36541}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--
 Obsolete Campaign and Campaign Group dimension <New flexi dimension would be used>
-->
<dimension id="{A8EC3E11-A417-4624-A612-12A406284D4B}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<dimension id="{3E01BA28-2B4D-408A-A4BA-6C51ED9FFB9C}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--
 Obsolete language dimension. New flexi language dimension will be used 
-->
<dimension id="{6295C8F0-5ACB-4634-A1D6-6D3248EC210C}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--
 Obsolete pattern dimension. New flexi pattern dimension will be used 
-->
<dimension id="{C001F4B2-0523-436E-9097-AD4E39D51835}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--
 Obsolete referring site dimension. New flexible dimension will be used 
-->
<dimension id="{E6CC7A2B-6E72-40CE-9315-88F4617CDB10}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--  Obsolete page related dimensions  -->
<dimension id="{F197D8FF-D4C8-42DF-BC6E-512F17292674}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<dimension id="{81379156-7721-4EE5-8951-AE92E1CDF090}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<dimension id="{3DC11B43-1D7F-4169-A87D-291D57ECEDA6}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<dimension id="{F2C1CCBF-C2D6-4FF9-A3BF-DD55E60071A2}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<dimension id="{6B945AE7-673F-412A-96F8-F53EF9D63BBC}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<dimension id="{CBD2E37E-CC79-4A5A-8B3B-95F6B7D7FF53}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--  Obsolete local search keyword  -->
<dimension id="{CBEE2CF5-51DB-4106-A7A9-BF87AB173742}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--  Obsolete PageViews dimension  -->
<dimension id="{8345E6DF-8982-4F32-B478-40D672E914BB}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--  Obsolete Conversions dimension  -->
<dimension id="{6DD3E3A7-FE91-4860-9BF6-388863AD7C9D}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--  Obsolete Goal dimension  -->
<dimension id="{6F502E86-5CDB-4D4E-B3A1-905D41B86E9F}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--  Obsolete Asset group dimension  -->
<dimension id="{197EB127-284D-436A-A576-486A7B01013E}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--  Obsolete Outcome and Outcome Group dimensions  -->
<dimension id="{D6BC9E66-E51A-4481-AAE2-F31189CCA572}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<dimension id="{A23E7058-5A8C-426F-A417-927D3F7DF487}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--  Obsolete campaign facet dimensions  -->
<dimension id="{1A0F92E9-A2CC-41D9-8D1B-B0839CB1104B}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<dimension id="{87F05F2A-D4A0-43DA-8676-196639D3F6A8}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<dimension id="{D551A7B4-535F-4138-8361-7B12BF9216A4}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--  Obsolete Goal Facet Group dimension  -->
<dimension id="{232D5449-4DBB-4101-8A0E-41E003A91484}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--  Obsolete Goal Facet dimension  -->
<dimension id="{D135E856-FC48-4F6E-987F-5566A180215D}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<dimension id="{E5D56897-23D1-46F3-B8FB-D351C1CAFB7E}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<!--  Obsolete Device dimension  -->
<dimension id="{84AF4324-8096-4A5E-9C5C-DBBE92D814D3}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<dimension id="{CC287753-DFF8-470A-B586-A23DA9B80ECA}" type="Sitecore.ExperienceAnalytics.Aggregation.Dimensions.NopDimension, Sitecore.ExperienceAnalytics.Aggregation"/>
<dimension id="{3D8FD7DA-52EE-44ED-8944-3171944D986A}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByEmail, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Aggregation.config"/>
<dimension id="{6E1865FB-C3B6-41F0-9857-31F4EE1E80B0}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByEmailManager, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Aggregation.config"/>
<dimension id="{B459A0CA-9F43-4AC1-8E6D-549E2A3DE674}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByLanguageSpecificEmail, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Aggregation.config"/>
<dimension id="{53F60E4D-A1A1-44CB-A912-9CD6D8DE6E67}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByMessage, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Aggregation.config"/>
<dimension id="{19C5B093-E73A-41CB-80FB-71CAB89A7AEB}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByLandingPage, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Aggregation.config"/>
<dimension id="{A720AC6E-A9A3-410C-BAD0-E3102A1D58CE}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByAbTestVariant, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Aggregation.config"/>
<dimension id="{99C447BD-9CCD-4B54-8AE9-5FB1550DE242}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByLocation, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Aggregation.config"/>
<dimension id="{008BD4FD-580A-41BE-848C-A6B49C54F44C}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByDevice, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Aggregation.config"/>
<dimension id="{D9F374E1-F2D7-416A-84E6-CAFCD6989935}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByDemographics, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Aggregation.config"/>
<dimension id="{A80EC44A-4E52-4C3D-92F2-0C5DD80691DF}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByTimeOfDay, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Aggregation.config"/>
</dimensions>
<flexibleDimensions>
<!-- Channel -->
<dimension id="{6D88FEC6-1D64-46F1-8A60-270B8CE2CC78}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Channels.Channels.ChannelMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.Marketing.Taxonomy.Model.Channel.Channel, Sitecore.Marketing.Taxonomy]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Channels.Channels.ChannelResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetConfiguredChannelManager"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Channels.ChannelFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Channels.Channels.ChannelMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.Guid]], Sitecore.ExperienceAnalytics.Aggregation">
<ParentVisitGroupKeyResolvers hint="list">
<ParentVisitGroupKeyResolver type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.TaxonomyParentKeyResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetConfiguredChannelManager"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.UnknownTaxonomyParentKeyResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param desc="level">2</param>
</param>
</ParentVisitGroupKeyResolver>
</ParentVisitGroupKeyResolvers>
</param>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- ChannelGroup -->
<dimension id="{8085A926-81C0-4AF4-B3C8-2DE0D06438CF}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Channels.ChannelGroups.ChannelGroupMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.Marketing.Taxonomy.Model.Channel.Channel, Sitecore.Marketing.Taxonomy]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Channels.ChannelGroups.ChannelGroupResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetConfiguredChannelManager"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Channels.ChannelFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Channels.ChannelGroups.ChannelGroupMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.Guid]], Sitecore.ExperienceAnalytics.Aggregation">
<ParentVisitGroupKeyResolvers hint="list">
<ParentVisitGroupKeyResolver type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.TaxonomyParentKeyResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetConfiguredChannelManager"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.UnknownTaxonomyParentKeyResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param desc="level">1</param>
</param>
</ParentVisitGroupKeyResolver>
</ParentVisitGroupKeyResolvers>
</param>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- ChannelType -->
<dimension id="{550C5A53-E190-40BA-95EB-A33C54827A20}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Channels.ChannelTypes.ChannelTypeMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.Marketing.Taxonomy.Model.Channel.Channel, Sitecore.Marketing.Taxonomy]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Channels.ChannelTypes.ChannelTypeResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetConfiguredChannelManager"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Channels.ChannelFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Channels.ChannelTypes.ChannelTypeMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Outcome -->
<dimension id="{5797E54E-37AF-4EC5-B8BA-DD7F3EAFD6C9}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Outcomes.Outcomes.OutcomeMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.XConnect.Outcome, Sitecore.XConnect]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Outcomes.Outcomes.OutcomeResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Outcomes.OutcomeFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Outcomes.Outcomes.OutcomeMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.Guid]], Sitecore.ExperienceAnalytics.Aggregation">
<ParentVisitGroupKeyResolvers hint="list">
<ParentVisitGroupKeyResolver type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Outcomes.OutcomeGroupKeyResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetConfiguredOutcomeDefinitionManager"/>
</ParentVisitGroupKeyResolver>
</ParentVisitGroupKeyResolvers>
</param>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Outcome Group -->
<dimension id="{2EA8CCFD-8FAC-4CF2-9F70-FBFDD5C07CEA}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Outcomes.OutcomeGroups.OutcomeGroupMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.XConnect.Outcome, Sitecore.XConnect]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Outcomes.OutcomeGroups.OutcomeGroupResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetConfiguredOutcomeManager"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Outcomes.OutcomeFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Outcomes.OutcomeGroups.OutcomeGroupMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Goal -->
<dimension id="{148758D7-7523-4787-A7D9-9379E5BC5514}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Goal.Goals.GoalMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.XConnect.Goal, Sitecore.XConnect]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Goal.Goals.GoalResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Goal.GoalFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Goal.Goals.GoalMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Goal Facet -->
<dimension id="{6634C79C-1E55-485F-9157-93ABA18BCC67}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Goal.GoalFacets.GoalFacetMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.Marketing.Taxonomy.Model.TaxonUri, Sitecore.Marketing.Taxonomy]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Goal.GoalFacets.GoalFacetResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetGoalTaxonomyFacetService"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Goal.GoalFacetFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Goal.GoalFacets.GoalFacetMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.Guid]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.FacetsKeyResolvers.FacetKeyResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
</param>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Goal Facet Group -->
<dimension id="{C1491C3D-0A63-45E1-9510-B954415C9E08}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Goal.GoalFacetGroups.GoalFacetGroupMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.Marketing.Taxonomy.Model.TaxonUri, Sitecore.Marketing.Taxonomy]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Goal.GoalFacetGroups.GoalFacetGroupResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetGoalTaxonomyFacetService"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Goal.GoalFacetFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Goal.GoalFacetGroups.GoalFacetGroupMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.Guid]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.FacetsKeyResolvers.FacetGroupKeyResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
</param>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Campaign -->
<dimension id="{7892D03C-03A8-44B4-8815-5D66666CECED}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Campaign.Campaigns.CampaignMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Campaign.Campaigns.CampaignResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetConfiguredCampaignDefinitionManager"/>
<param ref="experienceAnalytics/aggregation/logger" desc="logger"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Campaign.CampaignFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Campaign.Campaigns.CampaignMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.Guid]], Sitecore.ExperienceAnalytics.Aggregation">
<ParentVisitGroupKeyResolvers hint="list">
<ParentVisitGroupKeyResolver type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Campaign.CampaignGroupKeyResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetConfiguredCampaignDefinitionManager"/>
<param ref="experienceAnalytics/aggregation/logger" desc="logger"/>
</ParentVisitGroupKeyResolver>
</ParentVisitGroupKeyResolvers>
</param>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Campaign Group -->
<dimension id="{BA96B8EB-4828-440B-BA84-2D6C689D42D9}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Campaign.CampaignGroups.CampaignGroupMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Campaign.CampaignGroups.CampaignGroupResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetConfiguredCampaignDefinitionManager"/>
<param ref="experienceAnalytics/aggregation/logger" desc="logger"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Campaign.CampaignFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Campaign.CampaignGroups.CampaignGroupMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Campaign Facet -->
<dimension id="{D00D6A78-BC26-4F6D-A391-2F22D9D5A8F4}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Campaign.CampaignFacets.CampaignFacetMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.Marketing.Taxonomy.Model.TaxonUri, Sitecore.Marketing.Taxonomy]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Campaign.CampaignFacets.CampaignFacetResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetCampaignTaxonomyFacetService"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Campaign.CampaignFacetFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Campaign.CampaignFacets.CampaignFacetMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.Guid]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.FacetsKeyResolvers.FacetKeyResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
</param>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Campaign Facet Group -->
<dimension id="{4EEDC7EB-65DB-46EC-818E-5366B82E034B}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Campaign.CampaignFacetGroups.CampaignFacetGroupMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.Marketing.Taxonomy.Model.TaxonUri, Sitecore.Marketing.Taxonomy]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Campaign.CampaignFacetGroups.CampaignFacetGroupResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetCampaignTaxonomyFacetService"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Campaign.CampaignFacetFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Campaign.CampaignFacetGroups.CampaignFacetGroupMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.Guid]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.FacetsKeyResolvers.FacetGroupKeyResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
</param>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Page -->
<dimension id="{B3807A36-E0D1-49E1-A605-17B2E2077231}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.Pages.PageMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.Analytics.Core.Page, Sitecore.Analytics.Core]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.Pages.PageResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.PageFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.Pages.PageMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.Guid]], Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Entry Page -->
<dimension id="{24307E3B-951F-463C-9310-475757EA2871}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.EntryPages.EntryPageMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.Analytics.Core.Page, Sitecore.Analytics.Core]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.EntryPages.EntryPageResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.PageFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.EntryPages.EntryPageMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.Guid]], Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Exit Page -->
<dimension id="{2BA45688-F3D7-4D94-9996-AC22435FAA9F}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.ExitPages.ExitPageMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.Analytics.Core.Page, Sitecore.Analytics.Core]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.ExitPages.ExitPageResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.PageFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.ExitPages.ExitPageMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.Guid]], Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Page url -->
<dimension id="{90C53CD7-3FA2-4057-83B2-6A870CCBA2A6}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.PagesByUrl.PageByUrlMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.Analytics.Core.Page, Sitecore.Analytics.Core]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.PagesByUrl.PageUrlResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param ref="experienceAnalytics/aggregation/logger" desc="logger"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.PageFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.PagesByUrl.PageByUrlMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Entry Page Url -->
<dimension id="{5A1A3D23-591C-44B9-8550-FDB9695F21BD}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.EntryPagesByUrl.EntryPageByUrlMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.Analytics.Core.Page, Sitecore.Analytics.Core]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.EntryPagesByUrl.EntryPageUrlResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param ref="experienceAnalytics/aggregation/logger" desc="logger"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.PageFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.EntryPagesByUrl.EntryPageByUrlMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Exit Page url -->
<dimension id="{1C48CE32-F06C-4F02-9D80-82AE7994ADB9}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.ExitPagesByUrl.ExitPageByUrlMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.Analytics.Core.Page, Sitecore.Analytics.Core]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.ExitPagesByUrl.ExitPageUrlResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param ref="experienceAnalytics/aggregation/logger" desc="logger"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.PageFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Pages.ExitPagesByUrl.ExitPageByUrlMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Referring Site -->
<dimension id="{5858B47C-C8F3-4E48-9B10-500EBE0E9DCE}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.ReferringSite.ReferringSiteMetrics, Sitecore.ExperienceAnalytics.Aggregation], [System.String]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.ReferringSite.ReferringSiteResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param ref="experienceAnalytics/aggregation/logger" desc="logger"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.ReferringSite.ReferringSiteFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.ReferringSite.ReferringSiteMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Pattern -->
<dimension id="{8F44FFFA-A744-44C5-B958-4B5C961EC65C}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Patterns.PatternMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.XConnect.Collection.Model.ProfileScore, Sitecore.XConnect.Collection.Model]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Patterns.PatternResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Patterns.PatternFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Patterns.PatternMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Language -->
<dimension id="{87225105-0BAA-4913-929E-916E8210DC70}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Language.LanguageMetrics, Sitecore.ExperienceAnalytics.Aggregation], [System.String]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Language.LanguageResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Language.LanguageFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Language.LanguageMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- local search keyword  -->
<dimension id="{CB9ED373-3A28-4DA0-BC0A-2C77D37D9E23}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Search.SearchMetrics, Sitecore.ExperienceAnalytics.Aggregation], [System.String]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Search.LocalSearchResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Search.SearchFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Search.SearchMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Download Event -->
<dimension id="{5D1275D9-C16B-4BD2-8419-297CD2384F41}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Asset.Downloads.DownloadEventMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.XConnect.Collection.Model.DownloadEvent, Sitecore.XConnect.Collection.Model]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Asset.Downloads.DownloadEventResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Asset.AssetFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Asset.Downloads.DownloadEventMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Asset  -->
<dimension id="{D65020DC-EEBF-4652-8A28-CCD9395C83B8}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Asset.Assets.AssetMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.XConnect.Collection.Model.DownloadEvent, Sitecore.XConnect.Collection.Model]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Asset.Assets.AssetResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Asset.AssetFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Asset.Assets.AssetMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.Guid]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Asset.AssetKeyResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
</param>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Asset Group  -->
<dimension id="{6C0847F3-8405-41B2-B818-EA5BFBC06C99}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Asset.AssetGroups.AssetGroupMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.XConnect.Collection.Model.DownloadEvent, Sitecore.XConnect.Collection.Model]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Asset.AssetGroups.AssetGroupResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Asset.AssetFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Asset.AssetGroups.AssetGroupMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.Guid]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Asset.AssetGroupKeyResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
</param>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- conversions  -->
<dimension id="{1A6CE37B-9A5F-4044-AC27-EA07482B9911}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Conversions.ConversionsMetrics, Sitecore.ExperienceAnalytics.Aggregation], [System.String]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Conversions.ConversionsResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Conversions.ConversionsFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Conversions.ConversionsMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- pageViews  -->
<dimension id="{6564431B-4537-4B15-8AAD-FDBC93A15C79}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.PageViews.PageViewsMetrics, Sitecore.ExperienceAnalytics.Aggregation], [System.String]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.PageViews.PageViewsResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.PageViews.PageViewsFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.PageViews.PageViewsMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Devie type -->
<dimension id="{C7C7B604-3103-4765-939E-56BA87EA768F}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DeviceTypes.DeviceTypeMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.CES.DeviceDetection.DeviceInformation, Sitecore.CES.DeviceDetection]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DeviceResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetLazyDeviceDetectionSettings"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetLazyDeviceInformationService"/>
<param ref="experienceAnalytics/aggregation/logger" desc="logger"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DeviceFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DeviceTypes.DeviceTypeMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.String]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DeviceTypeKeyResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
</param>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Devie model -->
<dimension id="{CAF488E4-8C0B-4335-9A4E-AFBBE5EBF796}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DeviceModels.DeviceModelMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.CES.DeviceDetection.DeviceInformation, Sitecore.CES.DeviceDetection]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DeviceResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetLazyDeviceDetectionSettings"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetLazyDeviceInformationService"/>
<param ref="experienceAnalytics/aggregation/logger" desc="logger"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DeviceFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DeviceModels.DeviceModelMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.String]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DeviceModelKeyResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<ParentVisitGroupKeyResolvers hint="list">
<ParentVisitGroupKeyResolver type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DeviceTypeKeyResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
</ParentVisitGroupKeyResolvers>
</param>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- Device Size -->
<dimension id="{BC35B7D9-9586-4143-8297-9E03B868DD12}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DeviceSize.DeviceSizeMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.CES.DeviceDetection.DeviceInformation, Sitecore.CES.DeviceDetection]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DeviceResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetLazyDeviceDetectionSettings"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.AggregationContainer, Sitecore.ExperienceAnalytics.Aggregation" factoryMethod="GetLazyDeviceInformationService"/>
<param ref="experienceAnalytics/aggregation/logger" desc="logger"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DeviceFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DeviceSize.DeviceSizeMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.String]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DeviceSize.DeviceSizeKeyResolver, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DefaultDeviceInformationSerializer, Sitecore.ExperienceAnalytics.Aggregation"/>
</param>
<ParentVisitGroupKeyResolvers hint="list">
<ParentVisitGroupKeyResolver type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DeviceTypeKeyResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<ParentVisitGroupKeyResolver type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Device.DeviceModelKeyResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
</ParentVisitGroupKeyResolvers>
</param>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- county -->
<dimension id="{3D797C19-DD2D-4705-A7E4-578A2072168D}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Geo.Country.CountryMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.XConnect.Collection.Model.IpInfo, Sitecore.XConnect.Collection.Model]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Geo.GeoResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Geo.GeoFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Geo.Country.CountryMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.String]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Geo.CountryKeyResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
</param>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- region -->
<dimension id="{044C1661-D44A-4AB0-A6CF-3C9ABF181BED}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Geo.Region.RegionMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.XConnect.Collection.Model.IpInfo, Sitecore.XConnect.Collection.Model]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Geo.GeoResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Geo.GeoFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Geo.Region.RegionMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.String]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Geo.RegionKeyResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<ParentVisitGroupKeyResolvers hint="list">
<ParentVisitGroupKeyResolver type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Geo.CountryKeyResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
</ParentVisitGroupKeyResolvers>
</param>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
<!-- city -->
<dimension id="{EE9125E5-1837-40A7-9442-387FCB75E070}" type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.FlexibleDimension`2[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Geo.City.CityMetrics, Sitecore.ExperienceAnalytics.Aggregation], [Sitecore.XConnect.Collection.Model.IpInfo, Sitecore.XConnect.Collection.Model]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Geo.GeoResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Geo.GeoFactCalculator`1[[Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Geo.City.CityMetrics, Sitecore.ExperienceAnalytics.Aggregation]], Sitecore.ExperienceAnalytics.Aggregation"/>
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Framework.KeyComposition.HierarchicalKeyComposer`1[[System.String]], Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Geo.CityKeyResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<ParentVisitGroupKeyResolvers hint="list">
<ParentVisitGroupKeyResolver type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Geo.CountryKeyResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
<ParentVisitGroupKeyResolver type="Sitecore.ExperienceAnalytics.Aggregation.FlexibleMetrics.Geo.RegionKeyResolver, Sitecore.ExperienceAnalytics.Aggregation"/>
</ParentVisitGroupKeyResolvers>
</param>
<InteractionFilters hint="list">
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.ExmSyntheticEventFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
<InteractionFilter type="Sitecore.ExperienceAnalytics.Aggregation.Filters.WebVisitFilter, Sitecore.ExperienceAnalytics.Aggregation"/>
</InteractionFilters>
</dimension>
</flexibleDimensions>
<services>
<!--
 DimensionDefinitionService is responsible for instantiating Experience Analytics Dimensions objects from configuration.
                    The 'pathToConfigNode' parameter specifies the element where the dimensions are expected to be configured.
                    Default: "experienceAnalytics/aggregation/dimensions"
                    
-->
<dimensionDefinitionService type="Sitecore.ExperienceAnalytics.Aggregation.Repositories.DimensionConfigReader, Sitecore.ExperienceAnalytics.Aggregation" singleInstance="true">
<param desc="pathToConfigNode">experienceAnalytics/aggregation/dimensions</param>
<param ref="experienceAnalytics/aggregation/logger" desc="logger"/>
</dimensionDefinitionService>
<!--
 AggregationSegmentRepository is responsible for reading/writing data from/to reference data store.
-->
<aggregationSegmentRepository type="Sitecore.ExperienceAnalytics.Aggregation.Repositories.AggregationSegmentRepository, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Core.Repositories.ReferenceData.ReferenceDataSegmentReader, Sitecore.ExperienceAnalytics.Core"/>
<param type="Sitecore.ExperienceAnalytics.Core.Repositories.ReferenceData.ReferenceDataSegmentStore, Sitecore.ExperienceAnalytics.Core"/>
<param ref="experienceAnalytics/aggregation/logger" desc="logger"/>
</aggregationSegmentRepository>
<!--
 SiteReader is responsible for reading data from the SiteNames dimension table in RDB.
                    The 'connectionStringName' parameter the name of the connection string of the RDB instance to connect to.
                    Default: "reporting" 
-->
<siteReader type="Sitecore.ExperienceAnalytics.Core.Repositories.CachedReaderDecorator`2[[System.String], [Sitecore.ExperienceAnalytics.Core.Repositories.Model.Site, Sitecore.ExperienceAnalytics.Core]], Sitecore.ExperienceAnalytics.Core">
<param type="Sitecore.ExperienceAnalytics.Core.Repositories.SiteSqlReader, Sitecore.ExperienceAnalytics.Core">
<param desc="connectionStringName">reporting</param>
</param>
<param desc="cacheName">ExperienceAnalytics.Sites</param>
<param desc="cacheMaxSize">1048576</param>
<param desc="cacheExpiration">00:05:00</param>
<param desc="useSlidingCacheExpiration">false</param>
<param ref="experienceAnalytics/aggregation/logger" desc="logger"/>
</siteReader>
<deviceInformationService type="Sitecore.ExperienceAnalytics.Core.Adapters.DeviceInformationAdapter, Sitecore.ExperienceAnalytics.Core"/>
<deviceDetectionSettings type="Sitecore.ExperienceAnalytics.Core.Adapters.DeviceDetectionSettingsAdapter, Sitecore.ExperienceAnalytics.Core"/>
<hierarchicalIdDimensionKeyStrategy type="Sitecore.ExperienceAnalytics.Core.Repositories.Model.HierarchicalIdDimensionKeyStrategy, Sitecore.ExperienceAnalytics.Core"/>
<customTaxonomyManagerAdapter type="Sitecore.ExperienceAnalytics.Core.Adapters.CustomTaxonomyManagerAdapter, Sitecore.ExperienceAnalytics.Core"/>
</services>
</aggregation>
<client patch:source="Sitecore.ExperienceAnalytics.Client.config">
<logger type="Sitecore.ExperienceAnalytics.Core.Diagnostics.Logger, Sitecore.ExperienceAnalytics.Core" singleInstance="true"/>
<services>
<!--
 AggregationSegmentReader is responsible for reading aggregation segments from refernece data store.
          
-->
<aggregationSegmentReader type="Sitecore.ExperienceAnalytics.Aggregation.Repositories.AggregationSegmentReader, Sitecore.ExperienceAnalytics.Aggregation">
<param ref="experienceAnalytics/client/logger" desc="logger"/>
<param ref="experienceAnalytics/client/services/segmentDefinitionReader" desc="segmentDefinitionReader"/>
</aggregationSegmentReader>
<!--
 SegmentDefinitionReader is responsible for reading segment definitions from reference data store.
-->
<segmentDefinitionReader type="Sitecore.ExperienceAnalytics.Core.Repositories.ReferenceData.ReferenceDataSegmentReader, Sitecore.ExperienceAnalytics.Core"/>
<!--
 SegmentReader is responsible for reading segment items from master database.
-->
<segmentReader type="Sitecore.ExperienceAnalytics.Client.Deployment.SegmentItemReader, Sitecore.ExperienceAnalytics.Client">
<param ref="experienceAnalytics/client/logger"/>
</segmentReader>
<!--
 [OBSOLETE] - Use siteReader node instead.
               SiteDefinitionService is responsible for reading data from the SiteNames dimension table in RDB.
               The 'connectionStringName' parameter the name of the connection string of the RDB instance to connect to.
               Default: "reporting"
          
-->
<siteDefinitionService type="Sitecore.ExperienceAnalytics.Core.Repositories.SiteFilter.SiteDefinitionServiceFilterDecorator, Sitecore.ExperienceAnalytics.Core">
<param type="Sitecore.ExperienceAnalytics.Core.Repositories.DataProviderSiteDefinitionService, Sitecore.ExperienceAnalytics.Core">
<param type="Sitecore.ExperienceAnalytics.Client.ClientContainer, Sitecore.ExperienceAnalytics.Client" factoryMethod="GetLazyReportingDataProvider"/>
<param desc="reportingDataSourceName">reporting</param>
</param>
<filters hint="list:AddFilter">
<filter type="Sitecore.EmailCampaign.Cm.ExperienceAnalytics.ExmSiteFilter, Sitecore.EmailCampaign.Cm" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Client.config">
<param ref="settings/setting[@name='EXM.DefaultEventSiteName']/@value" desc="siteName"/>
</filter>
</filters>
</siteDefinitionService>
<!--
 SiteReader is responsible for reading data from the SiteNames dimension table in RDB.
               The 'connectionStringName' parameter the name of the connection string of the RDB instance to connect to.
               Default: "reporting"
          
-->
<siteReader type="Sitecore.ExperienceAnalytics.Core.Repositories.SiteFilter.FilterReaderDecorator`2[[System.String], [Sitecore.ExperienceAnalytics.Core.Repositories.Model.Site, Sitecore.ExperienceAnalytics.Core]], Sitecore.ExperienceAnalytics.Core">
<param type="Sitecore.ExperienceAnalytics.Core.Repositories.CachedReaderDecorator`2[[System.String], [Sitecore.ExperienceAnalytics.Core.Repositories.Model.Site, Sitecore.ExperienceAnalytics.Core]], Sitecore.ExperienceAnalytics.Core">
<param type="Sitecore.ExperienceAnalytics.Core.Repositories.SiteRemoteReader, Sitecore.ExperienceAnalytics.Core">
<param type="Sitecore.ExperienceAnalytics.Client.ClientContainer, Sitecore.ExperienceAnalytics.Client" factoryMethod="GetLazyReportingDataProvider"/>
<param desc="reportingDataSourceName">reporting</param>
</param>
<param desc="cacheName">ExperienceAnalytics.Sites</param>
<param desc="cacheMaxSize">1048576</param>
<param desc="cacheExpiration">00:05:00</param>
<param desc="useSlidingCacheExpiration">false</param>
<param ref="experienceAnalytics/client/logger" desc="logger"/>
</param>
<filters hint="list:AddFilter"/>
</siteReader>
<requestRedirection type="Sitecore.ExperienceAnalytics.Client.Pipelines.HttpRequest.RequestRedirection, Sitecore.ExperienceAnalytics.Client">
<param type="Sitecore.ExperienceAnalytics.Core.Adapters.XDbSettingsAdapter, Sitecore.ExperienceAnalytics.Core"/>
<param ref="experienceAnalytics/client/logger"/>
</requestRedirection>
<encoder type="Sitecore.ExperienceAnalytics.Api.Encoding.Hash64Encoder, Sitecore.ExperienceAnalytics.Api"/>
<keyCodec type="Sitecore.ExperienceAnalytics.Api.Encoding.HashKeysCodec, Sitecore.ExperienceAnalytics.Api">
<param ref="experienceAnalytics/client/services/encoder" desc="encoder"/>
<param type="Sitecore.ExperienceAnalytics.Api.Encoding.PresetsEnabledKeyDecoder, Sitecore.ExperienceAnalytics.Api" desc="decoder">
<param type="Sitecore.ExperienceAnalytics.Api.Encoding.HashMapper, Sitecore.ExperienceAnalytics.Api" desc="hashMampping">
<param type="Sitecore.ExperienceAnalytics.Api.Encoding.InMemoryPresetKeysProvider, Sitecore.ExperienceAnalytics.Api" desc="keysProvider"/>
<param ref="experienceAnalytics/client/services/encoder" desc="encoder"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Api.Encoding.DatabaseKeyDecoder, Sitecore.ExperienceAnalytics.Api" desc="decoder">
<param ref="experienceAnalytics/client/services/hashKeysProvider" desc="keysReader"/>
</param>
</param>
</keyCodec>
<!--
 hashKeysProvider is responsible for hash of entities stored in database. 
-->
<hashKeysProvider type="Sitecore.ExperienceAnalytics.Core.Repositories.CachedReaderDecorator`2[[System.String], [System.String]], Sitecore.ExperienceAnalytics.Core">
<param type="Sitecore.ExperienceAnalytics.Core.Repositories.DimensionKeyRemoteReader, Sitecore.ExperienceAnalytics.Core">
<param type="Sitecore.ExperienceAnalytics.Client.ClientContainer, Sitecore.ExperienceAnalytics.Client" factoryMethod="GetLazyReportingDataProvider"/>
<param desc="reportingDataSourceName">reporting</param>
<param ref="experienceAnalytics/client/logger" desc="logger"/>
</param>
<param desc="cacheName">ExperienceAnalytics.DimensionKeys</param>
<param desc="cacheMaxSize">52428800</param>
<param desc="cacheExpiration">365:00:00:00</param>
<param desc="useSlidingCacheExpiration">true</param>
<param ref="experienceAnalytics/client/logger" desc="logger"/>
</hashKeysProvider>
</services>
</client>
<reduce patch:source="Sitecore.ExperienceAnalytics.Reduce.config">
<logger type="Sitecore.ExperienceAnalytics.Core.Diagnostics.Logger, Sitecore.ExperienceAnalytics.Core" singleInstance="true"/>
<!--  Reduce subsystem definition  -->
<subsystem type="Sitecore.Analytics.Core.Subsystem" singleInstance="true">
<BackgroundServices hint="list:Add">
<reduce type="Sitecore.Analytics.Core.BackgroundService">
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
<param desc="agentPath">experienceAnalytics/reduce/agent</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="interval" factoryMethod="ToTimeSpan" arg0="0.00:00:30"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="maxAgents" factoryMethod="ToInt" arg0="1"/>
</reduce>
</BackgroundServices>
</subsystem>
<!--
 Agent that runs reduce process by executing ReduceManager (see below) on interval basis
                      Parameters:
                     - 'connectionStringName' - specifies the connection string name of the target database.
                        Default: "reporting"
                     - 'triggerHour' - specifies that the reduce is expected to run only after this time.
                        Default: 1 (1AM in local server time)
                
-->
<agent type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReduceScheduler, Sitecore.ExperienceAnalytics.Reduce">
<param desc="connectionStringName">reporting</param>
<param desc="triggerHour">1</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
<param ref="experienceAnalytics/reduce/manager"/>
</agent>
<!--
 Reduce Manager is responsible for running all the reduce workers 
-->
<manager type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReduceManager, Sitecore.ExperienceAnalytics.Reduce">
<Reducers hint="list:Add">
<!--
 Classical reduce worker runs the segment records reduce process on all the dimensions provided by dimension reader 
-->
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ClassicalReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/services/dimensionReader" desc="dimensionReader"/>
<param ref="experienceAnalytics/reduce/services/siteReader" desc="siteReader"/>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<!--
A generic reduce worker which can work on any* metrics table. In order for reducer 
                            to work flawlessly, following assumptions MUST be true about the metrics table:
                            1. Following columns are always required whenever a new [Fact_*Metrics] table is created
                                SegmentRecordId
                                SegmentId
                                Date
                                SiteNameId
                                DimensionKeyId
                            2. Rest of the columns are metrics containing numeric value, on which sql SUM function can be applied. 
                                During reduce process "least significant" rows are collapsed into one row using 
                                GROUP BY SegmentId, Date, SiteNameId. And SUM is used to aggregate metrics columns.                                  
                           Parameters:
                             - 'metricType' - corresponding table 'Fact_<metricType>' MUST exist in reporting database
                             - 'reducerDataService' 
                             - 'logger' 
                        
-->
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">ChannelMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">ChannelGroupMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">ChannelTypeMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">OutcomeMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">OutcomeGroupMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">GoalMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">GoalFacetMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">GoalFacetGroupMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">CampaignMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">CampaignGroupMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">CampaignFacetMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">CampaignFacetGroupMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">PageMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">EntryPageMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">ExitPageMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">PageByUrlMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">EntryPageByUrlMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">ExitPageByUrlMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">ReferringSiteMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">PatternMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">LanguageMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">SearchMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">DownloadEventMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">AssetMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">AssetGroupMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">ConversionsMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">PageViewsMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">DeviceTypeMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">DeviceModelMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">CountryMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">RegionMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
<reducer type="Sitecore.ExperienceAnalytics.Reduce.Implementations.DynamicReduceWorker, Sitecore.ExperienceAnalytics.Reduce">
<param desc="metricType">CityMetrics</param>
<param type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDataService, Sitecore.ExperienceAnalytics.Reduce" desc="reducerDataService">
<param desc="connectionStringName">reporting</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</reducer>
</Reducers>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</manager>
<services>
<!--
 AggregationSegmentRepository is responsible for reading/writing data from/to reference data store.
-->
<aggregationSegmentRepository type="Sitecore.ExperienceAnalytics.Aggregation.Repositories.AggregationSegmentRepository, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Core.Repositories.ReferenceData.ReferenceDataSegmentReader, Sitecore.ExperienceAnalytics.Core"/>
<param type="Sitecore.ExperienceAnalytics.Core.Repositories.ReferenceData.ReferenceDataSegmentStore, Sitecore.ExperienceAnalytics.Core"/>
<param ref="experienceAnalytics/aggregation/logger" desc="logger"/>
</aggregationSegmentRepository>
<!--
 SiteReader is responsible for reading data from the SiteNames dimension table in RDB.
                           The 'connectionStringName' parameter the name of the connection string of the RDB instance to connect to.
                           Default: "reporting"
                      
-->
<siteReader type="Sitecore.ExperienceAnalytics.Core.Repositories.CachedReaderDecorator`2[[System.String], [Sitecore.ExperienceAnalytics.Core.Repositories.Model.Site, Sitecore.ExperienceAnalytics.Core]], Sitecore.ExperienceAnalytics.Core">
<param type="Sitecore.ExperienceAnalytics.Core.Repositories.SiteSqlReader, Sitecore.ExperienceAnalytics.Core">
<param desc="connectionStringName">reporting</param>
</param>
<param desc="cacheName">ExperienceAnalytics.Sites</param>
<param desc="cacheMaxSize">1048576</param>
<param desc="cacheExpiration">00:05:00</param>
<param desc="useSlidingCacheExpiration">false</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</siteReader>
<!--
 DimensionReader is responsible for instantiating Experience Analytics Dimensions objects from configuration.
                        The 'pathToConfigNode' parameter specifies the element where the dimensions are expected to be configured.
                        Default: "experienceAnalytics/aggregation/dimensions"
                    
-->
<dimensionReader type="Sitecore.ExperienceAnalytics.Reduce.Implementations.ReducerDimensionReader, Sitecore.ExperienceAnalytics.Reduce" singleInstance="true">
<param desc="pathToConfigNode">experienceAnalytics/reduce/dimensions</param>
<param ref="experienceAnalytics/reduce/logger" desc="logger"/>
</dimensionReader>
</services>
<!--
 This section hosts the definitions of the Experience Analytics dimensions which will be used by 'ClassicalReduceWorker'
                    'id' attribute is the unique identifier and should match the ID of the corresponding dimension definition item in Marketing Control Panel
                    'name' is just an optional identifier e.g.
                    <dimension id="{988A1D00-9D00-4F05-97EC-DF3391F8CCE7}" name="ByCountry" />
                
-->
<dimensions>
<dimension id="{3D8FD7DA-52EE-44ED-8944-3171944D986A}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByEmail, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Reduce.config"/>
<dimension id="{6E1865FB-C3B6-41F0-9857-31F4EE1E80B0}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByEmailManager, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Reduce.config"/>
<dimension id="{B459A0CA-9F43-4AC1-8E6D-549E2A3DE674}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByLanguageSpecificEmail, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Reduce.config"/>
<dimension id="{53F60E4D-A1A1-44CB-A912-9CD6D8DE6E67}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByMessage, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Reduce.config"/>
<dimension id="{19C5B093-E73A-41CB-80FB-71CAB89A7AEB}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByLandingPage, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Reduce.config"/>
<dimension id="{A720AC6E-A9A3-410C-BAD0-E3102A1D58CE}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByAbTestVariant, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Reduce.config"/>
<dimension id="{99C447BD-9CCD-4B54-8AE9-5FB1550DE242}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByLocation, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Reduce.config"/>
<dimension id="{008BD4FD-580A-41BE-848C-A6B49C54F44C}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByDevice, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Reduce.config"/>
<dimension id="{D9F374E1-F2D7-416A-84E6-CAFCD6989935}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByDemographics, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Reduce.config"/>
<dimension id="{A80EC44A-4E52-4C3D-92F2-0C5DD80691DF}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByTimeOfDay, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Reduce.config"/>
</dimensions>
</reduce>
<deployment patch:source="Sitecore.ExperienceAnalytics.StorageProviders.config">
<logger type="Sitecore.ExperienceAnalytics.Core.Diagnostics.Logger, Sitecore.ExperienceAnalytics.Core" singleInstance="true"/>
<services>
<!--
 AggregationSegmentRepository is responsible for reading/writing segments to/from reference data store. 
-->
<aggregationSegmentRepository type="Sitecore.ExperienceAnalytics.Aggregation.Repositories.AggregationSegmentRepository, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Core.Repositories.ReferenceData.ReferenceDataSegmentReader, Sitecore.ExperienceAnalytics.Core"/>
<param type="Sitecore.ExperienceAnalytics.Core.Repositories.ReferenceData.ReferenceDataSegmentStore, Sitecore.ExperienceAnalytics.Core"/>
<param ref="experienceAnalytics/deployment/logger" desc="logger"/>
</aggregationSegmentRepository>
<!--
 secondaryAggregationSegmentRepository is responsible for reading/writing segments to/from reference data store. 
-->
<secondaryAggregationSegmentRepository type="Sitecore.ExperienceAnalytics.Aggregation.Repositories.AggregationSegmentRepository, Sitecore.ExperienceAnalytics.Aggregation">
<param type="Sitecore.ExperienceAnalytics.Core.Repositories.ReferenceData.ReferenceDataSegmentReader, Sitecore.ExperienceAnalytics.Core"/>
<param type="Sitecore.ExperienceAnalytics.Core.Repositories.ReferenceData.ReferenceDataSegmentStore, Sitecore.ExperienceAnalytics.Core"/>
<param ref="experienceAnalytics/deployment/logger" desc="logger"/>
</secondaryAggregationSegmentRepository>
</services>
</deployment>
<api patch:source="Sitecore.ExperienceAnalytics.WebAPI.config">
<logger type="Sitecore.ExperienceAnalytics.Core.Diagnostics.Logger, Sitecore.ExperienceAnalytics.Core" singleInstance="true"/>
<!--
 This section hosts the definitions of the Experience Analytics dimensions
                    'id' attribute is the unique identifier and should match the ID of the corresponding dimension definition item in Marketing Control Panel
                    'type' attribute references the fully qualified class name and assembly name with the dimension implementation.
                    Transformer elements underneath define the reference to the class responsible for transforming raw value of dimension key from the server
                    to the friendly label shown in reports.
                
-->
<dimensions>
<dimension id="{EF129780-FFCF-4EAF-B429-80D25315248E}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DefaultDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{A1BCAB9A-1A98-4A3D-A58F-34ACF7931C49}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DefaultDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{214E8E8C-519A-4803-8579-3CA466F9F29F}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DefaultDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{42C02019-CCB4-4C49-BD4E-B736C6698089}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.AssetDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{988A1D00-9D00-4F05-97EC-DF3391F8CCE7}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.CountryDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{3D797C19-DD2D-4705-A7E4-578A2072168D}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.CountryDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{1879168B-AF5E-4E9C-9DAE-8B71125F2AD2}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.RegionDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{044C1661-D44A-4AB0-A6CF-3C9ABF181BED}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.RegionDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{33ACD611-FE19-4769-99F9-1EF1D997BDC5}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.CityDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{EE9125E5-1837-40A7-9442-387FCB75E070}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.CityDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{6237CC24-4FF5-4869-B898-FC6A534F3C3E}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.ChannelTypeDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{86CA3214-A950-4EEF-BEE6-A2C5CF6FAC24}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.ChannelDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{595A12E2-CEF6-4B1C-9990-83FDD7173533}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.ChannelGroupDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{550C5A53-E190-40BA-95EB-A33C54827A20}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.ChannelTypeDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{6D88FEC6-1D64-46F1-8A60-270B8CE2CC78}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.ChannelDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{8085A926-81C0-4AF4-B3C8-2DE0D06438CF}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.ChannelGroupDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{DACF0445-EDB1-4A90-851E-380DC6A36541}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DownloadsDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{7892D03C-03A8-44B4-8815-5D66666CECED}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.Campaigns.CampaignDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{BA96B8EB-4828-440B-BA84-2D6C689D42D9}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.Campaigns.CampaignGroupDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{3E01BA28-2B4D-408A-A4BA-6C51ED9FFB9C}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.Campaigns.CampaignDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{A8EC3E11-A417-4624-A612-12A406284D4B}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.Campaigns.CampaignGroupDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{6295C8F0-5ACB-4634-A1D6-6D3248EC210C}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.LanguageDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{C001F4B2-0523-436E-9097-AD4E39D51835}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.ItemDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{E6CC7A2B-6E72-40CE-9315-88F4617CDB10}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DefaultDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{F197D8FF-D4C8-42DF-BC6E-512F17292674}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.PageDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{81379156-7721-4EE5-8951-AE92E1CDF090}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.PageDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{3DC11B43-1D7F-4169-A87D-291D57ECEDA6}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.PageDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{F2C1CCBF-C2D6-4FF9-A3BF-DD55E60071A2}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DefaultDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{6B945AE7-673F-412A-96F8-F53EF9D63BBC}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DefaultDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{CBD2E37E-CC79-4A5A-8B3B-95F6B7D7FF53}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DefaultDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{CBEE2CF5-51DB-4106-A7A9-BF87AB173742}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DefaultDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{8345E6DF-8982-4F32-B478-40D672E914BB}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.PageViewsDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{6564431B-4537-4B15-8AAD-FDBC93A15C79}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.PageViewsDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{6DD3E3A7-FE91-4860-9BF6-388863AD7C9D}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.ConversionsDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{1A6CE37B-9A5F-4044-AC27-EA07482B9911}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.ConversionsDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{6F502E86-5CDB-4D4E-B3A1-905D41B86E9F}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.GoalDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{D00D6A78-BC26-4F6D-A391-2F22D9D5A8F4}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FlexibleDimensions.FacetDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{4EEDC7EB-65DB-46EC-818E-5366B82E034B}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FlexibleDimensions.FacetGroupDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{148758D7-7523-4787-A7D9-9379E5BC5514}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FlexibleDimensions.GoalDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{197EB127-284D-436A-A576-486A7B01013E}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.AssetGroupsDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{D6BC9E66-E51A-4481-AAE2-F31189CCA572}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.OutcomeDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{A23E7058-5A8C-426F-A417-927D3F7DF487}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.OutcomeGroupDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{87F05F2A-D4A0-43DA-8676-196639D3F6A8}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FacetGroupDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{1A0F92E9-A2CC-41D9-8D1B-B0839CB1104B}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FacetDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{D551A7B4-535F-4138-8361-7B12BF9216A4}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FacetGroupDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{232D5449-4DBB-4101-8A0E-41E003A91484}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FacetGroupDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{C1491C3D-0A63-45E1-9510-B954415C9E08}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FacetGroupDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{E5D56897-23D1-46F3-B8FB-D351C1CAFB7E}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FacetDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{D135E856-FC48-4F6E-987F-5566A180215D}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FacetDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{6634C79C-1E55-485F-9157-93ABA18BCC67}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FacetDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{84AF4324-8096-4A5E-9C5C-DBBE92D814D3}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DeviceTypeDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{C7C7B604-3103-4765-939E-56BA87EA768F}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DeviceTypeDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{CC287753-DFF8-470A-B586-A23DA9B80ECA}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DeviceModelDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{CAF488E4-8C0B-4335-9A4E-AFBBE5EBF796}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DeviceModelDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<!-- DEVICE SIZE -->
<dimension id="{BC35B7D9-9586-4143-8297-9E03B868DD12}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DeviceSizeDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{B3807A36-E0D1-49E1-A605-17B2E2077231}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FlexibleDimensions.PageDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{24307E3B-951F-463C-9310-475757EA2871}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FlexibleDimensions.PageDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{2BA45688-F3D7-4D94-9996-AC22435FAA9F}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FlexibleDimensions.PageDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{5797E54E-37AF-4EC5-B8BA-DD7F3EAFD6C9}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FlexibleDimensions.OutcomeDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{2EA8CCFD-8FAC-4CF2-9F70-FBFDD5C07CEA}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FlexibleDimensions.OutcomeGroupDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{90C53CD7-3FA2-4057-83B2-6A870CCBA2A6}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DefaultDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{5A1A3D23-591C-44B9-8550-FDB9695F21BD}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DefaultDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{1C48CE32-F06C-4F02-9D80-82AE7994ADB9}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DefaultDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{8F44FFFA-A744-44C5-B958-4B5C961EC65C}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FlexibleDimensions.PatternDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{5D1275D9-C16B-4BD2-8419-297CD2384F41}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FlexibleDimensions.DownloadsDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{87225105-0BAA-4913-929E-916E8210DC70}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FlexibleDimensions.LanguageDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{CB9ED373-3A28-4DA0-BC0A-2C77D37D9E23}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DefaultDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{5858B47C-C8F3-4E48-9B10-500EBE0E9DCE}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.DefaultDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{D65020DC-EEBF-4652-8A28-CCD9395C83B8}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FlexibleDimensions.AssetDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{6C0847F3-8405-41B2-B818-EA5BFBC06C99}">
<transformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.FlexibleDimensions.AssetGroupsDimensionKeyTransformer, Sitecore.ExperienceAnalytics.Api"/>
</dimension>
<dimension id="{3D8FD7DA-52EE-44ED-8944-3171944D986A}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByEmail, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Api.config">
<transformer type="Sitecore.EmailCampaign.Cm.UI.DimensionKeyTransformers.EmailMessageKeyTransformer, Sitecore.EmailCampaign.Cm.UI"/>
</dimension>
<dimension id="{6E1865FB-C3B6-41F0-9857-31F4EE1E80B0}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByEmailManager, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Api.config">
<transformer type="Sitecore.EmailCampaign.Cm.UI.DimensionKeyTransformers.EmailManagerRootKeyTransformer, Sitecore.EmailCampaign.Cm.UI"/>
</dimension>
<dimension id="{B459A0CA-9F43-4AC1-8E6D-549E2A3DE674}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByLanguageSpecificEmail, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Api.config">
<transformer type="Sitecore.EmailCampaign.Cm.UI.DimensionKeyTransformers.EmailLanguageTransformer, Sitecore.EmailCampaign.Cm.UI"/>
</dimension>
<dimension id="{53F60E4D-A1A1-44CB-A912-9CD6D8DE6E67}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByMessage, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Api.config">
<transformer type="Sitecore.EmailCampaign.Cm.UI.DimensionKeyTransformers.ByMessageTransformer, Sitecore.EmailCampaign.Cm.UI"/>
</dimension>
<dimension id="{19C5B093-E73A-41CB-80FB-71CAB89A7AEB}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByLandingPage, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Api.config">
<transformer type="Sitecore.EmailCampaign.Cm.UI.DimensionKeyTransformers.ByLandingPageTransformer, Sitecore.EmailCampaign.Cm.UI"/>
</dimension>
<dimension id="{A720AC6E-A9A3-410C-BAD0-E3102A1D58CE}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByAbTestVariant, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Api.config">
<transformer type="Sitecore.EmailCampaign.Cm.UI.DimensionKeyTransformers.ByAbTestVariantTransformer, Sitecore.EmailCampaign.Cm.UI"/>
</dimension>
<dimension id="{99C447BD-9CCD-4B54-8AE9-5FB1550DE242}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByLocation, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Api.config">
<transformer type="Sitecore.EmailCampaign.Cm.UI.DimensionKeyTransformers.ByLocationTransformer, Sitecore.EmailCampaign.Cm.UI"/>
</dimension>
<dimension id="{008BD4FD-580A-41BE-848C-A6B49C54F44C}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByDevice, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Api.config">
<transformer type="Sitecore.EmailCampaign.Cm.UI.DimensionKeyTransformers.ByDeviceTransformer, Sitecore.EmailCampaign.Cm.UI"/>
</dimension>
<dimension id="{D9F374E1-F2D7-416A-84E6-CAFCD6989935}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByDemographics, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Api.config">
<transformer type="Sitecore.EmailCampaign.Cm.UI.DimensionKeyTransformers.ByDemographicsTransformer, Sitecore.EmailCampaign.Cm.UI"/>
</dimension>
<dimension id="{A80EC44A-4E52-4C3D-92F2-0C5DD80691DF}" type="Sitecore.EmailCampaign.ExperienceAnalytics.Dimensions.ByTimeOfDay, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Api.config">
<transformer type="Sitecore.EmailCampaign.Cm.UI.DimensionKeyTransformers.ByTimeOfDayTransformer, Sitecore.EmailCampaign.Cm.UI"/>
</dimension>
</dimensions>
<services>
<!--
 DimensionDefinitionService is responsible for instantiating Experience Analytics transformer objects from configuration.
                        The 'pathToConfigNode' parameter specifies the element where the transformers are expected to be configured.
                        Default: "experienceAnalytics/api/dimensions"
                    
-->
<dimensionDefinitionService type="Sitecore.ExperienceAnalytics.Api.Repositories.DimensionKeyTransformerConfigReader, Sitecore.ExperienceAnalytics.Api" singleInstance="true">
<param desc="pathToConfigNode">experienceAnalytics/api/dimensions</param>
<param ref="experienceAnalytics/api/logger" desc="logger"/>
</dimensionDefinitionService>
<!--
 ReportingService is responsible for processing reporting query requests. 
-->
<reportingService type="Sitecore.ExperienceAnalytics.Api.ReportingService, Sitecore.ExperienceAnalytics.Api">
<param ref="experienceAnalytics/api/services/reportDataService"/>
<param type="Sitecore.ExperienceAnalytics.Api.Response.ReportResponseData.LiveReportResponseBuilder, Sitecore.ExperienceAnalytics.Api">
<param ref="experienceAnalytics/api/services/aggregationSegmentReader"/>
<param type="Sitecore.ExperienceAnalytics.Api.Response.Resolvers.SegmentResolver, Sitecore.ExperienceAnalytics.Api">
<param ref="experienceAnalytics/api/services/segmentReader"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Api.Response.Resolvers.DimensionKeyResolver, Sitecore.ExperienceAnalytics.Api">
<param ref="experienceAnalytics/api/services/dimensionDefinitionService"/>
<param type="Sitecore.ExperienceAnalytics.Api.NotApplicableKeyStringReplacer, Sitecore.ExperienceAnalytics.Api"/>
<param ref="experienceAnalytics/api/logger" desc="logger"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Api.Response.ReportResponseData.DataInflator.NullDataInjector, Sitecore.ExperienceAnalytics.Api"/>
<param type="Sitecore.ExperienceAnalytics.Api.NotApplicableKeyStringReplacer, Sitecore.ExperienceAnalytics.Api"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Api.Response.Resolvers.QueryDataBuilder, Sitecore.ExperienceAnalytics.Api">
<param ref="experienceAnalytics/api/services/aggregationSegmentReader"/>
<param ref="experienceAnalytics/api/services/dimensionItemReader"/>
</param>
</reportingService>
<!--
 ReportDataService is responsible for providing data in response to the queries from ReportingService. 
-->
<reportDataService type="Sitecore.ExperienceAnalytics.Api.ReportDataService, Sitecore.ExperienceAnalytics.Api">
<param type="Sitecore.ExperienceAnalytics.Api.ApiContainer, Sitecore.ExperienceAnalytics.Api" factoryMethod="GetLazyReportingDataProvider"/>
<param desc="reportingDataSourceName">reporting</param>
<param ref="experienceAnalytics/api/hashKeysProvider" desc="keysReader"/>
<param ref="experienceAnalytics/api/logger" desc="logger"/>
</reportDataService>
<!--
 AggregationSegmentReader is responsible for reading aggregation segments from refernece data store. 
-->
<aggregationSegmentReader type="Sitecore.ExperienceAnalytics.Aggregation.Repositories.AggregationSegmentReader, Sitecore.ExperienceAnalytics.Aggregation">
<param ref="experienceAnalytics/api/logger" desc="logger"/>
<param ref="experienceAnalytics/api/services/segmentDefinitionReader" desc="segmentDefinitionReader"/>
</aggregationSegmentReader>
<!--
 SegmentDefinitionReader is responsible for reading segment definitions from reference data store. 
-->
<segmentDefinitionReader type="Sitecore.ExperienceAnalytics.Core.Repositories.ReferenceData.ReferenceDataSegmentReader, Sitecore.ExperienceAnalytics.Core"/>
<!--
 DimensionItemReader is responsible for reading dimension items from master database. 
-->
<dimensionItemReader type="Sitecore.ExperienceAnalytics.Core.Repositories.CachedReaderDecorator`2[[System.Guid], [Sitecore.ExperienceAnalytics.Core.Repositories.Model.IDimensionItem, Sitecore.ExperienceAnalytics.Core]], Sitecore.ExperienceAnalytics.Core">
<param type="Sitecore.ExperienceAnalytics.Api.Response.Resolvers.DimensionItemReader, Sitecore.ExperienceAnalytics.Api"/>
<param desc="cacheName">ExperienceAnalytics.DimensionItems</param>
<param desc="cacheMaxSize">2097152</param>
<param desc="cacheExpiration">00:05:00</param>
<param desc="useSlidingCacheExpiration">true</param>
<param ref="experienceAnalytics/api/logger" desc="logger"/>
</dimensionItemReader>
<!--
 SegmentReader is responsible for reading segment items from master database.
-->
<segmentReader type="Sitecore.ExperienceAnalytics.Client.Deployment.SegmentItemReader, Sitecore.ExperienceAnalytics.Client">
<param ref="experienceAnalytics/api/logger"/>
</segmentReader>
<!--
 UserService is responsible for resolving user state during Web API execution. 
-->
<userService type="Sitecore.ExperienceAnalytics.Core.Repositories.UserService, Sitecore.ExperienceAnalytics.Core"/>
<dimensionKeyConverter type="Sitecore.ExperienceAnalytics.Api.DimensionKeyConverter, Sitecore.ExperienceAnalytics.Api"/>
<encoder type="Sitecore.ExperienceAnalytics.Api.Encoding.Hash64Encoder, Sitecore.ExperienceAnalytics.Api"/>
<keyCodec type="Sitecore.ExperienceAnalytics.Api.Encoding.HashKeysCodec, Sitecore.ExperienceAnalytics.Api">
<param ref="experienceAnalytics/api/services/encoder" desc="encoder"/>
<param type="Sitecore.ExperienceAnalytics.Api.Encoding.QuotedValueDecoderDecorator, Sitecore.ExperienceAnalytics.Api" desc="decoder">
<param type="Sitecore.ExperienceAnalytics.Api.Encoding.PresetsEnabledKeyDecoder, Sitecore.ExperienceAnalytics.Api" desc="decoder">
<param type="Sitecore.ExperienceAnalytics.Api.Encoding.HashMapper, Sitecore.ExperienceAnalytics.Api" desc="hashMapper">
<param type="Sitecore.ExperienceAnalytics.Api.Encoding.InMemoryPresetKeysProvider, Sitecore.ExperienceAnalytics.Api" desc="keysProvider"/>
<param ref="experienceAnalytics/api/services/encoder" desc="encoder"/>
</param>
<param type="Sitecore.ExperienceAnalytics.Api.Encoding.DatabaseKeyDecoder, Sitecore.ExperienceAnalytics.Api" desc="decoder">
<param ref="experienceAnalytics/api/hashKeysProvider" desc="keysReader"/>
</param>
</param>
</param>
</keyCodec>
<reportResponseEncoder type="Sitecore.ExperienceAnalytics.Api.Response.ReportResponseEncoder, Sitecore.ExperienceAnalytics.Api">
<param ref="experienceAnalytics/api/services/keyCodec"/>
</reportResponseEncoder>
<taxonomyTransformer type="Sitecore.ExperienceAnalytics.Api.Response.DimensionKeyTransformers.TaxonomyTransformer, Sitecore.ExperienceAnalytics.Api">
<param type="Sitecore.ExperienceAnalytics.Core.Adapters.CustomTaxonomyManagerAdapter, Sitecore.ExperienceAnalytics.Core"/>
</taxonomyTransformer>
</services>
<!--
 hashKeysProvider is responsible for hash of entities stored in database. 
-->
<hashKeysProvider type="Sitecore.ExperienceAnalytics.Core.Repositories.CachedReaderDecorator`2[[System.String], [System.String]], Sitecore.ExperienceAnalytics.Core">
<param type="Sitecore.ExperienceAnalytics.Core.Repositories.DimensionKeyRemoteReader, Sitecore.ExperienceAnalytics.Core">
<param type="Sitecore.ExperienceAnalytics.Api.ApiContainer, Sitecore.ExperienceAnalytics.Api" factoryMethod="GetLazyReportingDataProvider"/>
<param desc="reportingDataSourceName">reporting</param>
<param ref="experienceAnalytics/api/logger" desc="logger"/>
</param>
<param desc="cacheName">ExperienceAnalytics.DimensionKeys</param>
<param desc="cacheMaxSize">52428800</param>
<param desc="cacheExpiration">365:00:00:00</param>
<param desc="useSlidingCacheExpiration">true</param>
<param ref="experienceAnalytics/api/logger" desc="logger"/>
</hashKeysProvider>
</api>
<abTestReportingClient type="Sitecore.EmailCampaign.ExperienceAnalytics.Reporting.AbTestReportingClient, Sitecore.EmailCampaign.ExperienceAnalytics" singleInstance="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<landingPageReportingClient type="Sitecore.EmailCampaign.ExperienceAnalytics.Reporting.LandingPageReportingClient, Sitecore.EmailCampaign.ExperienceAnalytics" singleInstance="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<timeOfDayReportingClient type="Sitecore.EmailCampaign.ExperienceAnalytics.Reporting.TimeOfDayReportingClient, Sitecore.EmailCampaign.ExperienceAnalytics" singleInstance="true" patch:source="Sitecore.EmailExperience.ContentManagement.config">
<param ref="exmLogger" desc="logger"/>
<param ref="experienceAnalytics/api/services/reportingService" desc="service"/>
<param ref="exm/dateTimeFormatter" desc="dateTimeFormatter"/>
</timeOfDayReportingClient>
</experienceAnalytics>
<marketingAutomation patch:source="Sitecore.Marketing.Automation.Client.config">
<marketingThemeRepository type="Sitecore.Marketing.Automation.Data.MarketingThemeRepository, Sitecore.Marketing.Automation">
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
<param name="databaseName">master</param>
<param name="marketingThemeFolderId">{968F8AE7-6244-43AF-9DBE-C721A513451C}</param>
</marketingThemeRepository>
<categoryInformationRepository type="Sitecore.Marketing.Automation.Data.CategoryInformationRepository, Sitecore.Marketing.Automation">
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
<param name="databaseName">master</param>
<param name="categoryInformationFolderId">{340062A7-9F50-4CE1-8A53-DA3F6A23B73A}</param>
<taxonomyCssClasses hint="raw:AddMapping">
<mapping id="43e49783-5fc3-4f66-84fc-f913110e1b38" cssClass="plan-entry"/>
<mapping id="357ef6b8-ca48-41cd-b436-855422924e90" cssClass="decision-point"/>
<mapping id="c07b54e4-479a-4267-9b72-4cc8349e6578" cssClass="listener"/>
<mapping id="144eebb0-1cd1-4dea-95a7-04d24d16fdc0" cssClass="marketing-action"/>
<mapping id="f7c7c31d-cc60-4da2-bdb9-5a4f3cc14047" cssClass="other-element"/>
</taxonomyCssClasses>
</categoryInformationRepository>
<converterItemProvider type="Sitecore.Marketing.Automation.Converters.DefaultConverterItemProvider, Sitecore.Marketing.Automation">
<!--
 Name of the database in which to locate converter items 
-->
<param name="databaseName">master</param>
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
</converterItemProvider>
<contactRepository type="Sitecore.Marketing.Automation.Data.ContactRepository, Sitecore.Marketing.Automation" resolve="true">
<facetKeys hint="list:AddFacetKey">
<facetKey desc="PersonalInformation.DefaultFacetKey">Personal</facetKey>
<facetKey desc="EmailAddressList.DefaultFacetKey">Emails</facetKey>
</facetKeys>
</contactRepository>
<pluginDescriptorsRepository type="Sitecore.Marketing.Automation.Data.PluginDescriptorsRepository, Sitecore.Marketing.Automation">
<plugins hint="raw:AddPluginDescriptor">
<plugin path="./plugins/EXM/plugin.js" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
</plugins>
</pluginDescriptorsRepository>
<deferDetectionPredicate type="Sitecore.Framework.Messaging.DeferStrategies.AlwaysDeferOnError, Sitecore.Framework.Messaging.Abstractions" singleInstance="true"/>
<deferralScheduler type="Sitecore.Framework.Messaging.DeferStrategies.ExponentialDeferalScheduler, Sitecore.Framework.Messaging.Abstractions" singleInstance="true">
<param type="Sitecore.Marketing.Automation.ConfigurationHelper, Sitecore.Marketing.Automation" desc="maxDeferalAttempts" factoryMethod="ToInt32" arg0="5"/>
<param type="Sitecore.Marketing.Automation.ConfigurationHelper, Sitecore.Marketing.Automation" desc="minBackoff" factoryMethod="ToTimeSpan" arg0="00:05:00"/>
<param type="Sitecore.Marketing.Automation.ConfigurationHelper, Sitecore.Marketing.Automation" desc="maxBackoff" factoryMethod="ToTimeSpan" arg0="01:00:00"/>
<param type="Sitecore.Marketing.Automation.ConfigurationHelper, Sitecore.Marketing.Automation" desc="deltaBackoff" factoryMethod="ToTimeSpan" arg0="00:05:00"/>
</deferralScheduler>
<deferStrategy type="Sitecore.Framework.Messaging.DeferStrategies.DeferStrategy, Sitecore.Framework.Messaging.Abstractions" singleInstance="true">
<param ref="marketingAutomation/deferDetectionPredicate" desc="detection"/>
<param ref="marketingAutomation/deferralScheduler" desc="scheduler"/>
</deferStrategy>
<purgeFromCampaignMessageHandler type="Sitecore.Marketing.Automation.Messaging.Handlers.PurgeFromCampaignMessageHandler, Sitecore.Marketing.Automation">
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" desc="logger" resolve="true"/>
<param type="Sitecore.Xdb.MarketingAutomation.OperationsClient.IAutomationOperationsClient, Sitecore.Xdb.MarketingAutomation.OperationsClient" desc="automationOperationsClient" resolve="true"/>
<param ref="marketingAutomation/deferStrategy" desc="deferStrategy"/>
<param type="Sitecore.Framework.Messaging.IMessageBus`1[[Sitecore.Marketing.Automation.Messaging.Buses.PurgeFromCampaignMessagesBus, Sitecore.Marketing.Automation]], Sitecore.Framework.Messaging.Abstractions" desc="purgeAllFromPlanMessageBus" resolve="true"/>
</purgeFromCampaignMessageHandler>
</marketingAutomation>
<exm patch:source="Sitecore.EDS.Core.config">
<eds>
<!--
 EDS LOGGER
                    Creates a Logger instance.
                
-->
<edsLogger type="Sitecore.ExM.Framework.Diagnostics.Logger, Sitecore.ExM.Framework" singleInstance="true">
<param desc="loggerName">Sitecore.EDS</param>
<param desc="debugEnabled">false</param>
</edsLogger>
<!--
 LOGGER FACTORY
                    Provides an instance of ILogger.
                
-->
<loggerFactory type="Sitecore.EDS.Core.Diagnostics.LoggerFactory, Sitecore.EDS.Core" singleInstance="true">
<param ref="exm/eds/edsLogger"/>
</loggerFactory>
<!--
 ENVIRONMENT IDENTIFIER  
                    Value identifying current Sitrecore instance.
                
-->
<environmentIdentifier type="Sitecore.EDS.Core.Reporting.EnvironmentId, Sitecore.EDS.Core" singleInstance="true">
<param desc="environmentId">{CBB24274-F8BF-4F28-AC6D-CEABA5308CA8}</param>
<param desc="required">false</param>
</environmentIdentifier>
<!--
 BOUNCED MESSAGES MANAGER  
                    Provides an instance of IBounceManager.
                
-->
<bounceManager type="Sitecore.EDS.Core.Reporting.BounceManager, Sitecore.EDS.Core" singleInstance="true"/>
<!--
 SPAM COMPLAINTS MANAGER  
                    Provides an instance of IComplaintManager.
                
-->
<complaintManager type="Sitecore.EDS.Core.Reporting.ComplaintManager, Sitecore.EDS.Core" singleInstance="true"/>
<!--
 LIST UNSUBSCRIBE MANAGER  
                    Provides an instance of IListUnsubscribeManager.
                
-->
<listUnsubscribeManager type="Sitecore.EDS.Core.Reporting.ListUnsubscribeManager, Sitecore.EDS.Core" singleInstance="true"/>
<!--
 DISPATCHING MANAGER  
                    Provides an instance of IDispatchManager.
                
-->
<dispatchManager type="Sitecore.EDS.Core.Dispatch.DispatchManager, Sitecore.EDS.Core" singleInstance="true"/>
<!--
 SUPPRESSION MANAGER  
                    Provides an instance of ISuppressionManager.
                
-->
<suppressionManager type="Sitecore.EDS.Core.Reporting.SuppressionManager, Sitecore.EDS.Core" singleInstance="true"/>
<!--
 APPROVED SENDERS MANAGER  
                    Provides an instance of ISenderManager.
                
-->
<senderManager type="Sitecore.EDS.Core.Senders.SenderManager, Sitecore.EDS.Core" singleInstance="true"/>
<!--
 PROXY SETTINGS
                    Proxy settings for SMTP and POP3 clients 
                
-->
<proxySettings type="Sitecore.EDS.Core.Net.ProxySettings, Sitecore.EDS.Core" singleInstance="true" patch:source="Sitecore.EDS.Providers.CustomSMTP.config">
<enabled>false</enabled>
</proxySettings>
<!--
 SMTP SETTINGS OBJECT
                    Creates SMTP settings class.
                
-->
<smtpSettings type="Sitecore.EDS.Core.Net.Smtp.SmtpSettings, Sitecore.EDS.Core" singleInstance="true" patch:source="Sitecore.EDS.Providers.CustomSMTP.config">
<server>localhost</server>
<port>25</port>
<userName/>
<password/>
<authenticationMethod>None</authenticationMethod>
<startTls>false</startTls>
<proxySettings ref="exm/eds/proxySettings"/>
</smtpSettings>
<!--
 CONNECTION POOL SETTINGS 
                    Defines the connection pool settings.
                
-->
<connectionPoolSettings type="Sitecore.EDS.Core.Net.Smtp.ConnectionPoolSettings, Sitecore.EDS.Core" singleInstance="true" patch:source="Sitecore.EDS.Providers.CustomSMTP.config">
<maxPoolSize ref="settings/setting[@name='NumberThreads']/@value"/>
<delayBetweenConnectionRetries>00:00:10.000</delayBetweenConnectionRetries>
<maxConnectionWaitTime>00:00:30.000</maxConnectionWaitTime>
<maxConnectionIdleTime>00:10:00.000</maxConnectionIdleTime>
<maxConnectionRetries>3</maxConnectionRetries>
</connectionPoolSettings>
<!--
 CONNECTION POOL
                    Defines the connection pool.
                
-->
<connectionPool type="Sitecore.EDS.Core.Net.Smtp.ChilkatConnectionPool, Sitecore.EDS.Core" singleInstance="true" patch:source="Sitecore.EDS.Providers.CustomSMTP.config">
<param ref="exm/eds/connectionPoolSettings"/>
<param ref="exm/eds/smtpSettings"/>
<param ref="exmLogger"/>
</connectionPool>
<!--
 EMAIL DISPATCH PROVIDER
                    Provides email dispatching.
                
-->
<dispatchProvider defaultProvider="default" patch:source="Sitecore.EDS.Providers.CustomSMTP.config">
<providers>
<clear/>
<add name="default" type="Sitecore.EDS.Providers.CustomSmtp.DispatchProvider, Sitecore.EDS.Providers.CustomSmtp">
<param ref="exm/eds/connectionPool"/>
<param ref="exm/eds/environmentIdentifier"/>
</add>
</providers>
</dispatchProvider>
<!--
 SENDER PROVIDER
                     The default provider is just a default implementation that does nothing.
                
-->
<senderProvider defaultProvider="default" patch:source="Sitecore.EDS.Providers.CustomSMTP.config">
<providers>
<clear/>
<add name="default" type="Sitecore.EDS.Providers.CustomSmtp.Senders.SenderProvider, Sitecore.EDS.Providers.CustomSmtp">
<param ref="settings/setting[@name='EXM.EmailValidationRegex']/@value" desc="regexValue"/>
</add>
</providers>
</senderProvider>
<!--
 BOUNCED MESSAGES PROVIDER
                    Handles the reported bounced messages.
                
-->
<!--
 BOUNCED MESSAGES PROVIDER
             Handles the reported bounced messages.    
        
-->
<bounceProvider defaultProvider="default" patch:source="Sitecore.EmailExperience.MessageHandling.config">
<providers>
<clear/>
<add name="default" type="Sitecore.EDS.Core.Reporting.DeliveryReportProvider`1[[Sitecore.EDS.Core.Reporting.Bounce, Sitecore.EDS.Core]], Sitecore.EDS.Core" patch:source="Sitecore.EmailExperience.MessageHandling.config">
<bounceHandlers hint="list:AddHandler" patch:source="Sitecore.EmailExperience.MessageHandling.config">
<bounceHandler ref="exm/bouncedMessageHandler"/>
</bounceHandlers>
</add>
</providers>
</bounceProvider>
<!--
 SUPPRESSION PROVIDER
                    The default provider is just a default implementation that does nothing.
                
-->
<suppressionProvider defaultProvider="default" patch:source="Sitecore.EDS.Providers.CustomSMTP.config">
<providers>
<clear/>
<add name="default" type="Sitecore.EDS.Providers.CustomSmtp.Suppressions.SuppressionProvider, Sitecore.EDS.Providers.CustomSmtp"/>
</providers>
</suppressionProvider>
<!--
 POP3 SETTINGS
             A list of pop3 settings for different pop3 clients.
        
-->
<pop3Settings patch:source="Sitecore.EDS.Providers.CustomSMTP.Sync.config">
<pop3Setting type="Sitecore.EDS.Core.Net.Pop3.Pop3Settings, Sitecore.EDS.Core" singleInstance="true">
<server>localhost</server>
<port>110</port>
<userName/>
<password/>
<useSsl>false</useSsl>
<startTls>false</startTls>
<proxySettings ref="exm/eds/proxySettings"/>
</pop3Setting>
</pop3Settings>
<!--
 BOUNCE INSPECTOR
             Verifies the message mime is a bounce and determines the type of the bounce.
        
-->
<bounceInspector type="Sitecore.EDS.Core.Reporting.ChilkatBounceInspector, Sitecore.EDS.Core" singleInstance="true" patch:source="Sitecore.EDS.Providers.CustomSMTP.Sync.config"/>
<!--
 POP3 RECEIVERS COLLECTION
             Defines the POP3 bounce receivers collection
        
-->
<receiversCollection type="Sitecore.Modules.EmailCampaign.Core.MessageTransfer.ManagerRootsPop3ReceiversCollection, Sitecore.EmailCampaign" patch:source="Sitecore.EDS.Providers.CustomSMTP.Sync.config">
<param ref="exm/eds/bounceInspector"/>
<param ref="exm/eds/environmentIdentifier"/>
<param ref="exmLogger"/>
</receiversCollection>
<!--
 SPAM COMPLAINTS PROVIDER
             Handles the reported spam complaints.
        
-->
<complaintProvider defaultProvider="default" patch:source="Sitecore.EmailExperience.MessageHandling.config">
<providers>
<clear/>
<add name="default" type="Sitecore.EDS.Core.Reporting.DeliveryReportProvider`1[[Sitecore.EDS.Core.Reporting.Complaint, Sitecore.EDS.Core]], Sitecore.EDS.Core">
<complaintHandlers hint="list:AddHandler">
<complaintHandler ref="exm/complaintHandler"/>
</complaintHandlers>
</add>
</providers>
</complaintProvider>
<!--
 LIST UNSUBSCRIBE PROVIDER
            Handles the reported list unsubscribes.
        
-->
<listUnsubscribeProvider defaultProvider="default" patch:source="Sitecore.EmailExperience.MessageHandling.config">
<providers>
<clear/>
<add name="default" type="Sitecore.EDS.Core.Reporting.DeliveryReportProvider`1[[Sitecore.EDS.Core.Reporting.ListUnsubscribe, Sitecore.EDS.Core]], Sitecore.EDS.Core">
<listUnsubscribeHandlers hint="list:AddHandler">
<listUnsubscribeHandler ref="exm/listUnsubscribeHandler"/>
</listUnsubscribeHandlers>
</add>
</providers>
</listUnsubscribeProvider>
</eds>
<!--
 ROLES
                 Describes which Email Experience Manager server roles are enabled by this configuration file.
              
-->
<!--
 ROLES
           Describes which Email Experience Manager server roles are enabled by this configuration file.
      
-->
<!--
 ROLES
           Describes which Email Experience Manager server roles are enabled by this configuration file.
      
-->
<!--
 ROLES
           Describes which Email Experience Manager server roles are enabled by this configuration file.
      
-->
<roles patch:source="Sitecore.EmailExperience.ContentDelivery.config">
<role name="Content Delivery"/>
<role name="Primary Content Management" patch:source="Sitecore.EmailExperience.ContentManagementPrimary.config"/>
<role name="Reporting" patch:source="Sitecore.EmailExperience.Reporting.config"/>
<role name="SPEAK User Interface" patch:source="Sitecore.EmailExperience.UI.config"/>
</roles>
<emailEventStorage type="Sitecore.EmailCampaign.Cd.EmailEvents.EmailEventStorageCache, Sitecore.EmailCampaign.Cd" singleInstance="true" patch:source="Sitecore.EmailExperience.ContentDelivery.config">
<param ref="settings/setting[@name='EXM.OpenAndClickCache']/@value" desc="maxCacheSize"/>
<param ref="exmLogger" desc="logger"/>
</emailEventStorage>
<!--
Service to get and save marketing preferences for a specific contact for a specific manager root 
-->
<marketingPreferencesService type="Sitecore.EmailCampaign.Cd.Services.MarketingPreferencesService, Sitecore.EmailCampaign.Cd" resolve="true" patch:source="Sitecore.EmailExperience.ContentDelivery.config">
<!--
 Delay in milliseconds between retries when saving the preferences 
-->
<Delay>200</Delay>
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
</marketingPreferencesService>
<recipientValidator type="Sitecore.Modules.EmailCampaign.Core.Dispatch.RecipientValidator, Sitecore.EmailCampaign" patch:source="Sitecore.EmailExperience.ContentManagement.config">
<param ref="emailRegexValidator" desc="emailRegexValidator"/>
<param ref="exm/eds/suppressionManager" desc="suppressionManager"/>
<param ref="exm/emailPeriodService" desc="emailPeriodService"/>
<param ref="exm/currentDateProvider" desc="currentDateProvider"/>
</recipientValidator>
<dispatchManager type="Sitecore.EmailCampaign.Cm.Dispatch.DispatchManager, Sitecore.EmailCampaign.Cm" resolve="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<subscriptionManager type="Sitecore.EmailCampaign.Cm.SubscriptionManager, Sitecore.EmailCampaign.Cm" resolve="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<dispatchTask type="Sitecore.EmailCampaign.Cm.Dispatch.DispatchTask, Sitecore.EmailCampaign.Cm" patch:source="Sitecore.EmailExperience.ContentManagement.config">
<param ref="exm/dispatchFailedTaskPool"/>
<param ref="exm/recipientValidator" desc="recipientValidator"/>
<param ref="exm/contactService" desc="contactService"/>
<param ref="exm/dataProvider" desc="dataProvider"/>
<param ref="exm/itemUtil" desc="itemUtil"/>
<param ref="exm/eventDataService" desc="eventDataService"/>
<param ref="exm/dispatchManager" desc="dispatchManager"/>
<param ref="exm/emailAddressHistoryManager" desc="emailAddressHistoryManager"/>
<param ref="exm/recipientManagerFactory" desc="recipientManagerFactory"/>
<param ref="exm/sentHistoryManager" desc="sentHistoryManager"/>
</dispatchTask>
<recipientManagerFactory type="Sitecore.Modules.EmailCampaign.Factories.RecipientManagerFactory, Sitecore.EmailCampaign" resolve="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<sendingManagerFactory type="Sitecore.EmailCampaign.Cm.Factories.AsyncSendingManagerFactory, Sitecore.EmailCampaign.Cm" resolve="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<notificationFactory type="Sitecore.EmailCampaign.Cm.Factories.NotificationFactory, Sitecore.EmailCampaign.Cm" resolve="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<messageTaskFactory type="Sitecore.EmailCampaign.Cm.Factories.MessageTaskFactory, Sitecore.EmailCampaign.Cm" resolve="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<sendingProcessDataFactory type="Sitecore.Modules.EmailCampaign.Factories.SendingProcessDataFactory, Sitecore.EmailCampaign" resolve="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<messageInfoFactory type="Sitecore.EmailCampaign.Cm.Factories.MessageInfoFactory, Sitecore.EmailCampaign.Cm" resolve="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<deferralStrategy type="Sitecore.EmailCampaign.Cm.MessagingStrategies.ExmDeferDetection, Sitecore.EmailCampaign.Cm" resolve="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<deferralSchedulerSettings type="Sitecore.EmailCampaign.Cm.MessagingStrategies.ExponentialDeferralSchedulerSettings, Sitecore.EmailCampaign.Cm" patch:source="Sitecore.EmailExperience.ContentManagement.config">
<param desc="maxDeferralAttempts">5</param>
<param desc="minBackoff">00:05:00</param>
<param desc="maxBackoff">01:00:30</param>
<param desc="deltaBackoff">00:05:00</param>
</deferralSchedulerSettings>
<emailAddressHistoryManager type="Sitecore.EmailCampaign.Cm.Managers.DefaultEmailAddressHistoryManager, Sitecore.EmailCampaign.Cm" resolve="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<sentHistoryManager type="Sitecore.EmailCampaign.Cm.Managers.DefaultSentMessageManager, Sitecore.EmailCampaign.Cm" resolve="true" patch:source="Sitecore.EmailExperience.ContentManagement.config"/>
<dataProvider type="Sitecore.Modules.EmailCampaign.Core.Data.SqlDbEcmDataProvider, Sitecore.EmailCampaign" resolve="true" patch:source="Sitecore.EmailExperience.Core.config">
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
<!--
 Time before terminating the attempt to execute a command in seconds. 0 means indefinite wait
-->
<CommandTimeout>30</CommandTimeout>
</dataProvider>
<!--
 XCONNECT RETRY OPERATION HELPER 
            A helper class that allows a specified operation to be retried a configurable number of times. A linear delay is added between 
            each retry: delay*retryAttempt
                
-->
<xconnectRetry type="Sitecore.EmailCampaign.XConnect.Web.DefaultXConnectRetry, Sitecore.EmailCampaign.XConnect.Web" resolve="true" patch:source="Sitecore.EmailExperience.Core.config">
<!--  Delay in milliseconds  -->
<Delay>5000</Delay>
<!--  Number of retry attempts  -->
<RetryCount>3</RetryCount>
</xconnectRetry>
<contactService type="Sitecore.Modules.EmailCampaign.Core.Contacts.ContactService, Sitecore.EmailCampaign" singleInstance="true" resolve="true" patch:source="Sitecore.EmailExperience.Core.config"/>
<itemUtil type="Sitecore.Modules.EmailCampaign.Core.ItemUtilExt, Sitecore.EmailCampaign" resolve="true" patch:source="Sitecore.EmailExperience.Core.config"/>
<eventDataService type="Sitecore.Modules.EmailCampaign.Core.Pipelines.HandleMessageEventBase.EventDataService, Sitecore.EmailCampaign" singleInstance="true" resolve="true" patch:source="Sitecore.EmailExperience.Core.config"/>
<messageStateInfoFactory type="Sitecore.Modules.EmailCampaign.Factories.MessageStateInfoFactory, Sitecore.EmailCampaign" resolve="true" patch:source="Sitecore.EmailExperience.Core.config"/>
<multiVariateTestStrategyFactory type="Sitecore.Modules.EmailCampaign.Factories.RoundRobinStrategyFactory, Sitecore.EmailCampaign" resolve="true" patch:source="Sitecore.EmailExperience.Core.config"/>
<typeResolver type="Sitecore.Modules.EmailCampaign.Core.TypeResolver, Sitecore.EmailCampaign" resolve="true" patch:source="Sitecore.EmailExperience.Core.config"/>
<typeResolverFactory type="Sitecore.Modules.EmailCampaign.Factories.TypeResolverFactory, Sitecore.EmailCampaign" resolve="true" patch:source="Sitecore.EmailExperience.Core.config"/>
<currentDateProvider type="Sitecore.EmailCampaign.Core.Services.CurrentDateProvider, Sitecore.EmailCampaign.Core" resolve="true" patch:source="Sitecore.EmailExperience.Core.config"/>
<emailPeriodService type="Sitecore.EmailCampaign.Core.Services.EmailPeriodService, Sitecore.EmailCampaign.Core" resolve="true" patch:source="Sitecore.EmailExperience.Core.config"/>
<uniqueEventCache type="Sitecore.EmailCampaign.ExperienceAnalytics.UniqueEventCache, Sitecore.EmailCampaign.ExperienceAnalytics" patch:source="Sitecore.EmailExperience.ExperienceAnalytics.Aggregation.config">
<param ref="settings/setting[@name='EXM.UniqueEventCache']/@value" desc="maxCacheSize"/>
</uniqueEventCache>
<!--
 RECIPIENT LIST MANAGEMENT TASK POOL 
           A task pool for handling list management tasks related to bounces and spam complaints
      
-->
<recipientListManagementTaskPool type="Sitecore.ExM.Framework.Distributed.Tasks.TaskPools.ShortRunning.DatabaseTaskPool,Sitecore.ExM.Framework" singleInstance="true" patch:source="Sitecore.EmailExperience.MessageHandling.config">
<param desc="id">recipient_list_management_task_pool</param>
<param ref="exm/master/databaseTaskProvider" desc="dataProvider"/>
</recipientListManagementTaskPool>
<recipientListManagementTaskProcessor type="Sitecore.EmailCampaign.Cm.Tasks.RecipientListManagementTaskProcessor, Sitecore.EmailCampaign.Cm" singleInstance="true" resolve="true" patch:source="Sitecore.EmailExperience.MessageHandling.config"/>
<!--
 BOUNCED MESSAGES TASK POOL
             A task pool for handling bounced messages
        
-->
<bouncedMessagesTaskPool type="Sitecore.ExM.Framework.Distributed.Tasks.TaskPools.ShortRunning.DatabaseTaskPool,Sitecore.ExM.Framework" singleInstance="true" patch:source="Sitecore.EmailExperience.MessageHandling.config">
<param desc="id">bounced_messages_task_pool</param>
<param ref="exm/master/databaseTaskProvider" desc="dataProvider"/>
</bouncedMessagesTaskPool>
<bouncedMessageTaskProcessor type="Sitecore.EmailCampaign.Cm.Tasks.BouncedMessageTaskProcessor, Sitecore.EmailCampaign.Cm" singleInstance="true" resolve="true" patch:source="Sitecore.EmailExperience.MessageHandling.config"/>
<!--
 BOUNCED MESSAGE HANDLER
           Provides handling of bounced messages. 
           It creates a task in both the bouncedMessagesTaskPool and in the recipientListManagementTaskPool.
        
-->
<bouncedMessageHandler type="Sitecore.EmailCampaign.Cm.Handlers.BouncedMessageHandler, Sitecore.EmailCampaign.Cm" singleInstance="true" patch:source="Sitecore.EmailExperience.MessageHandling.config">
<param ref="exm/bouncedMessagesTaskPool"/>
<param ref="exm/recipientListManagementTaskPool"/>
<param ref="exm/eventDataService"/>
<param ref="exmLogger" desc="logger"/>
</bouncedMessageHandler>
<!--
 SPAM COMPLAINTS TASK POOL
           A task pool for handling spam complaints
        
-->
<spamComplaintsTaskPool type="Sitecore.ExM.Framework.Distributed.Tasks.TaskPools.ShortRunning.DatabaseTaskPool,Sitecore.ExM.Framework" singleInstance="true" patch:source="Sitecore.EmailExperience.MessageHandling.config">
<param desc="id">spam_complaints_task_pool</param>
<param ref="exm/master/databaseTaskProvider" desc="dataProvider"/>
</spamComplaintsTaskPool>
<spamComplaintTaskProcessor type="Sitecore.EmailCampaign.Cm.Tasks.SpamComplaintTaskProcessor, Sitecore.EmailCampaign.Cm" singleInstance="true" resolve="true" patch:source="Sitecore.EmailExperience.MessageHandling.config"/>
<!--
 SPAM COMPLAINT HANDLER
           Provides handling of spam complaints. 
           It creates a task in both the spamComplaintsTaskPool and in the recipientListManagementTaskPool.
        
-->
<complaintHandler type="Sitecore.EmailCampaign.Cm.Handlers.SpamComplaintHandler, Sitecore.EmailCampaign.Cm" singleInstance="true" patch:source="Sitecore.EmailExperience.MessageHandling.config">
<param ref="exm/spamComplaintsTaskPool"/>
<param ref="exm/recipientListManagementTaskPool"/>
<param ref="exm/eventDataService"/>
</complaintHandler>
<!--
 LIST UNSUBSCRIBE TASK POOL
          A task pool for handling list unsubscribes
      
-->
<listUnsubscribeTaskPool type="Sitecore.ExM.Framework.Distributed.Tasks.TaskPools.ShortRunning.DatabaseTaskPool,Sitecore.ExM.Framework" singleInstance="true" patch:source="Sitecore.EmailExperience.MessageHandling.config">
<param desc="id">list_unsubscribe_handler_task_pool</param>
<param ref="exm/master/databaseTaskProvider" desc="dataProvider"/>
</listUnsubscribeTaskPool>
<listUnsubscribeTaskProcessor type="Sitecore.EmailCampaign.Cm.Tasks.ListUnsubscribeTaskProcessor, Sitecore.EmailCampaign.Cm" singleInstance="true" resolve="true" patch:source="Sitecore.EmailExperience.MessageHandling.config"/>
<!--
 LIST UNSUBSCRIBE HANDLER
         Provides handling of list unsubscribes. 
      
-->
<listUnsubscribeHandler type="Sitecore.EmailCampaign.Cm.Handlers.ListUnsubscribeHandler, Sitecore.EmailCampaign.Cm" singleInstance="true" patch:source="Sitecore.EmailExperience.MessageHandling.config">
<param ref="exm/listUnsubscribeTaskPool"/>
<param ref="exm/recipientListManagementTaskPool"/>
<param ref="exm/eventDataService"/>
<param ref="exm/subscriptionManager"/>
</listUnsubscribeHandler>
<!--
 DISPATCH FAILED TASK POOL
           A task pool for handling failed dispatch tasks
      
-->
<dispatchFailedTaskPool type="Sitecore.ExM.Framework.Distributed.Tasks.TaskPools.ShortRunning.DatabaseTaskPool,Sitecore.ExM.Framework" singleInstance="true" patch:source="Sitecore.EmailExperience.MessageHandling.config">
<param desc="id">dispatch_failed_task_pool</param>
<param ref="exm/master/databaseTaskProvider" desc="dataProvider"/>
</dispatchFailedTaskPool>
<dispatchFailedTaskProcessor type="Sitecore.EmailCampaign.Cm.Tasks.DispatchFailedTaskProcessor, Sitecore.EmailCampaign.Cm" singleInstance="true" resolve="true" patch:source="Sitecore.EmailExperience.MessageHandling.config"/>
<master patch:source="Sitecore.EmailExperience.MessageHandling.config">
<session type="Sitecore.ExM.Framework.Distributed.Sessions.Session,Sitecore.ExM.Framework" singleInstance="true" patch:source="Sitecore.ExM.Framework.ContentManagement.config">
<members hint="list:AddMember">
<recipientListManagementTaskAgent type="Sitecore.ExM.Framework.Distributed.Tasks.Processing.ShortRunning.DatabaseTaskAgent,Sitecore.ExM.Framework" singleInstance="true">
<param ref="exm/recipientListManagementTaskPool" desc="taskPool"/>
<param desc="targetMinBufferAmount">10</param>
<param desc="maxBatchSize">200</param>
<param desc="idleIterationDuration">00:00:10.000</param>
<param desc="activeIterationDuration">00:00:00.500</param>
<param desc="leaseTime">00:01:00.000</param>
<param desc="postponeTime">00:10:00.000</param>
<param desc="maxDegreeOfParallelism">1</param>
<param desc="maxFailedProcessingAttempts">5</param>
<param ref="exm/recipientListManagementTaskProcessor" desc="processor"/>
<param ref="exmLogger" desc="logger"/>
</recipientListManagementTaskAgent>
<bouncedMessageTaskAgent type="Sitecore.ExM.Framework.Distributed.Tasks.Processing.ShortRunning.DatabaseTaskAgent,Sitecore.ExM.Framework" singleInstance="true">
<param ref="exm/bouncedMessagesTaskPool" desc="taskPool"/>
<param desc="targetMinBufferAmount">10</param>
<param desc="maxBatchSize">200</param>
<param desc="idleIterationDuration">00:00:10.000</param>
<param desc="activeIterationDuration">00:00:00.500</param>
<param desc="leaseTime">00:01:00.000</param>
<param desc="postponeTime">00:05:00.000</param>
<param desc="maxDegreeOfParallelism">1</param>
<param desc="maxFailedProcessingAttempts">5</param>
<param ref="exm/bouncedMessageTaskProcessor" desc="processor"/>
<param ref="exmLogger" desc="logger"/>
</bouncedMessageTaskAgent>
<spamComplaintTaskAgent type="Sitecore.ExM.Framework.Distributed.Tasks.Processing.ShortRunning.DatabaseTaskAgent,Sitecore.ExM.Framework" singleInstance="true">
<param ref="exm/spamComplaintsTaskPool" desc="taskPool"/>
<param desc="targetMinBufferAmount">10</param>
<param desc="maxBatchSize">200</param>
<param desc="idleIterationDuration">00:00:10.000</param>
<param desc="activeIterationDuration">00:00:00.500</param>
<param desc="leaseTime">00:01:00.000</param>
<param desc="postponeTime">00:05:00.000</param>
<param desc="maxDegreeOfParallelism">1</param>
<param desc="maxFailedProcessingAttempts">5</param>
<param ref="exm/spamComplaintTaskProcessor" desc="processor"/>
<param ref="exmLogger" desc="logger"/>
</spamComplaintTaskAgent>
<listUnsubscribeAgent type="Sitecore.ExM.Framework.Distributed.Tasks.Processing.ShortRunning.DatabaseTaskAgent,Sitecore.ExM.Framework" singleInstance="true">
<param ref="exm/listUnsubscribeTaskPool" desc="taskPool"/>
<param desc="targetMinBufferAmount">10</param>
<param desc="maxBatchSize">200</param>
<param desc="idleIterationDuration">00:00:10.000</param>
<param desc="activeIterationDuration">00:00:00.500</param>
<param desc="leaseTime">00:01:00.000</param>
<param desc="postponeTime">00:05:00.000</param>
<param desc="maxDegreeOfParallelism">1</param>
<param desc="maxFailedProcessingAttempts">5</param>
<param ref="exm/listUnsubscribeTaskProcessor" desc="processor"/>
<param ref="exmLogger" desc="logger"/>
</listUnsubscribeAgent>
<dispatchFailedTaskAgent type="Sitecore.ExM.Framework.Distributed.Tasks.Processing.ShortRunning.DatabaseTaskAgent,Sitecore.ExM.Framework" singleInstance="true">
<param ref="exm/dispatchFailedTaskPool" desc="taskPool"/>
<param desc="targetMinBufferAmount">10</param>
<param desc="maxBatchSize">200</param>
<param desc="idleIterationDuration">00:00:10.000</param>
<param desc="activeIterationDuration">00:00:00.500</param>
<param desc="leaseTime">00:01:00.000</param>
<param desc="postponeTime">00:30:00.000</param>
<param desc="maxDegreeOfParallelism">10</param>
<param desc="maxFailedProcessingAttempts">5</param>
<param ref="exm/dispatchFailedTaskProcessor" desc="processor"/>
<param ref="exmLogger" desc="logger"/>
</dispatchFailedTaskAgent>
</members>
<param desc="ownerName" patch:source="Sitecore.ExM.Framework.ContentManagement.config"/>
<param ref="exm/sessionProviders/masterSessionDataProvider" desc="dataProvider" patch:source="Sitecore.ExM.Framework.ContentManagement.config"/>
<param desc="maintenanceInterval" patch:source="Sitecore.ExM.Framework.ContentManagement.config">00:10:00.000</param>
<param ref="settings/setting[@name='Analytics.MaxAcceptedClockDeviation']/@value" desc="maxAcceptedClockDeviation" patch:source="Sitecore.ExM.Framework.ContentManagement.config"/>
<param desc="historyRetentionTime" patch:source="Sitecore.ExM.Framework.ContentManagement.config">7.00:00:00.000</param>
<param ref="exmLogger" desc="logger" patch:source="Sitecore.ExM.Framework.ContentManagement.config"/>
<UpdateInterval patch:source="Sitecore.ExM.Framework.ContentManagement.config">00:00:10.000</UpdateInterval>
</session>
<databaseTaskProvider type="Sitecore.ExM.Framework.DataProviders.SqlDatabaseTaskProvider,Sitecore.ExM.Framework" singleInstance="true" patch:source="Sitecore.ExM.Framework.ContentManagement.config">
<param desc="connectionStringName">exm.master</param>
<param desc="tableName">Tasks</param>
<param ref="exmLogger" desc="logger"/>
<!--
 Time before terminating the attempt to execute a command in seconds. 0 means indefinite wait
-->
<CommandTimeout>30</CommandTimeout>
</databaseTaskProvider>
</master>
<updateListSubscriptionHandler type="Sitecore.EmailCampaign.Cm.Ui.Handlers.UpdateListSubscriptionHandler, Sitecore.EmailCampaign.Cm.Ui" resolve="true" patch:source="Sitecore.EmailExperience.Messaging.config"/>
<dateTimeFormatter type="Sitecore.ExM.Framework.Formatters.DateTimeFormatter, Sitecore.ExM.Framework" singleInstance="true" patch:source="Sitecore.ExM.Framework.config">
<template><span title="{0}">{1}</span></template>
<defaultOptions type="Sitecore.ExM.Framework.Formatters.DateTimeFormatterOptions, Sitecore.ExM.Framework">
<richFormatting>true</richFormatting>
<showUtcOffset>true</showUtcOffset>
</defaultOptions>
</dateTimeFormatter>
<sessionProviders patch:source="Sitecore.ExM.Framework.ContentManagement.config">
<masterSessionDataProvider type="Sitecore.ExM.Framework.DataProviders.SqlSessionDataProvider,Sitecore.ExM.Framework" singleInstance="true">
<param desc="connectionStringName">exm.master</param>
<param desc="tableName">Sessions</param>
<param ref="exmLogger" desc="logger"/>
</masterSessionDataProvider>
</sessionProviders>
</exm>
<DedicatedServers patch:source="Sitecore.EmailExperience.ContentManagementPrimary.config"/>
<!--
 An cryptographic cipher used for encrypting blocks of text. 
-->
<exmAuthenticatedCipher type="Sitecore.Modules.EmailCampaign.Core.Crypto.AuthenticatedAesStringCipher, Sitecore.EmailCampaign" singleInstance="true" patch:source="Sitecore.EmailExperience.Core.config">
<param desc="cryptographicKeyName">EXM.CryptographicKey</param>
<param desc="authenticationKeyName">EXM.AuthenticationKey</param>
<param ref="exmLogger" desc="logger"/>
</exmAuthenticatedCipher>
<queryStringEncryption type="Sitecore.Modules.EmailCampaign.Core.Crypto.QueryStringEncryption, Sitecore.EmailCampaign" singleInstance="true" patch:source="Sitecore.EmailExperience.Core.config">
<param ref="settings/setting[@name='QueryStringKey.ExmEncryptedQuery']/@value" desc="encryptedContentFieldName"/>
<param ref="exmAuthenticatedCipher" desc="cipher"/>
<fieldNames hint="list:RegisterFieldName">
<contactId ref="settings/setting[@name='QueryStringKey.AnalyticsContactId']/@value"/>
<contactId ref="settings/setting[@name='QueryStringKey.ContactIdentifierSource']/@value"/>
<contactId ref="settings/setting[@name='QueryStringKey.ContactIdentifierIdentifier']/@value"/>
<messageId ref="settings/setting[@name='QueryStringKey.MessageId']/@value"/>
<redirectUrl ref="settings/setting[@name='QueryStringKey.RedirectUrl']/@value"/>
<targetLanguage ref="settings/setting[@name='QueryStringKey.TargetLanguage']/@value"/>
<testValueIndex ref="settings/setting[@name='QueryStringKey.TestValueIndex']/@value"/>
<emailHistoryEntryId ref="settings/setting[@name='QueryStringKey.EmailHistoryEntryId']/@value"/>
</fieldNames>
</queryStringEncryption>
<!--
 EXM EMAIL REGEX VALIDATOR
         Regex validation for emails
    
-->
<emailRegexValidator type="Sitecore.Modules.EmailCampaign.Validators.RegexValidator, Sitecore.EmailCampaign" singleInstance="true" patch:source="Sitecore.EmailExperience.Core.config">
<param ref="settings/setting[@name='EXM.EmailValidationRegex']/@value" desc="regexValue"/>
</emailRegexValidator>
<!--
 EXM FROM EMAIL REGEX VALIDATOR
         Regex validation for 'from email'
    
-->
<fromReplyToEmailRegexValidator type="Sitecore.Modules.EmailCampaign.Validators.RegexValidator, Sitecore.EmailCampaign" singleInstance="true" patch:source="Sitecore.EmailExperience.Core.config">
<param desc="regexValue">
^[a-zA-Z0-9\+\-_\!\$\%\&\*\?]+(?:\.[a-zA-Z0-9\+\-_\'\!\$\%\&\*\?]+)*@(([a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9]+)+)|(\[\d{1,3}(\.\d{1,3}){3}\]))$
</param>
</fromReplyToEmailRegexValidator>
<!--
 EXM URL REGEX VALIDATOR
         Regex validation for URLs
    
-->
<urlRegexValidator type="Sitecore.Modules.EmailCampaign.Validators.RegexValidator, Sitecore.EmailCampaign" singleInstance="true" patch:source="Sitecore.EmailExperience.Core.config">
<param ref="settings/setting[@name='EXM.UrlValidationRegex']/@value" desc="regexValue"/>
</urlRegexValidator>
<recipients patch:source="Sitecore.EmailExperience.Core.config">
<recipientRepository type="Sitecore.Modules.EmailCampaign.Recipients.MultiRecipientRepository, Sitecore.EmailCampaign" singleInstance="true">
<Repositories hint="list:AddRepository">
<xdbContacts type="Sitecore.Modules.EmailCampaign.Xdb.XdbRecipientRepository, Sitecore.EmailCampaign" singleInstance="true"/>
</Repositories>
</recipientRepository>
<recipientPropertyTokenMap type="Sitecore.Modules.EmailCampaign.Core.Personalization.DefaultRecipientPropertyTokenMap, Sitecore.EmailCampaign" singleInstance="true"/>
</recipients>
<initialize patch:source="Sitecore.EmailExperience.Messaging.config">
<!--
 Initializes the message bus for sending automated messages 
-->
<processor type="Sitecore.Modules.EmailCampaign.Core.Pipelines.MessageBus.InitializeMessageBus, Sitecore.EmailCampaign" resolve="true"/>
</initialize>
<exmLogger type="Sitecore.ExM.Framework.Diagnostics.Logger, Sitecore.ExM.Framework" singleInstance="true" patch:source="Sitecore.ExM.Framework.config">
<param desc="loggerName">Sitecore.EXM</param>
<param ref="settings/setting[@name='EXM.Debug']/@value" desc="debugEnabled"/>
</exmLogger>
<!--
 PATH ANALYZER
         Define the types used by various Path Analyzer services.
    
-->
<!--
 PATH ANALYZER
          Define the agents and processors that are used to create and merge Path Analyzer maps.
    
-->
<!--
 PATH ANALYZER
          Define the types used by Path Analyzer Web API controllers and services
    
-->
<pathAnalyzer patch:source="Sitecore.PathAnalyzer.config">
<!--
 CONFIGURATION
           This service provides access to configuration settings used within Path Analyzer.
      
-->
<configuration type="Sitecore.PathAnalyzer.Configuration, Sitecore.PathAnalyzer"/>
<!--
 CONTACT EVALUATOR
           This service is used to evaluate if given contact is relevant.
      
-->
<contactEvaluator type="Sitecore.PathAnalyzer.Pipelines.EvaluateContact.ContactEvaluator, Sitecore.PathAnalyzer"/>
<!--
 CONTACT READER
           This service reads the set of contact data from contact ids.
      
-->
<contactReader type="Sitecore.PathAnalyzer.Data.DataReaders.ContactReader, Sitecore.PathAnalyzer">
<repository ref="/sitecore/contactRepository"/>
</contactReader>
<!--
 DEFINITION SERVICE
           This service is used to perform CRUD operations against map definitions.
      
-->
<definitionService type="Sitecore.PathAnalyzer.Data.TreeDefinitionService, Sitecore.PathAnalyzer">
<TreeDefinitionStores hint="list:AddDefinitionStore">
<primary ref="pathAnalyzer/definitionStorage"/>
<secondary ref="pathAnalyzer/definitionStorageSecondary"/>
</TreeDefinitionStores>
</definitionService>
<!--
 RULES VALIDATOR
           This is used to validate a rule using the framework rules engine, Sitecore.Framework.Rules.RuleEngine
      
-->
<rulesValidator type="Sitecore.PathAnalyzer.Rules.RulesValidator, Sitecore.PathAnalyzer"/>
<!--
 DEFINITION STORAGE
           This service is used to perform CRUD operations against a specific map definition data store. e.g. SQL Server.
      
-->
<definitionStorage type="Sitecore.PathAnalyzer.Data.Storage.SqlDefinitionStorage, Sitecore.PathAnalyzer">
<param desc="connectionString">reporting</param>
</definitionStorage>
<!--
 DEFINITION STORAGE - SECONDARY
           This service is used to perform CRUD operations against a specific map definition data store. e.g. SQL Server.
      
-->
<definitionStorageSecondary type="Sitecore.PathAnalyzer.Data.Storage.SqlDefinitionStorage, Sitecore.PathAnalyzer">
<param desc="connectionString">reporting.secondary</param>
</definitionStorageSecondary>
<!--
 ITEM REPOSITORY
            A service used to retrieve Sitecore items from Sitecore databases.
      
-->
<itemRepository type="Sitecore.PathAnalyzer.Data.SitecoreData.ItemRepository, Sitecore.PathAnalyzer" singleInstance="true">
<param ref="pathAnalyzer/configuration" desc="configuration"/>
</itemRepository>
<!--
 MAP ITEM DEPLOYMENT MANAGER
           This service is responsible for managing the deployment/re-deployment of map items.
      
-->
<mapItemDeploymentManager type="Sitecore.PathAnalyzer.Data.MapItemDeploymentManager, Sitecore.PathAnalyzer">
<param ref="pathAnalyzer/mapItemRepository" desc="mapItemRepository"/>
<param ref="pathAnalyzer/definitionService" desc="definitionService"/>
<param ref="pathAnalyzer/configuration" desc="configuration"/>
</mapItemDeploymentManager>
<!--
 MAP ITEM REPOSITORY
           This service is responsible for creating and managing map objects from Sitecore database.
      
-->
<mapItemRepository type="Sitecore.PathAnalyzer.Data.MapItemRepository, Sitecore.PathAnalyzer">
<param ref="pathAnalyzer/itemRepository" desc="itemRepository"/>
<param ref="pathAnalyzer/configuration" desc="configuration"/>
</mapItemRepository>
<!--
 MAP STATUS SERVICE
           Resolves map status for a given map/tree definition.
      
-->
<mapStatusService type="Sitecore.PathAnalyzer.Data.MapStatusService, Sitecore.PathAnalyzer">
<param ref="pathAnalyzer/mapItemRepository" desc="mapItemRepository"/>
<param ref="pathAnalyzer/mapItemDeploymentManager" desc="mapItemDeploymentManager"/>
<param ref="pathAnalyzer/resourceManager" desc="resourceManager"/>
<param ref="pathAnalyzer/definitionService" desc="definitionService"/>
</mapStatusService>
<!--  NODE GROUPING FACTORY
       -->
<nodeGroupingFactory type="Sitecore.PathAnalyzer.TreeConversions.NodeGroupingFactory, Sitecore.PathAnalyzer">
<param ref="pathAnalyzer/configuration" desc="configuration"/>
<param ref="pathAnalyzer/itemRepository" desc="itemRepository"/>
</nodeGroupingFactory>
<!--
 PRUNING CONFIGURATION
           This service provides access to configuration settings used by pruning operations within Path Analyzer.
      
-->
<pruningConfiguration type="Sitecore.SequenceAnalyzer.Configuration.PruningConfig, Sitecore.SequenceAnalyzer"/>
<!--
 RESOURCE MANAGER
           This service is used to retrieve translated strings from the Path Analyzer dictionary
      
-->
<resourceManager type="Sitecore.PathAnalyzer.Localization.ResourceManager, Sitecore.PathAnalyzer" singleInstance="true"/>
<!--
 PRIMARY STORAGE
           This service is used to perform CRUD operations against a specific map data store. e.g. SQL Server.
      
-->
<primaryStorage type="Sitecore.PathAnalyzer.Data.Storage.SqlStorage, Sitecore.PathAnalyzer">
<param desc="connectionString">reporting</param>
</primaryStorage>
<!--
 SECONDARY STORAGE
           This service is used to perform CRUD operations against a specific map data store. e.g. SQL Server.
      
-->
<secondaryStorage type="Sitecore.PathAnalyzer.Data.Storage.SqlStorage, Sitecore.PathAnalyzer">
<param desc="connectionString">reporting.secondary</param>
</secondaryStorage>
<!--
 TREE STORAGE MANAGER
           Responsible for maintaining tree storage state.
      
-->
<treeStorageManager type="Sitecore.PathAnalyzer.Data.Storage.TreeStorageManager, Sitecore.PathAnalyzer">
<Stores hint="list:AddTreeStore">
<primary ref="pathAnalyzer/primaryStorage"/>
<secondary ref="pathAnalyzer/secondaryStorage"/>
</Stores>
</treeStorageManager>
<!--
 TREE PROVIDER
           This service is used to perform retrieval operations for maps.
      
-->
<treeProvider type="Sitecore.PathAnalyzer.Data.TreeProvider, Sitecore.PathAnalyzer" singleInstance="true"/>
<!--
 TREE CACHE
           This service is responsible for caching map data retrieved from storage.
      
-->
<treeCache type="Sitecore.PathAnalyzer.Data.Caching.TreeCache, Sitecore.PathAnalyzer" singleInstance="true">
<param ref="pathAnalyzer/configuration" desc="configuration"/>
</treeCache>
<!--
 MODELS
           This section defines types used by the map serialization/deserialization processes.
      
-->
<models>
<xNode type="Sitecore.PathAnalyzer.Data.Models.ExperienceNode, Sitecore.PathAnalyzer"/>
<xTree type="Sitecore.PathAnalyzer.Data.Models.ExperienceTree, Sitecore.PathAnalyzer"/>
<pageNode type="Sitecore.PathAnalyzer.Data.Models.PageNode, Sitecore.PathAnalyzer"/>
</models>
<mapWorker type="Sitecore.PathAnalyzer.Processing.Aggregation.MapWorker, Sitecore.PathAnalyzer" patch:source="Sitecore.PathAnalyzer.Processing.config"/>
<newMapAggregator type="Sitecore.PathAnalyzer.Processing.TreeAggregator, Sitecore.PathAnalyzer" singleInstance="true" patch:source="Sitecore.PathAnalyzer.Processing.config">
<Context ref="aggregation/aggregationContexts/pathAnalyzer/live"/>
<DateTimeStrategy ref="aggregation/dateTimePrecisionStrategy"/>
</newMapAggregator>
<subsystem type="Sitecore.Analytics.Core.Subsystem" singleInstance="true" patch:source="Sitecore.PathAnalyzer.Processing.config">
<BackgroundServices hint="list:Add">
<newMap type="Sitecore.Analytics.Core.BackgroundService">
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
<param desc="agentPath">pathAnalyzer/newMapAgent</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="interval" factoryMethod="ToTimeSpan" arg0="0.00:01:00"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="maxAgents" factoryMethod="ToInt" arg0="1"/>
</newMap>
<smartMerge type="Sitecore.Analytics.Core.BackgroundService">
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
<param desc="agentPath">pathAnalyzer/smartMergeAgent</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="interval" factoryMethod="ToTimeSpan" arg0="0.00:15:00"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="maxAgents" factoryMethod="ToInt" arg0="1"/>
</smartMerge>
<liveAgent type="Sitecore.Analytics.Core.BackgroundService">
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
<param desc="agentPath">aggregation/pathAnalyzerLiveAgent</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="interval" factoryMethod="ToTimeSpan" arg0="0.00:00:15"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="maxAgents" factoryMethod="ToInt" arg0="1"/>
</liveAgent>
<historyAgent type="Sitecore.Analytics.Core.BackgroundService">
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
<param desc="agentPath">aggregation/pathAnalyzerHistoryAgent</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="interval" factoryMethod="ToTimeSpan" arg0="0.00:01:00"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="maxAgents" factoryMethod="ToInt" arg0="1"/>
</historyAgent>
<trailCleanup type="Sitecore.Analytics.Core.BackgroundService">
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
<param desc="agentPath">pathAnalyzer/trailCleanupAgent</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="interval" factoryMethod="ToTimeSpan" arg0="0.00:05:00"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="maxAgents" factoryMethod="ToInt" arg0="1"/>
</trailCleanup>
<mapRebuildStatusChecker type="Sitecore.Analytics.Core.BackgroundService">
<param type="Sitecore.Abstractions.BaseLog, Sitecore.Kernel" resolve="true"/>
<param desc="agentPath">pathAnalyzer/mapRebuildStatusCheckerAgent</param>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="interval" factoryMethod="ToTimeSpan" arg0="0.00:01:00"/>
<param type="Sitecore.Analytics.Core.ConfigurationHelper, Sitecore.Analytics.Core" desc="maxAgents" factoryMethod="ToInt" arg0="1"/>
</mapRebuildStatusChecker>
</BackgroundServices>
</subsystem>
<!--
 NEW MAP AGENT
            This agent is responsible for creating new maps from a newly-deployed map definition.
      
-->
<newMapAgent type="Sitecore.PathAnalyzer.Processing.Agents.NewMapAgent, Sitecore.PathAnalyzer" patch:source="Sitecore.PathAnalyzer.Processing.config"/>
<!--
 SMART MERGE AGENT
            This agent is responsible for creating and saving "merged" trees based on tree data that
            has previously been written to storage. "Smart merge" approach is used to select the
            trees that should be merged.
      
-->
<smartMergeAgent type="Sitecore.PathAnalyzer.Processing.Agents.SmartMergeAgent, Sitecore.PathAnalyzer" patch:source="Sitecore.PathAnalyzer.Processing.config"/>
<!--
 TRAIL CLEANUP AGENT
           This agent is responsible for truncating the Trail_PathAnalyzer table in the corresponding
           instance of ITreeStorage that is passed via TreeStores child element.
      
-->
<trailCleanupAgent type="Sitecore.PathAnalyzer.Processing.Agents.TrailCleanupAgent, Sitecore.PathAnalyzer" patch:source="Sitecore.PathAnalyzer.Processing.config">
<BatchSize>8096</BatchSize>
<DaysToKeep>3</DaysToKeep>
<TreeStores hint="list:AddTreeStore">
<primary ref="pathAnalyzer/primaryStorage"/>
<secondary ref="pathAnalyzer/secondaryStorage"/>
</TreeStores>
</trailCleanupAgent>
<!--
 MAP REBUILD STATUS CHECKER AGENT
            This agent is responsible for checking and updating the build status of map definitions.
      
-->
<mapRebuildStatusCheckerAgent type="Sitecore.PathAnalyzer.Processing.Agents.MapRebuildStatusCheckerAgent, Sitecore.PathAnalyzer" patch:source="Sitecore.PathAnalyzer.Processing.config">
<TreeDefinitionStores hint="list:AddDefinitionStore">
<primary ref="pathAnalyzer/definitionStorage"/>
<secondary ref="pathAnalyzer/definitionStorageSecondary"/>
</TreeDefinitionStores>
</mapRebuildStatusCheckerAgent>
<!--
 API CONFIGURATION
            Responsible for managing global configuration of Path Analyzer Web API (e.g. routes, filters, model binding, etc...)
      
-->
<apiConfiguration type="Sitecore.PathAnalyzer.Services.Configuration.ApiConfiguration" singleInstance="true" patch:source="Sitecore.PathAnalyzer.Services.config">
<param ref="pathAnalyzer/apiSettings" desc="settings"/>
</apiConfiguration>
<!--
 API SETTINGS
            Responsible for providing access to settings.
      
-->
<apiSettings type="Sitecore.PathAnalyzer.Services.Configuration.Settings" singleInstance="true" patch:source="Sitecore.PathAnalyzer.Services.config"/>
<!--
 NODE FACTORY
            A factory used to construct the various node types returned by the Path Analyzer Web API controllers.
      
-->
<nodeFactory type="Sitecore.PathAnalyzer.Services.Data.NodeFactory, Sitecore.PathAnalyzer.Services" singleInstance="true" patch:source="Sitecore.PathAnalyzer.Services.config">
<param ref="pathAnalyzer/itemRepository" desc="itemRepository"/>
<param ref="pathAnalyzer/resourceManager" desc="resourceManager"/>
</nodeFactory>
<!--
 PATH SET BUILDER
            Responsible for building PathSet objects consumed by Path Analyzer clients.
      
-->
<pathSetBuilder type="Sitecore.PathAnalyzer.Services.Response.PathSetBuilder, Sitecore.PathAnalyzer.Services" patch:source="Sitecore.PathAnalyzer.Services.config">
<param ref="pathAnalyzer/itemRepository" desc="itemRepository"/>
<param ref="pathAnalyzer/nodeFactory" desc="nodeFactory"/>
</pathSetBuilder>
<!--
 RESPONSE CACHE
            Responsible for caching various Path Analyzer controller output.
      
-->
<responseCache type="Sitecore.PathAnalyzer.Services.Caching.ResponseCache, Sitecore.PathAnalyzer.Services" singleInstance="true" patch:source="Sitecore.PathAnalyzer.Services.config">
<param ref="pathAnalyzer/apiSettings" desc="setting"/>
</responseCache>
<!--
 TREE MANAGER
            A facade service used by the Path Analyzer Web API controllers for managing map data retrieval and caching.
      
-->
<treeManager type="Sitecore.PathAnalyzer.Data.TreeManager, Sitecore.PathAnalyzer" singleInstance="true" patch:source="Sitecore.PathAnalyzer.Services.config">
<param ref="pathAnalyzer/treeProvider" desc="provider"/>
<param ref="pathAnalyzer/treeCache" desc="cache"/>
</treeManager>
<!--
 TREE SERVICE
            A facade service used by the Path Analyzer Web API controllers for retrieving, filtering and grouping map data.
      
-->
<treeService type="Sitecore.PathAnalyzer.Services.Data.TreeService, Sitecore.PathAnalyzer.Services" singleInstance="true" patch:source="Sitecore.PathAnalyzer.Services.config">
<param ref="pathAnalyzer/treeManager" desc="treeManager"/>
<param ref="pathAnalyzer/nodeGroupingFactory" desc="nodeGroupingFactory"/>
<param ref="pathAnalyzer/resourceManager" desc="resourceManager"/>
</treeService>
</pathAnalyzer>
<!--  CONTROLLERS  -->
<controllers patch:source="Sitecore.PathAnalyzer.Services.config">
<controller type="Sitecore.PathAnalyzer.Services.Controllers.AuthenticationController, Sitecore.PathAnalyzer.Services"/>
<!--
 PATHS CONTOLLER
           A Web API controller with actions related to retrieving path data.
      
-->
<controller type="Sitecore.PathAnalyzer.Services.Controllers.PathsController, Sitecore.PathAnalyzer.Services">
<param ref="pathAnalyzer/treeService" desc="treeService"/>
<param ref="pathAnalyzer/pathSetBuilder" desc="pathSetBuilder"/>
<param ref="pathAnalyzer/responseCache" desc="cache"/>
</controller>
<!--
 CONTACTS BY PATH CONTOLLER
           A Web API controller with actions related to retrieving contacts based on a particular path.
      
-->
<controller type="Sitecore.PathAnalyzer.Services.Controllers.ContactsByPathController, Sitecore.PathAnalyzer.Services">
<param ref="pathAnalyzer/treeService" desc="treeService"/>
<param ref="pathAnalyzer/contactReader" desc="contactReader"/>
<param ref="pathAnalyzer/responseCache" desc="cache"/>
</controller>
<!--
 TREE CONTOLLER
           A Web API controller with actions related to retrieving map data.
      
-->
<controller type="Sitecore.PathAnalyzer.Services.Controllers.TreeController, Sitecore.PathAnalyzer.Services">
<param ref="pathAnalyzer/treeService" desc="treeService"/>
<param ref="pathAnalyzer/nodeFactory" desc="nodeFactory"/>
<param ref="pathAnalyzer/responseCache" desc="cache"/>
</controller>
<!--
 EXPLORER CONTOLLER
            A Web API controller with actions related to main Path Analyzer functionality
      
-->
<controller type="Sitecore.PathAnalyzer.Services.PathExplorer.Controllers.ExplorerController, Sitecore.PathAnalyzer.Services">
<param ref="pathAnalyzer/treeService" desc="treeService"/>
<param ref="pathAnalyzer/nodeFactory" desc="nodeFactory"/>
<param ref="pathAnalyzer/responseCache" desc="cache"/>
</controller>
<!--
 TREE DEFINITION CONTROLLER
            A Web API controller with actions related to retrieving tree definition data.
      
-->
<controller type="Sitecore.PathAnalyzer.Services.Controllers.TreeDefinitionController, Sitecore.PathAnalyzer.Services">
<param ref="pathAnalyzer/definitionService" desc="definitionService"/>
<param ref="pathAnalyzer/mapStatusService" desc="mapStatusService"/>
<param ref="pathAnalyzer/responseCache" desc="cache"/>
</controller>
<!--
 ITEM CONTROLLER
            A Web API controller with actions related to retrieving Sitecore item data.
      
-->
<controller type="Sitecore.PathAnalyzer.Services.Controllers.ItemController, Sitecore.PathAnalyzer.Services">
<param ref="pathAnalyzer/itemRepository" desc="itemRepository"/>
<param ref="pathAnalyzer/responseCache" desc="cache"/>
</controller>
</controllers>
</sitecore>